
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042bc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a8  08004374  08004374  00005374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  0000707c  2**0
                  CONTENTS
  4 .ARM          00000000  0800591c  0800591c  0000707c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800591c  0800591c  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800591c  0800591c  0000691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005924  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  2000007c  080059a0  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  080059a0  00007730  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef54  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002420  00000000  00000000  00015ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00018418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093a  00000000  00000000  00019000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015965  00000000  00000000  0001993a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d83  00000000  00000000  0002f29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083988  00000000  00000000  00040022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c39aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ebc  00000000  00000000  000c39f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c68ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000007c 	.word	0x2000007c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800435c 	.word	0x0800435c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000080 	.word	0x20000080
 80000fc:	0800435c 	.word	0x0800435c

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <port_atama>:
char data[80];
char ale = 1;
uint8_t school_data[10] ="123456789";
uint8_t Rx_data[4];

void port_atama(uint8_t number) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	0002      	movs	r2, r0
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, ((number >> 0) & 0x01));
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2201      	movs	r2, #1
 8000412:	4013      	ands	r3, r2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4816      	ldr	r0, [pc, #88]	@ (8000470 <port_atama+0x70>)
 8000418:	001a      	movs	r2, r3
 800041a:	2101      	movs	r1, #1
 800041c:	f001 f9ca 	bl	80017b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, ((number >> 1) & 0x01));
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	085b      	lsrs	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4013      	ands	r3, r2
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4810      	ldr	r0, [pc, #64]	@ (8000470 <port_atama+0x70>)
 8000430:	001a      	movs	r2, r3
 8000432:	2102      	movs	r1, #2
 8000434:	f001 f9be 	bl	80017b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, ((number >> 2) & 0x01));
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	089b      	lsrs	r3, r3, #2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2201      	movs	r2, #1
 8000442:	4013      	ands	r3, r2
 8000444:	b2db      	uxtb	r3, r3
 8000446:	480a      	ldr	r0, [pc, #40]	@ (8000470 <port_atama+0x70>)
 8000448:	001a      	movs	r2, r3
 800044a:	2104      	movs	r1, #4
 800044c:	f001 f9b2 	bl	80017b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, ((number >> 3) & 0x01));
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2201      	movs	r2, #1
 800045a:	4013      	ands	r3, r2
 800045c:	b2db      	uxtb	r3, r3
 800045e:	4804      	ldr	r0, [pc, #16]	@ (8000470 <port_atama+0x70>)
 8000460:	001a      	movs	r2, r3
 8000462:	2108      	movs	r1, #8
 8000464:	f001 f9a6 	bl	80017b4 <HAL_GPIO_WritePin>
}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}
 8000470:	50000c00 	.word	0x50000c00

08000474 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	0002      	movs	r2, r0
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_7) {
 8000480:	1dbb      	adds	r3, r7, #6
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	2b80      	cmp	r3, #128	@ 0x80
 8000486:	d105      	bne.n	8000494 <HAL_GPIO_EXTI_Rising_Callback+0x20>
		sayi2++;
 8000488:	4b30      	ldr	r3, [pc, #192]	@ (800054c <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	b29a      	uxth	r2, r3
 8000490:	4b2e      	ldr	r3, [pc, #184]	@ (800054c <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000492:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2) {
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2b04      	cmp	r3, #4
 800049a:	d10b      	bne.n	80004b4 <HAL_GPIO_EXTI_Rising_Callback+0x40>
		sayi++;
 800049c:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	3301      	adds	r3, #1
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000550 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 80004a6:	801a      	strh	r2, [r3, #0]
		port_atama(sayi);
 80004a8:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff ffa6 	bl	8000400 <port_atama>
	}

	if (GPIO_Pin == GPIO_PIN_10)
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	881a      	ldrh	r2, [r3, #0]
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	429a      	cmp	r2, r3
 80004be:	d141      	bne.n	8000544 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
	{
		if (ale == 0) {
 80004c0:	4b24      	ldr	r3, [pc, #144]	@ (8000554 <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d11c      	bne.n	8000502 <HAL_GPIO_EXTI_Rising_Callback+0x8e>

			ale = 1;
 80004c8:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
			for (uint8_t valuu = 49; valuu < 58; valuu++)
 80004ce:	230f      	movs	r3, #15
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	2231      	movs	r2, #49	@ 0x31
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e00e      	b.n	80004f6 <HAL_GPIO_EXTI_Rising_Callback+0x82>
			{
				school_data[valuu-49] = (char)valuu;
 80004d8:	210f      	movs	r1, #15
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3b31      	subs	r3, #49	@ 0x31
 80004e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000558 <HAL_GPIO_EXTI_Rising_Callback+0xe4>)
 80004e2:	0008      	movs	r0, r1
 80004e4:	1879      	adds	r1, r7, r1
 80004e6:	7809      	ldrb	r1, [r1, #0]
 80004e8:	54d1      	strb	r1, [r2, r3]
			for (uint8_t valuu = 49; valuu < 58; valuu++)
 80004ea:	0001      	movs	r1, r0
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	3201      	adds	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	230f      	movs	r3, #15
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b39      	cmp	r3, #57	@ 0x39
 80004fe:	d9eb      	bls.n	80004d8 <HAL_GPIO_EXTI_Rising_Callback+0x64>
				school_data[57-valuu] = (char)valuu;
			}
			ale = 0;
		}
	}
}
 8000500:	e020      	b.n	8000544 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
		else if (ale == 1)
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d11c      	bne.n	8000544 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
			for (uint8_t valuu = 57; valuu > 48; valuu--)
 800050a:	230e      	movs	r3, #14
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	2239      	movs	r2, #57	@ 0x39
 8000510:	701a      	strb	r2, [r3, #0]
 8000512:	e00f      	b.n	8000534 <HAL_GPIO_EXTI_Rising_Callback+0xc0>
				school_data[57-valuu] = (char)valuu;
 8000514:	210e      	movs	r1, #14
 8000516:	187b      	adds	r3, r7, r1
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2239      	movs	r2, #57	@ 0x39
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_GPIO_EXTI_Rising_Callback+0xe4>)
 8000520:	0008      	movs	r0, r1
 8000522:	1879      	adds	r1, r7, r1
 8000524:	7809      	ldrb	r1, [r1, #0]
 8000526:	54d1      	strb	r1, [r2, r3]
			for (uint8_t valuu = 57; valuu > 48; valuu--)
 8000528:	0001      	movs	r1, r0
 800052a:	187b      	adds	r3, r7, r1
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	187b      	adds	r3, r7, r1
 8000530:	3a01      	subs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	230e      	movs	r3, #14
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b30      	cmp	r3, #48	@ 0x30
 800053c:	d8ea      	bhi.n	8000514 <HAL_GPIO_EXTI_Rising_Callback+0xa0>
			ale = 0;
 800053e:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b004      	add	sp, #16
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000182 	.word	0x20000182
 8000550:	20000180 	.word	0x20000180
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46d6      	mov	lr, sl
 8000560:	464f      	mov	r7, r9
 8000562:	4646      	mov	r6, r8
 8000564:	b5c0      	push	{r6, r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fe37 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f891 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f977 	bl	8000864 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000576:	f000 f8e7 	bl	8000748 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800057a:	f000 f925 	bl	80007c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 800057e:	f000 fa77 	bl	8000a70 <ssd1306_Init>

	HAL_Delay(200);
 8000582:	20c8      	movs	r0, #200	@ 0xc8
 8000584:	f000 feb0 	bl	80012e8 <HAL_Delay>
	ssd1306_SetCursor(5, 2);
 8000588:	2102      	movs	r1, #2
 800058a:	2005      	movs	r0, #5
 800058c:	f000 fc52 	bl	8000e34 <ssd1306_SetCursor>
	ssd1306_WriteString("Wi-Fi", Font_7x10, White);
 8000590:	4a37      	ldr	r2, [pc, #220]	@ (8000670 <main+0x114>)
 8000592:	4838      	ldr	r0, [pc, #224]	@ (8000674 <main+0x118>)
 8000594:	2301      	movs	r3, #1
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	6852      	ldr	r2, [r2, #4]
 800059a:	f000 fc21 	bl	8000de0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800059e:	f000 faf7 	bl	8000b90 <ssd1306_UpdateScreen>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		school_data[9]=0x0a;
 80005a2:	4b35      	ldr	r3, [pc, #212]	@ (8000678 <main+0x11c>)
 80005a4:	220a      	movs	r2, #10
 80005a6:	725a      	strb	r2, [r3, #9]
		HAL_UART_Transmit(&huart1, school_data, 10, 200);
 80005a8:	4933      	ldr	r1, [pc, #204]	@ (8000678 <main+0x11c>)
 80005aa:	4834      	ldr	r0, [pc, #208]	@ (800067c <main+0x120>)
 80005ac:	23c8      	movs	r3, #200	@ 0xc8
 80005ae:	220a      	movs	r2, #10
 80005b0:	f002 fcda 	bl	8002f68 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80005b4:	23fa      	movs	r3, #250	@ 0xfa
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fe95 	bl	80012e8 <HAL_Delay>

		sprintf(data, "Giden %c%c%c%c%c%c%c%c%c", school_data[0],school_data[1], school_data[2],school_data[3], school_data[4],school_data[5], school_data[6],school_data[7],school_data[8]);
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <main+0x11c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4699      	mov	r9, r3
 80005c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000678 <main+0x11c>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	469a      	mov	sl, r3
 80005ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <main+0x11c>)
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	001a      	movs	r2, r3
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <main+0x11c>)
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	001c      	movs	r4, r3
 80005d6:	4b28      	ldr	r3, [pc, #160]	@ (8000678 <main+0x11c>)
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	001d      	movs	r5, r3
 80005dc:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <main+0x11c>)
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	001e      	movs	r6, r3
 80005e2:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <main+0x11c>)
 80005e4:	799b      	ldrb	r3, [r3, #6]
 80005e6:	469c      	mov	ip, r3
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <main+0x11c>)
 80005ea:	79db      	ldrb	r3, [r3, #7]
 80005ec:	4698      	mov	r8, r3
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <main+0x11c>)
 80005f0:	7a1b      	ldrb	r3, [r3, #8]
 80005f2:	4923      	ldr	r1, [pc, #140]	@ (8000680 <main+0x124>)
 80005f4:	4823      	ldr	r0, [pc, #140]	@ (8000684 <main+0x128>)
 80005f6:	9306      	str	r3, [sp, #24]
 80005f8:	4643      	mov	r3, r8
 80005fa:	9305      	str	r3, [sp, #20]
 80005fc:	4663      	mov	r3, ip
 80005fe:	9304      	str	r3, [sp, #16]
 8000600:	9603      	str	r6, [sp, #12]
 8000602:	9502      	str	r5, [sp, #8]
 8000604:	9401      	str	r4, [sp, #4]
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	4653      	mov	r3, sl
 800060a:	464a      	mov	r2, r9
 800060c:	f003 fa08 	bl	8003a20 <siprintf>

		ssd1306_Fill(Black);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fa99 	bl	8000b48 <ssd1306_Fill>
		ssd1306_SetCursor(0, 20);
 8000616:	2114      	movs	r1, #20
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fc0b 	bl	8000e34 <ssd1306_SetCursor>
		ssd1306_WriteString(data, Font_11x18, White);
 800061e:	4a1a      	ldr	r2, [pc, #104]	@ (8000688 <main+0x12c>)
 8000620:	4818      	ldr	r0, [pc, #96]	@ (8000684 <main+0x128>)
 8000622:	2301      	movs	r3, #1
 8000624:	6811      	ldr	r1, [r2, #0]
 8000626:	6852      	ldr	r2, [r2, #4]
 8000628:	f000 fbda 	bl	8000de0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800062c:	f000 fab0 	bl	8000b90 <ssd1306_UpdateScreen>
		HAL_Delay(20);
 8000630:	2014      	movs	r0, #20
 8000632:	f000 fe59 	bl	80012e8 <HAL_Delay>
		if(Rx_data[0]=='A'&&Rx_data[1]=='1')
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <main+0x130>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b41      	cmp	r3, #65	@ 0x41
 800063c:	d109      	bne.n	8000652 <main+0xf6>
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <main+0x130>)
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	2b31      	cmp	r3, #49	@ 0x31
 8000644:	d105      	bne.n	8000652 <main+0xf6>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <main+0x134>)
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f001 f8b1 	bl	80017b4 <HAL_GPIO_WritePin>

		}
		if(Rx_data[0]=='A'&&Rx_data[1]=='2')
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <main+0x130>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b41      	cmp	r3, #65	@ 0x41
 8000658:	d1a3      	bne.n	80005a2 <main+0x46>
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <main+0x130>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b32      	cmp	r3, #50	@ 0x32
 8000660:	d19f      	bne.n	80005a2 <main+0x46>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <main+0x134>)
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	0018      	movs	r0, r3
 800066a:	f001 f8a3 	bl	80017b4 <HAL_GPIO_WritePin>
		school_data[9]=0x0a;
 800066e:	e798      	b.n	80005a2 <main+0x46>
 8000670:	20000010 	.word	0x20000010
 8000674:	08004374 	.word	0x08004374
 8000678:	20000004 	.word	0x20000004
 800067c:	200000ec 	.word	0x200000ec
 8000680:	0800437c 	.word	0x0800437c
 8000684:	20000184 	.word	0x20000184
 8000688:	20000018 	.word	0x20000018
 800068c:	200001d4 	.word	0x200001d4
 8000690:	50000c00 	.word	0x50000c00

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b093      	sub	sp, #76	@ 0x4c
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2414      	movs	r4, #20
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2334      	movs	r3, #52	@ 0x34
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 f9ee 	bl	8003a86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 f9e7 	bl	8003a86 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fdd1 	bl	8002264 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2240      	movs	r2, #64	@ 0x40
 80006dc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2202      	movs	r2, #2
 80006e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2208      	movs	r2, #8
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2280      	movs	r2, #128	@ 0x80
 80006fa:	0292      	lsls	r2, r2, #10
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	0592      	lsls	r2, r2, #22
 8000704:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	187b      	adds	r3, r7, r1
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fdf7 	bl	80022fc <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000712:	f000 f96d 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2202      	movs	r2, #2
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2102      	movs	r1, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f8f2 	bl	800291c <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800073c:	f000 f958 	bl	80009f0 <Error_Handler>
  }
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b013      	add	sp, #76	@ 0x4c
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_I2C1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <MX_I2C1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <MX_I2C1_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f867 	bl	8001858 <HAL_I2C_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078e:	f000 f92f 	bl	80009f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fccc 	bl	8002134 <HAL_I2CEx_ConfigAnalogFilter>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f926 	bl	80009f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <MX_I2C1_Init+0x74>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fd0f 	bl	80021cc <HAL_I2CEx_ConfigDigitalFilter>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f91d 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000098 	.word	0x20000098
 80007c0:	40005400 	.word	0x40005400
 80007c4:	00602173 	.word	0x00602173

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007ce:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <MX_USART1_UART_Init+0x98>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007d4:	22e1      	movs	r2, #225	@ 0xe1
 80007d6:	0252      	lsls	r2, r2, #9
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b20      	ldr	r3, [pc, #128]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_USART1_UART_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_USART1_UART_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_USART1_UART_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART1_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_USART1_UART_Init+0x94>)
 8000812:	0018      	movs	r0, r3
 8000814:	f002 fb52 	bl	8002ebc <HAL_UART_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800081c:	f000 f8e8 	bl	80009f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART1_UART_Init+0x94>)
 8000822:	2100      	movs	r1, #0
 8000824:	0018      	movs	r0, r3
 8000826:	f003 f81b 	bl	8003860 <HAL_UARTEx_SetTxFifoThreshold>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800082e:	f000 f8df 	bl	80009f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <MX_USART1_UART_Init+0x94>)
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f003 f852 	bl	80038e0 <HAL_UARTEx_SetRxFifoThreshold>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 f8d6 	bl	80009f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <MX_USART1_UART_Init+0x94>)
 8000846:	0018      	movs	r0, r3
 8000848:	f002 ffd0 	bl	80037ec <HAL_UARTEx_DisableFifoMode>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 f8ce 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	200000ec 	.word	0x200000ec
 8000860:	40013800 	.word	0x40013800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b08b      	sub	sp, #44	@ 0x2c
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	2414      	movs	r4, #20
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f003 f906 	bl	8003a86 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b59      	ldr	r3, [pc, #356]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087e:	4b58      	ldr	r3, [pc, #352]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 8000880:	2120      	movs	r1, #32
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
 8000886:	4b56      	ldr	r3, [pc, #344]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800088a:	2220      	movs	r2, #32
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000896:	4b52      	ldr	r3, [pc, #328]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 8000898:	2101      	movs	r1, #1
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a2:	2201      	movs	r2, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ae:	4b4c      	ldr	r3, [pc, #304]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008b0:	2102      	movs	r1, #2
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b6:	4b4a      	ldr	r3, [pc, #296]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ba:	2202      	movs	r2, #2
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008c8:	2108      	movs	r1, #8
 80008ca:	430a      	orrs	r2, r1
 80008cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ce:	4b44      	ldr	r3, [pc, #272]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80008d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d2:	2208      	movs	r2, #8
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008da:	23a0      	movs	r3, #160	@ 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 ff66 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80008e8:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <MX_GPIO_Init+0x180>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 ff60 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008f4:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x184>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 ff5a 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2240      	movs	r2, #64	@ 0x40
 8000904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2201      	movs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	193a      	adds	r2, r7, r4
 800091a:	23a0      	movs	r3, #160	@ 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fde3 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	22c4      	movs	r2, #196	@ 0xc4
 8000930:	0392      	lsls	r2, r2, #14
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2201      	movs	r2, #1
 8000938:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	193a      	adds	r2, r7, r4
 800093c:	23a0      	movs	r3, #160	@ 0xa0
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fdd2 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000948:	0021      	movs	r1, r4
 800094a:	187b      	adds	r3, r7, r1
 800094c:	4a27      	ldr	r2, [pc, #156]	@ (80009ec <MX_GPIO_Init+0x188>)
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	22c4      	movs	r2, #196	@ 0xc4
 8000954:	0392      	lsls	r2, r2, #14
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	000c      	movs	r4, r1
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2201      	movs	r2, #1
 800095e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	193b      	adds	r3, r7, r4
 8000962:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <MX_GPIO_Init+0x184>)
 8000964:	0019      	movs	r1, r3
 8000966:	0010      	movs	r0, r2
 8000968:	f000 fdc0 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	220f      	movs	r2, #15
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	193b      	adds	r3, r7, r4
 8000986:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <MX_GPIO_Init+0x180>)
 8000988:	0019      	movs	r1, r3
 800098a:	0010      	movs	r0, r2
 800098c:	f000 fdae 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000990:	0021      	movs	r1, r4
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2208      	movs	r2, #8
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <MX_GPIO_Init+0x184>)
 80009ae:	0019      	movs	r1, r3
 80009b0:	0010      	movs	r0, r2
 80009b2:	f000 fd9b 	bl	80014ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2006      	movs	r0, #6
 80009bc:	f000 fd64 	bl	8001488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80009c0:	2006      	movs	r0, #6
 80009c2:	f000 fd76 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 fd5c 	bl	8001488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009d0:	2007      	movs	r0, #7
 80009d2:	f000 fd6e 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b00b      	add	sp, #44	@ 0x2c
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000c00 	.word	0x50000c00
 80009e8:	50000400 	.word	0x50000400
 80009ec:	00000404 	.word	0x00000404

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af04      	add	r7, sp, #16
 8000a0e:	0002      	movs	r2, r0
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000a14:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <ssd1306_WriteCommand+0x30>)
 8000a16:	2301      	movs	r3, #1
 8000a18:	425b      	negs	r3, r3
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2200      	movs	r2, #0
 8000a28:	2178      	movs	r1, #120	@ 0x78
 8000a2a:	f000 ffbb 	bl	80019a4 <HAL_I2C_Mem_Write>
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000098 	.word	0x20000098

08000a3c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <ssd1306_WriteData+0x30>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4252      	negs	r2, r2
 8000a50:	9202      	str	r2, [sp, #8]
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	2240      	movs	r2, #64	@ 0x40
 8000a5c:	2178      	movs	r1, #120	@ 0x78
 8000a5e:	f000 ffa1 	bl	80019a4 <HAL_I2C_Mem_Write>
}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	20000098 	.word	0x20000098

08000a70 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a74:	f7ff ffc2 	bl	80009fc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a78:	2064      	movs	r0, #100	@ 0x64
 8000a7a:	f000 fc35 	bl	80012e8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fa0a 	bl	8000e98 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a84:	2020      	movs	r0, #32
 8000a86:	f7ff ffbf 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffbc 	bl	8000a08 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a90:	20b0      	movs	r0, #176	@ 0xb0
 8000a92:	f7ff ffb9 	bl	8000a08 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000a96:	20c8      	movs	r0, #200	@ 0xc8
 8000a98:	f7ff ffb6 	bl	8000a08 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ffb3 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000aa2:	2010      	movs	r0, #16
 8000aa4:	f7ff ffb0 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000aa8:	2040      	movs	r0, #64	@ 0x40
 8000aaa:	f7ff ffad 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	f000 f9da 	bl	8000e68 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ab4:	20a1      	movs	r0, #161	@ 0xa1
 8000ab6:	f7ff ffa7 	bl	8000a08 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000aba:	20a6      	movs	r0, #166	@ 0xa6
 8000abc:	f7ff ffa4 	bl	8000a08 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ac0:	20a8      	movs	r0, #168	@ 0xa8
 8000ac2:	f7ff ffa1 	bl	8000a08 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ac6:	203f      	movs	r0, #63	@ 0x3f
 8000ac8:	f7ff ff9e 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000acc:	20a4      	movs	r0, #164	@ 0xa4
 8000ace:	f7ff ff9b 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ad2:	20d3      	movs	r0, #211	@ 0xd3
 8000ad4:	f7ff ff98 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ff95 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ade:	20d5      	movs	r0, #213	@ 0xd5
 8000ae0:	f7ff ff92 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ae4:	20f0      	movs	r0, #240	@ 0xf0
 8000ae6:	f7ff ff8f 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000aea:	20d9      	movs	r0, #217	@ 0xd9
 8000aec:	f7ff ff8c 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000af0:	2022      	movs	r0, #34	@ 0x22
 8000af2:	f7ff ff89 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000af6:	20da      	movs	r0, #218	@ 0xda
 8000af8:	f7ff ff86 	bl	8000a08 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000afc:	2012      	movs	r0, #18
 8000afe:	f7ff ff83 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b02:	20db      	movs	r0, #219	@ 0xdb
 8000b04:	f7ff ff80 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b08:	2020      	movs	r0, #32
 8000b0a:	f7ff ff7d 	bl	8000a08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b0e:	208d      	movs	r0, #141	@ 0x8d
 8000b10:	f7ff ff7a 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b14:	2014      	movs	r0, #20
 8000b16:	f7ff ff77 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 f9bc 	bl	8000e98 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 f811 	bl	8000b48 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b26:	f000 f833 	bl	8000b90 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <ssd1306_Init+0xd4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <ssd1306_Init+0xd4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b36:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <ssd1306_Init+0xd4>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	711a      	strb	r2, [r3, #4]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	200005d8 	.word	0x200005d8

08000b48 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e00e      	b.n	8000b78 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <ssd1306_Fill+0x1e>
 8000b62:	2100      	movs	r1, #0
 8000b64:	e000      	b.n	8000b68 <ssd1306_Fill+0x20>
 8000b66:	21ff      	movs	r1, #255	@ 0xff
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <ssd1306_Fill+0x44>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	18d3      	adds	r3, r2, r3
 8000b6e:	1c0a      	adds	r2, r1, #0
 8000b70:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	2380      	movs	r3, #128	@ 0x80
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3eb      	bcc.n	8000b5a <ssd1306_Fill+0x12>
    }
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001d8 	.word	0x200001d8

08000b90 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e01a      	b.n	8000bd4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3b50      	subs	r3, #80	@ 0x50
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff2e 	bl	8000a08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff ff2b 	bl	8000a08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000bb2:	2010      	movs	r0, #16
 8000bb4:	f7ff ff28 	bl	8000a08 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	01da      	lsls	r2, r3, #7
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <ssd1306_UpdateScreen+0x58>)
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	2180      	movs	r1, #128	@ 0x80
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ff39 	bl	8000a3c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	3201      	adds	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d9e0      	bls.n	8000b9e <ssd1306_UpdateScreen+0xe>
    }
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	200001d8 	.word	0x200001d8

08000bec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0004      	movs	r4, r0
 8000bf4:	0008      	movs	r0, r1
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	1c22      	adds	r2, r4, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	1dbb      	adds	r3, r7, #6
 8000c00:	1c02      	adds	r2, r0, #0
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	1d7b      	adds	r3, r7, #5
 8000c06:	1c0a      	adds	r2, r1, #0
 8000c08:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db47      	blt.n	8000ca4 <ssd1306_DrawPixel+0xb8>
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c1a:	d843      	bhi.n	8000ca4 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000c1c:	1d7b      	adds	r3, r7, #5
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d11e      	bne.n	8000c62 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	0003      	movs	r3, r0
 8000c32:	01db      	lsls	r3, r3, #7
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	4a1d      	ldr	r2, [pc, #116]	@ (8000cac <ssd1306_DrawPixel+0xc0>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	b25a      	sxtb	r2, r3
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2107      	movs	r1, #7
 8000c42:	400b      	ands	r3, r1
 8000c44:	2101      	movs	r1, #1
 8000c46:	4099      	lsls	r1, r3
 8000c48:	000b      	movs	r3, r1
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b259      	sxtb	r1, r3
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	0003      	movs	r3, r0
 8000c56:	01db      	lsls	r3, r3, #7
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	b2c9      	uxtb	r1, r1
 8000c5c:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <ssd1306_DrawPixel+0xc0>)
 8000c5e:	54d1      	strb	r1, [r2, r3]
 8000c60:	e021      	b.n	8000ca6 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	1dbb      	adds	r3, r7, #6
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	0003      	movs	r3, r0
 8000c70:	01db      	lsls	r3, r3, #7
 8000c72:	18d3      	adds	r3, r2, r3
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <ssd1306_DrawPixel+0xc0>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	1dba      	adds	r2, r7, #6
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	2107      	movs	r1, #7
 8000c80:	400a      	ands	r2, r1
 8000c82:	2101      	movs	r1, #1
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	b252      	sxtb	r2, r2
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	b252      	sxtb	r2, r2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	b259      	sxtb	r1, r3
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	0003      	movs	r3, r0
 8000c98:	01db      	lsls	r3, r3, #7
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	b2c9      	uxtb	r1, r1
 8000c9e:	4a03      	ldr	r2, [pc, #12]	@ (8000cac <ssd1306_DrawPixel+0xc0>)
 8000ca0:	54d1      	strb	r1, [r2, r3]
 8000ca2:	e000      	b.n	8000ca6 <ssd1306_DrawPixel+0xba>
        return;
 8000ca4:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	200001d8 	.word	0x200001d8

08000cb0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	0004      	movs	r4, r0
 8000cb8:	1d38      	adds	r0, r7, #4
 8000cba:	6001      	str	r1, [r0, #0]
 8000cbc:	6042      	str	r2, [r0, #4]
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	200f      	movs	r0, #15
 8000cc2:	183b      	adds	r3, r7, r0
 8000cc4:	1c22      	adds	r2, r4, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	230e      	movs	r3, #14
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	1c0a      	adds	r2, r1, #0
 8000cce:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000cd0:	183b      	adds	r3, r7, r0
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b1f      	cmp	r3, #31
 8000cd6:	d903      	bls.n	8000ce0 <ssd1306_WriteChar+0x30>
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b7e      	cmp	r3, #126	@ 0x7e
 8000cde:	d901      	bls.n	8000ce4 <ssd1306_WriteChar+0x34>
        return 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e077      	b.n	8000dd4 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	18d3      	adds	r3, r2, r3
 8000cf0:	2b80      	cmp	r3, #128	@ 0x80
 8000cf2:	dc07      	bgt.n	8000d04 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000cf4:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000cf6:	885b      	ldrh	r3, [r3, #2]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	785b      	ldrb	r3, [r3, #1]
 8000cfe:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d00:	2b40      	cmp	r3, #64	@ 0x40
 8000d02:	dd01      	ble.n	8000d08 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e065      	b.n	8000dd4 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	e051      	b.n	8000db2 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	230f      	movs	r3, #15
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b20      	subs	r3, #32
 8000d1a:	1d39      	adds	r1, r7, #4
 8000d1c:	7849      	ldrb	r1, [r1, #1]
 8000d1e:	434b      	muls	r3, r1
 8000d20:	0019      	movs	r1, r3
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	18cb      	adds	r3, r1, r3
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	18d3      	adds	r3, r2, r3
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e035      	b.n	8000da0 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d014      	beq.n	8000d6c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d42:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	b2d8      	uxtb	r0, r3
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000d52:	885b      	ldrh	r3, [r3, #2]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	18d3      	adds	r3, r2, r3
 8000d5c:	b2d9      	uxtb	r1, r3
 8000d5e:	230e      	movs	r3, #14
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	001a      	movs	r2, r3
 8000d66:	f7ff ff41 	bl	8000bec <ssd1306_DrawPixel>
 8000d6a:	e016      	b.n	8000d9a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	b2d8      	uxtb	r0, r3
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000d7c:	885b      	ldrh	r3, [r3, #2]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	b2d9      	uxtb	r1, r3
 8000d88:	230e      	movs	r3, #14
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	425a      	negs	r2, r3
 8000d90:	4153      	adcs	r3, r2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	001a      	movs	r2, r3
 8000d96:	f7ff ff29 	bl	8000bec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	001a      	movs	r2, r3
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d3c3      	bcc.n	8000d34 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	3301      	adds	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	001a      	movs	r2, r3
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d3a7      	bcc.n	8000d0e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	1d3a      	adds	r2, r7, #4
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <ssd1306_WriteChar+0x12c>)
 8000dcc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	781b      	ldrb	r3, [r3, #0]
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b009      	add	sp, #36	@ 0x24
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	200005d8 	.word	0x200005d8

08000de0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	1d38      	adds	r0, r7, #4
 8000dea:	6001      	str	r1, [r0, #0]
 8000dec:	6042      	str	r2, [r0, #4]
 8000dee:	001a      	movs	r2, r3
 8000df0:	1cfb      	adds	r3, r7, #3
 8000df2:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8000df4:	e014      	b.n	8000e20 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	7818      	ldrb	r0, [r3, #0]
 8000dfa:	1cfb      	adds	r3, r7, #3
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	6852      	ldr	r2, [r2, #4]
 8000e04:	f7ff ff54 	bl	8000cb0 <ssd1306_WriteChar>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d002      	beq.n	8000e1a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	e008      	b.n	8000e2c <ssd1306_WriteString+0x4c>
        }
        str++;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e6      	bne.n	8000df6 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b004      	add	sp, #16
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	1dbb      	adds	r3, r7, #6
 8000e42:	1c0a      	adds	r2, r1, #0
 8000e44:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <ssd1306_SetCursor+0x30>)
 8000e4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <ssd1306_SetCursor+0x30>)
 8000e58:	805a      	strh	r2, [r3, #2]
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	200005d8 	.word	0x200005d8

08000e68 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e74:	210f      	movs	r1, #15
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2281      	movs	r2, #129	@ 0x81
 8000e7a:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fdc1 	bl	8000a08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fdbc 	bl	8000a08 <ssd1306_WriteCommand>
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000eac:	230f      	movs	r3, #15
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	22af      	movs	r2, #175	@ 0xaf
 8000eb2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <ssd1306_SetDisplayOn+0x48>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	715a      	strb	r2, [r3, #5]
 8000eba:	e006      	b.n	8000eca <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	22ae      	movs	r2, #174	@ 0xae
 8000ec2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <ssd1306_SetDisplayOn+0x48>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff fd99 	bl	8000a08 <ssd1306_WriteCommand>
}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	200005d8 	.word	0x200005d8

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_MspInit+0x44>)
 8000eec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_MspInit+0x44>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_MspInit+0x44>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	2201      	movs	r2, #1
 8000efc:	4013      	ands	r3, r2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	0549      	lsls	r1, r1, #21
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	055b      	lsls	r3, r3, #21
 8000f18:	4013      	ands	r3, r2
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b091      	sub	sp, #68	@ 0x44
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	232c      	movs	r3, #44	@ 0x2c
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f002 fda1 	bl	8003a86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	2414      	movs	r4, #20
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2318      	movs	r3, #24
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f002 fd99 	bl	8003a86 <memset>
  if(hi2c->Instance==I2C1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a22      	ldr	r2, [pc, #136]	@ (8000fe4 <HAL_I2C_MspInit+0xb8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d13d      	bne.n	8000fda <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2220      	movs	r2, #32
 8000f62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fe7f 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f76:	f7ff fd3b 	bl	80009f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <HAL_I2C_MspInit+0xbc>)
 8000f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_I2C_MspInit+0xbc>)
 8000f80:	2102      	movs	r1, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f86:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <HAL_I2C_MspInit+0xbc>)
 8000f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f92:	212c      	movs	r1, #44	@ 0x2c
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	22c0      	movs	r2, #192	@ 0xc0
 8000f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2212      	movs	r2, #18
 8000f9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2206      	movs	r2, #6
 8000fb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_I2C_MspInit+0xc0>)
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	0010      	movs	r0, r2
 8000fba:	f000 fa97 	bl	80014ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_I2C_MspInit+0xbc>)
 8000fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_I2C_MspInit+0xbc>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	0389      	lsls	r1, r1, #14
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_I2C_MspInit+0xbc>)
 8000fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	039b      	lsls	r3, r3, #14
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b011      	add	sp, #68	@ 0x44
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	50000400 	.word	0x50000400

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b091      	sub	sp, #68	@ 0x44
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	232c      	movs	r3, #44	@ 0x2c
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	2314      	movs	r3, #20
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f002 fd3f 	bl	8003a86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	2414      	movs	r4, #20
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2318      	movs	r3, #24
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f002 fd37 	bl	8003a86 <memset>
  if(huart->Instance==USART1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d13f      	bne.n	80010a2 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fe1d 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800103a:	f7ff fcd9 	bl	80009f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <HAL_UART_MspInit+0xc0>)
 8001040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_UART_MspInit+0xc0>)
 8001044:	2180      	movs	r1, #128	@ 0x80
 8001046:	01c9      	lsls	r1, r1, #7
 8001048:	430a      	orrs	r2, r1
 800104a:	641a      	str	r2, [r3, #64]	@ 0x40
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <HAL_UART_MspInit+0xc0>)
 800104e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	01db      	lsls	r3, r3, #7
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_UART_MspInit+0xc0>)
 800105c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_UART_MspInit+0xc0>)
 8001060:	2101      	movs	r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_UART_MspInit+0xc0>)
 8001068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106a:	2201      	movs	r2, #1
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001072:	212c      	movs	r1, #44	@ 0x2c
 8001074:	187b      	adds	r3, r7, r1
 8001076:	22c0      	movs	r2, #192	@ 0xc0
 8001078:	00d2      	lsls	r2, r2, #3
 800107a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2202      	movs	r2, #2
 8001080:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2201      	movs	r2, #1
 8001092:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	187a      	adds	r2, r7, r1
 8001096:	23a0      	movs	r3, #160	@ 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f000 fa25 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b011      	add	sp, #68	@ 0x44
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f8e8 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f000 fb80 	bl	80017f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010fa:	2080      	movs	r0, #128	@ 0x80
 80010fc:	f000 fb78 	bl	80017f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fb73 	bl	80017f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_sbrk>:
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a14      	ldr	r2, [pc, #80]	@ (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	18d3      	adds	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
 8001140:	f002 fcaa 	bl	8003a98 <__errno>
 8001144:	0003      	movs	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	425b      	negs	r3, r3
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	18d2      	adds	r2, r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <_sbrk+0x64>)
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b006      	add	sp, #24
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20002000 	.word	0x20002000
 8001170:	00000400 	.word	0x00000400
 8001174:	200005e0 	.word	0x200005e0
 8001178:	20000730 	.word	0x20000730

0800117c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <Reset_Handler>:
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <LoopForever+0x2>)
 800118a:	4685      	mov	sp, r0
 800118c:	f7ff fff6 	bl	800117c <SystemInit>
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopForever+0x6>)
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopForever+0xa>)
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopForever+0xe>)
 8001196:	2300      	movs	r3, #0
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:
 800119a:	58d4      	ldr	r4, [r2, r3]
 800119c:	50c4      	str	r4, [r0, r3]
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:
 80011a0:	18c4      	adds	r4, r0, r3
 80011a2:	428c      	cmp	r4, r1
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopForever+0x12>)
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopForever+0x16>)
 80011aa:	2300      	movs	r3, #0
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>
 80011b6:	f002 fc75 	bl	8003aa4 <__libc_init_array>
 80011ba:	f7ff f9cf 	bl	800055c <main>

080011be <LoopForever>:
 80011be:	e7fe      	b.n	80011be <LoopForever>
 80011c0:	20002000 	.word	0x20002000
 80011c4:	20000000 	.word	0x20000000
 80011c8:	2000007c 	.word	0x2000007c
 80011cc:	08005924 	.word	0x08005924
 80011d0:	2000007c 	.word	0x2000007c
 80011d4:	20000730 	.word	0x20000730

080011d8 <ADC1_IRQHandler>:
 80011d8:	e7fe      	b.n	80011d8 <ADC1_IRQHandler>
	...

080011dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_Init+0x3c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Init+0x3c>)
 80011ee:	2180      	movs	r1, #128	@ 0x80
 80011f0:	0049      	lsls	r1, r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f6:	2003      	movs	r0, #3
 80011f8:	f000 f810 	bl	800121c <HAL_InitTick>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d003      	beq.n	8001208 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e001      	b.n	800120c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fe6c 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_InitTick+0x88>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d02b      	beq.n	800128c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_InitTick+0x8c>)
 8001236:	681c      	ldr	r4, [r3, #0]
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_InitTick+0x88>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	0019      	movs	r1, r3
 800123e:	23fa      	movs	r3, #250	@ 0xfa
 8001240:	0098      	lsls	r0, r3, #2
 8001242:	f7fe ff67 	bl	8000114 <__udivsi3>
 8001246:	0003      	movs	r3, r0
 8001248:	0019      	movs	r1, r3
 800124a:	0020      	movs	r0, r4
 800124c:	f7fe ff62 	bl	8000114 <__udivsi3>
 8001250:	0003      	movs	r3, r0
 8001252:	0018      	movs	r0, r3
 8001254:	f000 f93d 	bl	80014d2 <HAL_SYSTICK_Config>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d112      	bne.n	8001282 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d80a      	bhi.n	8001278 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	2301      	movs	r3, #1
 8001266:	425b      	negs	r3, r3
 8001268:	2200      	movs	r2, #0
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f90c 	bl	8001488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_InitTick+0x90>)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e00d      	b.n	8001294 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001278:	230f      	movs	r3, #15
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e008      	b.n	8001294 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001282:	230f      	movs	r3, #15
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e003      	b.n	8001294 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b005      	add	sp, #20
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	20000028 	.word	0x20000028
 80012a8:	20000020 	.word	0x20000020
 80012ac:	20000024 	.word	0x20000024

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	001a      	movs	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	18d2      	adds	r2, r2, r3
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_IncTick+0x20>)
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	20000028 	.word	0x20000028
 80012d0:	200005e4 	.word	0x200005e4

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	@ (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	200005e4 	.word	0x200005e4

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	001a      	movs	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	189b      	adds	r3, r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	f7ff ffe0 	bl	80012d4 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b004      	add	sp, #16
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	20000028 	.word	0x20000028

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	0002      	movs	r2, r0
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b7f      	cmp	r3, #127	@ 0x7f
 8001342:	d809      	bhi.n	8001358 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	001a      	movs	r2, r3
 800134a:	231f      	movs	r3, #31
 800134c:	401a      	ands	r2, r3
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_EnableIRQ+0x30>)
 8001350:	2101      	movs	r1, #1
 8001352:	4091      	lsls	r1, r2
 8001354:	000a      	movs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001358:	46c0      	nop			@ (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	0002      	movs	r2, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b7f      	cmp	r3, #127	@ 0x7f
 8001378:	d828      	bhi.n	80013cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137a:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <__NVIC_SetPriority+0xd4>)
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	33c0      	adds	r3, #192	@ 0xc0
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	589b      	ldr	r3, [r3, r2]
 800138a:	1dfa      	adds	r2, r7, #7
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	0011      	movs	r1, r2
 8001390:	2203      	movs	r2, #3
 8001392:	400a      	ands	r2, r1
 8001394:	00d2      	lsls	r2, r2, #3
 8001396:	21ff      	movs	r1, #255	@ 0xff
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	43d2      	mvns	r2, r2
 800139e:	401a      	ands	r2, r3
 80013a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	019b      	lsls	r3, r3, #6
 80013a6:	22ff      	movs	r2, #255	@ 0xff
 80013a8:	401a      	ands	r2, r3
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	2303      	movs	r3, #3
 80013b2:	4003      	ands	r3, r0
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b8:	481f      	ldr	r0, [pc, #124]	@ (8001438 <__NVIC_SetPriority+0xd4>)
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	430a      	orrs	r2, r1
 80013c4:	33c0      	adds	r3, #192	@ 0xc0
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ca:	e031      	b.n	8001430 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <__NVIC_SetPriority+0xd8>)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	0019      	movs	r1, r3
 80013d4:	230f      	movs	r3, #15
 80013d6:	400b      	ands	r3, r1
 80013d8:	3b08      	subs	r3, #8
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3306      	adds	r3, #6
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	18d3      	adds	r3, r2, r3
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	1dfa      	adds	r2, r7, #7
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	0011      	movs	r1, r2
 80013ec:	2203      	movs	r2, #3
 80013ee:	400a      	ands	r2, r1
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	21ff      	movs	r1, #255	@ 0xff
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	43d2      	mvns	r2, r2
 80013fa:	401a      	ands	r2, r3
 80013fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	401a      	ands	r2, r3
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	2303      	movs	r3, #3
 800140e:	4003      	ands	r3, r0
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001414:	4809      	ldr	r0, [pc, #36]	@ (800143c <__NVIC_SetPriority+0xd8>)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	001c      	movs	r4, r3
 800141c:	230f      	movs	r3, #15
 800141e:	4023      	ands	r3, r4
 8001420:	3b08      	subs	r3, #8
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	430a      	orrs	r2, r1
 8001426:	3306      	adds	r3, #6
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	18c3      	adds	r3, r0, r3
 800142c:	3304      	adds	r3, #4
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b003      	add	sp, #12
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	045b      	lsls	r3, r3, #17
 8001450:	429a      	cmp	r2, r3
 8001452:	d301      	bcc.n	8001458 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001454:	2301      	movs	r3, #1
 8001456:	e010      	b.n	800147a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <SysTick_Config+0x44>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	3a01      	subs	r2, #1
 800145e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001460:	2301      	movs	r3, #1
 8001462:	425b      	negs	r3, r3
 8001464:	2103      	movs	r1, #3
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff ff7c 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SysTick_Config+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <SysTick_Config+0x44>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	210f      	movs	r1, #15
 8001494:	187b      	adds	r3, r7, r1
 8001496:	1c02      	adds	r2, r0, #0
 8001498:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	187b      	adds	r3, r7, r1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	0002      	movs	r2, r0
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff33 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ffaf 	bl	8001440 <SysTick_Config>
 80014e2:	0003      	movs	r3, r0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e147      	b.n	800178c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <HAL_GPIO_Init+0x28>
 8001512:	e138      	b.n	8001786 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	2b01      	cmp	r3, #1
 800151e:	d005      	beq.n	800152c <HAL_GPIO_Init+0x40>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	4013      	ands	r3, r2
 8001528:	2b02      	cmp	r3, #2
 800152a:	d130      	bne.n	800158e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001562:	2201      	movs	r2, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	2201      	movs	r2, #1
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b03      	cmp	r3, #3
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d123      	bne.n	800161e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	58d3      	ldr	r3, [r2, r3]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2207      	movs	r2, #7
 80015e8:	4013      	ands	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2107      	movs	r1, #7
 8001602:	400b      	ands	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	23c0      	movs	r3, #192	@ 0xc0
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_GPIO_Init+0x174>
 800165e:	e092      	b.n	8001786 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001660:	4a50      	ldr	r2, [pc, #320]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3318      	adds	r3, #24
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	589b      	ldr	r3, [r3, r2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2203      	movs	r2, #3
 8001672:	4013      	ands	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	220f      	movs	r2, #15
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	43da      	mvns	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	23a0      	movs	r3, #160	@ 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	429a      	cmp	r2, r3
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x1ca>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a45      	ldr	r2, [pc, #276]	@ (80017a8 <HAL_GPIO_Init+0x2bc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x1c6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a44      	ldr	r2, [pc, #272]	@ (80017ac <HAL_GPIO_Init+0x2c0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x1c2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a43      	ldr	r2, [pc, #268]	@ (80017b0 <HAL_GPIO_Init+0x2c4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x1be>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x1cc>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x1cc>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x1cc>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x1cc>
 80016b6:	2300      	movs	r3, #0
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	2103      	movs	r1, #3
 80016bc:	400a      	ands	r2, r1
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	4093      	lsls	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016c8:	4936      	ldr	r1, [pc, #216]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3318      	adds	r3, #24
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d6:	4b33      	ldr	r3, [pc, #204]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	035b      	lsls	r3, r3, #13
 80016ee:	4013      	ands	r3, r2
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001700:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43da      	mvns	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	039b      	lsls	r3, r3, #14
 8001718:	4013      	ands	r3, r2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 800172c:	2384      	movs	r3, #132	@ 0x84
 800172e:	58d3      	ldr	r3, [r2, r3]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43da      	mvns	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	029b      	lsls	r3, r3, #10
 8001744:	4013      	ands	r3, r2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001750:	4914      	ldr	r1, [pc, #80]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001752:	2284      	movs	r2, #132	@ 0x84
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001758:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	58d3      	ldr	r3, [r2, r3]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	4013      	ands	r3, r2
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177e:	4909      	ldr	r1, [pc, #36]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	40da      	lsrs	r2, r3
 8001794:	1e13      	subs	r3, r2, #0
 8001796:	d000      	beq.n	800179a <HAL_GPIO_Init+0x2ae>
 8001798:	e6b0      	b.n	80014fc <HAL_GPIO_Init+0x10>
  }
}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021800 	.word	0x40021800
 80017a8:	50000400 	.word	0x50000400
 80017ac:	50000800 	.word	0x50000800
 80017b0:	50000c00 	.word	0x50000c00

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	0008      	movs	r0, r1
 80017be:	0011      	movs	r1, r2
 80017c0:	1cbb      	adds	r3, r7, #2
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	1c7b      	adds	r3, r7, #1
 80017c8:	1c0a      	adds	r2, r1, #0
 80017ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017cc:	1c7b      	adds	r3, r7, #1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d4:	1cbb      	adds	r3, r7, #2
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017de:	1cbb      	adds	r3, r7, #2
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	1dbb      	adds	r3, r7, #6
 80017fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	1dba      	adds	r2, r7, #6
 8001802:	8812      	ldrh	r2, [r2, #0]
 8001804:	4013      	ands	r3, r2
 8001806:	d008      	beq.n	800181a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800180a:	1dba      	adds	r2, r7, #6
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	0018      	movs	r0, r3
 8001816:	f7fe fe2d 	bl	8000474 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	1dba      	adds	r2, r7, #6
 8001820:	8812      	ldrh	r2, [r2, #0]
 8001822:	4013      	ands	r3, r2
 8001824:	d008      	beq.n	8001838 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001828:	1dba      	adds	r2, r7, #6
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800182e:	1dbb      	adds	r3, r7, #6
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	f000 f806 	bl	8001844 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021800 	.word	0x40021800

08001844 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	0002      	movs	r2, r0
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e08f      	b.n	800198a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2241      	movs	r2, #65	@ 0x41
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2240      	movs	r2, #64	@ 0x40
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fb53 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2241      	movs	r2, #65	@ 0x41
 800188a:	2124      	movs	r1, #36	@ 0x24
 800188c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	438a      	bics	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	493b      	ldr	r1, [pc, #236]	@ (8001994 <HAL_I2C_Init+0x13c>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4938      	ldr	r1, [pc, #224]	@ (8001998 <HAL_I2C_Init+0x140>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	0209      	lsls	r1, r1, #8
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	e007      	b.n	80018e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2184      	movs	r1, #132	@ 0x84
 80018e0:	0209      	lsls	r1, r1, #8
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d109      	bne.n	8001902 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2180      	movs	r1, #128	@ 0x80
 80018fa:	0109      	lsls	r1, r1, #4
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	e007      	b.n	8001912 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4923      	ldr	r1, [pc, #140]	@ (800199c <HAL_I2C_Init+0x144>)
 800190e:	400a      	ands	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4920      	ldr	r1, [pc, #128]	@ (80019a0 <HAL_I2C_Init+0x148>)
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	491a      	ldr	r1, [pc, #104]	@ (8001998 <HAL_I2C_Init+0x140>)
 800192e:	400a      	ands	r2, r1
 8001930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	431a      	orrs	r2, r3
 800193c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69d9      	ldr	r1, [r3, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2241      	movs	r2, #65	@ 0x41
 8001976:	2120      	movs	r1, #32
 8001978:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2242      	movs	r2, #66	@ 0x42
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	f0ffffff 	.word	0xf0ffffff
 8001998:	ffff7fff 	.word	0xffff7fff
 800199c:	fffff7ff 	.word	0xfffff7ff
 80019a0:	02008000 	.word	0x02008000

080019a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	000c      	movs	r4, r1
 80019ae:	0010      	movs	r0, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	230a      	movs	r3, #10
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c22      	adds	r2, r4, #0
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	2308      	movs	r3, #8
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	1dbb      	adds	r3, r7, #6
 80019c4:	1c0a      	adds	r2, r1, #0
 80019c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2241      	movs	r2, #65	@ 0x41
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d000      	beq.n	80019d6 <HAL_I2C_Mem_Write+0x32>
 80019d4:	e10c      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_I2C_Mem_Write+0x42>
 80019dc:	232c      	movs	r3, #44	@ 0x2c
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2280      	movs	r2, #128	@ 0x80
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0ff      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2240      	movs	r2, #64	@ 0x40
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_I2C_Mem_Write+0x5c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0f8      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2240      	movs	r2, #64	@ 0x40
 8001a04:	2101      	movs	r1, #1
 8001a06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff fc64 	bl	80012d4 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	0219      	lsls	r1, r3, #8
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2319      	movs	r3, #25
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f000 f975 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0e3      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2241      	movs	r2, #65	@ 0x41
 8001a2e:	2121      	movs	r1, #33	@ 0x21
 8001a30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2242      	movs	r2, #66	@ 0x42
 8001a36:	2140      	movs	r1, #64	@ 0x40
 8001a38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	222c      	movs	r2, #44	@ 0x2c
 8001a4a:	18ba      	adds	r2, r7, r2
 8001a4c:	8812      	ldrh	r2, [r2, #0]
 8001a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	881c      	ldrh	r4, [r3, #0]
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	230a      	movs	r3, #10
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	8819      	ldrh	r1, [r3, #0]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	0023      	movs	r3, r4
 8001a72:	f000 f8c5 	bl	8001c00 <I2C_RequestMemoryWrite>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0b5      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2bff      	cmp	r3, #255	@ 0xff
 8001a8e:	d911      	bls.n	8001ab4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	22ff      	movs	r2, #255	@ 0xff
 8001a94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	045c      	lsls	r4, r3, #17
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	8819      	ldrh	r1, [r3, #0]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	0023      	movs	r3, r4
 8001aae:	f000 fb07 	bl	80020c0 <I2C_TransferConfig>
 8001ab2:	e012      	b.n	8001ada <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	049c      	lsls	r4, r3, #18
 8001ac8:	230a      	movs	r3, #10
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	8819      	ldrh	r1, [r3, #0]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	0023      	movs	r3, r4
 8001ad6:	f000 faf3 	bl	80020c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 f96b 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e081      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03a      	beq.n	8001b9e <HAL_I2C_Mem_Write+0x1fa>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d136      	bne.n	8001b9e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	0013      	movs	r3, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	f000 f8e5 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e053      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2bff      	cmp	r3, #255	@ 0xff
 8001b52:	d911      	bls.n	8001b78 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	22ff      	movs	r2, #255	@ 0xff
 8001b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	045c      	lsls	r4, r3, #17
 8001b64:	230a      	movs	r3, #10
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	8819      	ldrh	r1, [r3, #0]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	0023      	movs	r3, r4
 8001b72:	f000 faa5 	bl	80020c0 <I2C_TransferConfig>
 8001b76:	e012      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	049c      	lsls	r4, r3, #18
 8001b8c:	230a      	movs	r3, #10
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	8819      	ldrh	r1, [r3, #0]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	0023      	movs	r3, r4
 8001b9a:	f000 fa91 	bl	80020c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d198      	bne.n	8001ada <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 f94a 	bl	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb4:	1e03      	subs	r3, r0, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e01a      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	490b      	ldr	r1, [pc, #44]	@ (8001bfc <HAL_I2C_Mem_Write+0x258>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2241      	movs	r2, #65	@ 0x41
 8001bd8:	2120      	movs	r1, #32
 8001bda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2242      	movs	r2, #66	@ 0x42
 8001be0:	2100      	movs	r1, #0
 8001be2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
  }
}
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b007      	add	sp, #28
 8001bf8:	bd90      	pop	{r4, r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	fe00e800 	.word	0xfe00e800

08001c00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	000c      	movs	r4, r1
 8001c0a:	0010      	movs	r0, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	250a      	movs	r5, #10
 8001c10:	197b      	adds	r3, r7, r5
 8001c12:	1c22      	adds	r2, r4, #0
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	2308      	movs	r3, #8
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	1c0a      	adds	r2, r1, #0
 8001c22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c24:	1dbb      	adds	r3, r7, #6
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	045c      	lsls	r4, r3, #17
 8001c2e:	197b      	adds	r3, r7, r5
 8001c30:	8819      	ldrh	r1, [r3, #0]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <I2C_RequestMemoryWrite+0xc4>)
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	0023      	movs	r3, r4
 8001c3a:	f000 fa41 	bl	80020c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c40:	6a39      	ldr	r1, [r7, #32]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f8b9 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e033      	b.n	8001cba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c68:	e019      	b.n	8001c9e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7e:	6a39      	ldr	r1, [r7, #32]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f89a 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d001      	beq.n	8001c90 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e014      	b.n	8001cba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c90:	2308      	movs	r3, #8
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c9e:	6a3a      	ldr	r2, [r7, #32]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	0013      	movs	r3, r2
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	@ 0x80
 8001cac:	f000 f82e 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	80002000 	.word	0x80002000

08001cc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d103      	bne.n	8001ce6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d007      	beq.n	8001d04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]
  }
}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d1c:	e03a      	b.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	6839      	ldr	r1, [r7, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 f8d3 	bl	8001ed0 <I2C_IsErrorOccurred>
 8001d2a:	1e03      	subs	r3, r0, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e040      	b.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	d02d      	beq.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d38:	f7ff facc 	bl	80012d4 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d302      	bcc.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x42>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d122      	bne.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	4013      	ands	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	425a      	negs	r2, r3
 8001d5e:	4153      	adcs	r3, r2
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	001a      	movs	r2, r3
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d113      	bne.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d70:	2220      	movs	r2, #32
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2241      	movs	r2, #65	@ 0x41
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2242      	movs	r2, #66	@ 0x42
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2240      	movs	r2, #64	@ 0x40
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e00f      	b.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	425a      	negs	r2, r3
 8001da4:	4153      	adcs	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	001a      	movs	r2, r3
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d0b5      	beq.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc8:	e032      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f87d 	bl	8001ed0 <I2C_IsErrorOccurred>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e030      	b.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	d025      	beq.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff fa76 	bl	80012d4 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11a      	bne.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d013      	beq.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2241      	movs	r2, #65	@ 0x41
 8001e18:	2120      	movs	r1, #32
 8001e1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2242      	movs	r2, #66	@ 0x42
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d1c5      	bne.n	8001dca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e54:	e02f      	b.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 f837 	bl	8001ed0 <I2C_IsErrorOccurred>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d001      	beq.n	8001e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e02d      	b.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6a:	f7ff fa33 	bl	80012d4 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11a      	bne.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2220      	movs	r2, #32
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d013      	beq.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	2220      	movs	r2, #32
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2241      	movs	r2, #65	@ 0x41
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2242      	movs	r2, #66	@ 0x42
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2240      	movs	r2, #64	@ 0x40
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e007      	b.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d1c8      	bne.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2327      	movs	r3, #39	@ 0x27
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d100      	bne.n	8001efe <I2C_IsErrorOccurred+0x2e>
 8001efc:	e079      	b.n	8001ff2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f06:	e057      	b.n	8001fb8 <I2C_IsErrorOccurred+0xe8>
 8001f08:	2227      	movs	r2, #39	@ 0x27
 8001f0a:	18bb      	adds	r3, r7, r2
 8001f0c:	18ba      	adds	r2, r7, r2
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3301      	adds	r3, #1
 8001f16:	d04f      	beq.n	8001fb8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f18:	f7ff f9dc 	bl	80012d4 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d302      	bcc.n	8001f2e <I2C_IsErrorOccurred+0x5e>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d144      	bne.n	8001fb8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	01db      	lsls	r3, r3, #7
 8001f38:	4013      	ands	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f3c:	2013      	movs	r0, #19
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	2142      	movs	r1, #66	@ 0x42
 8001f44:	5c52      	ldrb	r2, [r2, r1]
 8001f46:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	401a      	ands	r2, r3
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d126      	bne.n	8001faa <I2C_IsErrorOccurred+0xda>
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	01db      	lsls	r3, r3, #7
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d021      	beq.n	8001faa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d01d      	beq.n	8001faa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	01c9      	lsls	r1, r1, #7
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f80:	f7ff f9a8 	bl	80012d4 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f88:	e00f      	b.n	8001faa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f8a:	f7ff f9a3 	bl	80012d4 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b19      	cmp	r3, #25
 8001f96:	d908      	bls.n	8001faa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fa0:	2327      	movs	r3, #39	@ 0x27
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]

              break;
 8001fa8:	e006      	b.n	8001fb8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d1e8      	bne.n	8001f8a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d004      	beq.n	8001fd0 <I2C_IsErrorOccurred+0x100>
 8001fc6:	2327      	movs	r3, #39	@ 0x27
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d09b      	beq.n	8001f08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fd0:	2327      	movs	r3, #39	@ 0x27
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fea:	2327      	movs	r3, #39	@ 0x27
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d00c      	beq.n	800201e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2201      	movs	r2, #1
 8002008:	4313      	orrs	r3, r2
 800200a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2280      	movs	r2, #128	@ 0x80
 8002012:	0052      	lsls	r2, r2, #1
 8002014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002016:	2327      	movs	r3, #39	@ 0x27
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4013      	ands	r3, r2
 8002026:	d00c      	beq.n	8002042 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	2208      	movs	r2, #8
 800202c:	4313      	orrs	r3, r2
 800202e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	00d2      	lsls	r2, r2, #3
 8002038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800203a:	2327      	movs	r3, #39	@ 0x27
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d00c      	beq.n	8002066 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	2202      	movs	r2, #2
 8002050:	4313      	orrs	r3, r2
 8002052:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2280      	movs	r2, #128	@ 0x80
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800205e:	2327      	movs	r3, #39	@ 0x27
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002066:	2327      	movs	r3, #39	@ 0x27
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01d      	beq.n	80020ac <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff fe28 	bl	8001cc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	490e      	ldr	r1, [pc, #56]	@ (80020bc <I2C_IsErrorOccurred+0x1ec>)
 8002084:	400a      	ands	r2, r1
 8002086:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	431a      	orrs	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2241      	movs	r2, #65	@ 0x41
 8002098:	2120      	movs	r1, #32
 800209a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2242      	movs	r2, #66	@ 0x42
 80020a0:	2100      	movs	r1, #0
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020ac:	2327      	movs	r3, #39	@ 0x27
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	781b      	ldrb	r3, [r3, #0]
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b00a      	add	sp, #40	@ 0x28
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	fe00e800 	.word	0xfe00e800

080020c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	0008      	movs	r0, r1
 80020ca:	0011      	movs	r1, r2
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	240a      	movs	r4, #10
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	1c02      	adds	r2, r0, #0
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	2009      	movs	r0, #9
 80020d8:	183b      	adds	r3, r7, r0
 80020da:	1c0a      	adds	r2, r1, #0
 80020dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	059b      	lsls	r3, r3, #22
 80020e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0419      	lsls	r1, r3, #16
 80020ec:	23ff      	movs	r3, #255	@ 0xff
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	4313      	orrs	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800210a:	0d51      	lsrs	r1, r2, #21
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	00d2      	lsls	r2, r2, #3
 8002110:	400a      	ands	r2, r1
 8002112:	4907      	ldr	r1, [pc, #28]	@ (8002130 <I2C_TransferConfig+0x70>)
 8002114:	430a      	orrs	r2, r1
 8002116:	43d2      	mvns	r2, r2
 8002118:	401a      	ands	r2, r3
 800211a:	0011      	movs	r1, r2
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b007      	add	sp, #28
 800212c:	bd90      	pop	{r4, r7, pc}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	03ff63ff 	.word	0x03ff63ff

08002134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2241      	movs	r2, #65	@ 0x41
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b20      	cmp	r3, #32
 8002148:	d138      	bne.n	80021bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2240      	movs	r2, #64	@ 0x40
 800214e:	5c9b      	ldrb	r3, [r3, r2]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002154:	2302      	movs	r3, #2
 8002156:	e032      	b.n	80021be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2240      	movs	r2, #64	@ 0x40
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2241      	movs	r2, #65	@ 0x41
 8002164:	2124      	movs	r1, #36	@ 0x24
 8002166:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2101      	movs	r1, #1
 8002174:	438a      	bics	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4911      	ldr	r1, [pc, #68]	@ (80021c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2101      	movs	r1, #1
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2241      	movs	r2, #65	@ 0x41
 80021ac:	2120      	movs	r1, #32
 80021ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	ffffefff 	.word	0xffffefff

080021cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2241      	movs	r2, #65	@ 0x41
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d139      	bne.n	8002256 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2240      	movs	r2, #64	@ 0x40
 80021e6:	5c9b      	ldrb	r3, [r3, r2]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e033      	b.n	8002258 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2240      	movs	r2, #64	@ 0x40
 80021f4:	2101      	movs	r1, #1
 80021f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2241      	movs	r2, #65	@ 0x41
 80021fc:	2124      	movs	r1, #36	@ 0x24
 80021fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2241      	movs	r2, #65	@ 0x41
 8002246:	2120      	movs	r1, #32
 8002248:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2240      	movs	r2, #64	@ 0x40
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	fffff0ff 	.word	0xfffff0ff

08002264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d11f      	bne.n	80022c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	0013      	movs	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	189b      	adds	r3, r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4912      	ldr	r1, [pc, #72]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002296:	0018      	movs	r0, r3
 8002298:	f7fd ff3c 	bl	8000114 <__udivsi3>
 800229c:	0003      	movs	r3, r0
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a2:	e008      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e001      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e009      	b.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	401a      	ands	r2, r3
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d0ed      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	40007000 	.word	0x40007000
 80022d8:	fffff9ff 	.word	0xfffff9ff
 80022dc:	20000020 	.word	0x20000020
 80022e0:	000f4240 	.word	0x000f4240

080022e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	23e0      	movs	r3, #224	@ 0xe0
 80022ee:	01db      	lsls	r3, r3, #7
 80022f0:	4013      	ands	r3, r2
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e2f3      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCC_OscConfig+0x1e>
 8002318:	e07c      	b.n	8002414 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4bc3      	ldr	r3, [pc, #780]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2238      	movs	r2, #56	@ 0x38
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4bc0      	ldr	r3, [pc, #768]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2203      	movs	r2, #3
 800232a:	4013      	ands	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0x3e>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d002      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4bb9      	ldr	r3, [pc, #740]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	d062      	beq.n	8002412 <HAL_RCC_OscConfig+0x116>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d15e      	bne.n	8002412 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e2ce      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x78>
 8002364:	4bb0      	ldr	r3, [pc, #704]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4baf      	ldr	r3, [pc, #700]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800236a:	2180      	movs	r1, #128	@ 0x80
 800236c:	0249      	lsls	r1, r1, #9
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e020      	b.n	80023b6 <HAL_RCC_OscConfig+0xba>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	23a0      	movs	r3, #160	@ 0xa0
 800237a:	02db      	lsls	r3, r3, #11
 800237c:	429a      	cmp	r2, r3
 800237e:	d10e      	bne.n	800239e <HAL_RCC_OscConfig+0xa2>
 8002380:	4ba9      	ldr	r3, [pc, #676]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4ba8      	ldr	r3, [pc, #672]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	02c9      	lsls	r1, r1, #11
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	4ba6      	ldr	r3, [pc, #664]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4ba5      	ldr	r3, [pc, #660]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	0249      	lsls	r1, r1, #9
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0xba>
 800239e:	4ba2      	ldr	r3, [pc, #648]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4ba1      	ldr	r3, [pc, #644]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80023a4:	49a1      	ldr	r1, [pc, #644]	@ (800262c <HAL_RCC_OscConfig+0x330>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	4b9f      	ldr	r3, [pc, #636]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b9e      	ldr	r3, [pc, #632]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80023b0:	499f      	ldr	r1, [pc, #636]	@ (8002630 <HAL_RCC_OscConfig+0x334>)
 80023b2:	400a      	ands	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d014      	beq.n	80023e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe ff89 	bl	80012d4 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe ff84 	bl	80012d4 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e28d      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023da:	4b93      	ldr	r3, [pc, #588]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xcc>
 80023e6:	e015      	b.n	8002414 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff74 	bl	80012d4 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f2:	f7fe ff6f 	bl	80012d4 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	@ 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e278      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002404:	4b88      	ldr	r3, [pc, #544]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	4013      	ands	r3, r2
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0xf6>
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d100      	bne.n	8002420 <HAL_RCC_OscConfig+0x124>
 800241e:	e099      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002420:	4b81      	ldr	r3, [pc, #516]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2238      	movs	r2, #56	@ 0x38
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800242a:	4b7f      	ldr	r3, [pc, #508]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2203      	movs	r2, #3
 8002430:	4013      	ands	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b10      	cmp	r3, #16
 8002438:	d102      	bne.n	8002440 <HAL_RCC_OscConfig+0x144>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d002      	beq.n	8002446 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d135      	bne.n	80024b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002446:	4b78      	ldr	r3, [pc, #480]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4013      	ands	r3, r2
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x162>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e24b      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b72      	ldr	r3, [pc, #456]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a74      	ldr	r2, [pc, #464]	@ (8002634 <HAL_RCC_OscConfig+0x338>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	021a      	lsls	r2, r3, #8
 800246e:	4b6e      	ldr	r3, [pc, #440]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800247a:	4b6b      	ldr	r3, [pc, #428]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6e      	ldr	r2, [pc, #440]	@ (8002638 <HAL_RCC_OscConfig+0x33c>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800248e:	4b66      	ldr	r3, [pc, #408]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0adb      	lsrs	r3, r3, #11
 8002494:	2207      	movs	r2, #7
 8002496:	4013      	ands	r3, r2
 8002498:	4a68      	ldr	r2, [pc, #416]	@ (800263c <HAL_RCC_OscConfig+0x340>)
 800249a:	40da      	lsrs	r2, r3
 800249c:	4b68      	ldr	r3, [pc, #416]	@ (8002640 <HAL_RCC_OscConfig+0x344>)
 800249e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a0:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <HAL_RCC_OscConfig+0x348>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fe feb9 	bl	800121c <HAL_InitTick>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d051      	beq.n	8002552 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e221      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d030      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5e      	ldr	r2, [pc, #376]	@ (8002638 <HAL_RCC_OscConfig+0x33c>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	4b57      	ldr	r3, [pc, #348]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80024ce:	4b56      	ldr	r3, [pc, #344]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b55      	ldr	r3, [pc, #340]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80024d4:	2180      	movs	r1, #128	@ 0x80
 80024d6:	0049      	lsls	r1, r1, #1
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fefa 	bl	80012d4 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe fef5 	bl	80012d4 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1fe      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4013      	ands	r3, r2
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b48      	ldr	r3, [pc, #288]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_RCC_OscConfig+0x338>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	021a      	lsls	r2, r3, #8
 8002514:	4b44      	ldr	r3, [pc, #272]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	e01b      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800251c:	4b42      	ldr	r3, [pc, #264]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b41      	ldr	r3, [pc, #260]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002522:	4949      	ldr	r1, [pc, #292]	@ (8002648 <HAL_RCC_OscConfig+0x34c>)
 8002524:	400a      	ands	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fed4 	bl	80012d4 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7fe fecf 	bl	80012d4 <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e1d8      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002544:	4b38      	ldr	r3, [pc, #224]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4013      	ands	r3, r2
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x236>
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002552:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2208      	movs	r2, #8
 800255a:	4013      	ands	r3, r2
 800255c:	d047      	beq.n	80025ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800255e:	4b32      	ldr	r3, [pc, #200]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2238      	movs	r2, #56	@ 0x38
 8002564:	4013      	ands	r3, r2
 8002566:	2b18      	cmp	r3, #24
 8002568:	d10a      	bne.n	8002580 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800256a:	4b2f      	ldr	r3, [pc, #188]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	d03c      	beq.n	80025ee <HAL_RCC_OscConfig+0x2f2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d138      	bne.n	80025ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e1ba      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d019      	beq.n	80025bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002588:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800258a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 800258e:	2101      	movs	r1, #1
 8002590:	430a      	orrs	r2, r1
 8002592:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fe9e 	bl	80012d4 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259e:	f7fe fe99 	bl	80012d4 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a2      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b4:	2202      	movs	r2, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	d0f1      	beq.n	800259e <HAL_RCC_OscConfig+0x2a2>
 80025ba:	e018      	b.n	80025ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80025be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	438a      	bics	r2, r1
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fe84 	bl	80012d4 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe fe7f 	bl	80012d4 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e188      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e4:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 80025e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	d1f1      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2204      	movs	r2, #4
 80025f4:	4013      	ands	r3, r2
 80025f6:	d100      	bne.n	80025fa <HAL_RCC_OscConfig+0x2fe>
 80025f8:	e0c6      	b.n	8002788 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	231f      	movs	r3, #31
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2238      	movs	r2, #56	@ 0x38
 8002608:	4013      	ands	r3, r2
 800260a:	2b20      	cmp	r3, #32
 800260c:	d11e      	bne.n	800264c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCC_OscConfig+0x32c>)
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_RCC_OscConfig+0x31e>
 8002618:	e0b6      	b.n	8002788 <HAL_RCC_OscConfig+0x48c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d000      	beq.n	8002624 <HAL_RCC_OscConfig+0x328>
 8002622:	e0b1      	b.n	8002788 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e166      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
 8002628:	40021000 	.word	0x40021000
 800262c:	fffeffff 	.word	0xfffeffff
 8002630:	fffbffff 	.word	0xfffbffff
 8002634:	ffff80ff 	.word	0xffff80ff
 8002638:	ffffc7ff 	.word	0xffffc7ff
 800263c:	00f42400 	.word	0x00f42400
 8002640:	20000020 	.word	0x20000020
 8002644:	20000024 	.word	0x20000024
 8002648:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800264c:	4bac      	ldr	r3, [pc, #688]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800264e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	055b      	lsls	r3, r3, #21
 8002654:	4013      	ands	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_RCC_OscConfig+0x360>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x362>
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d011      	beq.n	8002686 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4ba7      	ldr	r3, [pc, #668]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002666:	4ba6      	ldr	r3, [pc, #664]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	0549      	lsls	r1, r1, #21
 800266c:	430a      	orrs	r2, r1
 800266e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002670:	4ba3      	ldr	r3, [pc, #652]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800267e:	231f      	movs	r3, #31
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002686:	4b9f      	ldr	r3, [pc, #636]	@ (8002904 <HAL_RCC_OscConfig+0x608>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4013      	ands	r3, r2
 8002690:	d11a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002692:	4b9c      	ldr	r3, [pc, #624]	@ (8002904 <HAL_RCC_OscConfig+0x608>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b9b      	ldr	r3, [pc, #620]	@ (8002904 <HAL_RCC_OscConfig+0x608>)
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	0049      	lsls	r1, r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe18 	bl	80012d4 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe fe13 	bl	80012d4 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e11c      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026bc:	4b91      	ldr	r3, [pc, #580]	@ (8002904 <HAL_RCC_OscConfig+0x608>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x3e2>
 80026d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80026d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	430a      	orrs	r2, r1
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x41c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x404>
 80026e6:	4b86      	ldr	r3, [pc, #536]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80026e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ea:	4b85      	ldr	r3, [pc, #532]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80026ec:	2104      	movs	r1, #4
 80026ee:	430a      	orrs	r2, r1
 80026f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026f2:	4b83      	ldr	r3, [pc, #524]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80026f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026f6:	4b82      	ldr	r3, [pc, #520]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x41c>
 8002700:	4b7f      	ldr	r3, [pc, #508]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002704:	4b7e      	ldr	r3, [pc, #504]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002706:	2101      	movs	r1, #1
 8002708:	438a      	bics	r2, r1
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800270c:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800270e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002710:	4b7b      	ldr	r3, [pc, #492]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002712:	2104      	movs	r1, #4
 8002714:	438a      	bics	r2, r1
 8002716:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d014      	beq.n	800274a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fdd8 	bl	80012d4 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002728:	e009      	b.n	800273e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fdd3 	bl	80012d4 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	4a74      	ldr	r2, [pc, #464]	@ (8002908 <HAL_RCC_OscConfig+0x60c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0db      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	4b70      	ldr	r3, [pc, #448]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x42e>
 8002748:	e013      	b.n	8002772 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fdc3 	bl	80012d4 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002752:	e009      	b.n	8002768 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fdbe 	bl	80012d4 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	4a6a      	ldr	r2, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x60c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0c6      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002768:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002772:	231f      	movs	r3, #31
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b60      	ldr	r3, [pc, #384]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800277e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002780:	4b5f      	ldr	r3, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002782:	4962      	ldr	r1, [pc, #392]	@ (800290c <HAL_RCC_OscConfig+0x610>)
 8002784:	400a      	ands	r2, r1
 8002786:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d100      	bne.n	8002792 <HAL_RCC_OscConfig+0x496>
 8002790:	e0b0      	b.n	80028f4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002792:	4b5b      	ldr	r3, [pc, #364]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2238      	movs	r2, #56	@ 0x38
 8002798:	4013      	ands	r3, r2
 800279a:	2b10      	cmp	r3, #16
 800279c:	d100      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4a4>
 800279e:	e078      	b.n	8002892 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d153      	bne.n	8002850 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b55      	ldr	r3, [pc, #340]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b54      	ldr	r3, [pc, #336]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80027ae:	4958      	ldr	r1, [pc, #352]	@ (8002910 <HAL_RCC_OscConfig+0x614>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fd8e 	bl	80012d4 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe fd89 	bl	80012d4 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e092      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	049b      	lsls	r3, r3, #18
 80027d8:	4013      	ands	r3, r2
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027dc:	4b48      	ldr	r3, [pc, #288]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002914 <HAL_RCC_OscConfig+0x618>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	431a      	orrs	r2, r3
 8002804:	4b3e      	ldr	r3, [pc, #248]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002806:	430a      	orrs	r2, r1
 8002808:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280a:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002810:	2180      	movs	r1, #128	@ 0x80
 8002812:	0449      	lsls	r1, r1, #17
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002818:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	0549      	lsls	r1, r1, #21
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fd55 	bl	80012d4 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fd50 	bl	80012d4 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e059      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	049b      	lsls	r3, r3, #18
 800284a:	4013      	ands	r3, r2
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x534>
 800284e:	e051      	b.n	80028f4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002856:	492e      	ldr	r1, [pc, #184]	@ (8002910 <HAL_RCC_OscConfig+0x614>)
 8002858:	400a      	ands	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fd3a 	bl	80012d4 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fd35 	bl	80012d4 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e03e      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	@ 0x80
 800287e:	049b      	lsls	r3, r3, #18
 8002880:	4013      	ands	r3, r2
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002884:	4b1e      	ldr	r3, [pc, #120]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 800288a:	4923      	ldr	r1, [pc, #140]	@ (8002918 <HAL_RCC_OscConfig+0x61c>)
 800288c:	400a      	ands	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	e030      	b.n	80028f4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e02b      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800289e:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <HAL_RCC_OscConfig+0x604>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2203      	movs	r2, #3
 80028a8:	401a      	ands	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d11e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2270      	movs	r2, #112	@ 0x70
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d117      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	23fe      	movs	r3, #254	@ 0xfe
 80028c4:	01db      	lsls	r3, r3, #7
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d10e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	23f8      	movs	r3, #248	@ 0xf8
 80028d6:	039b      	lsls	r3, r3, #14
 80028d8:	401a      	ands	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	0f5b      	lsrs	r3, r3, #29
 80028e6:	075a      	lsls	r2, r3, #29
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b008      	add	sp, #32
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	00001388 	.word	0x00001388
 800290c:	efffffff 	.word	0xefffffff
 8002910:	feffffff 	.word	0xfeffffff
 8002914:	1fc1808c 	.word	0x1fc1808c
 8002918:	effefffc 	.word	0xeffefffc

0800291c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0e9      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b76      	ldr	r3, [pc, #472]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2207      	movs	r2, #7
 8002936:	4013      	ands	r3, r2
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d91e      	bls.n	800297c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b73      	ldr	r3, [pc, #460]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2207      	movs	r2, #7
 8002944:	4393      	bics	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002950:	f7fe fcc0 	bl	80012d4 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002958:	e009      	b.n	800296e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295a:	f7fe fcbb 	bl	80012d4 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	4a6a      	ldr	r2, [pc, #424]	@ (8002b10 <HAL_RCC_ClockConfig+0x1f4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0ca      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800296e:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2207      	movs	r2, #7
 8002974:	4013      	ands	r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d015      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2204      	movs	r2, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d006      	beq.n	800299e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002990:	4b60      	ldr	r3, [pc, #384]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b5f      	ldr	r3, [pc, #380]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002996:	21e0      	movs	r1, #224	@ 0xe0
 8002998:	01c9      	lsls	r1, r1, #7
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <HAL_RCC_ClockConfig+0x1fc>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4013      	ands	r3, r2
 80029ba:	d057      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	029b      	lsls	r3, r3, #10
 80029cc:	4013      	ands	r3, r2
 80029ce:	d12b      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e097      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	049b      	lsls	r3, r3, #18
 80029e4:	4013      	ands	r3, r2
 80029e6:	d11f      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e08b      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f4:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4013      	ands	r3, r2
 80029fe:	d113      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e07f      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0c:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	2202      	movs	r2, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d108      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e074      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e06d      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a28:	4b3a      	ldr	r3, [pc, #232]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4393      	bics	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fc4a 	bl	80012d4 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a46:	f7fe fc45 	bl	80012d4 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	4a2f      	ldr	r2, [pc, #188]	@ (8002b10 <HAL_RCC_ClockConfig+0x1f4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e054      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2238      	movs	r2, #56	@ 0x38
 8002a60:	401a      	ands	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1ec      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b27      	ldr	r3, [pc, #156]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2207      	movs	r2, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d21e      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2207      	movs	r2, #7
 8002a80:	4393      	bics	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fc22 	bl	80012d4 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fe fc1d 	bl	80012d4 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <HAL_RCC_ClockConfig+0x1f4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e02c      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aaa:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1ee      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac2:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4a15      	ldr	r2, [pc, #84]	@ (8002b1c <HAL_RCC_ClockConfig+0x200>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ad6:	f000 f829 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002ada:	0001      	movs	r1, r0
 8002adc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <HAL_RCC_ClockConfig+0x204>)
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	58d3      	ldr	r3, [r2, r3]
 8002aec:	221f      	movs	r2, #31
 8002aee:	4013      	ands	r3, r2
 8002af0:	000a      	movs	r2, r1
 8002af2:	40da      	lsrs	r2, r3
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_ClockConfig+0x208>)
 8002af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_ClockConfig+0x20c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fe fb8d 	bl	800121c <HAL_InitTick>
 8002b02:	0003      	movs	r3, r0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	00001388 	.word	0x00001388
 8002b14:	40021000 	.word	0x40021000
 8002b18:	fffff0ff 	.word	0xfffff0ff
 8002b1c:	ffff8fff 	.word	0xffff8fff
 8002b20:	08005860 	.word	0x08005860
 8002b24:	20000020 	.word	0x20000020
 8002b28:	20000024 	.word	0x20000024

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	4b3c      	ldr	r3, [pc, #240]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2238      	movs	r2, #56	@ 0x38
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d10f      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0adb      	lsrs	r3, r3, #11
 8002b42:	2207      	movs	r2, #7
 8002b44:	4013      	ands	r3, r2
 8002b46:	2201      	movs	r2, #1
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	4835      	ldr	r0, [pc, #212]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b52:	f7fd fadf 	bl	8000114 <__udivsi3>
 8002b56:	0003      	movs	r3, r0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e05d      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b5c:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2238      	movs	r2, #56	@ 0x38
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b68:	4b30      	ldr	r3, [pc, #192]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e054      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2238      	movs	r2, #56	@ 0x38
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d138      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2203      	movs	r2, #3
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	4824      	ldr	r0, [pc, #144]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b9c:	f7fd faba 	bl	8000114 <__udivsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	227f      	movs	r2, #127	@ 0x7f
 8002bac:	4013      	ands	r3, r2
 8002bae:	434b      	muls	r3, r1
 8002bb0:	617b      	str	r3, [r7, #20]
        break;
 8002bb2:	e00d      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	481c      	ldr	r0, [pc, #112]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bb8:	f7fd faac 	bl	8000114 <__udivsi3>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	227f      	movs	r2, #127	@ 0x7f
 8002bc8:	4013      	ands	r3, r2
 8002bca:	434b      	muls	r3, r1
 8002bcc:	617b      	str	r3, [r7, #20]
        break;
 8002bce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0f5b      	lsrs	r3, r3, #29
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	3301      	adds	r3, #1
 8002bdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	6978      	ldr	r0, [r7, #20]
 8002be2:	f7fd fa97 	bl	8000114 <__udivsi3>
 8002be6:	0003      	movs	r3, r0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bec:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2238      	movs	r2, #56	@ 0x38
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d103      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2238      	movs	r2, #56	@ 0x38
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b18      	cmp	r3, #24
 8002c0a:	d103      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c0c:	23fa      	movs	r3, #250	@ 0xfa
 8002c0e:	01db      	lsls	r3, r3, #7
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	e001      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c18:	693b      	ldr	r3, [r7, #16]
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b006      	add	sp, #24
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	40021000 	.word	0x40021000
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b02      	ldr	r3, [pc, #8]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	20000020 	.word	0x20000020

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b5b0      	push	{r4, r5, r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c48:	f7ff fff2 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c4c:	0004      	movs	r4, r0
 8002c4e:	f7ff fb49 	bl	80022e4 <LL_RCC_GetAPB1Prescaler>
 8002c52:	0003      	movs	r3, r0
 8002c54:	0b1a      	lsrs	r2, r3, #12
 8002c56:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	58d3      	ldr	r3, [r2, r3]
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	4013      	ands	r3, r2
 8002c60:	40dc      	lsrs	r4, r3
 8002c62:	0023      	movs	r3, r4
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	080058a0 	.word	0x080058a0

08002c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c78:	2313      	movs	r3, #19
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c80:	2312      	movs	r3, #18
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	4013      	ands	r3, r2
 8002c92:	d100      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c94:	e0a3      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2011      	movs	r0, #17
 8002c98:	183b      	adds	r3, r7, r0
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	055b      	lsls	r3, r3, #21
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d110      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b7c      	ldr	r3, [pc, #496]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cae:	4b7b      	ldr	r3, [pc, #492]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cb0:	2180      	movs	r1, #128	@ 0x80
 8002cb2:	0549      	lsls	r1, r1, #21
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cb8:	4b78      	ldr	r3, [pc, #480]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ccc:	4b74      	ldr	r3, [pc, #464]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b73      	ldr	r3, [pc, #460]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cd2:	2180      	movs	r1, #128	@ 0x80
 8002cd4:	0049      	lsls	r1, r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cda:	f7fe fafb 	bl	80012d4 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe faf6 	bl	80012d4 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d904      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cf2:	2313      	movs	r3, #19
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	701a      	strb	r2, [r3, #0]
        break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cfc:	4b68      	ldr	r3, [pc, #416]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d0ed      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d08:	2313      	movs	r3, #19
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d154      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d12:	4b62      	ldr	r3, [pc, #392]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d16:	23c0      	movs	r3, #192	@ 0xc0
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d019      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d014      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d38:	4b58      	ldr	r3, [pc, #352]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d3c:	4b57      	ldr	r3, [pc, #348]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d3e:	2180      	movs	r1, #128	@ 0x80
 8002d40:	0249      	lsls	r1, r1, #9
 8002d42:	430a      	orrs	r2, r1
 8002d44:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d46:	4b55      	ldr	r3, [pc, #340]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d4a:	4b54      	ldr	r3, [pc, #336]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d4c:	4956      	ldr	r1, [pc, #344]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d52:	4b52      	ldr	r3, [pc, #328]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d016      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe fab8 	bl	80012d4 <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d68:	e00c      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe fab3 	bl	80012d4 <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d904      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d7a:	2313      	movs	r3, #19
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2203      	movs	r2, #3
 8002d80:	701a      	strb	r2, [r3, #0]
            break;
 8002d82:	e004      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d84:	4b45      	ldr	r3, [pc, #276]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d0ed      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d8e:	2313      	movs	r3, #19
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d98:	4b40      	ldr	r3, [pc, #256]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	4a41      	ldr	r2, [pc, #260]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	4b3d      	ldr	r3, [pc, #244]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002da8:	430a      	orrs	r2, r1
 8002daa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dac:	e00c      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dae:	2312      	movs	r3, #18
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2213      	movs	r2, #19
 8002db4:	18ba      	adds	r2, r7, r2
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	2312      	movs	r3, #18
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2213      	movs	r2, #19
 8002dc2:	18ba      	adds	r2, r7, r2
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc8:	2311      	movs	r3, #17
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4b32      	ldr	r3, [pc, #200]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dd6:	4b31      	ldr	r3, [pc, #196]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dd8:	4935      	ldr	r1, [pc, #212]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	2203      	movs	r2, #3
 8002dee:	4393      	bics	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2220      	movs	r2, #32
 8002e02:	4013      	ands	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e06:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e16:	430a      	orrs	r2, r1
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	01db      	lsls	r3, r3, #7
 8002e22:	4013      	ands	r3, r2
 8002e24:	d015      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e26:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	0899      	lsrs	r1, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	05db      	lsls	r3, r3, #23
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e4a:	2180      	movs	r1, #128	@ 0x80
 8002e4c:	0249      	lsls	r1, r1, #9
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	@ 0x80
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	4a15      	ldr	r2, [pc, #84]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	0249      	lsls	r1, r1, #9
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e8c:	2312      	movs	r3, #18
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	781b      	ldrb	r3, [r3, #0]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	fffffcff 	.word	0xfffffcff
 8002ea8:	fffeffff 	.word	0xfffeffff
 8002eac:	00001388 	.word	0x00001388
 8002eb0:	efffffff 	.word	0xefffffff
 8002eb4:	ffffcfff 	.word	0xffffcfff
 8002eb8:	ffff3fff 	.word	0xffff3fff

08002ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e046      	b.n	8002f5c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2288      	movs	r2, #136	@ 0x88
 8002ed2:	589b      	ldr	r3, [r3, r2]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2284      	movs	r2, #132	@ 0x84
 8002edc:	2100      	movs	r1, #0
 8002ede:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7fe f884 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2288      	movs	r2, #136	@ 0x88
 8002eec:	2124      	movs	r1, #36	@ 0x24
 8002eee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 fa3a 	bl	8003384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f8cc 	bl	80030b0 <UART_SetConfig>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01c      	b.n	8002f5c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <HAL_UART_Init+0xa8>)
 8002f2e:	400a      	ands	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	212a      	movs	r1, #42	@ 0x2a
 8002f3e:	438a      	bics	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 fac9 	bl	80034ec <UART_CheckIdleState>
 8002f5a:	0003      	movs	r3, r0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	ffffb7ff 	.word	0xffffb7ff

08002f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2288      	movs	r2, #136	@ 0x88
 8002f7c:	589b      	ldr	r3, [r3, r2]
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d000      	beq.n	8002f84 <HAL_UART_Transmit+0x1c>
 8002f82:	e090      	b.n	80030a6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_UART_Transmit+0x2a>
 8002f8a:	1dbb      	adds	r3, r7, #6
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e088      	b.n	80030a8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	015b      	lsls	r3, r3, #5
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d109      	bne.n	8002fb6 <HAL_UART_Transmit+0x4e>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d001      	beq.n	8002fb6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e078      	b.n	80030a8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2290      	movs	r2, #144	@ 0x90
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2288      	movs	r2, #136	@ 0x88
 8002fc2:	2121      	movs	r1, #33	@ 0x21
 8002fc4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc6:	f7fe f985 	bl	80012d4 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1dba      	adds	r2, r7, #6
 8002fd2:	2154      	movs	r1, #84	@ 0x54
 8002fd4:	8812      	ldrh	r2, [r2, #0]
 8002fd6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1dba      	adds	r2, r7, #6
 8002fdc:	2156      	movs	r1, #86	@ 0x56
 8002fde:	8812      	ldrh	r2, [r2, #0]
 8002fe0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	015b      	lsls	r3, r3, #5
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d108      	bne.n	8003000 <HAL_UART_Transmit+0x98>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e003      	b.n	8003008 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003008:	e030      	b.n	800306c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	0013      	movs	r3, r2
 8003014:	2200      	movs	r2, #0
 8003016:	2180      	movs	r1, #128	@ 0x80
 8003018:	f000 fb12 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d005      	beq.n	800302c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2288      	movs	r2, #136	@ 0x88
 8003024:	2120      	movs	r1, #32
 8003026:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e03d      	b.n	80030a8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	001a      	movs	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	05d2      	lsls	r2, r2, #23
 800303e:	0dd2      	lsrs	r2, r2, #23
 8003040:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e007      	b.n	800305a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2256      	movs	r2, #86	@ 0x56
 800305e:	5a9b      	ldrh	r3, [r3, r2]
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b299      	uxth	r1, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2256      	movs	r2, #86	@ 0x56
 800306a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2256      	movs	r2, #86	@ 0x56
 8003070:	5a9b      	ldrh	r3, [r3, r2]
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1c8      	bne.n	800300a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	0013      	movs	r3, r2
 8003082:	2200      	movs	r2, #0
 8003084:	2140      	movs	r1, #64	@ 0x40
 8003086:	f000 fadb 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2288      	movs	r2, #136	@ 0x88
 8003092:	2120      	movs	r1, #32
 8003094:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e006      	b.n	80030a8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2288      	movs	r2, #136	@ 0x88
 800309e:	2120      	movs	r1, #32
 80030a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b008      	add	sp, #32
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b8:	231a      	movs	r3, #26
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4aa1      	ldr	r2, [pc, #644]	@ (8003364 <UART_SetConfig+0x2b4>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003368 <UART_SetConfig+0x2b8>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	4313      	orrs	r3, r2
 8003114:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a93      	ldr	r2, [pc, #588]	@ (800336c <UART_SetConfig+0x2bc>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	220f      	movs	r2, #15
 8003134:	4393      	bics	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a89      	ldr	r2, [pc, #548]	@ (8003370 <UART_SetConfig+0x2c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d127      	bne.n	800319e <UART_SetConfig+0xee>
 800314e:	4b89      	ldr	r3, [pc, #548]	@ (8003374 <UART_SetConfig+0x2c4>)
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	2203      	movs	r2, #3
 8003154:	4013      	ands	r3, r2
 8003156:	2b03      	cmp	r3, #3
 8003158:	d017      	beq.n	800318a <UART_SetConfig+0xda>
 800315a:	d81b      	bhi.n	8003194 <UART_SetConfig+0xe4>
 800315c:	2b02      	cmp	r3, #2
 800315e:	d00a      	beq.n	8003176 <UART_SetConfig+0xc6>
 8003160:	d818      	bhi.n	8003194 <UART_SetConfig+0xe4>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <UART_SetConfig+0xbc>
 8003166:	2b01      	cmp	r3, #1
 8003168:	d00a      	beq.n	8003180 <UART_SetConfig+0xd0>
 800316a:	e013      	b.n	8003194 <UART_SetConfig+0xe4>
 800316c:	231b      	movs	r3, #27
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e021      	b.n	80031ba <UART_SetConfig+0x10a>
 8003176:	231b      	movs	r3, #27
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e01c      	b.n	80031ba <UART_SetConfig+0x10a>
 8003180:	231b      	movs	r3, #27
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2204      	movs	r2, #4
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e017      	b.n	80031ba <UART_SetConfig+0x10a>
 800318a:	231b      	movs	r3, #27
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2208      	movs	r2, #8
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e012      	b.n	80031ba <UART_SetConfig+0x10a>
 8003194:	231b      	movs	r3, #27
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2210      	movs	r2, #16
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e00d      	b.n	80031ba <UART_SetConfig+0x10a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	@ (8003378 <UART_SetConfig+0x2c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d104      	bne.n	80031b2 <UART_SetConfig+0x102>
 80031a8:	231b      	movs	r3, #27
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e003      	b.n	80031ba <UART_SetConfig+0x10a>
 80031b2:	231b      	movs	r3, #27
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2210      	movs	r2, #16
 80031b8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d000      	beq.n	80031c8 <UART_SetConfig+0x118>
 80031c6:	e065      	b.n	8003294 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80031c8:	231b      	movs	r3, #27
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d015      	beq.n	80031fe <UART_SetConfig+0x14e>
 80031d2:	dc18      	bgt.n	8003206 <UART_SetConfig+0x156>
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00d      	beq.n	80031f4 <UART_SetConfig+0x144>
 80031d8:	dc15      	bgt.n	8003206 <UART_SetConfig+0x156>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <UART_SetConfig+0x134>
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d005      	beq.n	80031ee <UART_SetConfig+0x13e>
 80031e2:	e010      	b.n	8003206 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7ff fd2e 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80031e8:	0003      	movs	r3, r0
 80031ea:	617b      	str	r3, [r7, #20]
        break;
 80031ec:	e012      	b.n	8003214 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ee:	4b63      	ldr	r3, [pc, #396]	@ (800337c <UART_SetConfig+0x2cc>)
 80031f0:	617b      	str	r3, [r7, #20]
        break;
 80031f2:	e00f      	b.n	8003214 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f4:	f7ff fc9a 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 80031f8:	0003      	movs	r3, r0
 80031fa:	617b      	str	r3, [r7, #20]
        break;
 80031fc:	e00a      	b.n	8003214 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	617b      	str	r3, [r7, #20]
        break;
 8003204:	e006      	b.n	8003214 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800320a:	231a      	movs	r3, #26
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
        break;
 8003212:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <UART_SetConfig+0x16c>
 800321a:	e08d      	b.n	8003338 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003220:	4b57      	ldr	r3, [pc, #348]	@ (8003380 <UART_SetConfig+0x2d0>)
 8003222:	0052      	lsls	r2, r2, #1
 8003224:	5ad3      	ldrh	r3, [r2, r3]
 8003226:	0019      	movs	r1, r3
 8003228:	6978      	ldr	r0, [r7, #20]
 800322a:	f7fc ff73 	bl	8000114 <__udivsi3>
 800322e:	0003      	movs	r3, r0
 8003230:	005a      	lsls	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	18d2      	adds	r2, r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0019      	movs	r1, r3
 8003240:	0010      	movs	r0, r2
 8003242:	f7fc ff67 	bl	8000114 <__udivsi3>
 8003246:	0003      	movs	r3, r0
 8003248:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d91c      	bls.n	800328a <UART_SetConfig+0x1da>
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	025b      	lsls	r3, r3, #9
 8003256:	429a      	cmp	r2, r3
 8003258:	d217      	bcs.n	800328a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	b29a      	uxth	r2, r3
 800325e:	200e      	movs	r0, #14
 8003260:	183b      	adds	r3, r7, r0
 8003262:	210f      	movs	r1, #15
 8003264:	438a      	bics	r2, r1
 8003266:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	b29b      	uxth	r3, r3
 800326e:	2207      	movs	r2, #7
 8003270:	4013      	ands	r3, r2
 8003272:	b299      	uxth	r1, r3
 8003274:	183b      	adds	r3, r7, r0
 8003276:	183a      	adds	r2, r7, r0
 8003278:	8812      	ldrh	r2, [r2, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	183a      	adds	r2, r7, r0
 8003284:	8812      	ldrh	r2, [r2, #0]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	e056      	b.n	8003338 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800328a:	231a      	movs	r3, #26
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e051      	b.n	8003338 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003294:	231b      	movs	r3, #27
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d015      	beq.n	80032ca <UART_SetConfig+0x21a>
 800329e:	dc18      	bgt.n	80032d2 <UART_SetConfig+0x222>
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d00d      	beq.n	80032c0 <UART_SetConfig+0x210>
 80032a4:	dc15      	bgt.n	80032d2 <UART_SetConfig+0x222>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <UART_SetConfig+0x200>
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d005      	beq.n	80032ba <UART_SetConfig+0x20a>
 80032ae:	e010      	b.n	80032d2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7ff fcc8 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80032b4:	0003      	movs	r3, r0
 80032b6:	617b      	str	r3, [r7, #20]
        break;
 80032b8:	e012      	b.n	80032e0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ba:	4b30      	ldr	r3, [pc, #192]	@ (800337c <UART_SetConfig+0x2cc>)
 80032bc:	617b      	str	r3, [r7, #20]
        break;
 80032be:	e00f      	b.n	80032e0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c0:	f7ff fc34 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 80032c4:	0003      	movs	r3, r0
 80032c6:	617b      	str	r3, [r7, #20]
        break;
 80032c8:	e00a      	b.n	80032e0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	617b      	str	r3, [r7, #20]
        break;
 80032d0:	e006      	b.n	80032e0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032d6:	231a      	movs	r3, #26
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
        break;
 80032de:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ea:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <UART_SetConfig+0x2d0>)
 80032ec:	0052      	lsls	r2, r2, #1
 80032ee:	5ad3      	ldrh	r3, [r2, r3]
 80032f0:	0019      	movs	r1, r3
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7fc ff0e 	bl	8000114 <__udivsi3>
 80032f8:	0003      	movs	r3, r0
 80032fa:	001a      	movs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	18d2      	adds	r2, r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0019      	movs	r1, r3
 800330a:	0010      	movs	r0, r2
 800330c:	f7fc ff02 	bl	8000114 <__udivsi3>
 8003310:	0003      	movs	r3, r0
 8003312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d90a      	bls.n	8003330 <UART_SetConfig+0x280>
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	429a      	cmp	r2, r3
 8003322:	d205      	bcs.n	8003330 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e003      	b.n	8003338 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003330:	231a      	movs	r3, #26
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	226a      	movs	r2, #106	@ 0x6a
 800333c:	2101      	movs	r1, #1
 800333e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2268      	movs	r2, #104	@ 0x68
 8003344:	2101      	movs	r1, #1
 8003346:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003354:	231a      	movs	r3, #26
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b008      	add	sp, #32
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	cfff69f3 	.word	0xcfff69f3
 8003368:	ffffcfff 	.word	0xffffcfff
 800336c:	11fff4ff 	.word	0x11fff4ff
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40004400 	.word	0x40004400
 800337c:	00f42400 	.word	0x00f42400
 8003380:	080058c0 	.word	0x080058c0

08003384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	2208      	movs	r2, #8
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a4a      	ldr	r2, [pc, #296]	@ (80034c8 <UART_AdvFeatureConfig+0x144>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	2201      	movs	r2, #1
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a43      	ldr	r2, [pc, #268]	@ (80034cc <UART_AdvFeatureConfig+0x148>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	2202      	movs	r2, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a3b      	ldr	r2, [pc, #236]	@ (80034d0 <UART_AdvFeatureConfig+0x14c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a34      	ldr	r2, [pc, #208]	@ (80034d4 <UART_AdvFeatureConfig+0x150>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	2210      	movs	r2, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a2c      	ldr	r2, [pc, #176]	@ (80034d8 <UART_AdvFeatureConfig+0x154>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	2220      	movs	r2, #32
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4a25      	ldr	r2, [pc, #148]	@ (80034dc <UART_AdvFeatureConfig+0x158>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	2240      	movs	r2, #64	@ 0x40
 800345e:	4013      	ands	r3, r2
 8003460:	d01d      	beq.n	800349e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	@ (80034e0 <UART_AdvFeatureConfig+0x15c>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	035b      	lsls	r3, r3, #13
 8003482:	429a      	cmp	r2, r3
 8003484:	d10b      	bne.n	800349e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <UART_AdvFeatureConfig+0x160>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	@ (80034e8 <UART_AdvFeatureConfig+0x164>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }
}
 80034c0:	46c0      	nop			@ (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	ffff7fff 	.word	0xffff7fff
 80034cc:	fffdffff 	.word	0xfffdffff
 80034d0:	fffeffff 	.word	0xfffeffff
 80034d4:	fffbffff 	.word	0xfffbffff
 80034d8:	ffffefff 	.word	0xffffefff
 80034dc:	ffffdfff 	.word	0xffffdfff
 80034e0:	ffefffff 	.word	0xffefffff
 80034e4:	ff9fffff 	.word	0xff9fffff
 80034e8:	fff7ffff 	.word	0xfff7ffff

080034ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b092      	sub	sp, #72	@ 0x48
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2290      	movs	r2, #144	@ 0x90
 80034f8:	2100      	movs	r1, #0
 80034fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034fc:	f7fd feea 	bl	80012d4 <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	4013      	ands	r3, r2
 800350e:	2b08      	cmp	r3, #8
 8003510:	d12d      	bne.n	800356e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003514:	2280      	movs	r2, #128	@ 0x80
 8003516:	0391      	lsls	r1, r2, #14
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4a47      	ldr	r2, [pc, #284]	@ (8003638 <UART_CheckIdleState+0x14c>)
 800351c:	9200      	str	r2, [sp, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	f000 f88e 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d022      	beq.n	800356e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003532:	2301      	movs	r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2180      	movs	r1, #128	@ 0x80
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2288      	movs	r2, #136	@ 0x88
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2284      	movs	r2, #132	@ 0x84
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e060      	b.n	8003630 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	4013      	ands	r3, r2
 8003578:	2b04      	cmp	r3, #4
 800357a:	d146      	bne.n	800360a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	03d1      	lsls	r1, r2, #15
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4a2c      	ldr	r2, [pc, #176]	@ (8003638 <UART_CheckIdleState+0x14c>)
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	f000 f859 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d03b      	beq.n	800360a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003592:	f3ef 8310 	mrs	r3, PRIMASK
 8003596:	60fb      	str	r3, [r7, #12]
  return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800359a:	637b      	str	r3, [r7, #52]	@ 0x34
 800359c:	2301      	movs	r3, #1
 800359e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f383 8810 	msr	PRIMASK, r3
}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4922      	ldr	r1, [pc, #136]	@ (800363c <UART_CheckIdleState+0x150>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c4:	f3ef 8310 	mrs	r3, PRIMASK
 80035c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80035ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f383 8810 	msr	PRIMASK, r3
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	438a      	bics	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f383 8810 	msr	PRIMASK, r3
}
 80035f4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	228c      	movs	r2, #140	@ 0x8c
 80035fa:	2120      	movs	r1, #32
 80035fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2284      	movs	r2, #132	@ 0x84
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e012      	b.n	8003630 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2288      	movs	r2, #136	@ 0x88
 800360e:	2120      	movs	r1, #32
 8003610:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	228c      	movs	r2, #140	@ 0x8c
 8003616:	2120      	movs	r1, #32
 8003618:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2284      	movs	r2, #132	@ 0x84
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b010      	add	sp, #64	@ 0x40
 8003636:	bd80      	pop	{r7, pc}
 8003638:	01ffffff 	.word	0x01ffffff
 800363c:	fffffedf 	.word	0xfffffedf

08003640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	1dfb      	adds	r3, r7, #7
 800364e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	e051      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3301      	adds	r3, #1
 8003656:	d04e      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fd fe3c 	bl	80012d4 <HAL_GetTick>
 800365c:	0002      	movs	r2, r0
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e051      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2204      	movs	r2, #4
 800367a:	4013      	ands	r3, r2
 800367c:	d03b      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b80      	cmp	r3, #128	@ 0x80
 8003682:	d038      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b40      	cmp	r3, #64	@ 0x40
 8003688:	d035      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2208      	movs	r2, #8
 8003692:	4013      	ands	r3, r2
 8003694:	2b08      	cmp	r3, #8
 8003696:	d111      	bne.n	80036bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f83c 	bl	8003720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2290      	movs	r2, #144	@ 0x90
 80036ac:	2108      	movs	r1, #8
 80036ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2284      	movs	r2, #132	@ 0x84
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e02c      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	401a      	ands	r2, r3
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d112      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2280      	movs	r2, #128	@ 0x80
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f81f 	bl	8003720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2290      	movs	r2, #144	@ 0x90
 80036e6:	2120      	movs	r1, #32
 80036e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2284      	movs	r2, #132	@ 0x84
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e00f      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	425a      	negs	r2, r3
 8003706:	4153      	adcs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	001a      	movs	r2, r3
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d09e      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	@ 0x38
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	617b      	str	r3, [r7, #20]
  return(result);
 800372e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4926      	ldr	r1, [pc, #152]	@ (80037e4 <UART_EndRxTransfer+0xc4>)
 800374a:	400a      	ands	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	623b      	str	r3, [r7, #32]
  return(result);
 8003760:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	491b      	ldr	r1, [pc, #108]	@ (80037e8 <UART_EndRxTransfer+0xc8>)
 800377c:	400a      	ands	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d118      	bne.n	80037c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003794:	f3ef 8310 	mrs	r3, PRIMASK
 8003798:	60bb      	str	r3, [r7, #8]
  return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800379e:	2301      	movs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2110      	movs	r1, #16
 80037b6:	438a      	bics	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	228c      	movs	r2, #140	@ 0x8c
 80037ca:	2120      	movs	r1, #32
 80037cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b00e      	add	sp, #56	@ 0x38
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	fffffedf 	.word	0xfffffedf
 80037e8:	effffffe 	.word	0xeffffffe

080037ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2284      	movs	r2, #132	@ 0x84
 80037f8:	5c9b      	ldrb	r3, [r3, r2]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_UARTEx_DisableFifoMode+0x16>
 80037fe:	2302      	movs	r3, #2
 8003800:	e027      	b.n	8003852 <HAL_UARTEx_DisableFifoMode+0x66>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2284      	movs	r2, #132	@ 0x84
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2288      	movs	r2, #136	@ 0x88
 800380e:	2124      	movs	r1, #36	@ 0x24
 8003810:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2101      	movs	r1, #1
 8003826:	438a      	bics	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a0b      	ldr	r2, [pc, #44]	@ (800385c <HAL_UARTEx_DisableFifoMode+0x70>)
 800382e:	4013      	ands	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2288      	movs	r2, #136	@ 0x88
 8003844:	2120      	movs	r1, #32
 8003846:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2284      	movs	r2, #132	@ 0x84
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	dfffffff 	.word	0xdfffffff

08003860 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2284      	movs	r2, #132	@ 0x84
 800386e:	5c9b      	ldrb	r3, [r3, r2]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e02e      	b.n	80038d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2284      	movs	r2, #132	@ 0x84
 800387c:	2101      	movs	r1, #1
 800387e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2288      	movs	r2, #136	@ 0x88
 8003884:	2124      	movs	r1, #36	@ 0x24
 8003886:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2101      	movs	r1, #1
 800389c:	438a      	bics	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	08d9      	lsrs	r1, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f854 	bl	8003964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2288      	movs	r2, #136	@ 0x88
 80038c8:	2120      	movs	r1, #32
 80038ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2284      	movs	r2, #132	@ 0x84
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b004      	add	sp, #16
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2284      	movs	r2, #132	@ 0x84
 80038ee:	5c9b      	ldrb	r3, [r3, r2]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e02f      	b.n	8003958 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2284      	movs	r2, #132	@ 0x84
 80038fc:	2101      	movs	r1, #1
 80038fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2288      	movs	r2, #136	@ 0x88
 8003904:	2124      	movs	r1, #36	@ 0x24
 8003906:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	438a      	bics	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f813 	bl	8003964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2288      	movs	r2, #136	@ 0x88
 800394a:	2120      	movs	r1, #32
 800394c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2284      	movs	r2, #132	@ 0x84
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	f1ffffff 	.word	0xf1ffffff

08003964 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003970:	2b00      	cmp	r3, #0
 8003972:	d108      	bne.n	8003986 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	226a      	movs	r2, #106	@ 0x6a
 8003978:	2101      	movs	r1, #1
 800397a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2268      	movs	r2, #104	@ 0x68
 8003980:	2101      	movs	r1, #1
 8003982:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003984:	e043      	b.n	8003a0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003986:	260f      	movs	r6, #15
 8003988:	19bb      	adds	r3, r7, r6
 800398a:	2208      	movs	r2, #8
 800398c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800398e:	200e      	movs	r0, #14
 8003990:	183b      	adds	r3, r7, r0
 8003992:	2208      	movs	r2, #8
 8003994:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	0e5b      	lsrs	r3, r3, #25
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	240d      	movs	r4, #13
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	2107      	movs	r1, #7
 80039a6:	400a      	ands	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0f5b      	lsrs	r3, r3, #29
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	250c      	movs	r5, #12
 80039b6:	197b      	adds	r3, r7, r5
 80039b8:	2107      	movs	r1, #7
 80039ba:	400a      	ands	r2, r1
 80039bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	197a      	adds	r2, r7, r5
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	4914      	ldr	r1, [pc, #80]	@ (8003a18 <UARTEx_SetNbDataToProcess+0xb4>)
 80039c8:	5c8a      	ldrb	r2, [r1, r2]
 80039ca:	435a      	muls	r2, r3
 80039cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80039ce:	197b      	adds	r3, r7, r5
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <UARTEx_SetNbDataToProcess+0xb8>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039d6:	0019      	movs	r1, r3
 80039d8:	f7fc fc26 	bl	8000228 <__divsi3>
 80039dc:	0003      	movs	r3, r0
 80039de:	b299      	uxth	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	226a      	movs	r2, #106	@ 0x6a
 80039e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039e6:	19bb      	adds	r3, r7, r6
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	193a      	adds	r2, r7, r4
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	490a      	ldr	r1, [pc, #40]	@ (8003a18 <UARTEx_SetNbDataToProcess+0xb4>)
 80039f0:	5c8a      	ldrb	r2, [r1, r2]
 80039f2:	435a      	muls	r2, r3
 80039f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80039f6:	193b      	adds	r3, r7, r4
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <UARTEx_SetNbDataToProcess+0xb8>)
 80039fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039fe:	0019      	movs	r1, r3
 8003a00:	f7fc fc12 	bl	8000228 <__divsi3>
 8003a04:	0003      	movs	r3, r0
 8003a06:	b299      	uxth	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2268      	movs	r2, #104	@ 0x68
 8003a0c:	5299      	strh	r1, [r3, r2]
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b005      	add	sp, #20
 8003a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	080058d8 	.word	0x080058d8
 8003a1c:	080058e0 	.word	0x080058e0

08003a20 <siprintf>:
 8003a20:	b40e      	push	{r1, r2, r3}
 8003a22:	b500      	push	{lr}
 8003a24:	490b      	ldr	r1, [pc, #44]	@ (8003a54 <siprintf+0x34>)
 8003a26:	b09c      	sub	sp, #112	@ 0x70
 8003a28:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a2a:	9002      	str	r0, [sp, #8]
 8003a2c:	9006      	str	r0, [sp, #24]
 8003a2e:	9107      	str	r1, [sp, #28]
 8003a30:	9104      	str	r1, [sp, #16]
 8003a32:	4809      	ldr	r0, [pc, #36]	@ (8003a58 <siprintf+0x38>)
 8003a34:	4909      	ldr	r1, [pc, #36]	@ (8003a5c <siprintf+0x3c>)
 8003a36:	cb04      	ldmia	r3!, {r2}
 8003a38:	9105      	str	r1, [sp, #20]
 8003a3a:	6800      	ldr	r0, [r0, #0]
 8003a3c:	a902      	add	r1, sp, #8
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	f000 f9bc 	bl	8003dbc <_svfiprintf_r>
 8003a44:	2200      	movs	r2, #0
 8003a46:	9b02      	ldr	r3, [sp, #8]
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	b01c      	add	sp, #112	@ 0x70
 8003a4c:	bc08      	pop	{r3}
 8003a4e:	b003      	add	sp, #12
 8003a50:	4718      	bx	r3
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	7fffffff 	.word	0x7fffffff
 8003a58:	2000002c 	.word	0x2000002c
 8003a5c:	ffff0208 	.word	0xffff0208

08003a60 <memmove>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4288      	cmp	r0, r1
 8003a64:	d806      	bhi.n	8003a74 <memmove+0x14>
 8003a66:	2300      	movs	r3, #0
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d008      	beq.n	8003a7e <memmove+0x1e>
 8003a6c:	5ccc      	ldrb	r4, [r1, r3]
 8003a6e:	54c4      	strb	r4, [r0, r3]
 8003a70:	3301      	adds	r3, #1
 8003a72:	e7f9      	b.n	8003a68 <memmove+0x8>
 8003a74:	188b      	adds	r3, r1, r2
 8003a76:	4298      	cmp	r0, r3
 8003a78:	d2f5      	bcs.n	8003a66 <memmove+0x6>
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	d200      	bcs.n	8003a80 <memmove+0x20>
 8003a7e:	bd10      	pop	{r4, pc}
 8003a80:	5c8b      	ldrb	r3, [r1, r2]
 8003a82:	5483      	strb	r3, [r0, r2]
 8003a84:	e7f9      	b.n	8003a7a <memmove+0x1a>

08003a86 <memset>:
 8003a86:	0003      	movs	r3, r0
 8003a88:	1882      	adds	r2, r0, r2
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d100      	bne.n	8003a90 <memset+0xa>
 8003a8e:	4770      	bx	lr
 8003a90:	7019      	strb	r1, [r3, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	e7f9      	b.n	8003a8a <memset+0x4>
	...

08003a98 <__errno>:
 8003a98:	4b01      	ldr	r3, [pc, #4]	@ (8003aa0 <__errno+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	2000002c 	.word	0x2000002c

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4c0c      	ldr	r4, [pc, #48]	@ (8003adc <__libc_init_array+0x38>)
 8003aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	f000 fc51 	bl	800435c <_init>
 8003aba:	4c0a      	ldr	r4, [pc, #40]	@ (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4d0a      	ldr	r5, [pc, #40]	@ (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	00b3      	lsls	r3, r6, #2
 8003aca:	58eb      	ldr	r3, [r5, r3]
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	00b3      	lsls	r3, r6, #2
 8003ad4:	58eb      	ldr	r3, [r5, r3]
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	0800591c 	.word	0x0800591c
 8003ae0:	0800591c 	.word	0x0800591c
 8003ae4:	08005920 	.word	0x08005920
 8003ae8:	0800591c 	.word	0x0800591c

08003aec <__retarget_lock_acquire_recursive>:
 8003aec:	4770      	bx	lr

08003aee <__retarget_lock_release_recursive>:
 8003aee:	4770      	bx	lr

08003af0 <memcpy>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b510      	push	{r4, lr}
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d100      	bne.n	8003afa <memcpy+0xa>
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	5ccc      	ldrb	r4, [r1, r3]
 8003afc:	54c4      	strb	r4, [r0, r3]
 8003afe:	3301      	adds	r3, #1
 8003b00:	e7f8      	b.n	8003af4 <memcpy+0x4>
	...

08003b04 <_free_r>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	0005      	movs	r5, r0
 8003b08:	1e0c      	subs	r4, r1, #0
 8003b0a:	d010      	beq.n	8003b2e <_free_r+0x2a>
 8003b0c:	3c04      	subs	r4, #4
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da00      	bge.n	8003b16 <_free_r+0x12>
 8003b14:	18e4      	adds	r4, r4, r3
 8003b16:	0028      	movs	r0, r5
 8003b18:	f000 f8e0 	bl	8003cdc <__malloc_lock>
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <_free_r+0x90>)
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <_free_r+0x2c>
 8003b24:	6063      	str	r3, [r4, #4]
 8003b26:	6014      	str	r4, [r2, #0]
 8003b28:	0028      	movs	r0, r5
 8003b2a:	f000 f8df 	bl	8003cec <__malloc_unlock>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d908      	bls.n	8003b46 <_free_r+0x42>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	1821      	adds	r1, r4, r0
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	d1f3      	bne.n	8003b24 <_free_r+0x20>
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	1809      	adds	r1, r1, r0
 8003b42:	6021      	str	r1, [r4, #0]
 8003b44:	e7ee      	b.n	8003b24 <_free_r+0x20>
 8003b46:	001a      	movs	r2, r3
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <_free_r+0x4e>
 8003b4e:	42a3      	cmp	r3, r4
 8003b50:	d9f9      	bls.n	8003b46 <_free_r+0x42>
 8003b52:	6811      	ldr	r1, [r2, #0]
 8003b54:	1850      	adds	r0, r2, r1
 8003b56:	42a0      	cmp	r0, r4
 8003b58:	d10b      	bne.n	8003b72 <_free_r+0x6e>
 8003b5a:	6820      	ldr	r0, [r4, #0]
 8003b5c:	1809      	adds	r1, r1, r0
 8003b5e:	1850      	adds	r0, r2, r1
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	4283      	cmp	r3, r0
 8003b64:	d1e0      	bne.n	8003b28 <_free_r+0x24>
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	1841      	adds	r1, r0, r1
 8003b6c:	6011      	str	r1, [r2, #0]
 8003b6e:	6053      	str	r3, [r2, #4]
 8003b70:	e7da      	b.n	8003b28 <_free_r+0x24>
 8003b72:	42a0      	cmp	r0, r4
 8003b74:	d902      	bls.n	8003b7c <_free_r+0x78>
 8003b76:	230c      	movs	r3, #12
 8003b78:	602b      	str	r3, [r5, #0]
 8003b7a:	e7d5      	b.n	8003b28 <_free_r+0x24>
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	1821      	adds	r1, r4, r0
 8003b80:	428b      	cmp	r3, r1
 8003b82:	d103      	bne.n	8003b8c <_free_r+0x88>
 8003b84:	6819      	ldr	r1, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	1809      	adds	r1, r1, r0
 8003b8a:	6021      	str	r1, [r4, #0]
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	6054      	str	r4, [r2, #4]
 8003b90:	e7ca      	b.n	8003b28 <_free_r+0x24>
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	2000072c 	.word	0x2000072c

08003b98 <sbrk_aligned>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003bd8 <sbrk_aligned+0x40>)
 8003b9c:	000d      	movs	r5, r1
 8003b9e:	6831      	ldr	r1, [r6, #0]
 8003ba0:	0004      	movs	r4, r0
 8003ba2:	2900      	cmp	r1, #0
 8003ba4:	d102      	bne.n	8003bac <sbrk_aligned+0x14>
 8003ba6:	f000 fb85 	bl	80042b4 <_sbrk_r>
 8003baa:	6030      	str	r0, [r6, #0]
 8003bac:	0029      	movs	r1, r5
 8003bae:	0020      	movs	r0, r4
 8003bb0:	f000 fb80 	bl	80042b4 <_sbrk_r>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d103      	bne.n	8003bc0 <sbrk_aligned+0x28>
 8003bb8:	2501      	movs	r5, #1
 8003bba:	426d      	negs	r5, r5
 8003bbc:	0028      	movs	r0, r5
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	1cc5      	adds	r5, r0, #3
 8003bc4:	439d      	bics	r5, r3
 8003bc6:	42a8      	cmp	r0, r5
 8003bc8:	d0f8      	beq.n	8003bbc <sbrk_aligned+0x24>
 8003bca:	1a29      	subs	r1, r5, r0
 8003bcc:	0020      	movs	r0, r4
 8003bce:	f000 fb71 	bl	80042b4 <_sbrk_r>
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d1f2      	bne.n	8003bbc <sbrk_aligned+0x24>
 8003bd6:	e7ef      	b.n	8003bb8 <sbrk_aligned+0x20>
 8003bd8:	20000728 	.word	0x20000728

08003bdc <_malloc_r>:
 8003bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bde:	2203      	movs	r2, #3
 8003be0:	1ccb      	adds	r3, r1, #3
 8003be2:	4393      	bics	r3, r2
 8003be4:	3308      	adds	r3, #8
 8003be6:	0005      	movs	r5, r0
 8003be8:	001f      	movs	r7, r3
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d234      	bcs.n	8003c58 <_malloc_r+0x7c>
 8003bee:	270c      	movs	r7, #12
 8003bf0:	42b9      	cmp	r1, r7
 8003bf2:	d833      	bhi.n	8003c5c <_malloc_r+0x80>
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	f000 f871 	bl	8003cdc <__malloc_lock>
 8003bfa:	4e37      	ldr	r6, [pc, #220]	@ (8003cd8 <_malloc_r+0xfc>)
 8003bfc:	6833      	ldr	r3, [r6, #0]
 8003bfe:	001c      	movs	r4, r3
 8003c00:	2c00      	cmp	r4, #0
 8003c02:	d12f      	bne.n	8003c64 <_malloc_r+0x88>
 8003c04:	0039      	movs	r1, r7
 8003c06:	0028      	movs	r0, r5
 8003c08:	f7ff ffc6 	bl	8003b98 <sbrk_aligned>
 8003c0c:	0004      	movs	r4, r0
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d15f      	bne.n	8003cd2 <_malloc_r+0xf6>
 8003c12:	6834      	ldr	r4, [r6, #0]
 8003c14:	9400      	str	r4, [sp, #0]
 8003c16:	9b00      	ldr	r3, [sp, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d14a      	bne.n	8003cb2 <_malloc_r+0xd6>
 8003c1c:	2c00      	cmp	r4, #0
 8003c1e:	d052      	beq.n	8003cc6 <_malloc_r+0xea>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	0028      	movs	r0, r5
 8003c24:	18e3      	adds	r3, r4, r3
 8003c26:	9900      	ldr	r1, [sp, #0]
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f000 fb43 	bl	80042b4 <_sbrk_r>
 8003c2e:	9b01      	ldr	r3, [sp, #4]
 8003c30:	4283      	cmp	r3, r0
 8003c32:	d148      	bne.n	8003cc6 <_malloc_r+0xea>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	0028      	movs	r0, r5
 8003c38:	1aff      	subs	r7, r7, r3
 8003c3a:	0039      	movs	r1, r7
 8003c3c:	f7ff ffac 	bl	8003b98 <sbrk_aligned>
 8003c40:	3001      	adds	r0, #1
 8003c42:	d040      	beq.n	8003cc6 <_malloc_r+0xea>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	6833      	ldr	r3, [r6, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	2a00      	cmp	r2, #0
 8003c50:	d133      	bne.n	8003cba <_malloc_r+0xde>
 8003c52:	9b00      	ldr	r3, [sp, #0]
 8003c54:	6033      	str	r3, [r6, #0]
 8003c56:	e019      	b.n	8003c8c <_malloc_r+0xb0>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dac9      	bge.n	8003bf0 <_malloc_r+0x14>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	2000      	movs	r0, #0
 8003c62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c64:	6821      	ldr	r1, [r4, #0]
 8003c66:	1bc9      	subs	r1, r1, r7
 8003c68:	d420      	bmi.n	8003cac <_malloc_r+0xd0>
 8003c6a:	290b      	cmp	r1, #11
 8003c6c:	d90a      	bls.n	8003c84 <_malloc_r+0xa8>
 8003c6e:	19e2      	adds	r2, r4, r7
 8003c70:	6027      	str	r7, [r4, #0]
 8003c72:	42a3      	cmp	r3, r4
 8003c74:	d104      	bne.n	8003c80 <_malloc_r+0xa4>
 8003c76:	6032      	str	r2, [r6, #0]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	6011      	str	r1, [r2, #0]
 8003c7c:	6053      	str	r3, [r2, #4]
 8003c7e:	e005      	b.n	8003c8c <_malloc_r+0xb0>
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e7f9      	b.n	8003c78 <_malloc_r+0x9c>
 8003c84:	6862      	ldr	r2, [r4, #4]
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	d10e      	bne.n	8003ca8 <_malloc_r+0xcc>
 8003c8a:	6032      	str	r2, [r6, #0]
 8003c8c:	0028      	movs	r0, r5
 8003c8e:	f000 f82d 	bl	8003cec <__malloc_unlock>
 8003c92:	0020      	movs	r0, r4
 8003c94:	2207      	movs	r2, #7
 8003c96:	300b      	adds	r0, #11
 8003c98:	1d23      	adds	r3, r4, #4
 8003c9a:	4390      	bics	r0, r2
 8003c9c:	1ac2      	subs	r2, r0, r3
 8003c9e:	4298      	cmp	r0, r3
 8003ca0:	d0df      	beq.n	8003c62 <_malloc_r+0x86>
 8003ca2:	1a1b      	subs	r3, r3, r0
 8003ca4:	50a3      	str	r3, [r4, r2]
 8003ca6:	e7dc      	b.n	8003c62 <_malloc_r+0x86>
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	e7ef      	b.n	8003c8c <_malloc_r+0xb0>
 8003cac:	0023      	movs	r3, r4
 8003cae:	6864      	ldr	r4, [r4, #4]
 8003cb0:	e7a6      	b.n	8003c00 <_malloc_r+0x24>
 8003cb2:	9c00      	ldr	r4, [sp, #0]
 8003cb4:	6863      	ldr	r3, [r4, #4]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	e7ad      	b.n	8003c16 <_malloc_r+0x3a>
 8003cba:	001a      	movs	r2, r3
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	d1fb      	bne.n	8003cba <_malloc_r+0xde>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e7da      	b.n	8003c7c <_malloc_r+0xa0>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	0028      	movs	r0, r5
 8003cca:	602b      	str	r3, [r5, #0]
 8003ccc:	f000 f80e 	bl	8003cec <__malloc_unlock>
 8003cd0:	e7c6      	b.n	8003c60 <_malloc_r+0x84>
 8003cd2:	6007      	str	r7, [r0, #0]
 8003cd4:	e7da      	b.n	8003c8c <_malloc_r+0xb0>
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	2000072c 	.word	0x2000072c

08003cdc <__malloc_lock>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4802      	ldr	r0, [pc, #8]	@ (8003ce8 <__malloc_lock+0xc>)
 8003ce0:	f7ff ff04 	bl	8003aec <__retarget_lock_acquire_recursive>
 8003ce4:	bd10      	pop	{r4, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	20000724 	.word	0x20000724

08003cec <__malloc_unlock>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4802      	ldr	r0, [pc, #8]	@ (8003cf8 <__malloc_unlock+0xc>)
 8003cf0:	f7ff fefd 	bl	8003aee <__retarget_lock_release_recursive>
 8003cf4:	bd10      	pop	{r4, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	20000724 	.word	0x20000724

08003cfc <__ssputs_r>:
 8003cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfe:	688e      	ldr	r6, [r1, #8]
 8003d00:	b085      	sub	sp, #20
 8003d02:	001f      	movs	r7, r3
 8003d04:	000c      	movs	r4, r1
 8003d06:	680b      	ldr	r3, [r1, #0]
 8003d08:	9002      	str	r0, [sp, #8]
 8003d0a:	9203      	str	r2, [sp, #12]
 8003d0c:	42be      	cmp	r6, r7
 8003d0e:	d830      	bhi.n	8003d72 <__ssputs_r+0x76>
 8003d10:	210c      	movs	r1, #12
 8003d12:	5e62      	ldrsh	r2, [r4, r1]
 8003d14:	2190      	movs	r1, #144	@ 0x90
 8003d16:	00c9      	lsls	r1, r1, #3
 8003d18:	420a      	tst	r2, r1
 8003d1a:	d028      	beq.n	8003d6e <__ssputs_r+0x72>
 8003d1c:	2003      	movs	r0, #3
 8003d1e:	6921      	ldr	r1, [r4, #16]
 8003d20:	1a5b      	subs	r3, r3, r1
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	6963      	ldr	r3, [r4, #20]
 8003d26:	4343      	muls	r3, r0
 8003d28:	9801      	ldr	r0, [sp, #4]
 8003d2a:	0fdd      	lsrs	r5, r3, #31
 8003d2c:	18ed      	adds	r5, r5, r3
 8003d2e:	1c7b      	adds	r3, r7, #1
 8003d30:	181b      	adds	r3, r3, r0
 8003d32:	106d      	asrs	r5, r5, #1
 8003d34:	42ab      	cmp	r3, r5
 8003d36:	d900      	bls.n	8003d3a <__ssputs_r+0x3e>
 8003d38:	001d      	movs	r5, r3
 8003d3a:	0552      	lsls	r2, r2, #21
 8003d3c:	d528      	bpl.n	8003d90 <__ssputs_r+0x94>
 8003d3e:	0029      	movs	r1, r5
 8003d40:	9802      	ldr	r0, [sp, #8]
 8003d42:	f7ff ff4b 	bl	8003bdc <_malloc_r>
 8003d46:	1e06      	subs	r6, r0, #0
 8003d48:	d02c      	beq.n	8003da4 <__ssputs_r+0xa8>
 8003d4a:	9a01      	ldr	r2, [sp, #4]
 8003d4c:	6921      	ldr	r1, [r4, #16]
 8003d4e:	f7ff fecf 	bl	8003af0 <memcpy>
 8003d52:	89a2      	ldrh	r2, [r4, #12]
 8003d54:	4b18      	ldr	r3, [pc, #96]	@ (8003db8 <__ssputs_r+0xbc>)
 8003d56:	401a      	ands	r2, r3
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	9b01      	ldr	r3, [sp, #4]
 8003d60:	6126      	str	r6, [r4, #16]
 8003d62:	18f6      	adds	r6, r6, r3
 8003d64:	6026      	str	r6, [r4, #0]
 8003d66:	003e      	movs	r6, r7
 8003d68:	6165      	str	r5, [r4, #20]
 8003d6a:	1aed      	subs	r5, r5, r3
 8003d6c:	60a5      	str	r5, [r4, #8]
 8003d6e:	42be      	cmp	r6, r7
 8003d70:	d900      	bls.n	8003d74 <__ssputs_r+0x78>
 8003d72:	003e      	movs	r6, r7
 8003d74:	0032      	movs	r2, r6
 8003d76:	9903      	ldr	r1, [sp, #12]
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	f7ff fe71 	bl	8003a60 <memmove>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	68a3      	ldr	r3, [r4, #8]
 8003d82:	1b9b      	subs	r3, r3, r6
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	199b      	adds	r3, r3, r6
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	b005      	add	sp, #20
 8003d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d90:	002a      	movs	r2, r5
 8003d92:	9802      	ldr	r0, [sp, #8]
 8003d94:	f000 faab 	bl	80042ee <_realloc_r>
 8003d98:	1e06      	subs	r6, r0, #0
 8003d9a:	d1e0      	bne.n	8003d5e <__ssputs_r+0x62>
 8003d9c:	6921      	ldr	r1, [r4, #16]
 8003d9e:	9802      	ldr	r0, [sp, #8]
 8003da0:	f7ff feb0 	bl	8003b04 <_free_r>
 8003da4:	230c      	movs	r3, #12
 8003da6:	2001      	movs	r0, #1
 8003da8:	9a02      	ldr	r2, [sp, #8]
 8003daa:	4240      	negs	r0, r0
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	89a2      	ldrh	r2, [r4, #12]
 8003db0:	3334      	adds	r3, #52	@ 0x34
 8003db2:	4313      	orrs	r3, r2
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	e7e9      	b.n	8003d8c <__ssputs_r+0x90>
 8003db8:	fffffb7f 	.word	0xfffffb7f

08003dbc <_svfiprintf_r>:
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b0a1      	sub	sp, #132	@ 0x84
 8003dc0:	9003      	str	r0, [sp, #12]
 8003dc2:	001d      	movs	r5, r3
 8003dc4:	898b      	ldrh	r3, [r1, #12]
 8003dc6:	000f      	movs	r7, r1
 8003dc8:	0016      	movs	r6, r2
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	d511      	bpl.n	8003df2 <_svfiprintf_r+0x36>
 8003dce:	690b      	ldr	r3, [r1, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10e      	bne.n	8003df2 <_svfiprintf_r+0x36>
 8003dd4:	2140      	movs	r1, #64	@ 0x40
 8003dd6:	f7ff ff01 	bl	8003bdc <_malloc_r>
 8003dda:	6038      	str	r0, [r7, #0]
 8003ddc:	6138      	str	r0, [r7, #16]
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d105      	bne.n	8003dee <_svfiprintf_r+0x32>
 8003de2:	230c      	movs	r3, #12
 8003de4:	9a03      	ldr	r2, [sp, #12]
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	2001      	movs	r0, #1
 8003dea:	4240      	negs	r0, r0
 8003dec:	e0cf      	b.n	8003f8e <_svfiprintf_r+0x1d2>
 8003dee:	2340      	movs	r3, #64	@ 0x40
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	2300      	movs	r3, #0
 8003df4:	ac08      	add	r4, sp, #32
 8003df6:	6163      	str	r3, [r4, #20]
 8003df8:	3320      	adds	r3, #32
 8003dfa:	7663      	strb	r3, [r4, #25]
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	76a3      	strb	r3, [r4, #26]
 8003e00:	9507      	str	r5, [sp, #28]
 8003e02:	0035      	movs	r5, r6
 8003e04:	782b      	ldrb	r3, [r5, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <_svfiprintf_r+0x52>
 8003e0a:	2b25      	cmp	r3, #37	@ 0x25
 8003e0c:	d148      	bne.n	8003ea0 <_svfiprintf_r+0xe4>
 8003e0e:	1bab      	subs	r3, r5, r6
 8003e10:	9305      	str	r3, [sp, #20]
 8003e12:	42b5      	cmp	r5, r6
 8003e14:	d00b      	beq.n	8003e2e <_svfiprintf_r+0x72>
 8003e16:	0032      	movs	r2, r6
 8003e18:	0039      	movs	r1, r7
 8003e1a:	9803      	ldr	r0, [sp, #12]
 8003e1c:	f7ff ff6e 	bl	8003cfc <__ssputs_r>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d100      	bne.n	8003e26 <_svfiprintf_r+0x6a>
 8003e24:	e0ae      	b.n	8003f84 <_svfiprintf_r+0x1c8>
 8003e26:	6963      	ldr	r3, [r4, #20]
 8003e28:	9a05      	ldr	r2, [sp, #20]
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	6163      	str	r3, [r4, #20]
 8003e2e:	782b      	ldrb	r3, [r5, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d100      	bne.n	8003e36 <_svfiprintf_r+0x7a>
 8003e34:	e0a6      	b.n	8003f84 <_svfiprintf_r+0x1c8>
 8003e36:	2201      	movs	r2, #1
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4252      	negs	r2, r2
 8003e3c:	6062      	str	r2, [r4, #4]
 8003e3e:	a904      	add	r1, sp, #16
 8003e40:	3254      	adds	r2, #84	@ 0x54
 8003e42:	1852      	adds	r2, r2, r1
 8003e44:	1c6e      	adds	r6, r5, #1
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	60e3      	str	r3, [r4, #12]
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	7013      	strb	r3, [r2, #0]
 8003e4e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003e50:	4b54      	ldr	r3, [pc, #336]	@ (8003fa4 <_svfiprintf_r+0x1e8>)
 8003e52:	2205      	movs	r2, #5
 8003e54:	0018      	movs	r0, r3
 8003e56:	7831      	ldrb	r1, [r6, #0]
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	f000 fa3d 	bl	80042d8 <memchr>
 8003e5e:	1c75      	adds	r5, r6, #1
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d11f      	bne.n	8003ea4 <_svfiprintf_r+0xe8>
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	06d3      	lsls	r3, r2, #27
 8003e68:	d504      	bpl.n	8003e74 <_svfiprintf_r+0xb8>
 8003e6a:	2353      	movs	r3, #83	@ 0x53
 8003e6c:	a904      	add	r1, sp, #16
 8003e6e:	185b      	adds	r3, r3, r1
 8003e70:	2120      	movs	r1, #32
 8003e72:	7019      	strb	r1, [r3, #0]
 8003e74:	0713      	lsls	r3, r2, #28
 8003e76:	d504      	bpl.n	8003e82 <_svfiprintf_r+0xc6>
 8003e78:	2353      	movs	r3, #83	@ 0x53
 8003e7a:	a904      	add	r1, sp, #16
 8003e7c:	185b      	adds	r3, r3, r1
 8003e7e:	212b      	movs	r1, #43	@ 0x2b
 8003e80:	7019      	strb	r1, [r3, #0]
 8003e82:	7833      	ldrb	r3, [r6, #0]
 8003e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e86:	d016      	beq.n	8003eb6 <_svfiprintf_r+0xfa>
 8003e88:	0035      	movs	r5, r6
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	200a      	movs	r0, #10
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	782a      	ldrb	r2, [r5, #0]
 8003e92:	1c6e      	adds	r6, r5, #1
 8003e94:	3a30      	subs	r2, #48	@ 0x30
 8003e96:	2a09      	cmp	r2, #9
 8003e98:	d950      	bls.n	8003f3c <_svfiprintf_r+0x180>
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	d111      	bne.n	8003ec2 <_svfiprintf_r+0x106>
 8003e9e:	e017      	b.n	8003ed0 <_svfiprintf_r+0x114>
 8003ea0:	3501      	adds	r5, #1
 8003ea2:	e7af      	b.n	8003e04 <_svfiprintf_r+0x48>
 8003ea4:	9b05      	ldr	r3, [sp, #20]
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	1ac0      	subs	r0, r0, r3
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4083      	lsls	r3, r0
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	002e      	movs	r6, r5
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	e7cc      	b.n	8003e50 <_svfiprintf_r+0x94>
 8003eb6:	9b07      	ldr	r3, [sp, #28]
 8003eb8:	1d19      	adds	r1, r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	9107      	str	r1, [sp, #28]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db01      	blt.n	8003ec6 <_svfiprintf_r+0x10a>
 8003ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ec4:	e004      	b.n	8003ed0 <_svfiprintf_r+0x114>
 8003ec6:	425b      	negs	r3, r3
 8003ec8:	60e3      	str	r3, [r4, #12]
 8003eca:	2302      	movs	r3, #2
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	782b      	ldrb	r3, [r5, #0]
 8003ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ed4:	d10c      	bne.n	8003ef0 <_svfiprintf_r+0x134>
 8003ed6:	786b      	ldrb	r3, [r5, #1]
 8003ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eda:	d134      	bne.n	8003f46 <_svfiprintf_r+0x18a>
 8003edc:	9b07      	ldr	r3, [sp, #28]
 8003ede:	3502      	adds	r5, #2
 8003ee0:	1d1a      	adds	r2, r3, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	9207      	str	r2, [sp, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da01      	bge.n	8003eee <_svfiprintf_r+0x132>
 8003eea:	2301      	movs	r3, #1
 8003eec:	425b      	negs	r3, r3
 8003eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef0:	4e2d      	ldr	r6, [pc, #180]	@ (8003fa8 <_svfiprintf_r+0x1ec>)
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	0030      	movs	r0, r6
 8003ef6:	7829      	ldrb	r1, [r5, #0]
 8003ef8:	f000 f9ee 	bl	80042d8 <memchr>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d006      	beq.n	8003f0e <_svfiprintf_r+0x152>
 8003f00:	2340      	movs	r3, #64	@ 0x40
 8003f02:	1b80      	subs	r0, r0, r6
 8003f04:	4083      	lsls	r3, r0
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	3501      	adds	r5, #1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	7829      	ldrb	r1, [r5, #0]
 8003f10:	2206      	movs	r2, #6
 8003f12:	4826      	ldr	r0, [pc, #152]	@ (8003fac <_svfiprintf_r+0x1f0>)
 8003f14:	1c6e      	adds	r6, r5, #1
 8003f16:	7621      	strb	r1, [r4, #24]
 8003f18:	f000 f9de 	bl	80042d8 <memchr>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d038      	beq.n	8003f92 <_svfiprintf_r+0x1d6>
 8003f20:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <_svfiprintf_r+0x1f4>)
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d122      	bne.n	8003f6c <_svfiprintf_r+0x1b0>
 8003f26:	2207      	movs	r2, #7
 8003f28:	9b07      	ldr	r3, [sp, #28]
 8003f2a:	3307      	adds	r3, #7
 8003f2c:	4393      	bics	r3, r2
 8003f2e:	3308      	adds	r3, #8
 8003f30:	9307      	str	r3, [sp, #28]
 8003f32:	6963      	ldr	r3, [r4, #20]
 8003f34:	9a04      	ldr	r2, [sp, #16]
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	6163      	str	r3, [r4, #20]
 8003f3a:	e762      	b.n	8003e02 <_svfiprintf_r+0x46>
 8003f3c:	4343      	muls	r3, r0
 8003f3e:	0035      	movs	r5, r6
 8003f40:	2101      	movs	r1, #1
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	e7a4      	b.n	8003e90 <_svfiprintf_r+0xd4>
 8003f46:	2300      	movs	r3, #0
 8003f48:	200a      	movs	r0, #10
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	3501      	adds	r5, #1
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	782a      	ldrb	r2, [r5, #0]
 8003f52:	1c6e      	adds	r6, r5, #1
 8003f54:	3a30      	subs	r2, #48	@ 0x30
 8003f56:	2a09      	cmp	r2, #9
 8003f58:	d903      	bls.n	8003f62 <_svfiprintf_r+0x1a6>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0c8      	beq.n	8003ef0 <_svfiprintf_r+0x134>
 8003f5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f60:	e7c6      	b.n	8003ef0 <_svfiprintf_r+0x134>
 8003f62:	4341      	muls	r1, r0
 8003f64:	0035      	movs	r5, r6
 8003f66:	2301      	movs	r3, #1
 8003f68:	1889      	adds	r1, r1, r2
 8003f6a:	e7f1      	b.n	8003f50 <_svfiprintf_r+0x194>
 8003f6c:	aa07      	add	r2, sp, #28
 8003f6e:	9200      	str	r2, [sp, #0]
 8003f70:	0021      	movs	r1, r4
 8003f72:	003a      	movs	r2, r7
 8003f74:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <_svfiprintf_r+0x1f8>)
 8003f76:	9803      	ldr	r0, [sp, #12]
 8003f78:	e000      	b.n	8003f7c <_svfiprintf_r+0x1c0>
 8003f7a:	bf00      	nop
 8003f7c:	9004      	str	r0, [sp, #16]
 8003f7e:	9b04      	ldr	r3, [sp, #16]
 8003f80:	3301      	adds	r3, #1
 8003f82:	d1d6      	bne.n	8003f32 <_svfiprintf_r+0x176>
 8003f84:	89bb      	ldrh	r3, [r7, #12]
 8003f86:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003f88:	065b      	lsls	r3, r3, #25
 8003f8a:	d500      	bpl.n	8003f8e <_svfiprintf_r+0x1d2>
 8003f8c:	e72c      	b.n	8003de8 <_svfiprintf_r+0x2c>
 8003f8e:	b021      	add	sp, #132	@ 0x84
 8003f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f92:	aa07      	add	r2, sp, #28
 8003f94:	9200      	str	r2, [sp, #0]
 8003f96:	0021      	movs	r1, r4
 8003f98:	003a      	movs	r2, r7
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <_svfiprintf_r+0x1f8>)
 8003f9c:	9803      	ldr	r0, [sp, #12]
 8003f9e:	f000 f87b 	bl	8004098 <_printf_i>
 8003fa2:	e7eb      	b.n	8003f7c <_svfiprintf_r+0x1c0>
 8003fa4:	080058e8 	.word	0x080058e8
 8003fa8:	080058ee 	.word	0x080058ee
 8003fac:	080058f2 	.word	0x080058f2
 8003fb0:	00000000 	.word	0x00000000
 8003fb4:	08003cfd 	.word	0x08003cfd

08003fb8 <_printf_common>:
 8003fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fba:	0016      	movs	r6, r2
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	688a      	ldr	r2, [r1, #8]
 8003fc0:	690b      	ldr	r3, [r1, #16]
 8003fc2:	000c      	movs	r4, r1
 8003fc4:	9000      	str	r0, [sp, #0]
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	da00      	bge.n	8003fcc <_printf_common+0x14>
 8003fca:	0013      	movs	r3, r2
 8003fcc:	0022      	movs	r2, r4
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	3243      	adds	r2, #67	@ 0x43
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	d001      	beq.n	8003fdc <_printf_common+0x24>
 8003fd8:	3301      	adds	r3, #1
 8003fda:	6033      	str	r3, [r6, #0]
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	069b      	lsls	r3, r3, #26
 8003fe0:	d502      	bpl.n	8003fe8 <_printf_common+0x30>
 8003fe2:	6833      	ldr	r3, [r6, #0]
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	6033      	str	r3, [r6, #0]
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	2306      	movs	r3, #6
 8003fec:	0015      	movs	r5, r2
 8003fee:	401d      	ands	r5, r3
 8003ff0:	421a      	tst	r2, r3
 8003ff2:	d027      	beq.n	8004044 <_printf_common+0x8c>
 8003ff4:	0023      	movs	r3, r4
 8003ff6:	3343      	adds	r3, #67	@ 0x43
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	1e5a      	subs	r2, r3, #1
 8003ffc:	4193      	sbcs	r3, r2
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	0692      	lsls	r2, r2, #26
 8004002:	d430      	bmi.n	8004066 <_printf_common+0xae>
 8004004:	0022      	movs	r2, r4
 8004006:	9901      	ldr	r1, [sp, #4]
 8004008:	9800      	ldr	r0, [sp, #0]
 800400a:	9d08      	ldr	r5, [sp, #32]
 800400c:	3243      	adds	r2, #67	@ 0x43
 800400e:	47a8      	blx	r5
 8004010:	3001      	adds	r0, #1
 8004012:	d025      	beq.n	8004060 <_printf_common+0xa8>
 8004014:	2206      	movs	r2, #6
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	2500      	movs	r5, #0
 800401a:	4013      	ands	r3, r2
 800401c:	2b04      	cmp	r3, #4
 800401e:	d105      	bne.n	800402c <_printf_common+0x74>
 8004020:	6833      	ldr	r3, [r6, #0]
 8004022:	68e5      	ldr	r5, [r4, #12]
 8004024:	1aed      	subs	r5, r5, r3
 8004026:	43eb      	mvns	r3, r5
 8004028:	17db      	asrs	r3, r3, #31
 800402a:	401d      	ands	r5, r3
 800402c:	68a3      	ldr	r3, [r4, #8]
 800402e:	6922      	ldr	r2, [r4, #16]
 8004030:	4293      	cmp	r3, r2
 8004032:	dd01      	ble.n	8004038 <_printf_common+0x80>
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	18ed      	adds	r5, r5, r3
 8004038:	2600      	movs	r6, #0
 800403a:	42b5      	cmp	r5, r6
 800403c:	d120      	bne.n	8004080 <_printf_common+0xc8>
 800403e:	2000      	movs	r0, #0
 8004040:	e010      	b.n	8004064 <_printf_common+0xac>
 8004042:	3501      	adds	r5, #1
 8004044:	68e3      	ldr	r3, [r4, #12]
 8004046:	6832      	ldr	r2, [r6, #0]
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	42ab      	cmp	r3, r5
 800404c:	ddd2      	ble.n	8003ff4 <_printf_common+0x3c>
 800404e:	0022      	movs	r2, r4
 8004050:	2301      	movs	r3, #1
 8004052:	9901      	ldr	r1, [sp, #4]
 8004054:	9800      	ldr	r0, [sp, #0]
 8004056:	9f08      	ldr	r7, [sp, #32]
 8004058:	3219      	adds	r2, #25
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	d1f0      	bne.n	8004042 <_printf_common+0x8a>
 8004060:	2001      	movs	r0, #1
 8004062:	4240      	negs	r0, r0
 8004064:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004066:	2030      	movs	r0, #48	@ 0x30
 8004068:	18e1      	adds	r1, r4, r3
 800406a:	3143      	adds	r1, #67	@ 0x43
 800406c:	7008      	strb	r0, [r1, #0]
 800406e:	0021      	movs	r1, r4
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	3145      	adds	r1, #69	@ 0x45
 8004074:	7809      	ldrb	r1, [r1, #0]
 8004076:	18a2      	adds	r2, r4, r2
 8004078:	3243      	adds	r2, #67	@ 0x43
 800407a:	3302      	adds	r3, #2
 800407c:	7011      	strb	r1, [r2, #0]
 800407e:	e7c1      	b.n	8004004 <_printf_common+0x4c>
 8004080:	0022      	movs	r2, r4
 8004082:	2301      	movs	r3, #1
 8004084:	9901      	ldr	r1, [sp, #4]
 8004086:	9800      	ldr	r0, [sp, #0]
 8004088:	9f08      	ldr	r7, [sp, #32]
 800408a:	321a      	adds	r2, #26
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	d0e6      	beq.n	8004060 <_printf_common+0xa8>
 8004092:	3601      	adds	r6, #1
 8004094:	e7d1      	b.n	800403a <_printf_common+0x82>
	...

08004098 <_printf_i>:
 8004098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409a:	b08b      	sub	sp, #44	@ 0x2c
 800409c:	9206      	str	r2, [sp, #24]
 800409e:	000a      	movs	r2, r1
 80040a0:	3243      	adds	r2, #67	@ 0x43
 80040a2:	9307      	str	r3, [sp, #28]
 80040a4:	9005      	str	r0, [sp, #20]
 80040a6:	9203      	str	r2, [sp, #12]
 80040a8:	7e0a      	ldrb	r2, [r1, #24]
 80040aa:	000c      	movs	r4, r1
 80040ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80040ae:	2a78      	cmp	r2, #120	@ 0x78
 80040b0:	d809      	bhi.n	80040c6 <_printf_i+0x2e>
 80040b2:	2a62      	cmp	r2, #98	@ 0x62
 80040b4:	d80b      	bhi.n	80040ce <_printf_i+0x36>
 80040b6:	2a00      	cmp	r2, #0
 80040b8:	d100      	bne.n	80040bc <_printf_i+0x24>
 80040ba:	e0bc      	b.n	8004236 <_printf_i+0x19e>
 80040bc:	497b      	ldr	r1, [pc, #492]	@ (80042ac <_printf_i+0x214>)
 80040be:	9104      	str	r1, [sp, #16]
 80040c0:	2a58      	cmp	r2, #88	@ 0x58
 80040c2:	d100      	bne.n	80040c6 <_printf_i+0x2e>
 80040c4:	e090      	b.n	80041e8 <_printf_i+0x150>
 80040c6:	0025      	movs	r5, r4
 80040c8:	3542      	adds	r5, #66	@ 0x42
 80040ca:	702a      	strb	r2, [r5, #0]
 80040cc:	e022      	b.n	8004114 <_printf_i+0x7c>
 80040ce:	0010      	movs	r0, r2
 80040d0:	3863      	subs	r0, #99	@ 0x63
 80040d2:	2815      	cmp	r0, #21
 80040d4:	d8f7      	bhi.n	80040c6 <_printf_i+0x2e>
 80040d6:	f7fc f813 	bl	8000100 <__gnu_thumb1_case_shi>
 80040da:	0016      	.short	0x0016
 80040dc:	fff6001f 	.word	0xfff6001f
 80040e0:	fff6fff6 	.word	0xfff6fff6
 80040e4:	001ffff6 	.word	0x001ffff6
 80040e8:	fff6fff6 	.word	0xfff6fff6
 80040ec:	fff6fff6 	.word	0xfff6fff6
 80040f0:	003600a1 	.word	0x003600a1
 80040f4:	fff60080 	.word	0xfff60080
 80040f8:	00b2fff6 	.word	0x00b2fff6
 80040fc:	0036fff6 	.word	0x0036fff6
 8004100:	fff6fff6 	.word	0xfff6fff6
 8004104:	0084      	.short	0x0084
 8004106:	0025      	movs	r5, r4
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	3542      	adds	r5, #66	@ 0x42
 800410c:	1d11      	adds	r1, r2, #4
 800410e:	6019      	str	r1, [r3, #0]
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	702b      	strb	r3, [r5, #0]
 8004114:	2301      	movs	r3, #1
 8004116:	e0a0      	b.n	800425a <_printf_i+0x1c2>
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	6809      	ldr	r1, [r1, #0]
 800411c:	1d02      	adds	r2, r0, #4
 800411e:	060d      	lsls	r5, r1, #24
 8004120:	d50b      	bpl.n	800413a <_printf_i+0xa2>
 8004122:	6806      	ldr	r6, [r0, #0]
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	2e00      	cmp	r6, #0
 8004128:	da03      	bge.n	8004132 <_printf_i+0x9a>
 800412a:	232d      	movs	r3, #45	@ 0x2d
 800412c:	9a03      	ldr	r2, [sp, #12]
 800412e:	4276      	negs	r6, r6
 8004130:	7013      	strb	r3, [r2, #0]
 8004132:	4b5e      	ldr	r3, [pc, #376]	@ (80042ac <_printf_i+0x214>)
 8004134:	270a      	movs	r7, #10
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	e018      	b.n	800416c <_printf_i+0xd4>
 800413a:	6806      	ldr	r6, [r0, #0]
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	0649      	lsls	r1, r1, #25
 8004140:	d5f1      	bpl.n	8004126 <_printf_i+0x8e>
 8004142:	b236      	sxth	r6, r6
 8004144:	e7ef      	b.n	8004126 <_printf_i+0x8e>
 8004146:	6808      	ldr	r0, [r1, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	c940      	ldmia	r1!, {r6}
 800414c:	0605      	lsls	r5, r0, #24
 800414e:	d402      	bmi.n	8004156 <_printf_i+0xbe>
 8004150:	0640      	lsls	r0, r0, #25
 8004152:	d500      	bpl.n	8004156 <_printf_i+0xbe>
 8004154:	b2b6      	uxth	r6, r6
 8004156:	6019      	str	r1, [r3, #0]
 8004158:	4b54      	ldr	r3, [pc, #336]	@ (80042ac <_printf_i+0x214>)
 800415a:	270a      	movs	r7, #10
 800415c:	9304      	str	r3, [sp, #16]
 800415e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004160:	d100      	bne.n	8004164 <_printf_i+0xcc>
 8004162:	3f02      	subs	r7, #2
 8004164:	0023      	movs	r3, r4
 8004166:	2200      	movs	r2, #0
 8004168:	3343      	adds	r3, #67	@ 0x43
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	6863      	ldr	r3, [r4, #4]
 800416e:	60a3      	str	r3, [r4, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db03      	blt.n	800417c <_printf_i+0xe4>
 8004174:	2104      	movs	r1, #4
 8004176:	6822      	ldr	r2, [r4, #0]
 8004178:	438a      	bics	r2, r1
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	2e00      	cmp	r6, #0
 800417e:	d102      	bne.n	8004186 <_printf_i+0xee>
 8004180:	9d03      	ldr	r5, [sp, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <_printf_i+0x108>
 8004186:	9d03      	ldr	r5, [sp, #12]
 8004188:	0030      	movs	r0, r6
 800418a:	0039      	movs	r1, r7
 800418c:	f7fc f848 	bl	8000220 <__aeabi_uidivmod>
 8004190:	9b04      	ldr	r3, [sp, #16]
 8004192:	3d01      	subs	r5, #1
 8004194:	5c5b      	ldrb	r3, [r3, r1]
 8004196:	702b      	strb	r3, [r5, #0]
 8004198:	0033      	movs	r3, r6
 800419a:	0006      	movs	r6, r0
 800419c:	429f      	cmp	r7, r3
 800419e:	d9f3      	bls.n	8004188 <_printf_i+0xf0>
 80041a0:	2f08      	cmp	r7, #8
 80041a2:	d109      	bne.n	80041b8 <_printf_i+0x120>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	07db      	lsls	r3, r3, #31
 80041a8:	d506      	bpl.n	80041b8 <_printf_i+0x120>
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dc02      	bgt.n	80041b8 <_printf_i+0x120>
 80041b2:	2330      	movs	r3, #48	@ 0x30
 80041b4:	3d01      	subs	r5, #1
 80041b6:	702b      	strb	r3, [r5, #0]
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	1b5b      	subs	r3, r3, r5
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	9b07      	ldr	r3, [sp, #28]
 80041c0:	0021      	movs	r1, r4
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	9805      	ldr	r0, [sp, #20]
 80041c6:	9b06      	ldr	r3, [sp, #24]
 80041c8:	aa09      	add	r2, sp, #36	@ 0x24
 80041ca:	f7ff fef5 	bl	8003fb8 <_printf_common>
 80041ce:	3001      	adds	r0, #1
 80041d0:	d148      	bne.n	8004264 <_printf_i+0x1cc>
 80041d2:	2001      	movs	r0, #1
 80041d4:	4240      	negs	r0, r0
 80041d6:	b00b      	add	sp, #44	@ 0x2c
 80041d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041da:	2220      	movs	r2, #32
 80041dc:	6809      	ldr	r1, [r1, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	6022      	str	r2, [r4, #0]
 80041e2:	2278      	movs	r2, #120	@ 0x78
 80041e4:	4932      	ldr	r1, [pc, #200]	@ (80042b0 <_printf_i+0x218>)
 80041e6:	9104      	str	r1, [sp, #16]
 80041e8:	0021      	movs	r1, r4
 80041ea:	3145      	adds	r1, #69	@ 0x45
 80041ec:	700a      	strb	r2, [r1, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	c940      	ldmia	r1!, {r6}
 80041f4:	0610      	lsls	r0, r2, #24
 80041f6:	d402      	bmi.n	80041fe <_printf_i+0x166>
 80041f8:	0650      	lsls	r0, r2, #25
 80041fa:	d500      	bpl.n	80041fe <_printf_i+0x166>
 80041fc:	b2b6      	uxth	r6, r6
 80041fe:	6019      	str	r1, [r3, #0]
 8004200:	07d3      	lsls	r3, r2, #31
 8004202:	d502      	bpl.n	800420a <_printf_i+0x172>
 8004204:	2320      	movs	r3, #32
 8004206:	4313      	orrs	r3, r2
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	2e00      	cmp	r6, #0
 800420c:	d001      	beq.n	8004212 <_printf_i+0x17a>
 800420e:	2710      	movs	r7, #16
 8004210:	e7a8      	b.n	8004164 <_printf_i+0xcc>
 8004212:	2220      	movs	r2, #32
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	4393      	bics	r3, r2
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	e7f8      	b.n	800420e <_printf_i+0x176>
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	680d      	ldr	r5, [r1, #0]
 8004220:	1d10      	adds	r0, r2, #4
 8004222:	6949      	ldr	r1, [r1, #20]
 8004224:	6018      	str	r0, [r3, #0]
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	062e      	lsls	r6, r5, #24
 800422a:	d501      	bpl.n	8004230 <_printf_i+0x198>
 800422c:	6019      	str	r1, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0x19e>
 8004230:	066d      	lsls	r5, r5, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0x194>
 8004234:	8019      	strh	r1, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	9d03      	ldr	r5, [sp, #12]
 800423a:	6123      	str	r3, [r4, #16]
 800423c:	e7bf      	b.n	80041be <_printf_i+0x126>
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	1d11      	adds	r1, r2, #4
 8004242:	6019      	str	r1, [r3, #0]
 8004244:	6815      	ldr	r5, [r2, #0]
 8004246:	2100      	movs	r1, #0
 8004248:	0028      	movs	r0, r5
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	f000 f844 	bl	80042d8 <memchr>
 8004250:	2800      	cmp	r0, #0
 8004252:	d001      	beq.n	8004258 <_printf_i+0x1c0>
 8004254:	1b40      	subs	r0, r0, r5
 8004256:	6060      	str	r0, [r4, #4]
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	6123      	str	r3, [r4, #16]
 800425c:	2300      	movs	r3, #0
 800425e:	9a03      	ldr	r2, [sp, #12]
 8004260:	7013      	strb	r3, [r2, #0]
 8004262:	e7ac      	b.n	80041be <_printf_i+0x126>
 8004264:	002a      	movs	r2, r5
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	9906      	ldr	r1, [sp, #24]
 800426a:	9805      	ldr	r0, [sp, #20]
 800426c:	9d07      	ldr	r5, [sp, #28]
 800426e:	47a8      	blx	r5
 8004270:	3001      	adds	r0, #1
 8004272:	d0ae      	beq.n	80041d2 <_printf_i+0x13a>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	079b      	lsls	r3, r3, #30
 8004278:	d415      	bmi.n	80042a6 <_printf_i+0x20e>
 800427a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800427c:	68e0      	ldr	r0, [r4, #12]
 800427e:	4298      	cmp	r0, r3
 8004280:	daa9      	bge.n	80041d6 <_printf_i+0x13e>
 8004282:	0018      	movs	r0, r3
 8004284:	e7a7      	b.n	80041d6 <_printf_i+0x13e>
 8004286:	0022      	movs	r2, r4
 8004288:	2301      	movs	r3, #1
 800428a:	9906      	ldr	r1, [sp, #24]
 800428c:	9805      	ldr	r0, [sp, #20]
 800428e:	9e07      	ldr	r6, [sp, #28]
 8004290:	3219      	adds	r2, #25
 8004292:	47b0      	blx	r6
 8004294:	3001      	adds	r0, #1
 8004296:	d09c      	beq.n	80041d2 <_printf_i+0x13a>
 8004298:	3501      	adds	r5, #1
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	dcf0      	bgt.n	8004286 <_printf_i+0x1ee>
 80042a4:	e7e9      	b.n	800427a <_printf_i+0x1e2>
 80042a6:	2500      	movs	r5, #0
 80042a8:	e7f7      	b.n	800429a <_printf_i+0x202>
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	080058f9 	.word	0x080058f9
 80042b0:	0800590a 	.word	0x0800590a

080042b4 <_sbrk_r>:
 80042b4:	2300      	movs	r3, #0
 80042b6:	b570      	push	{r4, r5, r6, lr}
 80042b8:	4d06      	ldr	r5, [pc, #24]	@ (80042d4 <_sbrk_r+0x20>)
 80042ba:	0004      	movs	r4, r0
 80042bc:	0008      	movs	r0, r1
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	f7fc ff26 	bl	8001110 <_sbrk>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d103      	bne.n	80042d0 <_sbrk_r+0x1c>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d000      	beq.n	80042d0 <_sbrk_r+0x1c>
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	20000720 	.word	0x20000720

080042d8 <memchr>:
 80042d8:	b2c9      	uxtb	r1, r1
 80042da:	1882      	adds	r2, r0, r2
 80042dc:	4290      	cmp	r0, r2
 80042de:	d101      	bne.n	80042e4 <memchr+0xc>
 80042e0:	2000      	movs	r0, #0
 80042e2:	4770      	bx	lr
 80042e4:	7803      	ldrb	r3, [r0, #0]
 80042e6:	428b      	cmp	r3, r1
 80042e8:	d0fb      	beq.n	80042e2 <memchr+0xa>
 80042ea:	3001      	adds	r0, #1
 80042ec:	e7f6      	b.n	80042dc <memchr+0x4>

080042ee <_realloc_r>:
 80042ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f0:	0006      	movs	r6, r0
 80042f2:	000c      	movs	r4, r1
 80042f4:	0015      	movs	r5, r2
 80042f6:	2900      	cmp	r1, #0
 80042f8:	d105      	bne.n	8004306 <_realloc_r+0x18>
 80042fa:	0011      	movs	r1, r2
 80042fc:	f7ff fc6e 	bl	8003bdc <_malloc_r>
 8004300:	0004      	movs	r4, r0
 8004302:	0020      	movs	r0, r4
 8004304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004306:	2a00      	cmp	r2, #0
 8004308:	d103      	bne.n	8004312 <_realloc_r+0x24>
 800430a:	f7ff fbfb 	bl	8003b04 <_free_r>
 800430e:	2400      	movs	r4, #0
 8004310:	e7f7      	b.n	8004302 <_realloc_r+0x14>
 8004312:	f000 f81b 	bl	800434c <_malloc_usable_size_r>
 8004316:	0007      	movs	r7, r0
 8004318:	4285      	cmp	r5, r0
 800431a:	d802      	bhi.n	8004322 <_realloc_r+0x34>
 800431c:	0843      	lsrs	r3, r0, #1
 800431e:	42ab      	cmp	r3, r5
 8004320:	d3ef      	bcc.n	8004302 <_realloc_r+0x14>
 8004322:	0029      	movs	r1, r5
 8004324:	0030      	movs	r0, r6
 8004326:	f7ff fc59 	bl	8003bdc <_malloc_r>
 800432a:	9001      	str	r0, [sp, #4]
 800432c:	2800      	cmp	r0, #0
 800432e:	d0ee      	beq.n	800430e <_realloc_r+0x20>
 8004330:	002a      	movs	r2, r5
 8004332:	42bd      	cmp	r5, r7
 8004334:	d900      	bls.n	8004338 <_realloc_r+0x4a>
 8004336:	003a      	movs	r2, r7
 8004338:	0021      	movs	r1, r4
 800433a:	9801      	ldr	r0, [sp, #4]
 800433c:	f7ff fbd8 	bl	8003af0 <memcpy>
 8004340:	0021      	movs	r1, r4
 8004342:	0030      	movs	r0, r6
 8004344:	f7ff fbde 	bl	8003b04 <_free_r>
 8004348:	9c01      	ldr	r4, [sp, #4]
 800434a:	e7da      	b.n	8004302 <_realloc_r+0x14>

0800434c <_malloc_usable_size_r>:
 800434c:	1f0b      	subs	r3, r1, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1f18      	subs	r0, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	da01      	bge.n	800435a <_malloc_usable_size_r+0xe>
 8004356:	580b      	ldr	r3, [r1, r0]
 8004358:	18c0      	adds	r0, r0, r3
 800435a:	4770      	bx	lr

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
