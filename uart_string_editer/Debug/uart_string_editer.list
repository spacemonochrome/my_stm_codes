
uart_string_editer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ac  080037ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037ac  080037ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037ac  080037ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080037c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080037c0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1d0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8e  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d0  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f74  00000000  00000000  0002f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1fa  00000000  00000000  0004739c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ecce  00000000  00000000  00055596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000355c  00000000  00000000  000e4264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e77c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003754 	.word	0x08003754

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003754 	.word	0x08003754

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fb8b 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8af 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f9db 	bl	8000b28 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000772:	f000 f8fb 	bl	800096c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000776:	f000 f9ad 	bl	8000ad4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800077a:	f000 f935 	bl	80009e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800077e:	484a      	ldr	r0, [pc, #296]	; (80008a8 <main+0x148>)
 8000780:	f000 fcb8 	bl	80010f4 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000784:	2108      	movs	r1, #8
 8000786:	4849      	ldr	r0, [pc, #292]	; (80008ac <main+0x14c>)
 8000788:	f002 f8ac 	bl	80028e4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4847      	ldr	r0, [pc, #284]	; (80008b0 <main+0x150>)
 8000794:	f001 fa6a 	bl	8001c6c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800079c:	4842      	ldr	r0, [pc, #264]	; (80008a8 <main+0x148>)
 800079e:	f000 fd57 	bl	8001250 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc1);
 80007a2:	4841      	ldr	r0, [pc, #260]	; (80008a8 <main+0x148>)
 80007a4:	f000 fe5a 	bl	800145c <HAL_ADC_GetValue>
 80007a8:	4603      	mov	r3, r0
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b41      	ldr	r3, [pc, #260]	; (80008b4 <main+0x154>)
 80007ae:	801a      	strh	r2, [r3, #0]
	  //sprintf(receivedData, "%d\n", readValue);

	  HAL_UART_Receive(&huart3, receivedData, 4, 100);
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	2204      	movs	r2, #4
 80007b4:	4940      	ldr	r1, [pc, #256]	; (80008b8 <main+0x158>)
 80007b6:	4841      	ldr	r0, [pc, #260]	; (80008bc <main+0x15c>)
 80007b8:	f002 fe12 	bl	80033e0 <HAL_UART_Receive>
	  basamaksayisi = 0;
 80007bc:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <main+0x160>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
	  for(int x = 0; x < sizeof(receivedData); x++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e021      	b.n	800080c <main+0xac>
	 {
		  if(receivedData[x] > 47 && duzenliveri[x] < 59)
 80007c8:	4a3b      	ldr	r2, [pc, #236]	; (80008b8 <main+0x158>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b2f      	cmp	r3, #47	; 0x2f
 80007d2:	d912      	bls.n	80007fa <main+0x9a>
 80007d4:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <main+0x164>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b3a      	cmp	r3, #58	; 0x3a
 80007de:	d80c      	bhi.n	80007fa <main+0x9a>
		  {
			  basamaksayisi++;
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <main+0x160>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <main+0x160>)
 80007ea:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	482f      	ldr	r0, [pc, #188]	; (80008b0 <main+0x150>)
 80007f4:	f001 fa3a 	bl	8001c6c <HAL_GPIO_WritePin>
 80007f8:	e005      	b.n	8000806 <main+0xa6>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	482b      	ldr	r0, [pc, #172]	; (80008b0 <main+0x150>)
 8000802:	f001 fa33 	bl	8001c6c <HAL_GPIO_WritePin>
	  for(int x = 0; x < sizeof(receivedData); x++)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d9da      	bls.n	80007c8 <main+0x68>
		  }
	 }
	  sonuc=0;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <main+0x168>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < sizeof(receivedData); x++)
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	e025      	b.n	800086a <main+0x10a>
	{
		int katsayi = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
		for(int y = 1; y < basamaksayisi-x; y++)
 8000822:	2301      	movs	r3, #1
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	e008      	b.n	800083a <main+0xda>
		{
			katsayi *= 10;
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
		for(int y = 1; y < basamaksayisi-x; y++)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <main+0x160>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	dbee      	blt.n	8000828 <main+0xc8>
		}
		sonuc += (receivedData[x] - 48)*(katsayi);
 800084a:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <main+0x158>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3b30      	subs	r3, #48	; 0x30
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	fb03 f202 	mul.w	r2, r3, r2
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <main+0x168>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <main+0x168>)
 8000862:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < sizeof(receivedData); x++)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d9d6      	bls.n	800081e <main+0xbe>
	}

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, (sonuc*0.4));
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <main+0x168>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fee7 	bl	8000648 <__aeabi_i2d>
 800087a:	a309      	add	r3, pc, #36	; (adr r3, 80008a0 <main+0x140>)
 800087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000880:	f7ff fc66 	bl	8000150 <__aeabi_dmul>
 8000884:	4602      	mov	r2, r0
 8000886:	460b      	mov	r3, r1
 8000888:	4908      	ldr	r1, [pc, #32]	; (80008ac <main+0x14c>)
 800088a:	680c      	ldr	r4, [r1, #0]
 800088c:	4610      	mov	r0, r2
 800088e:	4619      	mov	r1, r3
 8000890:	f7ff ff44 	bl	800071c <__aeabi_d2uiz>
 8000894:	4603      	mov	r3, r0
 8000896:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000898:	e77e      	b.n	8000798 <main+0x38>
 800089a:	bf00      	nop
 800089c:	f3af 8000 	nop.w
 80008a0:	9999999a 	.word	0x9999999a
 80008a4:	3fd99999 	.word	0x3fd99999
 80008a8:	20000028 	.word	0x20000028
 80008ac:	20000058 	.word	0x20000058
 80008b0:	40011000 	.word	0x40011000
 80008b4:	200000f0 	.word	0x200000f0
 80008b8:	200000e8 	.word	0x200000e8
 80008bc:	200000a0 	.word	0x200000a0
 80008c0:	200000f2 	.word	0x200000f2
 80008c4:	200000ec 	.word	0x200000ec
 80008c8:	200000f4 	.word	0x200000f4

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d6:	2228      	movs	r2, #40	; 0x28
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff0e 	bl	80036fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2310      	movs	r3, #16
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f9c3 	bl	8001c9c <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800091c:	f000 f950 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fc30 	bl	80021a0 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000946:	f000 f93b 	bl	8000bc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800094a:	2302      	movs	r3, #2
 800094c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fdb1 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000960:	f000 f92e 	bl	8000bc0 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3750      	adds	r7, #80	; 0x50
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_ADC1_Init+0x74>)
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_ADC1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_ADC1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_ADC1_Init+0x74>)
 800098a:	2201      	movs	r2, #1
 800098c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_ADC1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_ADC1_Init+0x74>)
 8000996:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800099a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_ADC1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_ADC1_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC1_Init+0x74>)
 80009aa:	f000 facb 	bl	8000f44 <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f904 	bl	8000bc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2301      	movs	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_ADC1_Init+0x74>)
 80009ca:	f000 fd53 	bl	8001474 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009d4:	f000 f8f4 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000028 	.word	0x20000028
 80009e4:	40012400 	.word	0x40012400

080009e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a22:	227f      	movs	r2, #127	; 0x7f
 8000a24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a2e:	f240 2271 	movw	r2, #625	; 0x271
 8000a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a40:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a42:	f001 fea7 	bl	8002794 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a4c:	f000 f8b8 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a5e:	f002 f8a5 	bl	8002bac <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a68:	f000 f8aa 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a6c:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a6e:	f001 fee0 	bl	8002832 <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a78:	f000 f8a2 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a8c:	f002 fbfa 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a96:	f000 f893 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	; 0x60
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000ab2:	f001 ffb9 	bl	8002a28 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000abc:	f000 f880 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000ac2:	f000 f90d 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	; 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000058 	.word	0x20000058

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_USART3_UART_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	f002 fc18 	bl	8003340 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b16:	f000 f853 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000a0 	.word	0x200000a0
 8000b24:	40004800 	.word	0x40004800

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b8c:	f001 f86e 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000baa:	f000 fedb 	bl	8001964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40011000 	.word	0x40011000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_MspInit+0x60>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_MspInit+0x60>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000

08000c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_ADC_MspInit+0x6c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d121      	bne.n	8000c94 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_ADC_MspInit+0x70>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c80:	2310      	movs	r3, #16
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c84:	2303      	movs	r3, #3
 8000c86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_ADC_MspInit+0x74>)
 8000c90:	f000 fe68 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012400 	.word	0x40012400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfe:	d117      	bne.n	8000d30 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_TIM_MspPostInit+0x58>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <HAL_TIM_MspPostInit+0x58>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_MspPostInit+0x58>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <HAL_TIM_MspPostInit+0x5c>)
 8000d2c:	f000 fe1a 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d131      	bne.n	8000dc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_UART_MspInit+0x94>)
 8000da6:	f000 fddd 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_MspInit+0x94>)
 8000dc0:	f000 fdd0 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f875 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff fff7 	bl	8000e26 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3a:	490c      	ldr	r1, [pc, #48]	; (8000e6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e50:	4c09      	ldr	r4, [pc, #36]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 fc55 	bl	800370c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fc7d 	bl	8000760 <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e70:	080037b4 	.word	0x080037b4
  ldr r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e78:	200000fc 	.word	0x200000fc

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 fd33 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe96 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fd3d 	bl	800194a <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 fd13 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200000f8 	.word	0x200000f8

08000f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200000f8 	.word	0x200000f8

08000f44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0be      	b.n	80010e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fe54 	bl	8000c30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fbc5 	bl	8001718 <ADC_ConversionStop_Disable>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8099 	bne.w	80010d2 <HAL_ADC_Init+0x18e>
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8095 	bne.w	80010d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fb0:	f023 0302 	bic.w	r3, r3, #2
 8000fb4:	f043 0202 	orr.w	r2, r3, #2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b1b      	ldrb	r3, [r3, #12]
 8000fca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fdc:	d003      	beq.n	8000fe6 <HAL_ADC_Init+0xa2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_ADC_Init+0xa8>
 8000fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fea:	e000      	b.n	8000fee <HAL_ADC_Init+0xaa>
 8000fec:	2300      	movs	r3, #0
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7d1b      	ldrb	r3, [r3, #20]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d119      	bne.n	8001030 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7b1b      	ldrb	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	3b01      	subs	r3, #1
 800100a:	035a      	lsls	r2, r3, #13
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	e00b      	b.n	8001030 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f043 0220 	orr.w	r2, r3, #32
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	430a      	orrs	r2, r1
 8001042:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_ADC_Init+0x1a8>)
 800104c:	4013      	ands	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	430b      	orrs	r3, r1
 8001056:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001060:	d003      	beq.n	800106a <HAL_ADC_Init+0x126>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d104      	bne.n	8001074 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	3b01      	subs	r3, #1
 8001070:	051b      	lsls	r3, r3, #20
 8001072:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	430a      	orrs	r2, r1
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_ADC_Init+0x1ac>)
 8001090:	4013      	ands	r3, r2
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	429a      	cmp	r2, r3
 8001096:	d10b      	bne.n	80010b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010ae:	e018      	b.n	80010e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f023 0312 	bic.w	r3, r3, #18
 80010b8:	f043 0210 	orr.w	r2, r3, #16
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010d0:	e007      	b.n	80010e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f043 0210 	orr.w	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	ffe1f7fd 	.word	0xffe1f7fd
 80010f0:	ff1f0efe 	.word	0xff1f0efe

080010f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Start+0x1a>
 800110a:	2302      	movs	r3, #2
 800110c:	e098      	b.n	8001240 <HAL_ADC_Start+0x14c>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 faa4 	bl	8001664 <ADC_Enable>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 8087 	bne.w	8001236 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a41      	ldr	r2, [pc, #260]	; (8001248 <HAL_ADC_Start+0x154>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d105      	bne.n	8001152 <HAL_ADC_Start+0x5e>
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_ADC_Start+0x158>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d115      	bne.n	800117e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d026      	beq.n	80011ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001174:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800117c:	e01d      	b.n	80011ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_ADC_Start+0x158>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_ADC_Start+0xaa>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_ADC_Start+0x154>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10d      	bne.n	80011ba <HAL_ADC_Start+0xc6>
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_ADC_Start+0x158>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	f023 0206 	bic.w	r2, r3, #6
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d2:	e002      	b.n	80011da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f06f 0202 	mvn.w	r2, #2
 80011ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011fa:	d113      	bne.n	8001224 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001200:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_ADC_Start+0x154>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d105      	bne.n	8001212 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_ADC_Start+0x158>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e00c      	b.n	800123e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	e003      	b.n	800123e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40012800 	.word	0x40012800
 800124c:	40012400 	.word	0x40012400

08001250 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001266:	f7ff fe63 	bl	8000f30 <HAL_GetTick>
 800126a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f043 0220 	orr.w	r2, r3, #32
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0d3      	b.n	800143a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d131      	bne.n	8001304 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d12a      	bne.n	8001304 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012ae:	e021      	b.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b6:	d01d      	beq.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <HAL_ADC_PollForConversion+0x7e>
 80012be:	f7ff fe37 	bl	8000f30 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d212      	bcs.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10b      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	f043 0204 	orr.w	r2, r3, #4
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0a2      	b.n	800143a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0d6      	beq.n	80012b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001302:	e070      	b.n	80013e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <HAL_ADC_PollForConversion+0x1f4>)
 8001306:	681c      	ldr	r4, [r3, #0]
 8001308:	2002      	movs	r0, #2
 800130a:	f001 f98d 	bl	8002628 <HAL_RCCEx_GetPeriphCLKFreq>
 800130e:	4603      	mov	r3, r0
 8001310:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6919      	ldr	r1, [r3, #16]
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_ADC_PollForConversion+0x1f8>)
 800131c:	400b      	ands	r3, r1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_ADC_PollForConversion+0x104>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68d9      	ldr	r1, [r3, #12]
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <HAL_ADC_PollForConversion+0x1fc>)
 800132a:	400b      	ands	r3, r1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <HAL_ADC_PollForConversion+0x104>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6919      	ldr	r1, [r3, #16]
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_ADC_PollForConversion+0x200>)
 8001338:	400b      	ands	r3, r1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <HAL_ADC_PollForConversion+0x100>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68d9      	ldr	r1, [r3, #12]
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <HAL_ADC_PollForConversion+0x204>)
 8001346:	400b      	ands	r3, r1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_ADC_PollForConversion+0x100>
 800134c:	2314      	movs	r3, #20
 800134e:	e020      	b.n	8001392 <HAL_ADC_PollForConversion+0x142>
 8001350:	2329      	movs	r3, #41	; 0x29
 8001352:	e01e      	b.n	8001392 <HAL_ADC_PollForConversion+0x142>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_ADC_PollForConversion+0x200>)
 800135c:	400b      	ands	r3, r1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_ADC_PollForConversion+0x120>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68d9      	ldr	r1, [r3, #12]
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <HAL_ADC_PollForConversion+0x204>)
 800136a:	400b      	ands	r3, r1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00d      	beq.n	800138c <HAL_ADC_PollForConversion+0x13c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_ADC_PollForConversion+0x208>)
 8001378:	400b      	ands	r3, r1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d108      	bne.n	8001390 <HAL_ADC_PollForConversion+0x140>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68d9      	ldr	r1, [r3, #12]
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_ADC_PollForConversion+0x208>)
 8001386:	400b      	ands	r3, r1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_ADC_PollForConversion+0x140>
 800138c:	2354      	movs	r3, #84	; 0x54
 800138e:	e000      	b.n	8001392 <HAL_ADC_PollForConversion+0x142>
 8001390:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001398:	e021      	b.n	80013de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d01a      	beq.n	80013d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x168>
 80013a8:	f7ff fdc2 	bl	8000f30 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d20f      	bcs.n	80013d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d90b      	bls.n	80013d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f043 0204 	orr.w	r2, r3, #4
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e030      	b.n	800143a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8d9      	bhi.n	800139a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0212 	mvn.w	r2, #18
 80013ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001406:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800140a:	d115      	bne.n	8001438 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000
 8001448:	24924924 	.word	0x24924924
 800144c:	00924924 	.word	0x00924924
 8001450:	12492492 	.word	0x12492492
 8001454:	00492492 	.word	0x00492492
 8001458:	00249249 	.word	0x00249249

0800145c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x20>
 8001490:	2302      	movs	r3, #2
 8001492:	e0dc      	b.n	800164e <HAL_ADC_ConfigChannel+0x1da>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b06      	cmp	r3, #6
 80014a2:	d81c      	bhi.n	80014de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b05      	subs	r3, #5
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	fa00 f203 	lsl.w	r2, r0, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
 80014dc:	e03c      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d81c      	bhi.n	8001520 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b23      	subs	r3, #35	; 0x23
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	4019      	ands	r1, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b23      	subs	r3, #35	; 0x23
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
 800151e:	e01b      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b41      	subs	r3, #65	; 0x41
 8001532:	221f      	movs	r2, #31
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4019      	ands	r1, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b41      	subs	r3, #65	; 0x41
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d91c      	bls.n	800159a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	3b1e      	subs	r3, #30
 8001572:	2207      	movs	r2, #7
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	4019      	ands	r1, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6898      	ldr	r0, [r3, #8]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	3b1e      	subs	r3, #30
 800158c:	fa00 f203 	lsl.w	r2, r0, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	e019      	b.n	80015ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6919      	ldr	r1, [r3, #16]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	2207      	movs	r2, #7
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4019      	ands	r1, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6898      	ldr	r0, [r3, #8]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d003      	beq.n	80015de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d132      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_ADC_ConfigChannel+0x1e4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d125      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d126      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001604:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d11a      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_ADC_ConfigChannel+0x1e8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_ADC_ConfigChannel+0x1ec>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9a      	lsrs	r2, r3, #18
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001624:	e002      	b.n	800162c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x1b2>
 8001632:	e007      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	f043 0220 	orr.w	r2, r3, #32
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40012400 	.word	0x40012400
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d040      	beq.n	8001704 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <ADC_Enable+0xac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <ADC_Enable+0xb0>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016a0:	e002      	b.n	80016a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ae:	f7ff fc3f 	bl	8000f30 <HAL_GetTick>
 80016b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	e01f      	b.n	80016f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016b6:	f7ff fc3b 	bl	8000f30 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d918      	bls.n	80016f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d011      	beq.n	80016f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e007      	b.n	8001706 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d1d8      	bne.n	80016b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000000 	.word	0x20000000
 8001714:	431bde83 	.word	0x431bde83

08001718 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12e      	bne.n	8001790 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001742:	f7ff fbf5 	bl	8000f30 <HAL_GetTick>
 8001746:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001748:	e01b      	b.n	8001782 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800174a:	f7ff fbf1 	bl	8000f30 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d914      	bls.n	8001782 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d10d      	bne.n	8001782 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	f043 0210 	orr.w	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e007      	b.n	8001792 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d0dc      	beq.n	800174a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff90 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff49 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff5e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffb0 	bl	80018b8 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e169      	b.n	8001c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8158 	bne.w	8001c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a9a      	ldr	r2, [pc, #616]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4a98      	ldr	r2, [pc, #608]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4a98      	ldr	r2, [pc, #608]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a96      	ldr	r2, [pc, #600]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a96      	ldr	r2, [pc, #600]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a94      	ldr	r2, [pc, #592]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a92      	ldr	r2, [pc, #584]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a92      	ldr	r2, [pc, #584]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a79      	ldr	r2, [pc, #484]	; (8001c18 <HAL_GPIO_Init+0x2b4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80b1 	beq.w	8001c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	492f      	ldr	r1, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	492c      	ldr	r1, [pc, #176]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4928      	ldr	r1, [pc, #160]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4922      	ldr	r1, [pc, #136]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4918      	ldr	r1, [pc, #96]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4914      	ldr	r1, [pc, #80]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d021      	beq.n	8001c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e021      	b.n	8001c46 <HAL_GPIO_Init+0x2e2>
 8001c02:	bf00      	nop
 8001c04:	10320000 	.word	0x10320000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10220000 	.word	0x10220000
 8001c10:	10210000 	.word	0x10210000
 8001c14:	10120000 	.word	0x10120000
 8001c18:	10110000 	.word	0x10110000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4909      	ldr	r1, [pc, #36]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae8e 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	372c      	adds	r7, #44	; 0x2c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e272      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8087 	beq.w	8001dca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc8:	4b8f      	ldr	r3, [pc, #572]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d112      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x12c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d168      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e24c      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x76>
 8001d04:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7f      	ldr	r2, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e02e      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b7b      	ldr	r3, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7a      	ldr	r2, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a77      	ldr	r2, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xbc>
 8001d3e:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a71      	ldr	r2, [pc, #452]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d58:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a67      	ldr	r2, [pc, #412]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f8da 	bl	8000f30 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff f8d6 	bl	8000f30 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e200      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xe4>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff f8c6 	bl	8000f30 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f8c2 	bl	8000f30 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1ec      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x10c>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001de2:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d11c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x18c>
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x176>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1c0      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4939      	ldr	r1, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e03a      	b.n	8001e9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x270>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff f87b 	bl	8000f30 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f877 	bl	8000f30 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1a1      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4927      	ldr	r1, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_RCC_OscConfig+0x270>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff f85a 	bl	8000f30 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e80:	f7ff f856 	bl	8000f30 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e180      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03a      	beq.n	8001f20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d019      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f83a 	bl	8000f30 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f836 	bl	8000f30 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e160      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 face 	bl	8002480 <RCC_Delay>
 8001ee4:	e01c      	b.n	8001f20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7ff f820 	bl	8000f30 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff f81c 	bl	8000f30 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e146      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	42420000 	.word	0x42420000
 8001f10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e9      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80a6 	beq.w	800207a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f32:	4b8b      	ldr	r3, [pc, #556]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a87      	ldr	r2, [pc, #540]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b85      	ldr	r3, [pc, #532]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7fe ffdd 	bl	8000f30 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe ffd9 	bl	8000f30 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e103      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x312>
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e02d      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	e01c      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x356>
 8001fd8:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a60      	ldr	r2, [pc, #384]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7fe ff8d 	bl	8000f30 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe ff89 	bl	8000f30 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0b1      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ee      	beq.n	800201a <HAL_RCC_OscConfig+0x37e>
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe ff77 	bl	8000f30 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe ff73 	bl	8000f30 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e09b      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	4b40      	ldr	r3, [pc, #256]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d061      	beq.n	8002154 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d146      	bne.n	8002126 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ff47 	bl	8000f30 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe ff43 	bl	8000f30 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e06d      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4921      	ldr	r1, [pc, #132]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a19      	ldr	r1, [r3, #32]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	430b      	orrs	r3, r1
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe ff17 	bl	8000f30 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe ff13 	bl	8000f30 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e03d      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x46a>
 8002124:	e035      	b.n	8002192 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x4cc>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe ff00 	bl	8000f30 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fefc 	bl	8000f30 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e026      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x498>
 8002152:	e01e      	b.n	8002192 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e019      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x500>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	429a      	cmp	r2, r3
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0d0      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4965      	ldr	r1, [pc, #404]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a58      	ldr	r2, [pc, #352]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800221e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	494d      	ldr	r1, [pc, #308]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d040      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d115      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e073      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06b      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4936      	ldr	r1, [pc, #216]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7fe fe4e 	bl	8000f30 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fe4a 	bl	8000f30 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e053      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d210      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4922      	ldr	r1, [pc, #136]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4916      	ldr	r1, [pc, #88]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f821 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490a      	ldr	r1, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1cc>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1d0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fdac 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
 8002368:	0800376c 	.word	0x0800376c
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_GetSysClockFreq+0x94>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x30>
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x36>
 80023a2:	e027      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_GetSysClockFreq+0x98>)
 80023a6:	613b      	str	r3, [r7, #16]
      break;
 80023a8:	e027      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0c9b      	lsrs	r3, r3, #18
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b4:	5cd3      	ldrb	r3, [r2, r3]
 80023b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d010      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_RCC_GetSysClockFreq+0x94>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0c5b      	lsrs	r3, r3, #17
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_RCC_GetSysClockFreq+0x98>)
 80023d6:	fb03 f202 	mul.w	r2, r3, r2
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e004      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	613b      	str	r3, [r7, #16]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetSysClockFreq+0x98>)
 80023f6:	613b      	str	r3, [r7, #16]
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	693b      	ldr	r3, [r7, #16]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	007a1200 	.word	0x007a1200
 8002410:	08003784 	.word	0x08003784
 8002414:	08003794 	.word	0x08003794
 8002418:	003d0900 	.word	0x003d0900

0800241c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <HAL_RCC_GetHCLKFreq+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	20000000 	.word	0x20000000

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002434:	f7ff fff2 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	0800377c 	.word	0x0800377c

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800245c:	f7ff ffde 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0adb      	lsrs	r3, r3, #11
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	0800377c 	.word	0x0800377c

08002480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <RCC_Delay+0x34>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <RCC_Delay+0x38>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0a5b      	lsrs	r3, r3, #9
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800249c:	bf00      	nop
  }
  while (Delay --);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	60fa      	str	r2, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <RCC_Delay+0x1c>
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000000 	.word	0x20000000
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d07d      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b4c      	ldr	r3, [pc, #304]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4a4b      	ldr	r2, [pc, #300]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	61d3      	str	r3, [r2, #28]
 80024f4:	4b49      	ldr	r3, [pc, #292]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d118      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251c:	f7fe fd08 	bl	8000f30 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe fd04 	bl	8000f30 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e06d      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d02e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d027      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002576:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d014      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fcd3 	bl	8000f30 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fccf 	bl	8000f30 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e036      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4917      	ldr	r1, [pc, #92]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	490b      	ldr	r1, [pc, #44]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	42420440 	.word	0x42420440

08002628 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b10      	cmp	r3, #16
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b10      	cmp	r3, #16
 800264e:	f200 808a 	bhi.w	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d045      	beq.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d075      	beq.n	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800265e:	e082      	b.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002666:	4b45      	ldr	r3, [pc, #276]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d07b      	beq.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a41      	ldr	r2, [pc, #260]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026a4:	4a38      	ldr	r2, [pc, #224]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	e004      	b.n	80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4a34      	ldr	r2, [pc, #208]	; (800278c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026cc:	d102      	bne.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	61bb      	str	r3, [r7, #24]
      break;
 80026d2:	e04a      	b.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
      break;
 80026e2:	e042      	b.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d108      	bne.n	8002708 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e01f      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002712:	d109      	bne.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002720:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e00f      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002732:	d11c      	bne.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002740:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002744:	61bb      	str	r3, [r7, #24]
      break;
 8002746:	e012      	b.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002748:	e011      	b.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800274a:	f7ff fe85 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0b9b      	lsrs	r3, r3, #14
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	61bb      	str	r3, [r7, #24]
      break;
 8002764:	e004      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800276e:	bf00      	nop
    }
  }
  return (frequency);
 8002770:	69bb      	ldr	r3, [r7, #24]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08003798 	.word	0x08003798
 8002784:	080037a8 	.word	0x080037a8
 8002788:	007a1200 	.word	0x007a1200
 800278c:	003d0900 	.word	0x003d0900
 8002790:	aaaaaaab 	.word	0xaaaaaaab

08002794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e041      	b.n	800282a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fa74 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 fab2 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e041      	b.n	80028c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f839 	bl	80028d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f000 fa63 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_TIM_PWM_Start+0x24>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e022      	b.n	800294e <HAL_TIM_PWM_Start+0x6a>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b04      	cmp	r3, #4
 800290c:	d109      	bne.n	8002922 <HAL_TIM_PWM_Start+0x3e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	e015      	b.n	800294e <HAL_TIM_PWM_Start+0x6a>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d109      	bne.n	800293c <HAL_TIM_PWM_Start+0x58>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e008      	b.n	800294e <HAL_TIM_PWM_Start+0x6a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e05e      	b.n	8002a14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Start+0x82>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002964:	e013      	b.n	800298e <HAL_TIM_PWM_Start+0xaa>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0x92>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	e00b      	b.n	800298e <HAL_TIM_PWM_Start+0xaa>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0xa2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002984:	e003      	b.n	800298e <HAL_TIM_PWM_Start+0xaa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fc50 	bl	800323c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_TIM_PWM_Start+0x138>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d107      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_TIM_PWM_Start+0x138>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_TIM_PWM_Start+0xfa>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d009      	beq.n	80029de <HAL_TIM_PWM_Start+0xfa>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_TIM_PWM_Start+0x13c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIM_PWM_Start+0xfa>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_TIM_PWM_Start+0x140>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d010      	beq.n	8002a12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a00:	e007      	b.n	8002a12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800

08002a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0ae      	b.n	8002ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	f200 809f 	bhi.w	8002b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002b95 	.word	0x08002b95
 8002a64:	08002b95 	.word	0x08002b95
 8002a68:	08002b95 	.word	0x08002b95
 8002a6c:	08002ad1 	.word	0x08002ad1
 8002a70:	08002b95 	.word	0x08002b95
 8002a74:	08002b95 	.word	0x08002b95
 8002a78:	08002b95 	.word	0x08002b95
 8002a7c:	08002b13 	.word	0x08002b13
 8002a80:	08002b95 	.word	0x08002b95
 8002a84:	08002b95 	.word	0x08002b95
 8002a88:	08002b95 	.word	0x08002b95
 8002a8c:	08002b53 	.word	0x08002b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f9b2 	bl	8002e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6999      	ldr	r1, [r3, #24]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	619a      	str	r2, [r3, #24]
      break;
 8002ace:	e064      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f9f8 	bl	8002ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	021a      	lsls	r2, r3, #8
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	619a      	str	r2, [r3, #24]
      break;
 8002b10:	e043      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fa41 	bl	8002fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0208 	orr.w	r2, r2, #8
 8002b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0204 	bic.w	r2, r2, #4
 8002b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69d9      	ldr	r1, [r3, #28]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]
      break;
 8002b50:	e023      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fa8b 	bl	8003074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69d9      	ldr	r1, [r3, #28]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	61da      	str	r2, [r3, #28]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
      break;
 8002b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0b4      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x186>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d03e      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0xd4>
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c06:	f200 8087 	bhi.w	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	f000 8086 	beq.w	8002d1e <HAL_TIM_ConfigClockSource+0x172>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	d87f      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d01a      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0xa6>
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d87b      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b60      	cmp	r3, #96	; 0x60
 8002c22:	d050      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d877      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b50      	cmp	r3, #80	; 0x50
 8002c2a:	d03c      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c2c:	2b50      	cmp	r3, #80	; 0x50
 8002c2e:	d873      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d058      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d86f      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b30      	cmp	r3, #48	; 0x30
 8002c3a:	d064      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3c:	2b30      	cmp	r3, #48	; 0x30
 8002c3e:	d86b      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d060      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d867      	bhi.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05c      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d05a      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	e062      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c62:	f000 facc 	bl	80031fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
      break;
 8002c7e:	e04f      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c90:	f000 fab5 	bl	80031fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca2:	609a      	str	r2, [r3, #8]
      break;
 8002ca4:	e03c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 fa2c 	bl	8003110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2150      	movs	r1, #80	; 0x50
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fa83 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002cc4:	e02c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 fa4a 	bl	800316c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2160      	movs	r1, #96	; 0x60
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fa73 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e01c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 fa0c 	bl	8003110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2140      	movs	r1, #64	; 0x40
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fa63 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002d04:	e00c      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f000 fa5a 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002d16:	e003      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1c:	e000      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <TIM_Base_SetConfig+0xb8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <TIM_Base_SetConfig+0x30>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5a:	d007      	beq.n	8002d6c <TIM_Base_SetConfig+0x30>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <TIM_Base_SetConfig+0xbc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_Base_SetConfig+0x30>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <TIM_Base_SetConfig+0xc0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d108      	bne.n	8002d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <TIM_Base_SetConfig+0xb8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00b      	beq.n	8002d9e <TIM_Base_SetConfig+0x62>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d007      	beq.n	8002d9e <TIM_Base_SetConfig+0x62>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <TIM_Base_SetConfig+0xbc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_Base_SetConfig+0x62>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <TIM_Base_SetConfig+0xc0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <TIM_Base_SetConfig+0xb8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800

08002e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 0201 	bic.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <TIM_OC1_SetConfig+0xc8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10c      	bne.n	8002e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0308 	bic.w	r3, r3, #8
 8002e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <TIM_OC1_SetConfig+0xc8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d111      	bne.n	8002ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f023 0210 	bic.w	r2, r3, #16
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0320 	bic.w	r3, r3, #32
 8002f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <TIM_OC2_SetConfig+0xd0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <TIM_OC2_SetConfig+0xd0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d113      	bne.n	8002f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <TIM_OC3_SetConfig+0xd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10d      	bne.n	800301a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <TIM_OC3_SetConfig+0xd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d113      	bne.n	800304a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40012c00 	.word	0x40012c00

08003074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	031b      	lsls	r3, r3, #12
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <TIM_OC4_SetConfig+0x98>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d109      	bne.n	80030e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00

08003110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 030a 	bic.w	r3, r3, #10
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	031b      	lsls	r3, r3, #12
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f043 0307 	orr.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	609a      	str	r2, [r3, #8]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2201      	movs	r2, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	43db      	mvns	r3, r3
 800325e:	401a      	ands	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e046      	b.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d009      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a10      	ldr	r2, [pc, #64]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10c      	bne.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4313      	orrs	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800

08003340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e042      	b.n	80033d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fcea 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f92b 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d17c      	bne.n	80034fa <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Receive+0x2c>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e075      	b.n	80034fc <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2222      	movs	r2, #34	; 0x22
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003424:	f7fd fd84 	bl	8000f30 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d108      	bne.n	8003452 <HAL_UART_Receive+0x72>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e003      	b.n	800345a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800345a:	e043      	b.n	80034e4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	2120      	movs	r1, #32
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f84c 	bl	8003504 <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e042      	b.n	80034fc <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	b29b      	uxth	r3, r3
 8003484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003488:	b29a      	uxth	r2, r3
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3302      	adds	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e01f      	b.n	80034d6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d007      	beq.n	80034b0 <HAL_UART_Receive+0xd0>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <HAL_UART_Receive+0xde>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e008      	b.n	80034d0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1b6      	bne.n	800345c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b090      	sub	sp, #64	; 0x40
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003514:	e050      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d04c      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800351e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x30>
 8003524:	f7fd fd04 	bl	8000f30 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003530:	429a      	cmp	r2, r3
 8003532:	d241      	bcs.n	80035b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003554:	637a      	str	r2, [r7, #52]	; 0x34
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3314      	adds	r3, #20
 800356e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	613b      	str	r3, [r7, #16]
   return(result);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003588:	623a      	str	r2, [r7, #32]
 800358a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	69f9      	ldr	r1, [r7, #28]
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	61bb      	str	r3, [r7, #24]
   return(result);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e00f      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d09f      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3740      	adds	r7, #64	; 0x40
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800361a:	f023 030c 	bic.w	r3, r3, #12
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	430b      	orrs	r3, r1
 8003626:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <UART_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7fe ff06 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	e002      	b.n	8003656 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7fe feee 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003654:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <UART_SetConfig+0x118>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	0119      	lsls	r1, r3, #4
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009a      	lsls	r2, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	fbb2 f2f3 	udiv	r2, r2, r3
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <UART_SetConfig+0x118>)
 800368e:	fba3 0302 	umull	r0, r3, r3, r2
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2064      	movs	r0, #100	; 0x64
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	3332      	adds	r3, #50	; 0x32
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <UART_SetConfig+0x118>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ac:	4419      	add	r1, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <UART_SetConfig+0x118>)
 80036c6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	fb00 f303 	mul.w	r3, r0, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <UART_SetConfig+0x118>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 020f 	and.w	r2, r3, #15
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	440a      	add	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40013800 	.word	0x40013800
 80036f8:	51eb851f 	.word	0x51eb851f

080036fc <memset>:
 80036fc:	4603      	mov	r3, r0
 80036fe:	4402      	add	r2, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	d100      	bne.n	8003706 <memset+0xa>
 8003704:	4770      	bx	lr
 8003706:	f803 1b01 	strb.w	r1, [r3], #1
 800370a:	e7f9      	b.n	8003700 <memset+0x4>

0800370c <__libc_init_array>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	2600      	movs	r6, #0
 8003710:	4d0c      	ldr	r5, [pc, #48]	; (8003744 <__libc_init_array+0x38>)
 8003712:	4c0d      	ldr	r4, [pc, #52]	; (8003748 <__libc_init_array+0x3c>)
 8003714:	1b64      	subs	r4, r4, r5
 8003716:	10a4      	asrs	r4, r4, #2
 8003718:	42a6      	cmp	r6, r4
 800371a:	d109      	bne.n	8003730 <__libc_init_array+0x24>
 800371c:	f000 f81a 	bl	8003754 <_init>
 8003720:	2600      	movs	r6, #0
 8003722:	4d0a      	ldr	r5, [pc, #40]	; (800374c <__libc_init_array+0x40>)
 8003724:	4c0a      	ldr	r4, [pc, #40]	; (8003750 <__libc_init_array+0x44>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	42a6      	cmp	r6, r4
 800372c:	d105      	bne.n	800373a <__libc_init_array+0x2e>
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	f855 3b04 	ldr.w	r3, [r5], #4
 8003734:	4798      	blx	r3
 8003736:	3601      	adds	r6, #1
 8003738:	e7ee      	b.n	8003718 <__libc_init_array+0xc>
 800373a:	f855 3b04 	ldr.w	r3, [r5], #4
 800373e:	4798      	blx	r3
 8003740:	3601      	adds	r6, #1
 8003742:	e7f2      	b.n	800372a <__libc_init_array+0x1e>
 8003744:	080037ac 	.word	0x080037ac
 8003748:	080037ac 	.word	0x080037ac
 800374c:	080037ac 	.word	0x080037ac
 8003750:	080037b0 	.word	0x080037b0

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
