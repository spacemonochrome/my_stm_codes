
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6bc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019e0  0800b778  0800b778  0000c778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d158  0800d158  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d158  0800d158  0000f1f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d158  0800d158  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d158  0800d158  0000e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d15c  0800d15c  0000e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d160  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001f8  0800d354  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  0800d354  0000f930  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001145c  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286e  00000000  00000000  00020678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00022ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4d  00000000  00000000  00023d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017781  00000000  00000000  000248d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013512  00000000  00000000  0003c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1b0  00000000  00000000  0004f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004990  00000000  00000000  000de75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e30ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001f8 	.word	0x200001f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b75c 	.word	0x0800b75c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001fc 	.word	0x200001fc
 80000fc:	0800b75c 	.word	0x0800b75c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ffd7 	bl	80013e8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff17 	bl	8001278 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ffc9 	bl	80013e8 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ffbf 	bl	80013e8 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ff41 	bl	8001300 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff37 	bl	8001300 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 fe8f 	bl	80021d8 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 faca 	bl	8001a5c <__aeabi_dsub>
 80004c8:	f001 fe86 	bl	80021d8 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_d2lz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb3 	bl	8000450 <__aeabi_dcmplt>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d108      	bne.n	8000500 <__aeabi_d2lz+0x24>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f000 f80f 	bl	8000514 <__aeabi_d2ulz>
 80004f6:	0002      	movs	r2, r0
 80004f8:	000b      	movs	r3, r1
 80004fa:	0010      	movs	r0, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	18e9      	adds	r1, r5, r3
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f804 	bl	8000514 <__aeabi_d2ulz>
 800050c:	2300      	movs	r3, #0
 800050e:	4242      	negs	r2, r0
 8000510:	418b      	sbcs	r3, r1
 8000512:	e7f2      	b.n	80004fa <__aeabi_d2lz+0x1e>

08000514 <__aeabi_d2ulz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <__aeabi_d2ulz+0x34>)
 800051a:	000d      	movs	r5, r1
 800051c:	0004      	movs	r4, r0
 800051e:	f000 ffd5 	bl	80014cc <__aeabi_dmul>
 8000522:	f7ff ffbd 	bl	80004a0 <__aeabi_d2uiz>
 8000526:	0006      	movs	r6, r0
 8000528:	f001 fec0 	bl	80022ac <__aeabi_ui2d>
 800052c:	2200      	movs	r2, #0
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <__aeabi_d2ulz+0x38>)
 8000530:	f000 ffcc 	bl	80014cc <__aeabi_dmul>
 8000534:	0002      	movs	r2, r0
 8000536:	000b      	movs	r3, r1
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 fa8e 	bl	8001a5c <__aeabi_dsub>
 8000540:	f7ff ffae 	bl	80004a0 <__aeabi_d2uiz>
 8000544:	0031      	movs	r1, r6
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	3df00000 	.word	0x3df00000
 800054c:	41f00000 	.word	0x41f00000

08000550 <__aeabi_l2d>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	0006      	movs	r6, r0
 8000554:	0008      	movs	r0, r1
 8000556:	f001 fe7b 	bl	8002250 <__aeabi_i2d>
 800055a:	2200      	movs	r2, #0
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <__aeabi_l2d+0x28>)
 800055e:	f000 ffb5 	bl	80014cc <__aeabi_dmul>
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	0030      	movs	r0, r6
 8000568:	f001 fea0 	bl	80022ac <__aeabi_ui2d>
 800056c:	002b      	movs	r3, r5
 800056e:	0022      	movs	r2, r4
 8000570:	f000 f804 	bl	800057c <__aeabi_dadd>
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	41f00000 	.word	0x41f00000

0800057c <__aeabi_dadd>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	4657      	mov	r7, sl
 8000580:	464e      	mov	r6, r9
 8000582:	4645      	mov	r5, r8
 8000584:	46de      	mov	lr, fp
 8000586:	b5e0      	push	{r5, r6, r7, lr}
 8000588:	b083      	sub	sp, #12
 800058a:	9000      	str	r0, [sp, #0]
 800058c:	9101      	str	r1, [sp, #4]
 800058e:	030c      	lsls	r4, r1, #12
 8000590:	004f      	lsls	r7, r1, #1
 8000592:	0fce      	lsrs	r6, r1, #31
 8000594:	0a61      	lsrs	r1, r4, #9
 8000596:	9c00      	ldr	r4, [sp, #0]
 8000598:	031d      	lsls	r5, r3, #12
 800059a:	0f64      	lsrs	r4, r4, #29
 800059c:	430c      	orrs	r4, r1
 800059e:	9900      	ldr	r1, [sp, #0]
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	00c8      	lsls	r0, r1, #3
 80005a6:	0059      	lsls	r1, r3, #1
 80005a8:	0d4b      	lsrs	r3, r1, #21
 80005aa:	4699      	mov	r9, r3
 80005ac:	9a00      	ldr	r2, [sp, #0]
 80005ae:	9b01      	ldr	r3, [sp, #4]
 80005b0:	0a6d      	lsrs	r5, r5, #9
 80005b2:	0fd9      	lsrs	r1, r3, #31
 80005b4:	0f53      	lsrs	r3, r2, #29
 80005b6:	432b      	orrs	r3, r5
 80005b8:	469a      	mov	sl, r3
 80005ba:	9b00      	ldr	r3, [sp, #0]
 80005bc:	0d7f      	lsrs	r7, r7, #21
 80005be:	00da      	lsls	r2, r3, #3
 80005c0:	4694      	mov	ip, r2
 80005c2:	464a      	mov	r2, r9
 80005c4:	46b0      	mov	r8, r6
 80005c6:	1aba      	subs	r2, r7, r2
 80005c8:	428e      	cmp	r6, r1
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x52>
 80005cc:	e0b0      	b.n	8000730 <__aeabi_dadd+0x1b4>
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	dc00      	bgt.n	80005d4 <__aeabi_dadd+0x58>
 80005d2:	e078      	b.n	80006c6 <__aeabi_dadd+0x14a>
 80005d4:	4649      	mov	r1, r9
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x60>
 80005da:	e0e9      	b.n	80007b0 <__aeabi_dadd+0x234>
 80005dc:	49c9      	ldr	r1, [pc, #804]	@ (8000904 <__aeabi_dadd+0x388>)
 80005de:	428f      	cmp	r7, r1
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x68>
 80005e2:	e195      	b.n	8000910 <__aeabi_dadd+0x394>
 80005e4:	2501      	movs	r5, #1
 80005e6:	2a38      	cmp	r2, #56	@ 0x38
 80005e8:	dc16      	bgt.n	8000618 <__aeabi_dadd+0x9c>
 80005ea:	2180      	movs	r1, #128	@ 0x80
 80005ec:	4653      	mov	r3, sl
 80005ee:	0409      	lsls	r1, r1, #16
 80005f0:	430b      	orrs	r3, r1
 80005f2:	469a      	mov	sl, r3
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x7e>
 80005f8:	e1e7      	b.n	80009ca <__aeabi_dadd+0x44e>
 80005fa:	2120      	movs	r1, #32
 80005fc:	4655      	mov	r5, sl
 80005fe:	1a8b      	subs	r3, r1, r2
 8000600:	4661      	mov	r1, ip
 8000602:	409d      	lsls	r5, r3
 8000604:	40d1      	lsrs	r1, r2
 8000606:	430d      	orrs	r5, r1
 8000608:	4661      	mov	r1, ip
 800060a:	4099      	lsls	r1, r3
 800060c:	1e4b      	subs	r3, r1, #1
 800060e:	4199      	sbcs	r1, r3
 8000610:	4653      	mov	r3, sl
 8000612:	40d3      	lsrs	r3, r2
 8000614:	430d      	orrs	r5, r1
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	1b45      	subs	r5, r0, r5
 800061a:	42a8      	cmp	r0, r5
 800061c:	4180      	sbcs	r0, r0
 800061e:	4240      	negs	r0, r0
 8000620:	1a24      	subs	r4, r4, r0
 8000622:	0223      	lsls	r3, r4, #8
 8000624:	d400      	bmi.n	8000628 <__aeabi_dadd+0xac>
 8000626:	e10f      	b.n	8000848 <__aeabi_dadd+0x2cc>
 8000628:	0264      	lsls	r4, r4, #9
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	2c00      	cmp	r4, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0xb6>
 8000630:	e139      	b.n	80008a6 <__aeabi_dadd+0x32a>
 8000632:	0020      	movs	r0, r4
 8000634:	f001 fee2 	bl	80023fc <__clzsi2>
 8000638:	0003      	movs	r3, r0
 800063a:	3b08      	subs	r3, #8
 800063c:	2120      	movs	r1, #32
 800063e:	0028      	movs	r0, r5
 8000640:	1aca      	subs	r2, r1, r3
 8000642:	40d0      	lsrs	r0, r2
 8000644:	409c      	lsls	r4, r3
 8000646:	0002      	movs	r2, r0
 8000648:	409d      	lsls	r5, r3
 800064a:	4322      	orrs	r2, r4
 800064c:	429f      	cmp	r7, r3
 800064e:	dd00      	ble.n	8000652 <__aeabi_dadd+0xd6>
 8000650:	e173      	b.n	800093a <__aeabi_dadd+0x3be>
 8000652:	1bd8      	subs	r0, r3, r7
 8000654:	3001      	adds	r0, #1
 8000656:	1a09      	subs	r1, r1, r0
 8000658:	002c      	movs	r4, r5
 800065a:	408d      	lsls	r5, r1
 800065c:	40c4      	lsrs	r4, r0
 800065e:	1e6b      	subs	r3, r5, #1
 8000660:	419d      	sbcs	r5, r3
 8000662:	0013      	movs	r3, r2
 8000664:	40c2      	lsrs	r2, r0
 8000666:	408b      	lsls	r3, r1
 8000668:	4325      	orrs	r5, r4
 800066a:	2700      	movs	r7, #0
 800066c:	0014      	movs	r4, r2
 800066e:	431d      	orrs	r5, r3
 8000670:	076b      	lsls	r3, r5, #29
 8000672:	d009      	beq.n	8000688 <__aeabi_dadd+0x10c>
 8000674:	230f      	movs	r3, #15
 8000676:	402b      	ands	r3, r5
 8000678:	2b04      	cmp	r3, #4
 800067a:	d005      	beq.n	8000688 <__aeabi_dadd+0x10c>
 800067c:	1d2b      	adds	r3, r5, #4
 800067e:	42ab      	cmp	r3, r5
 8000680:	41ad      	sbcs	r5, r5
 8000682:	426d      	negs	r5, r5
 8000684:	1964      	adds	r4, r4, r5
 8000686:	001d      	movs	r5, r3
 8000688:	0223      	lsls	r3, r4, #8
 800068a:	d400      	bmi.n	800068e <__aeabi_dadd+0x112>
 800068c:	e12d      	b.n	80008ea <__aeabi_dadd+0x36e>
 800068e:	4a9d      	ldr	r2, [pc, #628]	@ (8000904 <__aeabi_dadd+0x388>)
 8000690:	3701      	adds	r7, #1
 8000692:	4297      	cmp	r7, r2
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x11c>
 8000696:	e0d3      	b.n	8000840 <__aeabi_dadd+0x2c4>
 8000698:	4646      	mov	r6, r8
 800069a:	499b      	ldr	r1, [pc, #620]	@ (8000908 <__aeabi_dadd+0x38c>)
 800069c:	08ed      	lsrs	r5, r5, #3
 800069e:	4021      	ands	r1, r4
 80006a0:	074a      	lsls	r2, r1, #29
 80006a2:	432a      	orrs	r2, r5
 80006a4:	057c      	lsls	r4, r7, #21
 80006a6:	024d      	lsls	r5, r1, #9
 80006a8:	0b2d      	lsrs	r5, r5, #12
 80006aa:	0d64      	lsrs	r4, r4, #21
 80006ac:	0524      	lsls	r4, r4, #20
 80006ae:	432c      	orrs	r4, r5
 80006b0:	07f6      	lsls	r6, r6, #31
 80006b2:	4334      	orrs	r4, r6
 80006b4:	0010      	movs	r0, r2
 80006b6:	0021      	movs	r1, r4
 80006b8:	b003      	add	sp, #12
 80006ba:	bcf0      	pop	{r4, r5, r6, r7}
 80006bc:	46bb      	mov	fp, r7
 80006be:	46b2      	mov	sl, r6
 80006c0:	46a9      	mov	r9, r5
 80006c2:	46a0      	mov	r8, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x150>
 80006ca:	e084      	b.n	80007d6 <__aeabi_dadd+0x25a>
 80006cc:	464a      	mov	r2, r9
 80006ce:	1bd2      	subs	r2, r2, r7
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_dadd+0x15a>
 80006d4:	e16d      	b.n	80009b2 <__aeabi_dadd+0x436>
 80006d6:	0025      	movs	r5, r4
 80006d8:	4305      	orrs	r5, r0
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x162>
 80006dc:	e127      	b.n	800092e <__aeabi_dadd+0x3b2>
 80006de:	1e56      	subs	r6, r2, #1
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x16a>
 80006e4:	e23b      	b.n	8000b5e <__aeabi_dadd+0x5e2>
 80006e6:	4d87      	ldr	r5, [pc, #540]	@ (8000904 <__aeabi_dadd+0x388>)
 80006e8:	42aa      	cmp	r2, r5
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x172>
 80006ec:	e26a      	b.n	8000bc4 <__aeabi_dadd+0x648>
 80006ee:	2501      	movs	r5, #1
 80006f0:	2e38      	cmp	r6, #56	@ 0x38
 80006f2:	dc12      	bgt.n	800071a <__aeabi_dadd+0x19e>
 80006f4:	0032      	movs	r2, r6
 80006f6:	2a1f      	cmp	r2, #31
 80006f8:	dd00      	ble.n	80006fc <__aeabi_dadd+0x180>
 80006fa:	e1f8      	b.n	8000aee <__aeabi_dadd+0x572>
 80006fc:	2620      	movs	r6, #32
 80006fe:	0025      	movs	r5, r4
 8000700:	1ab6      	subs	r6, r6, r2
 8000702:	0007      	movs	r7, r0
 8000704:	4653      	mov	r3, sl
 8000706:	40b0      	lsls	r0, r6
 8000708:	40d4      	lsrs	r4, r2
 800070a:	40b5      	lsls	r5, r6
 800070c:	40d7      	lsrs	r7, r2
 800070e:	1e46      	subs	r6, r0, #1
 8000710:	41b0      	sbcs	r0, r6
 8000712:	1b1b      	subs	r3, r3, r4
 8000714:	469a      	mov	sl, r3
 8000716:	433d      	orrs	r5, r7
 8000718:	4305      	orrs	r5, r0
 800071a:	4662      	mov	r2, ip
 800071c:	1b55      	subs	r5, r2, r5
 800071e:	45ac      	cmp	ip, r5
 8000720:	4192      	sbcs	r2, r2
 8000722:	4653      	mov	r3, sl
 8000724:	4252      	negs	r2, r2
 8000726:	000e      	movs	r6, r1
 8000728:	464f      	mov	r7, r9
 800072a:	4688      	mov	r8, r1
 800072c:	1a9c      	subs	r4, r3, r2
 800072e:	e778      	b.n	8000622 <__aeabi_dadd+0xa6>
 8000730:	2a00      	cmp	r2, #0
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dadd+0x1ba>
 8000734:	e08e      	b.n	8000854 <__aeabi_dadd+0x2d8>
 8000736:	4649      	mov	r1, r9
 8000738:	2900      	cmp	r1, #0
 800073a:	d175      	bne.n	8000828 <__aeabi_dadd+0x2ac>
 800073c:	4661      	mov	r1, ip
 800073e:	4653      	mov	r3, sl
 8000740:	4319      	orrs	r1, r3
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x1ca>
 8000744:	e0f6      	b.n	8000934 <__aeabi_dadd+0x3b8>
 8000746:	1e51      	subs	r1, r2, #1
 8000748:	2a01      	cmp	r2, #1
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x1d2>
 800074c:	e191      	b.n	8000a72 <__aeabi_dadd+0x4f6>
 800074e:	4d6d      	ldr	r5, [pc, #436]	@ (8000904 <__aeabi_dadd+0x388>)
 8000750:	42aa      	cmp	r2, r5
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x1da>
 8000754:	e0dc      	b.n	8000910 <__aeabi_dadd+0x394>
 8000756:	2501      	movs	r5, #1
 8000758:	2938      	cmp	r1, #56	@ 0x38
 800075a:	dc14      	bgt.n	8000786 <__aeabi_dadd+0x20a>
 800075c:	000a      	movs	r2, r1
 800075e:	2a1f      	cmp	r2, #31
 8000760:	dd00      	ble.n	8000764 <__aeabi_dadd+0x1e8>
 8000762:	e1a2      	b.n	8000aaa <__aeabi_dadd+0x52e>
 8000764:	2120      	movs	r1, #32
 8000766:	4653      	mov	r3, sl
 8000768:	1a89      	subs	r1, r1, r2
 800076a:	408b      	lsls	r3, r1
 800076c:	001d      	movs	r5, r3
 800076e:	4663      	mov	r3, ip
 8000770:	40d3      	lsrs	r3, r2
 8000772:	431d      	orrs	r5, r3
 8000774:	4663      	mov	r3, ip
 8000776:	408b      	lsls	r3, r1
 8000778:	0019      	movs	r1, r3
 800077a:	1e4b      	subs	r3, r1, #1
 800077c:	4199      	sbcs	r1, r3
 800077e:	4653      	mov	r3, sl
 8000780:	40d3      	lsrs	r3, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	18e4      	adds	r4, r4, r3
 8000786:	182d      	adds	r5, r5, r0
 8000788:	4285      	cmp	r5, r0
 800078a:	4180      	sbcs	r0, r0
 800078c:	4240      	negs	r0, r0
 800078e:	1824      	adds	r4, r4, r0
 8000790:	0223      	lsls	r3, r4, #8
 8000792:	d559      	bpl.n	8000848 <__aeabi_dadd+0x2cc>
 8000794:	4b5b      	ldr	r3, [pc, #364]	@ (8000904 <__aeabi_dadd+0x388>)
 8000796:	3701      	adds	r7, #1
 8000798:	429f      	cmp	r7, r3
 800079a:	d051      	beq.n	8000840 <__aeabi_dadd+0x2c4>
 800079c:	2101      	movs	r1, #1
 800079e:	4b5a      	ldr	r3, [pc, #360]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007a0:	086a      	lsrs	r2, r5, #1
 80007a2:	401c      	ands	r4, r3
 80007a4:	4029      	ands	r1, r5
 80007a6:	430a      	orrs	r2, r1
 80007a8:	07e5      	lsls	r5, r4, #31
 80007aa:	4315      	orrs	r5, r2
 80007ac:	0864      	lsrs	r4, r4, #1
 80007ae:	e75f      	b.n	8000670 <__aeabi_dadd+0xf4>
 80007b0:	4661      	mov	r1, ip
 80007b2:	4653      	mov	r3, sl
 80007b4:	4319      	orrs	r1, r3
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x23e>
 80007b8:	e0bc      	b.n	8000934 <__aeabi_dadd+0x3b8>
 80007ba:	1e51      	subs	r1, r2, #1
 80007bc:	2a01      	cmp	r2, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_dadd+0x246>
 80007c0:	e164      	b.n	8000a8c <__aeabi_dadd+0x510>
 80007c2:	4d50      	ldr	r5, [pc, #320]	@ (8000904 <__aeabi_dadd+0x388>)
 80007c4:	42aa      	cmp	r2, r5
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x24e>
 80007c8:	e16a      	b.n	8000aa0 <__aeabi_dadd+0x524>
 80007ca:	2501      	movs	r5, #1
 80007cc:	2938      	cmp	r1, #56	@ 0x38
 80007ce:	dd00      	ble.n	80007d2 <__aeabi_dadd+0x256>
 80007d0:	e722      	b.n	8000618 <__aeabi_dadd+0x9c>
 80007d2:	000a      	movs	r2, r1
 80007d4:	e70e      	b.n	80005f4 <__aeabi_dadd+0x78>
 80007d6:	4a4d      	ldr	r2, [pc, #308]	@ (800090c <__aeabi_dadd+0x390>)
 80007d8:	1c7d      	adds	r5, r7, #1
 80007da:	4215      	tst	r5, r2
 80007dc:	d000      	beq.n	80007e0 <__aeabi_dadd+0x264>
 80007de:	e0d0      	b.n	8000982 <__aeabi_dadd+0x406>
 80007e0:	0025      	movs	r5, r4
 80007e2:	4662      	mov	r2, ip
 80007e4:	4653      	mov	r3, sl
 80007e6:	4305      	orrs	r5, r0
 80007e8:	431a      	orrs	r2, r3
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_dadd+0x274>
 80007ee:	e137      	b.n	8000a60 <__aeabi_dadd+0x4e4>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x27a>
 80007f4:	e1a8      	b.n	8000b48 <__aeabi_dadd+0x5cc>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x280>
 80007fa:	e16a      	b.n	8000ad2 <__aeabi_dadd+0x556>
 80007fc:	4663      	mov	r3, ip
 80007fe:	1ac5      	subs	r5, r0, r3
 8000800:	4653      	mov	r3, sl
 8000802:	1ae2      	subs	r2, r4, r3
 8000804:	42a8      	cmp	r0, r5
 8000806:	419b      	sbcs	r3, r3
 8000808:	425b      	negs	r3, r3
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	021a      	lsls	r2, r3, #8
 800080e:	d400      	bmi.n	8000812 <__aeabi_dadd+0x296>
 8000810:	e203      	b.n	8000c1a <__aeabi_dadd+0x69e>
 8000812:	4663      	mov	r3, ip
 8000814:	1a1d      	subs	r5, r3, r0
 8000816:	45ac      	cmp	ip, r5
 8000818:	4192      	sbcs	r2, r2
 800081a:	4653      	mov	r3, sl
 800081c:	4252      	negs	r2, r2
 800081e:	1b1c      	subs	r4, r3, r4
 8000820:	000e      	movs	r6, r1
 8000822:	4688      	mov	r8, r1
 8000824:	1aa4      	subs	r4, r4, r2
 8000826:	e723      	b.n	8000670 <__aeabi_dadd+0xf4>
 8000828:	4936      	ldr	r1, [pc, #216]	@ (8000904 <__aeabi_dadd+0x388>)
 800082a:	428f      	cmp	r7, r1
 800082c:	d070      	beq.n	8000910 <__aeabi_dadd+0x394>
 800082e:	2501      	movs	r5, #1
 8000830:	2a38      	cmp	r2, #56	@ 0x38
 8000832:	dca8      	bgt.n	8000786 <__aeabi_dadd+0x20a>
 8000834:	2180      	movs	r1, #128	@ 0x80
 8000836:	4653      	mov	r3, sl
 8000838:	0409      	lsls	r1, r1, #16
 800083a:	430b      	orrs	r3, r1
 800083c:	469a      	mov	sl, r3
 800083e:	e78e      	b.n	800075e <__aeabi_dadd+0x1e2>
 8000840:	003c      	movs	r4, r7
 8000842:	2500      	movs	r5, #0
 8000844:	2200      	movs	r2, #0
 8000846:	e731      	b.n	80006ac <__aeabi_dadd+0x130>
 8000848:	2307      	movs	r3, #7
 800084a:	402b      	ands	r3, r5
 800084c:	2b00      	cmp	r3, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x2d6>
 8000850:	e710      	b.n	8000674 <__aeabi_dadd+0xf8>
 8000852:	e093      	b.n	800097c <__aeabi_dadd+0x400>
 8000854:	2a00      	cmp	r2, #0
 8000856:	d074      	beq.n	8000942 <__aeabi_dadd+0x3c6>
 8000858:	464a      	mov	r2, r9
 800085a:	1bd2      	subs	r2, r2, r7
 800085c:	2f00      	cmp	r7, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x2e6>
 8000860:	e0c7      	b.n	80009f2 <__aeabi_dadd+0x476>
 8000862:	4928      	ldr	r1, [pc, #160]	@ (8000904 <__aeabi_dadd+0x388>)
 8000864:	4589      	cmp	r9, r1
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x2ee>
 8000868:	e185      	b.n	8000b76 <__aeabi_dadd+0x5fa>
 800086a:	2501      	movs	r5, #1
 800086c:	2a38      	cmp	r2, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x31a>
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	0409      	lsls	r1, r1, #16
 8000874:	430c      	orrs	r4, r1
 8000876:	2a1f      	cmp	r2, #31
 8000878:	dd00      	ble.n	800087c <__aeabi_dadd+0x300>
 800087a:	e1ab      	b.n	8000bd4 <__aeabi_dadd+0x658>
 800087c:	2120      	movs	r1, #32
 800087e:	0025      	movs	r5, r4
 8000880:	1a89      	subs	r1, r1, r2
 8000882:	0007      	movs	r7, r0
 8000884:	4088      	lsls	r0, r1
 8000886:	408d      	lsls	r5, r1
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e41      	subs	r1, r0, #1
 800088c:	4188      	sbcs	r0, r1
 800088e:	40d4      	lsrs	r4, r2
 8000890:	433d      	orrs	r5, r7
 8000892:	4305      	orrs	r5, r0
 8000894:	44a2      	add	sl, r4
 8000896:	4465      	add	r5, ip
 8000898:	4565      	cmp	r5, ip
 800089a:	4192      	sbcs	r2, r2
 800089c:	4252      	negs	r2, r2
 800089e:	4452      	add	r2, sl
 80008a0:	0014      	movs	r4, r2
 80008a2:	464f      	mov	r7, r9
 80008a4:	e774      	b.n	8000790 <__aeabi_dadd+0x214>
 80008a6:	0028      	movs	r0, r5
 80008a8:	f001 fda8 	bl	80023fc <__clzsi2>
 80008ac:	0003      	movs	r3, r0
 80008ae:	3318      	adds	r3, #24
 80008b0:	2b1f      	cmp	r3, #31
 80008b2:	dc00      	bgt.n	80008b6 <__aeabi_dadd+0x33a>
 80008b4:	e6c2      	b.n	800063c <__aeabi_dadd+0xc0>
 80008b6:	002a      	movs	r2, r5
 80008b8:	3808      	subs	r0, #8
 80008ba:	4082      	lsls	r2, r0
 80008bc:	429f      	cmp	r7, r3
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dadd+0x346>
 80008c0:	e0a9      	b.n	8000a16 <__aeabi_dadd+0x49a>
 80008c2:	1bdb      	subs	r3, r3, r7
 80008c4:	1c58      	adds	r0, r3, #1
 80008c6:	281f      	cmp	r0, #31
 80008c8:	dc00      	bgt.n	80008cc <__aeabi_dadd+0x350>
 80008ca:	e1ac      	b.n	8000c26 <__aeabi_dadd+0x6aa>
 80008cc:	0015      	movs	r5, r2
 80008ce:	3b1f      	subs	r3, #31
 80008d0:	40dd      	lsrs	r5, r3
 80008d2:	2820      	cmp	r0, #32
 80008d4:	d005      	beq.n	80008e2 <__aeabi_dadd+0x366>
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	1a1b      	subs	r3, r3, r0
 80008da:	409a      	lsls	r2, r3
 80008dc:	1e53      	subs	r3, r2, #1
 80008de:	419a      	sbcs	r2, r3
 80008e0:	4315      	orrs	r5, r2
 80008e2:	2307      	movs	r3, #7
 80008e4:	2700      	movs	r7, #0
 80008e6:	402b      	ands	r3, r5
 80008e8:	e7b0      	b.n	800084c <__aeabi_dadd+0x2d0>
 80008ea:	08ed      	lsrs	r5, r5, #3
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <__aeabi_dadd+0x388>)
 80008ee:	0762      	lsls	r2, r4, #29
 80008f0:	432a      	orrs	r2, r5
 80008f2:	08e4      	lsrs	r4, r4, #3
 80008f4:	429f      	cmp	r7, r3
 80008f6:	d00f      	beq.n	8000918 <__aeabi_dadd+0x39c>
 80008f8:	0324      	lsls	r4, r4, #12
 80008fa:	0b25      	lsrs	r5, r4, #12
 80008fc:	057c      	lsls	r4, r7, #21
 80008fe:	0d64      	lsrs	r4, r4, #21
 8000900:	e6d4      	b.n	80006ac <__aeabi_dadd+0x130>
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	000007ff 	.word	0x000007ff
 8000908:	ff7fffff 	.word	0xff7fffff
 800090c:	000007fe 	.word	0x000007fe
 8000910:	08c0      	lsrs	r0, r0, #3
 8000912:	0762      	lsls	r2, r4, #29
 8000914:	4302      	orrs	r2, r0
 8000916:	08e4      	lsrs	r4, r4, #3
 8000918:	0013      	movs	r3, r2
 800091a:	4323      	orrs	r3, r4
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x3a4>
 800091e:	e186      	b.n	8000c2e <__aeabi_dadd+0x6b2>
 8000920:	2580      	movs	r5, #128	@ 0x80
 8000922:	032d      	lsls	r5, r5, #12
 8000924:	4325      	orrs	r5, r4
 8000926:	032d      	lsls	r5, r5, #12
 8000928:	4cc3      	ldr	r4, [pc, #780]	@ (8000c38 <__aeabi_dadd+0x6bc>)
 800092a:	0b2d      	lsrs	r5, r5, #12
 800092c:	e6be      	b.n	80006ac <__aeabi_dadd+0x130>
 800092e:	4660      	mov	r0, ip
 8000930:	4654      	mov	r4, sl
 8000932:	000e      	movs	r6, r1
 8000934:	0017      	movs	r7, r2
 8000936:	08c5      	lsrs	r5, r0, #3
 8000938:	e7d8      	b.n	80008ec <__aeabi_dadd+0x370>
 800093a:	4cc0      	ldr	r4, [pc, #768]	@ (8000c3c <__aeabi_dadd+0x6c0>)
 800093c:	1aff      	subs	r7, r7, r3
 800093e:	4014      	ands	r4, r2
 8000940:	e696      	b.n	8000670 <__aeabi_dadd+0xf4>
 8000942:	4abf      	ldr	r2, [pc, #764]	@ (8000c40 <__aeabi_dadd+0x6c4>)
 8000944:	1c79      	adds	r1, r7, #1
 8000946:	4211      	tst	r1, r2
 8000948:	d16b      	bne.n	8000a22 <__aeabi_dadd+0x4a6>
 800094a:	0022      	movs	r2, r4
 800094c:	4302      	orrs	r2, r0
 800094e:	2f00      	cmp	r7, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x3d8>
 8000952:	e0db      	b.n	8000b0c <__aeabi_dadd+0x590>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x3de>
 8000958:	e12d      	b.n	8000bb6 <__aeabi_dadd+0x63a>
 800095a:	4662      	mov	r2, ip
 800095c:	4653      	mov	r3, sl
 800095e:	431a      	orrs	r2, r3
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x3e8>
 8000962:	e0b6      	b.n	8000ad2 <__aeabi_dadd+0x556>
 8000964:	4663      	mov	r3, ip
 8000966:	18c5      	adds	r5, r0, r3
 8000968:	4285      	cmp	r5, r0
 800096a:	4180      	sbcs	r0, r0
 800096c:	4454      	add	r4, sl
 800096e:	4240      	negs	r0, r0
 8000970:	1824      	adds	r4, r4, r0
 8000972:	0223      	lsls	r3, r4, #8
 8000974:	d502      	bpl.n	800097c <__aeabi_dadd+0x400>
 8000976:	000f      	movs	r7, r1
 8000978:	4bb0      	ldr	r3, [pc, #704]	@ (8000c3c <__aeabi_dadd+0x6c0>)
 800097a:	401c      	ands	r4, r3
 800097c:	003a      	movs	r2, r7
 800097e:	0028      	movs	r0, r5
 8000980:	e7d8      	b.n	8000934 <__aeabi_dadd+0x3b8>
 8000982:	4662      	mov	r2, ip
 8000984:	1a85      	subs	r5, r0, r2
 8000986:	42a8      	cmp	r0, r5
 8000988:	4192      	sbcs	r2, r2
 800098a:	4653      	mov	r3, sl
 800098c:	4252      	negs	r2, r2
 800098e:	4691      	mov	r9, r2
 8000990:	1ae3      	subs	r3, r4, r3
 8000992:	001a      	movs	r2, r3
 8000994:	464b      	mov	r3, r9
 8000996:	1ad2      	subs	r2, r2, r3
 8000998:	0013      	movs	r3, r2
 800099a:	4691      	mov	r9, r2
 800099c:	021a      	lsls	r2, r3, #8
 800099e:	d454      	bmi.n	8000a4a <__aeabi_dadd+0x4ce>
 80009a0:	464a      	mov	r2, r9
 80009a2:	464c      	mov	r4, r9
 80009a4:	432a      	orrs	r2, r5
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x42e>
 80009a8:	e640      	b.n	800062c <__aeabi_dadd+0xb0>
 80009aa:	2600      	movs	r6, #0
 80009ac:	2400      	movs	r4, #0
 80009ae:	2500      	movs	r5, #0
 80009b0:	e67c      	b.n	80006ac <__aeabi_dadd+0x130>
 80009b2:	4da1      	ldr	r5, [pc, #644]	@ (8000c38 <__aeabi_dadd+0x6bc>)
 80009b4:	45a9      	cmp	r9, r5
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x43e>
 80009b8:	e090      	b.n	8000adc <__aeabi_dadd+0x560>
 80009ba:	2501      	movs	r5, #1
 80009bc:	2a38      	cmp	r2, #56	@ 0x38
 80009be:	dd00      	ble.n	80009c2 <__aeabi_dadd+0x446>
 80009c0:	e6ab      	b.n	800071a <__aeabi_dadd+0x19e>
 80009c2:	2580      	movs	r5, #128	@ 0x80
 80009c4:	042d      	lsls	r5, r5, #16
 80009c6:	432c      	orrs	r4, r5
 80009c8:	e695      	b.n	80006f6 <__aeabi_dadd+0x17a>
 80009ca:	0011      	movs	r1, r2
 80009cc:	4655      	mov	r5, sl
 80009ce:	3920      	subs	r1, #32
 80009d0:	40cd      	lsrs	r5, r1
 80009d2:	46a9      	mov	r9, r5
 80009d4:	2a20      	cmp	r2, #32
 80009d6:	d006      	beq.n	80009e6 <__aeabi_dadd+0x46a>
 80009d8:	2140      	movs	r1, #64	@ 0x40
 80009da:	4653      	mov	r3, sl
 80009dc:	1a8a      	subs	r2, r1, r2
 80009de:	4093      	lsls	r3, r2
 80009e0:	4662      	mov	r2, ip
 80009e2:	431a      	orrs	r2, r3
 80009e4:	4694      	mov	ip, r2
 80009e6:	4665      	mov	r5, ip
 80009e8:	1e6b      	subs	r3, r5, #1
 80009ea:	419d      	sbcs	r5, r3
 80009ec:	464b      	mov	r3, r9
 80009ee:	431d      	orrs	r5, r3
 80009f0:	e612      	b.n	8000618 <__aeabi_dadd+0x9c>
 80009f2:	0021      	movs	r1, r4
 80009f4:	4301      	orrs	r1, r0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x47e>
 80009f8:	e0c4      	b.n	8000b84 <__aeabi_dadd+0x608>
 80009fa:	1e51      	subs	r1, r2, #1
 80009fc:	2a01      	cmp	r2, #1
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x486>
 8000a00:	e0fb      	b.n	8000bfa <__aeabi_dadd+0x67e>
 8000a02:	4d8d      	ldr	r5, [pc, #564]	@ (8000c38 <__aeabi_dadd+0x6bc>)
 8000a04:	42aa      	cmp	r2, r5
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x48e>
 8000a08:	e0b5      	b.n	8000b76 <__aeabi_dadd+0x5fa>
 8000a0a:	2501      	movs	r5, #1
 8000a0c:	2938      	cmp	r1, #56	@ 0x38
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_dadd+0x496>
 8000a10:	e741      	b.n	8000896 <__aeabi_dadd+0x31a>
 8000a12:	000a      	movs	r2, r1
 8000a14:	e72f      	b.n	8000876 <__aeabi_dadd+0x2fa>
 8000a16:	4c89      	ldr	r4, [pc, #548]	@ (8000c3c <__aeabi_dadd+0x6c0>)
 8000a18:	1aff      	subs	r7, r7, r3
 8000a1a:	4014      	ands	r4, r2
 8000a1c:	0762      	lsls	r2, r4, #29
 8000a1e:	08e4      	lsrs	r4, r4, #3
 8000a20:	e76a      	b.n	80008f8 <__aeabi_dadd+0x37c>
 8000a22:	4a85      	ldr	r2, [pc, #532]	@ (8000c38 <__aeabi_dadd+0x6bc>)
 8000a24:	4291      	cmp	r1, r2
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x4ae>
 8000a28:	e0e3      	b.n	8000bf2 <__aeabi_dadd+0x676>
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	18c2      	adds	r2, r0, r3
 8000a2e:	4282      	cmp	r2, r0
 8000a30:	4180      	sbcs	r0, r0
 8000a32:	0023      	movs	r3, r4
 8000a34:	4240      	negs	r0, r0
 8000a36:	4453      	add	r3, sl
 8000a38:	181b      	adds	r3, r3, r0
 8000a3a:	07dd      	lsls	r5, r3, #31
 8000a3c:	085c      	lsrs	r4, r3, #1
 8000a3e:	2307      	movs	r3, #7
 8000a40:	0852      	lsrs	r2, r2, #1
 8000a42:	4315      	orrs	r5, r2
 8000a44:	000f      	movs	r7, r1
 8000a46:	402b      	ands	r3, r5
 8000a48:	e700      	b.n	800084c <__aeabi_dadd+0x2d0>
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	1a1d      	subs	r5, r3, r0
 8000a4e:	45ac      	cmp	ip, r5
 8000a50:	4192      	sbcs	r2, r2
 8000a52:	4653      	mov	r3, sl
 8000a54:	4252      	negs	r2, r2
 8000a56:	1b1c      	subs	r4, r3, r4
 8000a58:	000e      	movs	r6, r1
 8000a5a:	4688      	mov	r8, r1
 8000a5c:	1aa4      	subs	r4, r4, r2
 8000a5e:	e5e5      	b.n	800062c <__aeabi_dadd+0xb0>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d000      	beq.n	8000a66 <__aeabi_dadd+0x4ea>
 8000a64:	e091      	b.n	8000b8a <__aeabi_dadd+0x60e>
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d138      	bne.n	8000adc <__aeabi_dadd+0x560>
 8000a6a:	2480      	movs	r4, #128	@ 0x80
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	e756      	b.n	8000920 <__aeabi_dadd+0x3a4>
 8000a72:	4663      	mov	r3, ip
 8000a74:	18c5      	adds	r5, r0, r3
 8000a76:	4285      	cmp	r5, r0
 8000a78:	4180      	sbcs	r0, r0
 8000a7a:	4454      	add	r4, sl
 8000a7c:	4240      	negs	r0, r0
 8000a7e:	1824      	adds	r4, r4, r0
 8000a80:	2701      	movs	r7, #1
 8000a82:	0223      	lsls	r3, r4, #8
 8000a84:	d400      	bmi.n	8000a88 <__aeabi_dadd+0x50c>
 8000a86:	e6df      	b.n	8000848 <__aeabi_dadd+0x2cc>
 8000a88:	2702      	movs	r7, #2
 8000a8a:	e687      	b.n	800079c <__aeabi_dadd+0x220>
 8000a8c:	4663      	mov	r3, ip
 8000a8e:	1ac5      	subs	r5, r0, r3
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	4180      	sbcs	r0, r0
 8000a94:	4653      	mov	r3, sl
 8000a96:	4240      	negs	r0, r0
 8000a98:	1ae4      	subs	r4, r4, r3
 8000a9a:	2701      	movs	r7, #1
 8000a9c:	1a24      	subs	r4, r4, r0
 8000a9e:	e5c0      	b.n	8000622 <__aeabi_dadd+0xa6>
 8000aa0:	0762      	lsls	r2, r4, #29
 8000aa2:	08c0      	lsrs	r0, r0, #3
 8000aa4:	4302      	orrs	r2, r0
 8000aa6:	08e4      	lsrs	r4, r4, #3
 8000aa8:	e736      	b.n	8000918 <__aeabi_dadd+0x39c>
 8000aaa:	0011      	movs	r1, r2
 8000aac:	4653      	mov	r3, sl
 8000aae:	3920      	subs	r1, #32
 8000ab0:	40cb      	lsrs	r3, r1
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	2a20      	cmp	r2, #32
 8000ab6:	d006      	beq.n	8000ac6 <__aeabi_dadd+0x54a>
 8000ab8:	2140      	movs	r1, #64	@ 0x40
 8000aba:	4653      	mov	r3, sl
 8000abc:	1a8a      	subs	r2, r1, r2
 8000abe:	4093      	lsls	r3, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	4665      	mov	r5, ip
 8000ac8:	1e6b      	subs	r3, r5, #1
 8000aca:	419d      	sbcs	r5, r3
 8000acc:	464b      	mov	r3, r9
 8000ace:	431d      	orrs	r5, r3
 8000ad0:	e659      	b.n	8000786 <__aeabi_dadd+0x20a>
 8000ad2:	0762      	lsls	r2, r4, #29
 8000ad4:	08c0      	lsrs	r0, r0, #3
 8000ad6:	4302      	orrs	r2, r0
 8000ad8:	08e4      	lsrs	r4, r4, #3
 8000ada:	e70d      	b.n	80008f8 <__aeabi_dadd+0x37c>
 8000adc:	4653      	mov	r3, sl
 8000ade:	075a      	lsls	r2, r3, #29
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	08d8      	lsrs	r0, r3, #3
 8000ae4:	4653      	mov	r3, sl
 8000ae6:	000e      	movs	r6, r1
 8000ae8:	4302      	orrs	r2, r0
 8000aea:	08dc      	lsrs	r4, r3, #3
 8000aec:	e714      	b.n	8000918 <__aeabi_dadd+0x39c>
 8000aee:	0015      	movs	r5, r2
 8000af0:	0026      	movs	r6, r4
 8000af2:	3d20      	subs	r5, #32
 8000af4:	40ee      	lsrs	r6, r5
 8000af6:	2a20      	cmp	r2, #32
 8000af8:	d003      	beq.n	8000b02 <__aeabi_dadd+0x586>
 8000afa:	2540      	movs	r5, #64	@ 0x40
 8000afc:	1aaa      	subs	r2, r5, r2
 8000afe:	4094      	lsls	r4, r2
 8000b00:	4320      	orrs	r0, r4
 8000b02:	1e42      	subs	r2, r0, #1
 8000b04:	4190      	sbcs	r0, r2
 8000b06:	0005      	movs	r5, r0
 8000b08:	4335      	orrs	r5, r6
 8000b0a:	e606      	b.n	800071a <__aeabi_dadd+0x19e>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d07c      	beq.n	8000c0a <__aeabi_dadd+0x68e>
 8000b10:	4662      	mov	r2, ip
 8000b12:	4653      	mov	r3, sl
 8000b14:	08c0      	lsrs	r0, r0, #3
 8000b16:	431a      	orrs	r2, r3
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x5a0>
 8000b1a:	e6fa      	b.n	8000912 <__aeabi_dadd+0x396>
 8000b1c:	0762      	lsls	r2, r4, #29
 8000b1e:	4310      	orrs	r0, r2
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	08e4      	lsrs	r4, r4, #3
 8000b24:	0312      	lsls	r2, r2, #12
 8000b26:	4214      	tst	r4, r2
 8000b28:	d008      	beq.n	8000b3c <__aeabi_dadd+0x5c0>
 8000b2a:	08d9      	lsrs	r1, r3, #3
 8000b2c:	4211      	tst	r1, r2
 8000b2e:	d105      	bne.n	8000b3c <__aeabi_dadd+0x5c0>
 8000b30:	4663      	mov	r3, ip
 8000b32:	08d8      	lsrs	r0, r3, #3
 8000b34:	4653      	mov	r3, sl
 8000b36:	000c      	movs	r4, r1
 8000b38:	075b      	lsls	r3, r3, #29
 8000b3a:	4318      	orrs	r0, r3
 8000b3c:	0f42      	lsrs	r2, r0, #29
 8000b3e:	00c0      	lsls	r0, r0, #3
 8000b40:	08c0      	lsrs	r0, r0, #3
 8000b42:	0752      	lsls	r2, r2, #29
 8000b44:	4302      	orrs	r2, r0
 8000b46:	e6e7      	b.n	8000918 <__aeabi_dadd+0x39c>
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x5d2>
 8000b4c:	e72d      	b.n	80009aa <__aeabi_dadd+0x42e>
 8000b4e:	4663      	mov	r3, ip
 8000b50:	08d8      	lsrs	r0, r3, #3
 8000b52:	4653      	mov	r3, sl
 8000b54:	075a      	lsls	r2, r3, #29
 8000b56:	000e      	movs	r6, r1
 8000b58:	4302      	orrs	r2, r0
 8000b5a:	08dc      	lsrs	r4, r3, #3
 8000b5c:	e6cc      	b.n	80008f8 <__aeabi_dadd+0x37c>
 8000b5e:	4663      	mov	r3, ip
 8000b60:	1a1d      	subs	r5, r3, r0
 8000b62:	45ac      	cmp	ip, r5
 8000b64:	4192      	sbcs	r2, r2
 8000b66:	4653      	mov	r3, sl
 8000b68:	4252      	negs	r2, r2
 8000b6a:	1b1c      	subs	r4, r3, r4
 8000b6c:	000e      	movs	r6, r1
 8000b6e:	4688      	mov	r8, r1
 8000b70:	1aa4      	subs	r4, r4, r2
 8000b72:	3701      	adds	r7, #1
 8000b74:	e555      	b.n	8000622 <__aeabi_dadd+0xa6>
 8000b76:	4663      	mov	r3, ip
 8000b78:	08d9      	lsrs	r1, r3, #3
 8000b7a:	4653      	mov	r3, sl
 8000b7c:	075a      	lsls	r2, r3, #29
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	08dc      	lsrs	r4, r3, #3
 8000b82:	e6c9      	b.n	8000918 <__aeabi_dadd+0x39c>
 8000b84:	4660      	mov	r0, ip
 8000b86:	4654      	mov	r4, sl
 8000b88:	e6d4      	b.n	8000934 <__aeabi_dadd+0x3b8>
 8000b8a:	08c0      	lsrs	r0, r0, #3
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x616>
 8000b90:	e6bf      	b.n	8000912 <__aeabi_dadd+0x396>
 8000b92:	0762      	lsls	r2, r4, #29
 8000b94:	4310      	orrs	r0, r2
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	08e4      	lsrs	r4, r4, #3
 8000b9a:	0312      	lsls	r2, r2, #12
 8000b9c:	4214      	tst	r4, r2
 8000b9e:	d0cd      	beq.n	8000b3c <__aeabi_dadd+0x5c0>
 8000ba0:	08dd      	lsrs	r5, r3, #3
 8000ba2:	4215      	tst	r5, r2
 8000ba4:	d1ca      	bne.n	8000b3c <__aeabi_dadd+0x5c0>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	08d8      	lsrs	r0, r3, #3
 8000baa:	4653      	mov	r3, sl
 8000bac:	075b      	lsls	r3, r3, #29
 8000bae:	000e      	movs	r6, r1
 8000bb0:	002c      	movs	r4, r5
 8000bb2:	4318      	orrs	r0, r3
 8000bb4:	e7c2      	b.n	8000b3c <__aeabi_dadd+0x5c0>
 8000bb6:	4663      	mov	r3, ip
 8000bb8:	08d9      	lsrs	r1, r3, #3
 8000bba:	4653      	mov	r3, sl
 8000bbc:	075a      	lsls	r2, r3, #29
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	08dc      	lsrs	r4, r3, #3
 8000bc2:	e699      	b.n	80008f8 <__aeabi_dadd+0x37c>
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	08d8      	lsrs	r0, r3, #3
 8000bc8:	4653      	mov	r3, sl
 8000bca:	075a      	lsls	r2, r3, #29
 8000bcc:	000e      	movs	r6, r1
 8000bce:	4302      	orrs	r2, r0
 8000bd0:	08dc      	lsrs	r4, r3, #3
 8000bd2:	e6a1      	b.n	8000918 <__aeabi_dadd+0x39c>
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0027      	movs	r7, r4
 8000bd8:	3920      	subs	r1, #32
 8000bda:	40cf      	lsrs	r7, r1
 8000bdc:	2a20      	cmp	r2, #32
 8000bde:	d003      	beq.n	8000be8 <__aeabi_dadd+0x66c>
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	1a8a      	subs	r2, r1, r2
 8000be4:	4094      	lsls	r4, r2
 8000be6:	4320      	orrs	r0, r4
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	0005      	movs	r5, r0
 8000bee:	433d      	orrs	r5, r7
 8000bf0:	e651      	b.n	8000896 <__aeabi_dadd+0x31a>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	2500      	movs	r5, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	e558      	b.n	80006ac <__aeabi_dadd+0x130>
 8000bfa:	4460      	add	r0, ip
 8000bfc:	4560      	cmp	r0, ip
 8000bfe:	4192      	sbcs	r2, r2
 8000c00:	4454      	add	r4, sl
 8000c02:	4252      	negs	r2, r2
 8000c04:	0005      	movs	r5, r0
 8000c06:	18a4      	adds	r4, r4, r2
 8000c08:	e73a      	b.n	8000a80 <__aeabi_dadd+0x504>
 8000c0a:	4653      	mov	r3, sl
 8000c0c:	075a      	lsls	r2, r3, #29
 8000c0e:	4663      	mov	r3, ip
 8000c10:	08d9      	lsrs	r1, r3, #3
 8000c12:	4653      	mov	r3, sl
 8000c14:	430a      	orrs	r2, r1
 8000c16:	08dc      	lsrs	r4, r3, #3
 8000c18:	e67e      	b.n	8000918 <__aeabi_dadd+0x39c>
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	001c      	movs	r4, r3
 8000c1e:	432a      	orrs	r2, r5
 8000c20:	d000      	beq.n	8000c24 <__aeabi_dadd+0x6a8>
 8000c22:	e6ab      	b.n	800097c <__aeabi_dadd+0x400>
 8000c24:	e6c1      	b.n	80009aa <__aeabi_dadd+0x42e>
 8000c26:	2120      	movs	r1, #32
 8000c28:	2500      	movs	r5, #0
 8000c2a:	1a09      	subs	r1, r1, r0
 8000c2c:	e519      	b.n	8000662 <__aeabi_dadd+0xe6>
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2500      	movs	r5, #0
 8000c32:	4c01      	ldr	r4, [pc, #4]	@ (8000c38 <__aeabi_dadd+0x6bc>)
 8000c34:	e53a      	b.n	80006ac <__aeabi_dadd+0x130>
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	000007ff 	.word	0x000007ff
 8000c3c:	ff7fffff 	.word	0xff7fffff
 8000c40:	000007fe 	.word	0x000007fe

08000c44 <__aeabi_ddiv>:
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	46de      	mov	lr, fp
 8000c48:	4645      	mov	r5, r8
 8000c4a:	4657      	mov	r7, sl
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	b5e0      	push	{r5, r6, r7, lr}
 8000c50:	b087      	sub	sp, #28
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	030b      	lsls	r3, r1, #12
 8000c58:	0b1b      	lsrs	r3, r3, #12
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	0fca      	lsrs	r2, r1, #31
 8000c5e:	004b      	lsls	r3, r1, #1
 8000c60:	0004      	movs	r4, r0
 8000c62:	4680      	mov	r8, r0
 8000c64:	0d5b      	lsrs	r3, r3, #21
 8000c66:	9202      	str	r2, [sp, #8]
 8000c68:	d100      	bne.n	8000c6c <__aeabi_ddiv+0x28>
 8000c6a:	e16a      	b.n	8000f42 <__aeabi_ddiv+0x2fe>
 8000c6c:	4ad4      	ldr	r2, [pc, #848]	@ (8000fc0 <__aeabi_ddiv+0x37c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d100      	bne.n	8000c74 <__aeabi_ddiv+0x30>
 8000c72:	e18c      	b.n	8000f8e <__aeabi_ddiv+0x34a>
 8000c74:	4659      	mov	r1, fp
 8000c76:	0f42      	lsrs	r2, r0, #29
 8000c78:	00c9      	lsls	r1, r1, #3
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0409      	lsls	r1, r1, #16
 8000c80:	4311      	orrs	r1, r2
 8000c82:	00c2      	lsls	r2, r0, #3
 8000c84:	4690      	mov	r8, r2
 8000c86:	4acf      	ldr	r2, [pc, #828]	@ (8000fc4 <__aeabi_ddiv+0x380>)
 8000c88:	4689      	mov	r9, r1
 8000c8a:	4692      	mov	sl, r2
 8000c8c:	449a      	add	sl, r3
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2400      	movs	r4, #0
 8000c92:	9303      	str	r3, [sp, #12]
 8000c94:	9e00      	ldr	r6, [sp, #0]
 8000c96:	9f01      	ldr	r7, [sp, #4]
 8000c98:	033b      	lsls	r3, r7, #12
 8000c9a:	0b1b      	lsrs	r3, r3, #12
 8000c9c:	469b      	mov	fp, r3
 8000c9e:	007b      	lsls	r3, r7, #1
 8000ca0:	0030      	movs	r0, r6
 8000ca2:	0d5b      	lsrs	r3, r3, #21
 8000ca4:	0ffd      	lsrs	r5, r7, #31
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x68>
 8000caa:	e128      	b.n	8000efe <__aeabi_ddiv+0x2ba>
 8000cac:	4ac4      	ldr	r2, [pc, #784]	@ (8000fc0 <__aeabi_ddiv+0x37c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x70>
 8000cb2:	e177      	b.n	8000fa4 <__aeabi_ddiv+0x360>
 8000cb4:	4659      	mov	r1, fp
 8000cb6:	0f72      	lsrs	r2, r6, #29
 8000cb8:	00c9      	lsls	r1, r1, #3
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	468b      	mov	fp, r1
 8000cc4:	49bf      	ldr	r1, [pc, #764]	@ (8000fc4 <__aeabi_ddiv+0x380>)
 8000cc6:	00f2      	lsls	r2, r6, #3
 8000cc8:	468c      	mov	ip, r1
 8000cca:	4651      	mov	r1, sl
 8000ccc:	4463      	add	r3, ip
 8000cce:	1acb      	subs	r3, r1, r3
 8000cd0:	469a      	mov	sl, r3
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9e02      	ldr	r6, [sp, #8]
 8000cd6:	406e      	eors	r6, r5
 8000cd8:	2c0f      	cmp	r4, #15
 8000cda:	d827      	bhi.n	8000d2c <__aeabi_ddiv+0xe8>
 8000cdc:	49ba      	ldr	r1, [pc, #744]	@ (8000fc8 <__aeabi_ddiv+0x384>)
 8000cde:	00a4      	lsls	r4, r4, #2
 8000ce0:	5909      	ldr	r1, [r1, r4]
 8000ce2:	468f      	mov	pc, r1
 8000ce4:	46cb      	mov	fp, r9
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	9e02      	ldr	r6, [sp, #8]
 8000cea:	9b03      	ldr	r3, [sp, #12]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d016      	beq.n	8000d1e <__aeabi_ddiv+0xda>
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0xb2>
 8000cf4:	e2a6      	b.n	8001244 <__aeabi_ddiv+0x600>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_ddiv+0xb8>
 8000cfa:	e0df      	b.n	8000ebc <__aeabi_ddiv+0x278>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2400      	movs	r4, #0
 8000d02:	4690      	mov	r8, r2
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	4323      	orrs	r3, r4
 8000d08:	07f6      	lsls	r6, r6, #31
 8000d0a:	4333      	orrs	r3, r6
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	0019      	movs	r1, r3
 8000d10:	b007      	add	sp, #28
 8000d12:	bcf0      	pop	{r4, r5, r6, r7}
 8000d14:	46bb      	mov	fp, r7
 8000d16:	46b2      	mov	sl, r6
 8000d18:	46a9      	mov	r9, r5
 8000d1a:	46a0      	mov	r8, r4
 8000d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	4690      	mov	r8, r2
 8000d24:	4ba6      	ldr	r3, [pc, #664]	@ (8000fc0 <__aeabi_ddiv+0x37c>)
 8000d26:	e7ed      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 8000d28:	002e      	movs	r6, r5
 8000d2a:	e7df      	b.n	8000cec <__aeabi_ddiv+0xa8>
 8000d2c:	45cb      	cmp	fp, r9
 8000d2e:	d200      	bcs.n	8000d32 <__aeabi_ddiv+0xee>
 8000d30:	e1d4      	b.n	80010dc <__aeabi_ddiv+0x498>
 8000d32:	d100      	bne.n	8000d36 <__aeabi_ddiv+0xf2>
 8000d34:	e1cf      	b.n	80010d6 <__aeabi_ddiv+0x492>
 8000d36:	2301      	movs	r3, #1
 8000d38:	425b      	negs	r3, r3
 8000d3a:	469c      	mov	ip, r3
 8000d3c:	4644      	mov	r4, r8
 8000d3e:	4648      	mov	r0, r9
 8000d40:	2700      	movs	r7, #0
 8000d42:	44e2      	add	sl, ip
 8000d44:	465b      	mov	r3, fp
 8000d46:	0e15      	lsrs	r5, r2, #24
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	431d      	orrs	r5, r3
 8000d4c:	0c19      	lsrs	r1, r3, #16
 8000d4e:	042b      	lsls	r3, r5, #16
 8000d50:	0212      	lsls	r2, r2, #8
 8000d52:	9500      	str	r5, [sp, #0]
 8000d54:	0c1d      	lsrs	r5, r3, #16
 8000d56:	4691      	mov	r9, r2
 8000d58:	9102      	str	r1, [sp, #8]
 8000d5a:	9503      	str	r5, [sp, #12]
 8000d5c:	f7ff fa72 	bl	8000244 <__aeabi_uidivmod>
 8000d60:	0002      	movs	r2, r0
 8000d62:	436a      	muls	r2, r5
 8000d64:	040b      	lsls	r3, r1, #16
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	4680      	mov	r8, r0
 8000d6a:	4319      	orrs	r1, r3
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	d909      	bls.n	8000d84 <__aeabi_ddiv+0x140>
 8000d70:	9d00      	ldr	r5, [sp, #0]
 8000d72:	2301      	movs	r3, #1
 8000d74:	46ac      	mov	ip, r5
 8000d76:	425b      	negs	r3, r3
 8000d78:	4461      	add	r1, ip
 8000d7a:	469c      	mov	ip, r3
 8000d7c:	44e0      	add	r8, ip
 8000d7e:	428d      	cmp	r5, r1
 8000d80:	d800      	bhi.n	8000d84 <__aeabi_ddiv+0x140>
 8000d82:	e1fb      	b.n	800117c <__aeabi_ddiv+0x538>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa5c 	bl	8000244 <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d906      	bls.n	8000dac <__aeabi_ddiv+0x168>
 8000d9e:	9900      	ldr	r1, [sp, #0]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	468c      	mov	ip, r1
 8000da4:	4464      	add	r4, ip
 8000da6:	42a1      	cmp	r1, r4
 8000da8:	d800      	bhi.n	8000dac <__aeabi_ddiv+0x168>
 8000daa:	e1e1      	b.n	8001170 <__aeabi_ddiv+0x52c>
 8000dac:	1aa0      	subs	r0, r4, r2
 8000dae:	4642      	mov	r2, r8
 8000db0:	0412      	lsls	r2, r2, #16
 8000db2:	431a      	orrs	r2, r3
 8000db4:	4693      	mov	fp, r2
 8000db6:	464b      	mov	r3, r9
 8000db8:	4659      	mov	r1, fp
 8000dba:	0c1b      	lsrs	r3, r3, #16
 8000dbc:	001d      	movs	r5, r3
 8000dbe:	9304      	str	r3, [sp, #16]
 8000dc0:	040b      	lsls	r3, r1, #16
 8000dc2:	4649      	mov	r1, r9
 8000dc4:	0409      	lsls	r1, r1, #16
 8000dc6:	0c09      	lsrs	r1, r1, #16
 8000dc8:	000c      	movs	r4, r1
 8000dca:	0c1b      	lsrs	r3, r3, #16
 8000dcc:	435c      	muls	r4, r3
 8000dce:	0c12      	lsrs	r2, r2, #16
 8000dd0:	436b      	muls	r3, r5
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	4351      	muls	r1, r2
 8000dd6:	436a      	muls	r2, r5
 8000dd8:	0c25      	lsrs	r5, r4, #16
 8000dda:	46ac      	mov	ip, r5
 8000ddc:	185b      	adds	r3, r3, r1
 8000dde:	4463      	add	r3, ip
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d903      	bls.n	8000dec <__aeabi_ddiv+0x1a8>
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0249      	lsls	r1, r1, #9
 8000de8:	468c      	mov	ip, r1
 8000dea:	4462      	add	r2, ip
 8000dec:	0c19      	lsrs	r1, r3, #16
 8000dee:	0424      	lsls	r4, r4, #16
 8000df0:	041b      	lsls	r3, r3, #16
 8000df2:	0c24      	lsrs	r4, r4, #16
 8000df4:	188a      	adds	r2, r1, r2
 8000df6:	191c      	adds	r4, r3, r4
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	d302      	bcc.n	8000e02 <__aeabi_ddiv+0x1be>
 8000dfc:	d116      	bne.n	8000e2c <__aeabi_ddiv+0x1e8>
 8000dfe:	42a7      	cmp	r7, r4
 8000e00:	d214      	bcs.n	8000e2c <__aeabi_ddiv+0x1e8>
 8000e02:	465b      	mov	r3, fp
 8000e04:	9d00      	ldr	r5, [sp, #0]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	444f      	add	r7, r9
 8000e0a:	9305      	str	r3, [sp, #20]
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	419b      	sbcs	r3, r3
 8000e10:	46ac      	mov	ip, r5
 8000e12:	425b      	negs	r3, r3
 8000e14:	4463      	add	r3, ip
 8000e16:	18c0      	adds	r0, r0, r3
 8000e18:	4285      	cmp	r5, r0
 8000e1a:	d300      	bcc.n	8000e1e <__aeabi_ddiv+0x1da>
 8000e1c:	e1a1      	b.n	8001162 <__aeabi_ddiv+0x51e>
 8000e1e:	4282      	cmp	r2, r0
 8000e20:	d900      	bls.n	8000e24 <__aeabi_ddiv+0x1e0>
 8000e22:	e1f6      	b.n	8001212 <__aeabi_ddiv+0x5ce>
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x1e4>
 8000e26:	e1f1      	b.n	800120c <__aeabi_ddiv+0x5c8>
 8000e28:	9b05      	ldr	r3, [sp, #20]
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	1b3c      	subs	r4, r7, r4
 8000e2e:	42a7      	cmp	r7, r4
 8000e30:	41bf      	sbcs	r7, r7
 8000e32:	9d00      	ldr	r5, [sp, #0]
 8000e34:	1a80      	subs	r0, r0, r2
 8000e36:	427f      	negs	r7, r7
 8000e38:	1bc0      	subs	r0, r0, r7
 8000e3a:	4285      	cmp	r5, r0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_ddiv+0x1fc>
 8000e3e:	e1d0      	b.n	80011e2 <__aeabi_ddiv+0x59e>
 8000e40:	9902      	ldr	r1, [sp, #8]
 8000e42:	f7ff f9ff 	bl	8000244 <__aeabi_uidivmod>
 8000e46:	9a03      	ldr	r2, [sp, #12]
 8000e48:	040b      	lsls	r3, r1, #16
 8000e4a:	4342      	muls	r2, r0
 8000e4c:	0c21      	lsrs	r1, r4, #16
 8000e4e:	0007      	movs	r7, r0
 8000e50:	4319      	orrs	r1, r3
 8000e52:	428a      	cmp	r2, r1
 8000e54:	d900      	bls.n	8000e58 <__aeabi_ddiv+0x214>
 8000e56:	e178      	b.n	800114a <__aeabi_ddiv+0x506>
 8000e58:	1a88      	subs	r0, r1, r2
 8000e5a:	9902      	ldr	r1, [sp, #8]
 8000e5c:	f7ff f9f2 	bl	8000244 <__aeabi_uidivmod>
 8000e60:	9a03      	ldr	r2, [sp, #12]
 8000e62:	0424      	lsls	r4, r4, #16
 8000e64:	4342      	muls	r2, r0
 8000e66:	0409      	lsls	r1, r1, #16
 8000e68:	0c24      	lsrs	r4, r4, #16
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	430c      	orrs	r4, r1
 8000e6e:	42a2      	cmp	r2, r4
 8000e70:	d900      	bls.n	8000e74 <__aeabi_ddiv+0x230>
 8000e72:	e15d      	b.n	8001130 <__aeabi_ddiv+0x4ec>
 8000e74:	4641      	mov	r1, r8
 8000e76:	1aa4      	subs	r4, r4, r2
 8000e78:	043a      	lsls	r2, r7, #16
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	9d04      	ldr	r5, [sp, #16]
 8000e7e:	0413      	lsls	r3, r2, #16
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	4359      	muls	r1, r3
 8000e84:	4647      	mov	r7, r8
 8000e86:	436b      	muls	r3, r5
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0c10      	lsrs	r0, r2, #16
 8000e8c:	4347      	muls	r7, r0
 8000e8e:	0c0b      	lsrs	r3, r1, #16
 8000e90:	44bc      	add	ip, r7
 8000e92:	4463      	add	r3, ip
 8000e94:	4368      	muls	r0, r5
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x25e>
 8000e9a:	2580      	movs	r5, #128	@ 0x80
 8000e9c:	026d      	lsls	r5, r5, #9
 8000e9e:	46ac      	mov	ip, r5
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1f      	lsrs	r7, r3, #16
 8000ea4:	0409      	lsls	r1, r1, #16
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	0c09      	lsrs	r1, r1, #16
 8000eaa:	183f      	adds	r7, r7, r0
 8000eac:	185b      	adds	r3, r3, r1
 8000eae:	42bc      	cmp	r4, r7
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x270>
 8000eb2:	e102      	b.n	80010ba <__aeabi_ddiv+0x476>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x274>
 8000eb6:	e0fd      	b.n	80010b4 <__aeabi_ddiv+0x470>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <__aeabi_ddiv+0x388>)
 8000ebe:	4453      	add	r3, sl
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dc00      	bgt.n	8000ec6 <__aeabi_ddiv+0x282>
 8000ec4:	e0ae      	b.n	8001024 <__aeabi_ddiv+0x3e0>
 8000ec6:	0751      	lsls	r1, r2, #29
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_ddiv+0x288>
 8000eca:	e198      	b.n	80011fe <__aeabi_ddiv+0x5ba>
 8000ecc:	4659      	mov	r1, fp
 8000ece:	01c9      	lsls	r1, r1, #7
 8000ed0:	d506      	bpl.n	8000ee0 <__aeabi_ddiv+0x29c>
 8000ed2:	4659      	mov	r1, fp
 8000ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd0 <__aeabi_ddiv+0x38c>)
 8000ed6:	4019      	ands	r1, r3
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	468b      	mov	fp, r1
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4453      	add	r3, sl
 8000ee0:	493c      	ldr	r1, [pc, #240]	@ (8000fd4 <__aeabi_ddiv+0x390>)
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_ddiv+0x2a4>
 8000ee6:	e71a      	b.n	8000d1e <__aeabi_ddiv+0xda>
 8000ee8:	4659      	mov	r1, fp
 8000eea:	08d2      	lsrs	r2, r2, #3
 8000eec:	0749      	lsls	r1, r1, #29
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	465a      	mov	r2, fp
 8000ef2:	055b      	lsls	r3, r3, #21
 8000ef4:	0254      	lsls	r4, r2, #9
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	0b24      	lsrs	r4, r4, #12
 8000efa:	0d5b      	lsrs	r3, r3, #21
 8000efc:	e702      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 8000efe:	465a      	mov	r2, fp
 8000f00:	9b00      	ldr	r3, [sp, #0]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0x2c4>
 8000f06:	e07e      	b.n	8001006 <__aeabi_ddiv+0x3c2>
 8000f08:	465b      	mov	r3, fp
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0x2cc>
 8000f0e:	e100      	b.n	8001112 <__aeabi_ddiv+0x4ce>
 8000f10:	4658      	mov	r0, fp
 8000f12:	f001 fa73 	bl	80023fc <__clzsi2>
 8000f16:	0002      	movs	r2, r0
 8000f18:	0003      	movs	r3, r0
 8000f1a:	3a0b      	subs	r2, #11
 8000f1c:	271d      	movs	r7, #29
 8000f1e:	9e00      	ldr	r6, [sp, #0]
 8000f20:	1aba      	subs	r2, r7, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	4658      	mov	r0, fp
 8000f26:	40d6      	lsrs	r6, r2
 8000f28:	3908      	subs	r1, #8
 8000f2a:	4088      	lsls	r0, r1
 8000f2c:	0032      	movs	r2, r6
 8000f2e:	4302      	orrs	r2, r0
 8000f30:	4693      	mov	fp, r2
 8000f32:	9a00      	ldr	r2, [sp, #0]
 8000f34:	408a      	lsls	r2, r1
 8000f36:	4928      	ldr	r1, [pc, #160]	@ (8000fd8 <__aeabi_ddiv+0x394>)
 8000f38:	4453      	add	r3, sl
 8000f3a:	468a      	mov	sl, r1
 8000f3c:	449a      	add	sl, r3
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e6c8      	b.n	8000cd4 <__aeabi_ddiv+0x90>
 8000f42:	465b      	mov	r3, fp
 8000f44:	4303      	orrs	r3, r0
 8000f46:	4699      	mov	r9, r3
 8000f48:	d056      	beq.n	8000ff8 <__aeabi_ddiv+0x3b4>
 8000f4a:	465b      	mov	r3, fp
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_ddiv+0x30e>
 8000f50:	e0cd      	b.n	80010ee <__aeabi_ddiv+0x4aa>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 fa52 	bl	80023fc <__clzsi2>
 8000f58:	230b      	movs	r3, #11
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0002      	movs	r2, r0
 8000f60:	4484      	add	ip, r0
 8000f62:	4666      	mov	r6, ip
 8000f64:	231d      	movs	r3, #29
 8000f66:	1b9b      	subs	r3, r3, r6
 8000f68:	0026      	movs	r6, r4
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	4658      	mov	r0, fp
 8000f6e:	40de      	lsrs	r6, r3
 8000f70:	3908      	subs	r1, #8
 8000f72:	4088      	lsls	r0, r1
 8000f74:	0033      	movs	r3, r6
 8000f76:	4303      	orrs	r3, r0
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	408b      	lsls	r3, r1
 8000f7e:	4698      	mov	r8, r3
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <__aeabi_ddiv+0x398>)
 8000f82:	2400      	movs	r4, #0
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	469a      	mov	sl, r3
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9303      	str	r3, [sp, #12]
 8000f8c:	e682      	b.n	8000c94 <__aeabi_ddiv+0x50>
 8000f8e:	465a      	mov	r2, fp
 8000f90:	4302      	orrs	r2, r0
 8000f92:	4691      	mov	r9, r2
 8000f94:	d12a      	bne.n	8000fec <__aeabi_ddiv+0x3a8>
 8000f96:	2200      	movs	r2, #0
 8000f98:	469a      	mov	sl, r3
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	4690      	mov	r8, r2
 8000f9e:	2408      	movs	r4, #8
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	e677      	b.n	8000c94 <__aeabi_ddiv+0x50>
 8000fa4:	465a      	mov	r2, fp
 8000fa6:	9b00      	ldr	r3, [sp, #0]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <__aeabi_ddiv+0x39c>)
 8000fac:	469c      	mov	ip, r3
 8000fae:	44e2      	add	sl, ip
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	d117      	bne.n	8000fe4 <__aeabi_ddiv+0x3a0>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	469b      	mov	fp, r3
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	e689      	b.n	8000cd4 <__aeabi_ddiv+0x90>
 8000fc0:	000007ff 	.word	0x000007ff
 8000fc4:	fffffc01 	.word	0xfffffc01
 8000fc8:	0800b79c 	.word	0x0800b79c
 8000fcc:	000003ff 	.word	0x000003ff
 8000fd0:	feffffff 	.word	0xfeffffff
 8000fd4:	000007fe 	.word	0x000007fe
 8000fd8:	000003f3 	.word	0x000003f3
 8000fdc:	fffffc0d 	.word	0xfffffc0d
 8000fe0:	fffff801 	.word	0xfffff801
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	431c      	orrs	r4, r3
 8000fea:	e673      	b.n	8000cd4 <__aeabi_ddiv+0x90>
 8000fec:	469a      	mov	sl, r3
 8000fee:	2303      	movs	r3, #3
 8000ff0:	46d9      	mov	r9, fp
 8000ff2:	240c      	movs	r4, #12
 8000ff4:	9303      	str	r3, [sp, #12]
 8000ff6:	e64d      	b.n	8000c94 <__aeabi_ddiv+0x50>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	2404      	movs	r4, #4
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	e646      	b.n	8000c94 <__aeabi_ddiv+0x50>
 8001006:	2301      	movs	r3, #1
 8001008:	431c      	orrs	r4, r3
 800100a:	2300      	movs	r3, #0
 800100c:	469b      	mov	fp, r3
 800100e:	3301      	adds	r3, #1
 8001010:	e660      	b.n	8000cd4 <__aeabi_ddiv+0x90>
 8001012:	2300      	movs	r3, #0
 8001014:	2480      	movs	r4, #128	@ 0x80
 8001016:	4698      	mov	r8, r3
 8001018:	2600      	movs	r6, #0
 800101a:	4b92      	ldr	r3, [pc, #584]	@ (8001264 <__aeabi_ddiv+0x620>)
 800101c:	0324      	lsls	r4, r4, #12
 800101e:	e671      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 8001020:	2201      	movs	r2, #1
 8001022:	4252      	negs	r2, r2
 8001024:	2101      	movs	r1, #1
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	2938      	cmp	r1, #56	@ 0x38
 800102a:	dd00      	ble.n	800102e <__aeabi_ddiv+0x3ea>
 800102c:	e666      	b.n	8000cfc <__aeabi_ddiv+0xb8>
 800102e:	291f      	cmp	r1, #31
 8001030:	dc00      	bgt.n	8001034 <__aeabi_ddiv+0x3f0>
 8001032:	e0ab      	b.n	800118c <__aeabi_ddiv+0x548>
 8001034:	201f      	movs	r0, #31
 8001036:	4240      	negs	r0, r0
 8001038:	1ac3      	subs	r3, r0, r3
 800103a:	4658      	mov	r0, fp
 800103c:	40d8      	lsrs	r0, r3
 800103e:	0003      	movs	r3, r0
 8001040:	2920      	cmp	r1, #32
 8001042:	d004      	beq.n	800104e <__aeabi_ddiv+0x40a>
 8001044:	4658      	mov	r0, fp
 8001046:	4988      	ldr	r1, [pc, #544]	@ (8001268 <__aeabi_ddiv+0x624>)
 8001048:	4451      	add	r1, sl
 800104a:	4088      	lsls	r0, r1
 800104c:	4302      	orrs	r2, r0
 800104e:	1e51      	subs	r1, r2, #1
 8001050:	418a      	sbcs	r2, r1
 8001052:	431a      	orrs	r2, r3
 8001054:	2307      	movs	r3, #7
 8001056:	0019      	movs	r1, r3
 8001058:	2400      	movs	r4, #0
 800105a:	4011      	ands	r1, r2
 800105c:	4213      	tst	r3, r2
 800105e:	d00c      	beq.n	800107a <__aeabi_ddiv+0x436>
 8001060:	230f      	movs	r3, #15
 8001062:	4013      	ands	r3, r2
 8001064:	2b04      	cmp	r3, #4
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x426>
 8001068:	e0f9      	b.n	800125e <__aeabi_ddiv+0x61a>
 800106a:	1d11      	adds	r1, r2, #4
 800106c:	4291      	cmp	r1, r2
 800106e:	419b      	sbcs	r3, r3
 8001070:	000a      	movs	r2, r1
 8001072:	425b      	negs	r3, r3
 8001074:	0759      	lsls	r1, r3, #29
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	0b1c      	lsrs	r4, r3, #12
 800107a:	08d2      	lsrs	r2, r2, #3
 800107c:	430a      	orrs	r2, r1
 800107e:	4690      	mov	r8, r2
 8001080:	2300      	movs	r3, #0
 8001082:	e63f      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 8001084:	2480      	movs	r4, #128	@ 0x80
 8001086:	464b      	mov	r3, r9
 8001088:	0324      	lsls	r4, r4, #12
 800108a:	4223      	tst	r3, r4
 800108c:	d009      	beq.n	80010a2 <__aeabi_ddiv+0x45e>
 800108e:	465b      	mov	r3, fp
 8001090:	4223      	tst	r3, r4
 8001092:	d106      	bne.n	80010a2 <__aeabi_ddiv+0x45e>
 8001094:	431c      	orrs	r4, r3
 8001096:	0324      	lsls	r4, r4, #12
 8001098:	002e      	movs	r6, r5
 800109a:	4690      	mov	r8, r2
 800109c:	4b71      	ldr	r3, [pc, #452]	@ (8001264 <__aeabi_ddiv+0x620>)
 800109e:	0b24      	lsrs	r4, r4, #12
 80010a0:	e630      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 80010a2:	2480      	movs	r4, #128	@ 0x80
 80010a4:	464b      	mov	r3, r9
 80010a6:	0324      	lsls	r4, r4, #12
 80010a8:	431c      	orrs	r4, r3
 80010aa:	0324      	lsls	r4, r4, #12
 80010ac:	9e02      	ldr	r6, [sp, #8]
 80010ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001264 <__aeabi_ddiv+0x620>)
 80010b0:	0b24      	lsrs	r4, r4, #12
 80010b2:	e627      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x476>
 80010b8:	e700      	b.n	8000ebc <__aeabi_ddiv+0x278>
 80010ba:	9800      	ldr	r0, [sp, #0]
 80010bc:	1e51      	subs	r1, r2, #1
 80010be:	4684      	mov	ip, r0
 80010c0:	4464      	add	r4, ip
 80010c2:	4284      	cmp	r4, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x484>
 80010c6:	e084      	b.n	80011d2 <__aeabi_ddiv+0x58e>
 80010c8:	42bc      	cmp	r4, r7
 80010ca:	d200      	bcs.n	80010ce <__aeabi_ddiv+0x48a>
 80010cc:	e0ae      	b.n	800122c <__aeabi_ddiv+0x5e8>
 80010ce:	d100      	bne.n	80010d2 <__aeabi_ddiv+0x48e>
 80010d0:	e0c1      	b.n	8001256 <__aeabi_ddiv+0x612>
 80010d2:	000a      	movs	r2, r1
 80010d4:	e6f0      	b.n	8000eb8 <__aeabi_ddiv+0x274>
 80010d6:	4542      	cmp	r2, r8
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x498>
 80010da:	e62c      	b.n	8000d36 <__aeabi_ddiv+0xf2>
 80010dc:	464b      	mov	r3, r9
 80010de:	07dc      	lsls	r4, r3, #31
 80010e0:	0858      	lsrs	r0, r3, #1
 80010e2:	4643      	mov	r3, r8
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	431c      	orrs	r4, r3
 80010e8:	4643      	mov	r3, r8
 80010ea:	07df      	lsls	r7, r3, #31
 80010ec:	e62a      	b.n	8000d44 <__aeabi_ddiv+0x100>
 80010ee:	f001 f985 	bl	80023fc <__clzsi2>
 80010f2:	2315      	movs	r3, #21
 80010f4:	469c      	mov	ip, r3
 80010f6:	4484      	add	ip, r0
 80010f8:	0002      	movs	r2, r0
 80010fa:	4663      	mov	r3, ip
 80010fc:	3220      	adds	r2, #32
 80010fe:	2b1c      	cmp	r3, #28
 8001100:	dc00      	bgt.n	8001104 <__aeabi_ddiv+0x4c0>
 8001102:	e72e      	b.n	8000f62 <__aeabi_ddiv+0x31e>
 8001104:	0023      	movs	r3, r4
 8001106:	3808      	subs	r0, #8
 8001108:	4083      	lsls	r3, r0
 800110a:	4699      	mov	r9, r3
 800110c:	2300      	movs	r3, #0
 800110e:	4698      	mov	r8, r3
 8001110:	e736      	b.n	8000f80 <__aeabi_ddiv+0x33c>
 8001112:	f001 f973 	bl	80023fc <__clzsi2>
 8001116:	0002      	movs	r2, r0
 8001118:	0003      	movs	r3, r0
 800111a:	3215      	adds	r2, #21
 800111c:	3320      	adds	r3, #32
 800111e:	2a1c      	cmp	r2, #28
 8001120:	dc00      	bgt.n	8001124 <__aeabi_ddiv+0x4e0>
 8001122:	e6fb      	b.n	8000f1c <__aeabi_ddiv+0x2d8>
 8001124:	9900      	ldr	r1, [sp, #0]
 8001126:	3808      	subs	r0, #8
 8001128:	4081      	lsls	r1, r0
 800112a:	2200      	movs	r2, #0
 800112c:	468b      	mov	fp, r1
 800112e:	e702      	b.n	8000f36 <__aeabi_ddiv+0x2f2>
 8001130:	9900      	ldr	r1, [sp, #0]
 8001132:	3b01      	subs	r3, #1
 8001134:	468c      	mov	ip, r1
 8001136:	4464      	add	r4, ip
 8001138:	42a1      	cmp	r1, r4
 800113a:	d900      	bls.n	800113e <__aeabi_ddiv+0x4fa>
 800113c:	e69a      	b.n	8000e74 <__aeabi_ddiv+0x230>
 800113e:	42a2      	cmp	r2, r4
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x500>
 8001142:	e697      	b.n	8000e74 <__aeabi_ddiv+0x230>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4464      	add	r4, ip
 8001148:	e694      	b.n	8000e74 <__aeabi_ddiv+0x230>
 800114a:	46ac      	mov	ip, r5
 800114c:	4461      	add	r1, ip
 800114e:	3f01      	subs	r7, #1
 8001150:	428d      	cmp	r5, r1
 8001152:	d900      	bls.n	8001156 <__aeabi_ddiv+0x512>
 8001154:	e680      	b.n	8000e58 <__aeabi_ddiv+0x214>
 8001156:	428a      	cmp	r2, r1
 8001158:	d800      	bhi.n	800115c <__aeabi_ddiv+0x518>
 800115a:	e67d      	b.n	8000e58 <__aeabi_ddiv+0x214>
 800115c:	1e87      	subs	r7, r0, #2
 800115e:	4461      	add	r1, ip
 8001160:	e67a      	b.n	8000e58 <__aeabi_ddiv+0x214>
 8001162:	4285      	cmp	r5, r0
 8001164:	d000      	beq.n	8001168 <__aeabi_ddiv+0x524>
 8001166:	e65f      	b.n	8000e28 <__aeabi_ddiv+0x1e4>
 8001168:	45b9      	cmp	r9, r7
 800116a:	d900      	bls.n	800116e <__aeabi_ddiv+0x52a>
 800116c:	e65c      	b.n	8000e28 <__aeabi_ddiv+0x1e4>
 800116e:	e656      	b.n	8000e1e <__aeabi_ddiv+0x1da>
 8001170:	42a2      	cmp	r2, r4
 8001172:	d800      	bhi.n	8001176 <__aeabi_ddiv+0x532>
 8001174:	e61a      	b.n	8000dac <__aeabi_ddiv+0x168>
 8001176:	1e83      	subs	r3, r0, #2
 8001178:	4464      	add	r4, ip
 800117a:	e617      	b.n	8000dac <__aeabi_ddiv+0x168>
 800117c:	428a      	cmp	r2, r1
 800117e:	d800      	bhi.n	8001182 <__aeabi_ddiv+0x53e>
 8001180:	e600      	b.n	8000d84 <__aeabi_ddiv+0x140>
 8001182:	46ac      	mov	ip, r5
 8001184:	1e83      	subs	r3, r0, #2
 8001186:	4698      	mov	r8, r3
 8001188:	4461      	add	r1, ip
 800118a:	e5fb      	b.n	8000d84 <__aeabi_ddiv+0x140>
 800118c:	4837      	ldr	r0, [pc, #220]	@ (800126c <__aeabi_ddiv+0x628>)
 800118e:	0014      	movs	r4, r2
 8001190:	4450      	add	r0, sl
 8001192:	4082      	lsls	r2, r0
 8001194:	465b      	mov	r3, fp
 8001196:	0017      	movs	r7, r2
 8001198:	4083      	lsls	r3, r0
 800119a:	40cc      	lsrs	r4, r1
 800119c:	1e7a      	subs	r2, r7, #1
 800119e:	4197      	sbcs	r7, r2
 80011a0:	4323      	orrs	r3, r4
 80011a2:	433b      	orrs	r3, r7
 80011a4:	001a      	movs	r2, r3
 80011a6:	465b      	mov	r3, fp
 80011a8:	40cb      	lsrs	r3, r1
 80011aa:	0751      	lsls	r1, r2, #29
 80011ac:	d009      	beq.n	80011c2 <__aeabi_ddiv+0x57e>
 80011ae:	210f      	movs	r1, #15
 80011b0:	4011      	ands	r1, r2
 80011b2:	2904      	cmp	r1, #4
 80011b4:	d005      	beq.n	80011c2 <__aeabi_ddiv+0x57e>
 80011b6:	1d11      	adds	r1, r2, #4
 80011b8:	4291      	cmp	r1, r2
 80011ba:	4192      	sbcs	r2, r2
 80011bc:	4252      	negs	r2, r2
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	000a      	movs	r2, r1
 80011c2:	0219      	lsls	r1, r3, #8
 80011c4:	d400      	bmi.n	80011c8 <__aeabi_ddiv+0x584>
 80011c6:	e755      	b.n	8001074 <__aeabi_ddiv+0x430>
 80011c8:	2200      	movs	r2, #0
 80011ca:	2301      	movs	r3, #1
 80011cc:	2400      	movs	r4, #0
 80011ce:	4690      	mov	r8, r2
 80011d0:	e598      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 80011d2:	000a      	movs	r2, r1
 80011d4:	42bc      	cmp	r4, r7
 80011d6:	d000      	beq.n	80011da <__aeabi_ddiv+0x596>
 80011d8:	e66e      	b.n	8000eb8 <__aeabi_ddiv+0x274>
 80011da:	454b      	cmp	r3, r9
 80011dc:	d000      	beq.n	80011e0 <__aeabi_ddiv+0x59c>
 80011de:	e66b      	b.n	8000eb8 <__aeabi_ddiv+0x274>
 80011e0:	e66c      	b.n	8000ebc <__aeabi_ddiv+0x278>
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <__aeabi_ddiv+0x62c>)
 80011e4:	4a23      	ldr	r2, [pc, #140]	@ (8001274 <__aeabi_ddiv+0x630>)
 80011e6:	4453      	add	r3, sl
 80011e8:	4592      	cmp	sl, r2
 80011ea:	da00      	bge.n	80011ee <__aeabi_ddiv+0x5aa>
 80011ec:	e718      	b.n	8001020 <__aeabi_ddiv+0x3dc>
 80011ee:	2101      	movs	r1, #1
 80011f0:	4249      	negs	r1, r1
 80011f2:	1d0a      	adds	r2, r1, #4
 80011f4:	428a      	cmp	r2, r1
 80011f6:	4189      	sbcs	r1, r1
 80011f8:	4249      	negs	r1, r1
 80011fa:	448b      	add	fp, r1
 80011fc:	e666      	b.n	8000ecc <__aeabi_ddiv+0x288>
 80011fe:	210f      	movs	r1, #15
 8001200:	4011      	ands	r1, r2
 8001202:	2904      	cmp	r1, #4
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x5c4>
 8001206:	e661      	b.n	8000ecc <__aeabi_ddiv+0x288>
 8001208:	0011      	movs	r1, r2
 800120a:	e7f2      	b.n	80011f2 <__aeabi_ddiv+0x5ae>
 800120c:	42bc      	cmp	r4, r7
 800120e:	d800      	bhi.n	8001212 <__aeabi_ddiv+0x5ce>
 8001210:	e60a      	b.n	8000e28 <__aeabi_ddiv+0x1e4>
 8001212:	2302      	movs	r3, #2
 8001214:	425b      	negs	r3, r3
 8001216:	469c      	mov	ip, r3
 8001218:	9900      	ldr	r1, [sp, #0]
 800121a:	444f      	add	r7, r9
 800121c:	454f      	cmp	r7, r9
 800121e:	419b      	sbcs	r3, r3
 8001220:	44e3      	add	fp, ip
 8001222:	468c      	mov	ip, r1
 8001224:	425b      	negs	r3, r3
 8001226:	4463      	add	r3, ip
 8001228:	18c0      	adds	r0, r0, r3
 800122a:	e5ff      	b.n	8000e2c <__aeabi_ddiv+0x1e8>
 800122c:	4649      	mov	r1, r9
 800122e:	9d00      	ldr	r5, [sp, #0]
 8001230:	0048      	lsls	r0, r1, #1
 8001232:	4548      	cmp	r0, r9
 8001234:	4189      	sbcs	r1, r1
 8001236:	46ac      	mov	ip, r5
 8001238:	4249      	negs	r1, r1
 800123a:	4461      	add	r1, ip
 800123c:	4681      	mov	r9, r0
 800123e:	3a02      	subs	r2, #2
 8001240:	1864      	adds	r4, r4, r1
 8001242:	e7c7      	b.n	80011d4 <__aeabi_ddiv+0x590>
 8001244:	2480      	movs	r4, #128	@ 0x80
 8001246:	465b      	mov	r3, fp
 8001248:	0324      	lsls	r4, r4, #12
 800124a:	431c      	orrs	r4, r3
 800124c:	0324      	lsls	r4, r4, #12
 800124e:	4690      	mov	r8, r2
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <__aeabi_ddiv+0x620>)
 8001252:	0b24      	lsrs	r4, r4, #12
 8001254:	e556      	b.n	8000d04 <__aeabi_ddiv+0xc0>
 8001256:	4599      	cmp	r9, r3
 8001258:	d3e8      	bcc.n	800122c <__aeabi_ddiv+0x5e8>
 800125a:	000a      	movs	r2, r1
 800125c:	e7bd      	b.n	80011da <__aeabi_ddiv+0x596>
 800125e:	2300      	movs	r3, #0
 8001260:	e708      	b.n	8001074 <__aeabi_ddiv+0x430>
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	000007ff 	.word	0x000007ff
 8001268:	0000043e 	.word	0x0000043e
 800126c:	0000041e 	.word	0x0000041e
 8001270:	000003ff 	.word	0x000003ff
 8001274:	fffffc02 	.word	0xfffffc02

08001278 <__eqdf2>:
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	4657      	mov	r7, sl
 800127c:	46de      	mov	lr, fp
 800127e:	464e      	mov	r6, r9
 8001280:	4645      	mov	r5, r8
 8001282:	b5e0      	push	{r5, r6, r7, lr}
 8001284:	000d      	movs	r5, r1
 8001286:	0004      	movs	r4, r0
 8001288:	0fe8      	lsrs	r0, r5, #31
 800128a:	4683      	mov	fp, r0
 800128c:	0309      	lsls	r1, r1, #12
 800128e:	0fd8      	lsrs	r0, r3, #31
 8001290:	0b09      	lsrs	r1, r1, #12
 8001292:	4682      	mov	sl, r0
 8001294:	4819      	ldr	r0, [pc, #100]	@ (80012fc <__eqdf2+0x84>)
 8001296:	468c      	mov	ip, r1
 8001298:	031f      	lsls	r7, r3, #12
 800129a:	0069      	lsls	r1, r5, #1
 800129c:	005e      	lsls	r6, r3, #1
 800129e:	0d49      	lsrs	r1, r1, #21
 80012a0:	0b3f      	lsrs	r7, r7, #12
 80012a2:	0d76      	lsrs	r6, r6, #21
 80012a4:	4281      	cmp	r1, r0
 80012a6:	d018      	beq.n	80012da <__eqdf2+0x62>
 80012a8:	4286      	cmp	r6, r0
 80012aa:	d00f      	beq.n	80012cc <__eqdf2+0x54>
 80012ac:	2001      	movs	r0, #1
 80012ae:	42b1      	cmp	r1, r6
 80012b0:	d10d      	bne.n	80012ce <__eqdf2+0x56>
 80012b2:	45bc      	cmp	ip, r7
 80012b4:	d10b      	bne.n	80012ce <__eqdf2+0x56>
 80012b6:	4294      	cmp	r4, r2
 80012b8:	d109      	bne.n	80012ce <__eqdf2+0x56>
 80012ba:	45d3      	cmp	fp, sl
 80012bc:	d01c      	beq.n	80012f8 <__eqdf2+0x80>
 80012be:	2900      	cmp	r1, #0
 80012c0:	d105      	bne.n	80012ce <__eqdf2+0x56>
 80012c2:	4660      	mov	r0, ip
 80012c4:	4320      	orrs	r0, r4
 80012c6:	1e43      	subs	r3, r0, #1
 80012c8:	4198      	sbcs	r0, r3
 80012ca:	e000      	b.n	80012ce <__eqdf2+0x56>
 80012cc:	2001      	movs	r0, #1
 80012ce:	bcf0      	pop	{r4, r5, r6, r7}
 80012d0:	46bb      	mov	fp, r7
 80012d2:	46b2      	mov	sl, r6
 80012d4:	46a9      	mov	r9, r5
 80012d6:	46a0      	mov	r8, r4
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	2001      	movs	r0, #1
 80012dc:	428e      	cmp	r6, r1
 80012de:	d1f6      	bne.n	80012ce <__eqdf2+0x56>
 80012e0:	4661      	mov	r1, ip
 80012e2:	4339      	orrs	r1, r7
 80012e4:	000f      	movs	r7, r1
 80012e6:	4317      	orrs	r7, r2
 80012e8:	4327      	orrs	r7, r4
 80012ea:	d1f0      	bne.n	80012ce <__eqdf2+0x56>
 80012ec:	465b      	mov	r3, fp
 80012ee:	4652      	mov	r2, sl
 80012f0:	1a98      	subs	r0, r3, r2
 80012f2:	1e43      	subs	r3, r0, #1
 80012f4:	4198      	sbcs	r0, r3
 80012f6:	e7ea      	b.n	80012ce <__eqdf2+0x56>
 80012f8:	2000      	movs	r0, #0
 80012fa:	e7e8      	b.n	80012ce <__eqdf2+0x56>
 80012fc:	000007ff 	.word	0x000007ff

08001300 <__gedf2>:
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	4657      	mov	r7, sl
 8001304:	464e      	mov	r6, r9
 8001306:	4645      	mov	r5, r8
 8001308:	46de      	mov	lr, fp
 800130a:	b5e0      	push	{r5, r6, r7, lr}
 800130c:	000d      	movs	r5, r1
 800130e:	030f      	lsls	r7, r1, #12
 8001310:	0b39      	lsrs	r1, r7, #12
 8001312:	b083      	sub	sp, #12
 8001314:	0004      	movs	r4, r0
 8001316:	4680      	mov	r8, r0
 8001318:	9101      	str	r1, [sp, #4]
 800131a:	0058      	lsls	r0, r3, #1
 800131c:	0fe9      	lsrs	r1, r5, #31
 800131e:	4f31      	ldr	r7, [pc, #196]	@ (80013e4 <__gedf2+0xe4>)
 8001320:	0d40      	lsrs	r0, r0, #21
 8001322:	468c      	mov	ip, r1
 8001324:	006e      	lsls	r6, r5, #1
 8001326:	0319      	lsls	r1, r3, #12
 8001328:	4682      	mov	sl, r0
 800132a:	4691      	mov	r9, r2
 800132c:	0d76      	lsrs	r6, r6, #21
 800132e:	0b09      	lsrs	r1, r1, #12
 8001330:	0fd8      	lsrs	r0, r3, #31
 8001332:	42be      	cmp	r6, r7
 8001334:	d01f      	beq.n	8001376 <__gedf2+0x76>
 8001336:	45ba      	cmp	sl, r7
 8001338:	d00f      	beq.n	800135a <__gedf2+0x5a>
 800133a:	2e00      	cmp	r6, #0
 800133c:	d12f      	bne.n	800139e <__gedf2+0x9e>
 800133e:	4655      	mov	r5, sl
 8001340:	9e01      	ldr	r6, [sp, #4]
 8001342:	4334      	orrs	r4, r6
 8001344:	2d00      	cmp	r5, #0
 8001346:	d127      	bne.n	8001398 <__gedf2+0x98>
 8001348:	430a      	orrs	r2, r1
 800134a:	d03a      	beq.n	80013c2 <__gedf2+0xc2>
 800134c:	2c00      	cmp	r4, #0
 800134e:	d145      	bne.n	80013dc <__gedf2+0xdc>
 8001350:	2800      	cmp	r0, #0
 8001352:	d11a      	bne.n	800138a <__gedf2+0x8a>
 8001354:	2001      	movs	r0, #1
 8001356:	4240      	negs	r0, r0
 8001358:	e017      	b.n	800138a <__gedf2+0x8a>
 800135a:	4311      	orrs	r1, r2
 800135c:	d13b      	bne.n	80013d6 <__gedf2+0xd6>
 800135e:	2e00      	cmp	r6, #0
 8001360:	d102      	bne.n	8001368 <__gedf2+0x68>
 8001362:	9f01      	ldr	r7, [sp, #4]
 8001364:	4327      	orrs	r7, r4
 8001366:	d0f3      	beq.n	8001350 <__gedf2+0x50>
 8001368:	4584      	cmp	ip, r0
 800136a:	d109      	bne.n	8001380 <__gedf2+0x80>
 800136c:	4663      	mov	r3, ip
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <__gedf2+0x54>
 8001372:	4660      	mov	r0, ip
 8001374:	e009      	b.n	800138a <__gedf2+0x8a>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d12c      	bne.n	80013d6 <__gedf2+0xd6>
 800137c:	45b2      	cmp	sl, r6
 800137e:	d024      	beq.n	80013ca <__gedf2+0xca>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	b003      	add	sp, #12
 800138c:	bcf0      	pop	{r4, r5, r6, r7}
 800138e:	46bb      	mov	fp, r7
 8001390:	46b2      	mov	sl, r6
 8001392:	46a9      	mov	r9, r5
 8001394:	46a0      	mov	r8, r4
 8001396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001398:	2c00      	cmp	r4, #0
 800139a:	d0d9      	beq.n	8001350 <__gedf2+0x50>
 800139c:	e7e4      	b.n	8001368 <__gedf2+0x68>
 800139e:	4654      	mov	r4, sl
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d0ed      	beq.n	8001380 <__gedf2+0x80>
 80013a4:	4584      	cmp	ip, r0
 80013a6:	d1eb      	bne.n	8001380 <__gedf2+0x80>
 80013a8:	4556      	cmp	r6, sl
 80013aa:	dce9      	bgt.n	8001380 <__gedf2+0x80>
 80013ac:	dbde      	blt.n	800136c <__gedf2+0x6c>
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	428b      	cmp	r3, r1
 80013b2:	d8e5      	bhi.n	8001380 <__gedf2+0x80>
 80013b4:	d1da      	bne.n	800136c <__gedf2+0x6c>
 80013b6:	45c8      	cmp	r8, r9
 80013b8:	d8e2      	bhi.n	8001380 <__gedf2+0x80>
 80013ba:	2000      	movs	r0, #0
 80013bc:	45c8      	cmp	r8, r9
 80013be:	d2e4      	bcs.n	800138a <__gedf2+0x8a>
 80013c0:	e7d4      	b.n	800136c <__gedf2+0x6c>
 80013c2:	2000      	movs	r0, #0
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d0e0      	beq.n	800138a <__gedf2+0x8a>
 80013c8:	e7da      	b.n	8001380 <__gedf2+0x80>
 80013ca:	4311      	orrs	r1, r2
 80013cc:	d103      	bne.n	80013d6 <__gedf2+0xd6>
 80013ce:	4584      	cmp	ip, r0
 80013d0:	d1d6      	bne.n	8001380 <__gedf2+0x80>
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7d9      	b.n	800138a <__gedf2+0x8a>
 80013d6:	2002      	movs	r0, #2
 80013d8:	4240      	negs	r0, r0
 80013da:	e7d6      	b.n	800138a <__gedf2+0x8a>
 80013dc:	4584      	cmp	ip, r0
 80013de:	d0e6      	beq.n	80013ae <__gedf2+0xae>
 80013e0:	e7ce      	b.n	8001380 <__gedf2+0x80>
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	000007ff 	.word	0x000007ff

080013e8 <__ledf2>:
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	4657      	mov	r7, sl
 80013ec:	464e      	mov	r6, r9
 80013ee:	4645      	mov	r5, r8
 80013f0:	46de      	mov	lr, fp
 80013f2:	b5e0      	push	{r5, r6, r7, lr}
 80013f4:	000d      	movs	r5, r1
 80013f6:	030f      	lsls	r7, r1, #12
 80013f8:	0004      	movs	r4, r0
 80013fa:	4680      	mov	r8, r0
 80013fc:	0fe8      	lsrs	r0, r5, #31
 80013fe:	0b39      	lsrs	r1, r7, #12
 8001400:	4684      	mov	ip, r0
 8001402:	b083      	sub	sp, #12
 8001404:	0058      	lsls	r0, r3, #1
 8001406:	4f30      	ldr	r7, [pc, #192]	@ (80014c8 <__ledf2+0xe0>)
 8001408:	0d40      	lsrs	r0, r0, #21
 800140a:	9101      	str	r1, [sp, #4]
 800140c:	031e      	lsls	r6, r3, #12
 800140e:	0069      	lsls	r1, r5, #1
 8001410:	4682      	mov	sl, r0
 8001412:	4691      	mov	r9, r2
 8001414:	0d49      	lsrs	r1, r1, #21
 8001416:	0b36      	lsrs	r6, r6, #12
 8001418:	0fd8      	lsrs	r0, r3, #31
 800141a:	42b9      	cmp	r1, r7
 800141c:	d020      	beq.n	8001460 <__ledf2+0x78>
 800141e:	45ba      	cmp	sl, r7
 8001420:	d00f      	beq.n	8001442 <__ledf2+0x5a>
 8001422:	2900      	cmp	r1, #0
 8001424:	d12b      	bne.n	800147e <__ledf2+0x96>
 8001426:	9901      	ldr	r1, [sp, #4]
 8001428:	430c      	orrs	r4, r1
 800142a:	4651      	mov	r1, sl
 800142c:	2900      	cmp	r1, #0
 800142e:	d137      	bne.n	80014a0 <__ledf2+0xb8>
 8001430:	4332      	orrs	r2, r6
 8001432:	d038      	beq.n	80014a6 <__ledf2+0xbe>
 8001434:	2c00      	cmp	r4, #0
 8001436:	d144      	bne.n	80014c2 <__ledf2+0xda>
 8001438:	2800      	cmp	r0, #0
 800143a:	d119      	bne.n	8001470 <__ledf2+0x88>
 800143c:	2001      	movs	r0, #1
 800143e:	4240      	negs	r0, r0
 8001440:	e016      	b.n	8001470 <__ledf2+0x88>
 8001442:	4316      	orrs	r6, r2
 8001444:	d113      	bne.n	800146e <__ledf2+0x86>
 8001446:	2900      	cmp	r1, #0
 8001448:	d102      	bne.n	8001450 <__ledf2+0x68>
 800144a:	9f01      	ldr	r7, [sp, #4]
 800144c:	4327      	orrs	r7, r4
 800144e:	d0f3      	beq.n	8001438 <__ledf2+0x50>
 8001450:	4584      	cmp	ip, r0
 8001452:	d020      	beq.n	8001496 <__ledf2+0xae>
 8001454:	4663      	mov	r3, ip
 8001456:	2002      	movs	r0, #2
 8001458:	3b01      	subs	r3, #1
 800145a:	4018      	ands	r0, r3
 800145c:	3801      	subs	r0, #1
 800145e:	e007      	b.n	8001470 <__ledf2+0x88>
 8001460:	9f01      	ldr	r7, [sp, #4]
 8001462:	4327      	orrs	r7, r4
 8001464:	d103      	bne.n	800146e <__ledf2+0x86>
 8001466:	458a      	cmp	sl, r1
 8001468:	d1f4      	bne.n	8001454 <__ledf2+0x6c>
 800146a:	4316      	orrs	r6, r2
 800146c:	d01f      	beq.n	80014ae <__ledf2+0xc6>
 800146e:	2002      	movs	r0, #2
 8001470:	b003      	add	sp, #12
 8001472:	bcf0      	pop	{r4, r5, r6, r7}
 8001474:	46bb      	mov	fp, r7
 8001476:	46b2      	mov	sl, r6
 8001478:	46a9      	mov	r9, r5
 800147a:	46a0      	mov	r8, r4
 800147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147e:	4654      	mov	r4, sl
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e7      	beq.n	8001454 <__ledf2+0x6c>
 8001484:	4584      	cmp	ip, r0
 8001486:	d1e5      	bne.n	8001454 <__ledf2+0x6c>
 8001488:	4551      	cmp	r1, sl
 800148a:	dce3      	bgt.n	8001454 <__ledf2+0x6c>
 800148c:	db03      	blt.n	8001496 <__ledf2+0xae>
 800148e:	9b01      	ldr	r3, [sp, #4]
 8001490:	42b3      	cmp	r3, r6
 8001492:	d8df      	bhi.n	8001454 <__ledf2+0x6c>
 8001494:	d00f      	beq.n	80014b6 <__ledf2+0xce>
 8001496:	4663      	mov	r3, ip
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0cf      	beq.n	800143c <__ledf2+0x54>
 800149c:	4660      	mov	r0, ip
 800149e:	e7e7      	b.n	8001470 <__ledf2+0x88>
 80014a0:	2c00      	cmp	r4, #0
 80014a2:	d0c9      	beq.n	8001438 <__ledf2+0x50>
 80014a4:	e7d4      	b.n	8001450 <__ledf2+0x68>
 80014a6:	2000      	movs	r0, #0
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d0e1      	beq.n	8001470 <__ledf2+0x88>
 80014ac:	e7d2      	b.n	8001454 <__ledf2+0x6c>
 80014ae:	4584      	cmp	ip, r0
 80014b0:	d1d0      	bne.n	8001454 <__ledf2+0x6c>
 80014b2:	2000      	movs	r0, #0
 80014b4:	e7dc      	b.n	8001470 <__ledf2+0x88>
 80014b6:	45c8      	cmp	r8, r9
 80014b8:	d8cc      	bhi.n	8001454 <__ledf2+0x6c>
 80014ba:	2000      	movs	r0, #0
 80014bc:	45c8      	cmp	r8, r9
 80014be:	d2d7      	bcs.n	8001470 <__ledf2+0x88>
 80014c0:	e7e9      	b.n	8001496 <__ledf2+0xae>
 80014c2:	4584      	cmp	ip, r0
 80014c4:	d0e3      	beq.n	800148e <__ledf2+0xa6>
 80014c6:	e7c5      	b.n	8001454 <__ledf2+0x6c>
 80014c8:	000007ff 	.word	0x000007ff

080014cc <__aeabi_dmul>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	4657      	mov	r7, sl
 80014d0:	46de      	mov	lr, fp
 80014d2:	464e      	mov	r6, r9
 80014d4:	4645      	mov	r5, r8
 80014d6:	b5e0      	push	{r5, r6, r7, lr}
 80014d8:	001f      	movs	r7, r3
 80014da:	030b      	lsls	r3, r1, #12
 80014dc:	0b1b      	lsrs	r3, r3, #12
 80014de:	0016      	movs	r6, r2
 80014e0:	469a      	mov	sl, r3
 80014e2:	0fca      	lsrs	r2, r1, #31
 80014e4:	004b      	lsls	r3, r1, #1
 80014e6:	0004      	movs	r4, r0
 80014e8:	4693      	mov	fp, r2
 80014ea:	b087      	sub	sp, #28
 80014ec:	0d5b      	lsrs	r3, r3, #21
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dmul+0x26>
 80014f0:	e0d5      	b.n	800169e <__aeabi_dmul+0x1d2>
 80014f2:	4abb      	ldr	r2, [pc, #748]	@ (80017e0 <__aeabi_dmul+0x314>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d100      	bne.n	80014fa <__aeabi_dmul+0x2e>
 80014f8:	e0f8      	b.n	80016ec <__aeabi_dmul+0x220>
 80014fa:	4651      	mov	r1, sl
 80014fc:	0f42      	lsrs	r2, r0, #29
 80014fe:	00c9      	lsls	r1, r1, #3
 8001500:	430a      	orrs	r2, r1
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	0409      	lsls	r1, r1, #16
 8001506:	4311      	orrs	r1, r2
 8001508:	00c2      	lsls	r2, r0, #3
 800150a:	4691      	mov	r9, r2
 800150c:	4ab5      	ldr	r2, [pc, #724]	@ (80017e4 <__aeabi_dmul+0x318>)
 800150e:	468a      	mov	sl, r1
 8001510:	189d      	adds	r5, r3, r2
 8001512:	2300      	movs	r3, #0
 8001514:	4698      	mov	r8, r3
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	033c      	lsls	r4, r7, #12
 800151a:	007b      	lsls	r3, r7, #1
 800151c:	0ffa      	lsrs	r2, r7, #31
 800151e:	0030      	movs	r0, r6
 8001520:	0b24      	lsrs	r4, r4, #12
 8001522:	0d5b      	lsrs	r3, r3, #21
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	d100      	bne.n	800152a <__aeabi_dmul+0x5e>
 8001528:	e096      	b.n	8001658 <__aeabi_dmul+0x18c>
 800152a:	4aad      	ldr	r2, [pc, #692]	@ (80017e0 <__aeabi_dmul+0x314>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d031      	beq.n	8001594 <__aeabi_dmul+0xc8>
 8001530:	0f72      	lsrs	r2, r6, #29
 8001532:	00e4      	lsls	r4, r4, #3
 8001534:	4322      	orrs	r2, r4
 8001536:	2480      	movs	r4, #128	@ 0x80
 8001538:	0424      	lsls	r4, r4, #16
 800153a:	4314      	orrs	r4, r2
 800153c:	4aa9      	ldr	r2, [pc, #676]	@ (80017e4 <__aeabi_dmul+0x318>)
 800153e:	00f0      	lsls	r0, r6, #3
 8001540:	4694      	mov	ip, r2
 8001542:	4463      	add	r3, ip
 8001544:	195b      	adds	r3, r3, r5
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	9201      	str	r2, [sp, #4]
 800154a:	4642      	mov	r2, r8
 800154c:	2600      	movs	r6, #0
 800154e:	2a0a      	cmp	r2, #10
 8001550:	dc42      	bgt.n	80015d8 <__aeabi_dmul+0x10c>
 8001552:	465a      	mov	r2, fp
 8001554:	9900      	ldr	r1, [sp, #0]
 8001556:	404a      	eors	r2, r1
 8001558:	4693      	mov	fp, r2
 800155a:	4642      	mov	r2, r8
 800155c:	2a02      	cmp	r2, #2
 800155e:	dc32      	bgt.n	80015c6 <__aeabi_dmul+0xfa>
 8001560:	3a01      	subs	r2, #1
 8001562:	2a01      	cmp	r2, #1
 8001564:	d900      	bls.n	8001568 <__aeabi_dmul+0x9c>
 8001566:	e149      	b.n	80017fc <__aeabi_dmul+0x330>
 8001568:	2e02      	cmp	r6, #2
 800156a:	d100      	bne.n	800156e <__aeabi_dmul+0xa2>
 800156c:	e0ca      	b.n	8001704 <__aeabi_dmul+0x238>
 800156e:	2e01      	cmp	r6, #1
 8001570:	d13d      	bne.n	80015ee <__aeabi_dmul+0x122>
 8001572:	2300      	movs	r3, #0
 8001574:	2400      	movs	r4, #0
 8001576:	2200      	movs	r2, #0
 8001578:	0010      	movs	r0, r2
 800157a:	465a      	mov	r2, fp
 800157c:	051b      	lsls	r3, r3, #20
 800157e:	4323      	orrs	r3, r4
 8001580:	07d2      	lsls	r2, r2, #31
 8001582:	4313      	orrs	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	b007      	add	sp, #28
 8001588:	bcf0      	pop	{r4, r5, r6, r7}
 800158a:	46bb      	mov	fp, r7
 800158c:	46b2      	mov	sl, r6
 800158e:	46a9      	mov	r9, r5
 8001590:	46a0      	mov	r8, r4
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001594:	4b92      	ldr	r3, [pc, #584]	@ (80017e0 <__aeabi_dmul+0x314>)
 8001596:	4326      	orrs	r6, r4
 8001598:	18eb      	adds	r3, r5, r3
 800159a:	2e00      	cmp	r6, #0
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0xd4>
 800159e:	e0bb      	b.n	8001718 <__aeabi_dmul+0x24c>
 80015a0:	2203      	movs	r2, #3
 80015a2:	4641      	mov	r1, r8
 80015a4:	4311      	orrs	r1, r2
 80015a6:	465a      	mov	r2, fp
 80015a8:	4688      	mov	r8, r1
 80015aa:	9900      	ldr	r1, [sp, #0]
 80015ac:	404a      	eors	r2, r1
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	0109      	lsls	r1, r1, #4
 80015b2:	468c      	mov	ip, r1
 80015b4:	0029      	movs	r1, r5
 80015b6:	4461      	add	r1, ip
 80015b8:	9101      	str	r1, [sp, #4]
 80015ba:	4641      	mov	r1, r8
 80015bc:	290a      	cmp	r1, #10
 80015be:	dd00      	ble.n	80015c2 <__aeabi_dmul+0xf6>
 80015c0:	e233      	b.n	8001a2a <__aeabi_dmul+0x55e>
 80015c2:	4693      	mov	fp, r2
 80015c4:	2603      	movs	r6, #3
 80015c6:	4642      	mov	r2, r8
 80015c8:	2701      	movs	r7, #1
 80015ca:	4097      	lsls	r7, r2
 80015cc:	21a6      	movs	r1, #166	@ 0xa6
 80015ce:	003a      	movs	r2, r7
 80015d0:	00c9      	lsls	r1, r1, #3
 80015d2:	400a      	ands	r2, r1
 80015d4:	420f      	tst	r7, r1
 80015d6:	d031      	beq.n	800163c <__aeabi_dmul+0x170>
 80015d8:	9e02      	ldr	r6, [sp, #8]
 80015da:	2e02      	cmp	r6, #2
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dmul+0x114>
 80015de:	e235      	b.n	8001a4c <__aeabi_dmul+0x580>
 80015e0:	2e03      	cmp	r6, #3
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x11a>
 80015e4:	e1d2      	b.n	800198c <__aeabi_dmul+0x4c0>
 80015e6:	4654      	mov	r4, sl
 80015e8:	4648      	mov	r0, r9
 80015ea:	2e01      	cmp	r6, #1
 80015ec:	d0c1      	beq.n	8001572 <__aeabi_dmul+0xa6>
 80015ee:	9a01      	ldr	r2, [sp, #4]
 80015f0:	4b7d      	ldr	r3, [pc, #500]	@ (80017e8 <__aeabi_dmul+0x31c>)
 80015f2:	4694      	mov	ip, r2
 80015f4:	4463      	add	r3, ip
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dc00      	bgt.n	80015fc <__aeabi_dmul+0x130>
 80015fa:	e0c0      	b.n	800177e <__aeabi_dmul+0x2b2>
 80015fc:	0742      	lsls	r2, r0, #29
 80015fe:	d009      	beq.n	8001614 <__aeabi_dmul+0x148>
 8001600:	220f      	movs	r2, #15
 8001602:	4002      	ands	r2, r0
 8001604:	2a04      	cmp	r2, #4
 8001606:	d005      	beq.n	8001614 <__aeabi_dmul+0x148>
 8001608:	1d02      	adds	r2, r0, #4
 800160a:	4282      	cmp	r2, r0
 800160c:	4180      	sbcs	r0, r0
 800160e:	4240      	negs	r0, r0
 8001610:	1824      	adds	r4, r4, r0
 8001612:	0010      	movs	r0, r2
 8001614:	01e2      	lsls	r2, r4, #7
 8001616:	d506      	bpl.n	8001626 <__aeabi_dmul+0x15a>
 8001618:	4b74      	ldr	r3, [pc, #464]	@ (80017ec <__aeabi_dmul+0x320>)
 800161a:	9a01      	ldr	r2, [sp, #4]
 800161c:	401c      	ands	r4, r3
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	4694      	mov	ip, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4463      	add	r3, ip
 8001626:	4a72      	ldr	r2, [pc, #456]	@ (80017f0 <__aeabi_dmul+0x324>)
 8001628:	4293      	cmp	r3, r2
 800162a:	dc6b      	bgt.n	8001704 <__aeabi_dmul+0x238>
 800162c:	0762      	lsls	r2, r4, #29
 800162e:	08c0      	lsrs	r0, r0, #3
 8001630:	0264      	lsls	r4, r4, #9
 8001632:	055b      	lsls	r3, r3, #21
 8001634:	4302      	orrs	r2, r0
 8001636:	0b24      	lsrs	r4, r4, #12
 8001638:	0d5b      	lsrs	r3, r3, #21
 800163a:	e79d      	b.n	8001578 <__aeabi_dmul+0xac>
 800163c:	2190      	movs	r1, #144	@ 0x90
 800163e:	0089      	lsls	r1, r1, #2
 8001640:	420f      	tst	r7, r1
 8001642:	d163      	bne.n	800170c <__aeabi_dmul+0x240>
 8001644:	2288      	movs	r2, #136	@ 0x88
 8001646:	423a      	tst	r2, r7
 8001648:	d100      	bne.n	800164c <__aeabi_dmul+0x180>
 800164a:	e0d7      	b.n	80017fc <__aeabi_dmul+0x330>
 800164c:	9b00      	ldr	r3, [sp, #0]
 800164e:	46a2      	mov	sl, r4
 8001650:	469b      	mov	fp, r3
 8001652:	4681      	mov	r9, r0
 8001654:	9602      	str	r6, [sp, #8]
 8001656:	e7bf      	b.n	80015d8 <__aeabi_dmul+0x10c>
 8001658:	0023      	movs	r3, r4
 800165a:	4333      	orrs	r3, r6
 800165c:	d100      	bne.n	8001660 <__aeabi_dmul+0x194>
 800165e:	e07f      	b.n	8001760 <__aeabi_dmul+0x294>
 8001660:	2c00      	cmp	r4, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x19a>
 8001664:	e1ad      	b.n	80019c2 <__aeabi_dmul+0x4f6>
 8001666:	0020      	movs	r0, r4
 8001668:	f000 fec8 	bl	80023fc <__clzsi2>
 800166c:	0002      	movs	r2, r0
 800166e:	0003      	movs	r3, r0
 8001670:	3a0b      	subs	r2, #11
 8001672:	201d      	movs	r0, #29
 8001674:	0019      	movs	r1, r3
 8001676:	1a82      	subs	r2, r0, r2
 8001678:	0030      	movs	r0, r6
 800167a:	3908      	subs	r1, #8
 800167c:	40d0      	lsrs	r0, r2
 800167e:	408c      	lsls	r4, r1
 8001680:	4304      	orrs	r4, r0
 8001682:	0030      	movs	r0, r6
 8001684:	4088      	lsls	r0, r1
 8001686:	4a5b      	ldr	r2, [pc, #364]	@ (80017f4 <__aeabi_dmul+0x328>)
 8001688:	1aeb      	subs	r3, r5, r3
 800168a:	4694      	mov	ip, r2
 800168c:	4463      	add	r3, ip
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	4642      	mov	r2, r8
 8001694:	2600      	movs	r6, #0
 8001696:	2a0a      	cmp	r2, #10
 8001698:	dc00      	bgt.n	800169c <__aeabi_dmul+0x1d0>
 800169a:	e75a      	b.n	8001552 <__aeabi_dmul+0x86>
 800169c:	e79c      	b.n	80015d8 <__aeabi_dmul+0x10c>
 800169e:	4653      	mov	r3, sl
 80016a0:	4303      	orrs	r3, r0
 80016a2:	4699      	mov	r9, r3
 80016a4:	d054      	beq.n	8001750 <__aeabi_dmul+0x284>
 80016a6:	4653      	mov	r3, sl
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d100      	bne.n	80016ae <__aeabi_dmul+0x1e2>
 80016ac:	e177      	b.n	800199e <__aeabi_dmul+0x4d2>
 80016ae:	4650      	mov	r0, sl
 80016b0:	f000 fea4 	bl	80023fc <__clzsi2>
 80016b4:	230b      	movs	r3, #11
 80016b6:	425b      	negs	r3, r3
 80016b8:	469c      	mov	ip, r3
 80016ba:	0002      	movs	r2, r0
 80016bc:	4484      	add	ip, r0
 80016be:	0011      	movs	r1, r2
 80016c0:	4650      	mov	r0, sl
 80016c2:	3908      	subs	r1, #8
 80016c4:	4088      	lsls	r0, r1
 80016c6:	231d      	movs	r3, #29
 80016c8:	4680      	mov	r8, r0
 80016ca:	4660      	mov	r0, ip
 80016cc:	1a1b      	subs	r3, r3, r0
 80016ce:	0020      	movs	r0, r4
 80016d0:	40d8      	lsrs	r0, r3
 80016d2:	0003      	movs	r3, r0
 80016d4:	4640      	mov	r0, r8
 80016d6:	4303      	orrs	r3, r0
 80016d8:	469a      	mov	sl, r3
 80016da:	0023      	movs	r3, r4
 80016dc:	408b      	lsls	r3, r1
 80016de:	4699      	mov	r9, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	4d44      	ldr	r5, [pc, #272]	@ (80017f4 <__aeabi_dmul+0x328>)
 80016e4:	4698      	mov	r8, r3
 80016e6:	1aad      	subs	r5, r5, r2
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	e715      	b.n	8001518 <__aeabi_dmul+0x4c>
 80016ec:	4652      	mov	r2, sl
 80016ee:	4302      	orrs	r2, r0
 80016f0:	4691      	mov	r9, r2
 80016f2:	d126      	bne.n	8001742 <__aeabi_dmul+0x276>
 80016f4:	2200      	movs	r2, #0
 80016f6:	001d      	movs	r5, r3
 80016f8:	2302      	movs	r3, #2
 80016fa:	4692      	mov	sl, r2
 80016fc:	3208      	adds	r2, #8
 80016fe:	4690      	mov	r8, r2
 8001700:	9302      	str	r3, [sp, #8]
 8001702:	e709      	b.n	8001518 <__aeabi_dmul+0x4c>
 8001704:	2400      	movs	r4, #0
 8001706:	2200      	movs	r2, #0
 8001708:	4b35      	ldr	r3, [pc, #212]	@ (80017e0 <__aeabi_dmul+0x314>)
 800170a:	e735      	b.n	8001578 <__aeabi_dmul+0xac>
 800170c:	2300      	movs	r3, #0
 800170e:	2480      	movs	r4, #128	@ 0x80
 8001710:	469b      	mov	fp, r3
 8001712:	0324      	lsls	r4, r4, #12
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <__aeabi_dmul+0x314>)
 8001716:	e72f      	b.n	8001578 <__aeabi_dmul+0xac>
 8001718:	2202      	movs	r2, #2
 800171a:	4641      	mov	r1, r8
 800171c:	4311      	orrs	r1, r2
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	4694      	mov	ip, r2
 8001724:	002a      	movs	r2, r5
 8001726:	4462      	add	r2, ip
 8001728:	4688      	mov	r8, r1
 800172a:	9201      	str	r2, [sp, #4]
 800172c:	290a      	cmp	r1, #10
 800172e:	dd00      	ble.n	8001732 <__aeabi_dmul+0x266>
 8001730:	e752      	b.n	80015d8 <__aeabi_dmul+0x10c>
 8001732:	465a      	mov	r2, fp
 8001734:	2000      	movs	r0, #0
 8001736:	9900      	ldr	r1, [sp, #0]
 8001738:	0004      	movs	r4, r0
 800173a:	404a      	eors	r2, r1
 800173c:	4693      	mov	fp, r2
 800173e:	2602      	movs	r6, #2
 8001740:	e70b      	b.n	800155a <__aeabi_dmul+0x8e>
 8001742:	220c      	movs	r2, #12
 8001744:	001d      	movs	r5, r3
 8001746:	2303      	movs	r3, #3
 8001748:	4681      	mov	r9, r0
 800174a:	4690      	mov	r8, r2
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	e6e3      	b.n	8001518 <__aeabi_dmul+0x4c>
 8001750:	2300      	movs	r3, #0
 8001752:	469a      	mov	sl, r3
 8001754:	3304      	adds	r3, #4
 8001756:	4698      	mov	r8, r3
 8001758:	3b03      	subs	r3, #3
 800175a:	2500      	movs	r5, #0
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	e6db      	b.n	8001518 <__aeabi_dmul+0x4c>
 8001760:	4642      	mov	r2, r8
 8001762:	3301      	adds	r3, #1
 8001764:	431a      	orrs	r2, r3
 8001766:	002b      	movs	r3, r5
 8001768:	4690      	mov	r8, r2
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	9201      	str	r2, [sp, #4]
 800176e:	4642      	mov	r2, r8
 8001770:	2400      	movs	r4, #0
 8001772:	2000      	movs	r0, #0
 8001774:	2601      	movs	r6, #1
 8001776:	2a0a      	cmp	r2, #10
 8001778:	dc00      	bgt.n	800177c <__aeabi_dmul+0x2b0>
 800177a:	e6ea      	b.n	8001552 <__aeabi_dmul+0x86>
 800177c:	e72c      	b.n	80015d8 <__aeabi_dmul+0x10c>
 800177e:	2201      	movs	r2, #1
 8001780:	1ad2      	subs	r2, r2, r3
 8001782:	2a38      	cmp	r2, #56	@ 0x38
 8001784:	dd00      	ble.n	8001788 <__aeabi_dmul+0x2bc>
 8001786:	e6f4      	b.n	8001572 <__aeabi_dmul+0xa6>
 8001788:	2a1f      	cmp	r2, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dmul+0x2c2>
 800178c:	e12a      	b.n	80019e4 <__aeabi_dmul+0x518>
 800178e:	211f      	movs	r1, #31
 8001790:	4249      	negs	r1, r1
 8001792:	1acb      	subs	r3, r1, r3
 8001794:	0021      	movs	r1, r4
 8001796:	40d9      	lsrs	r1, r3
 8001798:	000b      	movs	r3, r1
 800179a:	2a20      	cmp	r2, #32
 800179c:	d005      	beq.n	80017aa <__aeabi_dmul+0x2de>
 800179e:	4a16      	ldr	r2, [pc, #88]	@ (80017f8 <__aeabi_dmul+0x32c>)
 80017a0:	9d01      	ldr	r5, [sp, #4]
 80017a2:	4694      	mov	ip, r2
 80017a4:	4465      	add	r5, ip
 80017a6:	40ac      	lsls	r4, r5
 80017a8:	4320      	orrs	r0, r4
 80017aa:	1e42      	subs	r2, r0, #1
 80017ac:	4190      	sbcs	r0, r2
 80017ae:	4318      	orrs	r0, r3
 80017b0:	2307      	movs	r3, #7
 80017b2:	0019      	movs	r1, r3
 80017b4:	2400      	movs	r4, #0
 80017b6:	4001      	ands	r1, r0
 80017b8:	4203      	tst	r3, r0
 80017ba:	d00c      	beq.n	80017d6 <__aeabi_dmul+0x30a>
 80017bc:	230f      	movs	r3, #15
 80017be:	4003      	ands	r3, r0
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dmul+0x2fa>
 80017c4:	e140      	b.n	8001a48 <__aeabi_dmul+0x57c>
 80017c6:	1d03      	adds	r3, r0, #4
 80017c8:	4283      	cmp	r3, r0
 80017ca:	41a4      	sbcs	r4, r4
 80017cc:	0018      	movs	r0, r3
 80017ce:	4264      	negs	r4, r4
 80017d0:	0761      	lsls	r1, r4, #29
 80017d2:	0264      	lsls	r4, r4, #9
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	08c2      	lsrs	r2, r0, #3
 80017d8:	2300      	movs	r3, #0
 80017da:	430a      	orrs	r2, r1
 80017dc:	e6cc      	b.n	8001578 <__aeabi_dmul+0xac>
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	000007ff 	.word	0x000007ff
 80017e4:	fffffc01 	.word	0xfffffc01
 80017e8:	000003ff 	.word	0x000003ff
 80017ec:	feffffff 	.word	0xfeffffff
 80017f0:	000007fe 	.word	0x000007fe
 80017f4:	fffffc0d 	.word	0xfffffc0d
 80017f8:	0000043e 	.word	0x0000043e
 80017fc:	4649      	mov	r1, r9
 80017fe:	464a      	mov	r2, r9
 8001800:	0409      	lsls	r1, r1, #16
 8001802:	0c09      	lsrs	r1, r1, #16
 8001804:	000d      	movs	r5, r1
 8001806:	0c16      	lsrs	r6, r2, #16
 8001808:	0c02      	lsrs	r2, r0, #16
 800180a:	0400      	lsls	r0, r0, #16
 800180c:	0c00      	lsrs	r0, r0, #16
 800180e:	4345      	muls	r5, r0
 8001810:	46ac      	mov	ip, r5
 8001812:	0005      	movs	r5, r0
 8001814:	4375      	muls	r5, r6
 8001816:	46a8      	mov	r8, r5
 8001818:	0015      	movs	r5, r2
 800181a:	000f      	movs	r7, r1
 800181c:	4375      	muls	r5, r6
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	9502      	str	r5, [sp, #8]
 8001822:	002a      	movs	r2, r5
 8001824:	9d00      	ldr	r5, [sp, #0]
 8001826:	436f      	muls	r7, r5
 8001828:	4665      	mov	r5, ip
 800182a:	0c2d      	lsrs	r5, r5, #16
 800182c:	46a9      	mov	r9, r5
 800182e:	4447      	add	r7, r8
 8001830:	444f      	add	r7, r9
 8001832:	45b8      	cmp	r8, r7
 8001834:	d905      	bls.n	8001842 <__aeabi_dmul+0x376>
 8001836:	0015      	movs	r5, r2
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	0252      	lsls	r2, r2, #9
 800183c:	4690      	mov	r8, r2
 800183e:	4445      	add	r5, r8
 8001840:	9502      	str	r5, [sp, #8]
 8001842:	0c3d      	lsrs	r5, r7, #16
 8001844:	9503      	str	r5, [sp, #12]
 8001846:	4665      	mov	r5, ip
 8001848:	042d      	lsls	r5, r5, #16
 800184a:	043f      	lsls	r7, r7, #16
 800184c:	0c2d      	lsrs	r5, r5, #16
 800184e:	46ac      	mov	ip, r5
 8001850:	003d      	movs	r5, r7
 8001852:	4465      	add	r5, ip
 8001854:	9504      	str	r5, [sp, #16]
 8001856:	0c25      	lsrs	r5, r4, #16
 8001858:	0424      	lsls	r4, r4, #16
 800185a:	0c24      	lsrs	r4, r4, #16
 800185c:	46ac      	mov	ip, r5
 800185e:	0025      	movs	r5, r4
 8001860:	4375      	muls	r5, r6
 8001862:	46a8      	mov	r8, r5
 8001864:	4665      	mov	r5, ip
 8001866:	000f      	movs	r7, r1
 8001868:	4369      	muls	r1, r5
 800186a:	4441      	add	r1, r8
 800186c:	4689      	mov	r9, r1
 800186e:	4367      	muls	r7, r4
 8001870:	0c39      	lsrs	r1, r7, #16
 8001872:	4449      	add	r1, r9
 8001874:	436e      	muls	r6, r5
 8001876:	4588      	cmp	r8, r1
 8001878:	d903      	bls.n	8001882 <__aeabi_dmul+0x3b6>
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	0252      	lsls	r2, r2, #9
 800187e:	4690      	mov	r8, r2
 8001880:	4446      	add	r6, r8
 8001882:	0c0d      	lsrs	r5, r1, #16
 8001884:	46a8      	mov	r8, r5
 8001886:	0035      	movs	r5, r6
 8001888:	4445      	add	r5, r8
 800188a:	9505      	str	r5, [sp, #20]
 800188c:	9d03      	ldr	r5, [sp, #12]
 800188e:	043f      	lsls	r7, r7, #16
 8001890:	46a8      	mov	r8, r5
 8001892:	0c3f      	lsrs	r7, r7, #16
 8001894:	0409      	lsls	r1, r1, #16
 8001896:	19c9      	adds	r1, r1, r7
 8001898:	4488      	add	r8, r1
 800189a:	4645      	mov	r5, r8
 800189c:	9503      	str	r5, [sp, #12]
 800189e:	4655      	mov	r5, sl
 80018a0:	042e      	lsls	r6, r5, #16
 80018a2:	0c36      	lsrs	r6, r6, #16
 80018a4:	0c2f      	lsrs	r7, r5, #16
 80018a6:	0035      	movs	r5, r6
 80018a8:	4345      	muls	r5, r0
 80018aa:	4378      	muls	r0, r7
 80018ac:	4681      	mov	r9, r0
 80018ae:	0038      	movs	r0, r7
 80018b0:	46a8      	mov	r8, r5
 80018b2:	0c2d      	lsrs	r5, r5, #16
 80018b4:	46aa      	mov	sl, r5
 80018b6:	9a00      	ldr	r2, [sp, #0]
 80018b8:	4350      	muls	r0, r2
 80018ba:	4372      	muls	r2, r6
 80018bc:	444a      	add	r2, r9
 80018be:	4452      	add	r2, sl
 80018c0:	4591      	cmp	r9, r2
 80018c2:	d903      	bls.n	80018cc <__aeabi_dmul+0x400>
 80018c4:	2580      	movs	r5, #128	@ 0x80
 80018c6:	026d      	lsls	r5, r5, #9
 80018c8:	46a9      	mov	r9, r5
 80018ca:	4448      	add	r0, r9
 80018cc:	0c15      	lsrs	r5, r2, #16
 80018ce:	46a9      	mov	r9, r5
 80018d0:	4645      	mov	r5, r8
 80018d2:	042d      	lsls	r5, r5, #16
 80018d4:	0c2d      	lsrs	r5, r5, #16
 80018d6:	46a8      	mov	r8, r5
 80018d8:	4665      	mov	r5, ip
 80018da:	437d      	muls	r5, r7
 80018dc:	0412      	lsls	r2, r2, #16
 80018de:	4448      	add	r0, r9
 80018e0:	4490      	add	r8, r2
 80018e2:	46a9      	mov	r9, r5
 80018e4:	0032      	movs	r2, r6
 80018e6:	4665      	mov	r5, ip
 80018e8:	4362      	muls	r2, r4
 80018ea:	436e      	muls	r6, r5
 80018ec:	437c      	muls	r4, r7
 80018ee:	0c17      	lsrs	r7, r2, #16
 80018f0:	1936      	adds	r6, r6, r4
 80018f2:	19bf      	adds	r7, r7, r6
 80018f4:	42bc      	cmp	r4, r7
 80018f6:	d903      	bls.n	8001900 <__aeabi_dmul+0x434>
 80018f8:	2480      	movs	r4, #128	@ 0x80
 80018fa:	0264      	lsls	r4, r4, #9
 80018fc:	46a4      	mov	ip, r4
 80018fe:	44e1      	add	r9, ip
 8001900:	9c02      	ldr	r4, [sp, #8]
 8001902:	9e03      	ldr	r6, [sp, #12]
 8001904:	46a4      	mov	ip, r4
 8001906:	9d05      	ldr	r5, [sp, #20]
 8001908:	4466      	add	r6, ip
 800190a:	428e      	cmp	r6, r1
 800190c:	4189      	sbcs	r1, r1
 800190e:	46ac      	mov	ip, r5
 8001910:	0412      	lsls	r2, r2, #16
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	0c12      	lsrs	r2, r2, #16
 8001916:	18a2      	adds	r2, r4, r2
 8001918:	4462      	add	r2, ip
 800191a:	4249      	negs	r1, r1
 800191c:	1854      	adds	r4, r2, r1
 800191e:	4446      	add	r6, r8
 8001920:	46a4      	mov	ip, r4
 8001922:	4546      	cmp	r6, r8
 8001924:	41a4      	sbcs	r4, r4
 8001926:	4682      	mov	sl, r0
 8001928:	4264      	negs	r4, r4
 800192a:	46a0      	mov	r8, r4
 800192c:	42aa      	cmp	r2, r5
 800192e:	4192      	sbcs	r2, r2
 8001930:	458c      	cmp	ip, r1
 8001932:	4189      	sbcs	r1, r1
 8001934:	44e2      	add	sl, ip
 8001936:	44d0      	add	r8, sl
 8001938:	4249      	negs	r1, r1
 800193a:	4252      	negs	r2, r2
 800193c:	430a      	orrs	r2, r1
 800193e:	45a0      	cmp	r8, r4
 8001940:	41a4      	sbcs	r4, r4
 8001942:	4582      	cmp	sl, r0
 8001944:	4189      	sbcs	r1, r1
 8001946:	4264      	negs	r4, r4
 8001948:	4249      	negs	r1, r1
 800194a:	430c      	orrs	r4, r1
 800194c:	4641      	mov	r1, r8
 800194e:	0c3f      	lsrs	r7, r7, #16
 8001950:	19d2      	adds	r2, r2, r7
 8001952:	1912      	adds	r2, r2, r4
 8001954:	0dcc      	lsrs	r4, r1, #23
 8001956:	9904      	ldr	r1, [sp, #16]
 8001958:	0270      	lsls	r0, r6, #9
 800195a:	4308      	orrs	r0, r1
 800195c:	1e41      	subs	r1, r0, #1
 800195e:	4188      	sbcs	r0, r1
 8001960:	4641      	mov	r1, r8
 8001962:	444a      	add	r2, r9
 8001964:	0df6      	lsrs	r6, r6, #23
 8001966:	0252      	lsls	r2, r2, #9
 8001968:	4330      	orrs	r0, r6
 800196a:	0249      	lsls	r1, r1, #9
 800196c:	4314      	orrs	r4, r2
 800196e:	4308      	orrs	r0, r1
 8001970:	01d2      	lsls	r2, r2, #7
 8001972:	d535      	bpl.n	80019e0 <__aeabi_dmul+0x514>
 8001974:	2201      	movs	r2, #1
 8001976:	0843      	lsrs	r3, r0, #1
 8001978:	4002      	ands	r2, r0
 800197a:	4313      	orrs	r3, r2
 800197c:	07e0      	lsls	r0, r4, #31
 800197e:	4318      	orrs	r0, r3
 8001980:	0864      	lsrs	r4, r4, #1
 8001982:	e634      	b.n	80015ee <__aeabi_dmul+0x122>
 8001984:	9b00      	ldr	r3, [sp, #0]
 8001986:	46a2      	mov	sl, r4
 8001988:	469b      	mov	fp, r3
 800198a:	4681      	mov	r9, r0
 800198c:	2480      	movs	r4, #128	@ 0x80
 800198e:	4653      	mov	r3, sl
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	431c      	orrs	r4, r3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	464a      	mov	r2, r9
 8001998:	4b2e      	ldr	r3, [pc, #184]	@ (8001a54 <__aeabi_dmul+0x588>)
 800199a:	0b24      	lsrs	r4, r4, #12
 800199c:	e5ec      	b.n	8001578 <__aeabi_dmul+0xac>
 800199e:	f000 fd2d 	bl	80023fc <__clzsi2>
 80019a2:	2315      	movs	r3, #21
 80019a4:	469c      	mov	ip, r3
 80019a6:	4484      	add	ip, r0
 80019a8:	0002      	movs	r2, r0
 80019aa:	4663      	mov	r3, ip
 80019ac:	3220      	adds	r2, #32
 80019ae:	2b1c      	cmp	r3, #28
 80019b0:	dc00      	bgt.n	80019b4 <__aeabi_dmul+0x4e8>
 80019b2:	e684      	b.n	80016be <__aeabi_dmul+0x1f2>
 80019b4:	2300      	movs	r3, #0
 80019b6:	4699      	mov	r9, r3
 80019b8:	0023      	movs	r3, r4
 80019ba:	3808      	subs	r0, #8
 80019bc:	4083      	lsls	r3, r0
 80019be:	469a      	mov	sl, r3
 80019c0:	e68e      	b.n	80016e0 <__aeabi_dmul+0x214>
 80019c2:	f000 fd1b 	bl	80023fc <__clzsi2>
 80019c6:	0002      	movs	r2, r0
 80019c8:	0003      	movs	r3, r0
 80019ca:	3215      	adds	r2, #21
 80019cc:	3320      	adds	r3, #32
 80019ce:	2a1c      	cmp	r2, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x508>
 80019d2:	e64e      	b.n	8001672 <__aeabi_dmul+0x1a6>
 80019d4:	0002      	movs	r2, r0
 80019d6:	0034      	movs	r4, r6
 80019d8:	3a08      	subs	r2, #8
 80019da:	2000      	movs	r0, #0
 80019dc:	4094      	lsls	r4, r2
 80019de:	e652      	b.n	8001686 <__aeabi_dmul+0x1ba>
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	e604      	b.n	80015ee <__aeabi_dmul+0x122>
 80019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <__aeabi_dmul+0x58c>)
 80019e6:	0021      	movs	r1, r4
 80019e8:	469c      	mov	ip, r3
 80019ea:	0003      	movs	r3, r0
 80019ec:	9d01      	ldr	r5, [sp, #4]
 80019ee:	40d3      	lsrs	r3, r2
 80019f0:	4465      	add	r5, ip
 80019f2:	40a9      	lsls	r1, r5
 80019f4:	4319      	orrs	r1, r3
 80019f6:	0003      	movs	r3, r0
 80019f8:	40ab      	lsls	r3, r5
 80019fa:	1e58      	subs	r0, r3, #1
 80019fc:	4183      	sbcs	r3, r0
 80019fe:	4319      	orrs	r1, r3
 8001a00:	0008      	movs	r0, r1
 8001a02:	40d4      	lsrs	r4, r2
 8001a04:	074b      	lsls	r3, r1, #29
 8001a06:	d009      	beq.n	8001a1c <__aeabi_dmul+0x550>
 8001a08:	230f      	movs	r3, #15
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d005      	beq.n	8001a1c <__aeabi_dmul+0x550>
 8001a10:	1d0b      	adds	r3, r1, #4
 8001a12:	428b      	cmp	r3, r1
 8001a14:	4180      	sbcs	r0, r0
 8001a16:	4240      	negs	r0, r0
 8001a18:	1824      	adds	r4, r4, r0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	0223      	lsls	r3, r4, #8
 8001a1e:	d400      	bmi.n	8001a22 <__aeabi_dmul+0x556>
 8001a20:	e6d6      	b.n	80017d0 <__aeabi_dmul+0x304>
 8001a22:	2301      	movs	r3, #1
 8001a24:	2400      	movs	r4, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	e5a6      	b.n	8001578 <__aeabi_dmul+0xac>
 8001a2a:	290f      	cmp	r1, #15
 8001a2c:	d1aa      	bne.n	8001984 <__aeabi_dmul+0x4b8>
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	4652      	mov	r2, sl
 8001a32:	031b      	lsls	r3, r3, #12
 8001a34:	421a      	tst	r2, r3
 8001a36:	d0a9      	beq.n	800198c <__aeabi_dmul+0x4c0>
 8001a38:	421c      	tst	r4, r3
 8001a3a:	d1a7      	bne.n	800198c <__aeabi_dmul+0x4c0>
 8001a3c:	431c      	orrs	r4, r3
 8001a3e:	9b00      	ldr	r3, [sp, #0]
 8001a40:	0002      	movs	r2, r0
 8001a42:	469b      	mov	fp, r3
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <__aeabi_dmul+0x588>)
 8001a46:	e597      	b.n	8001578 <__aeabi_dmul+0xac>
 8001a48:	2400      	movs	r4, #0
 8001a4a:	e6c1      	b.n	80017d0 <__aeabi_dmul+0x304>
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	4b01      	ldr	r3, [pc, #4]	@ (8001a54 <__aeabi_dmul+0x588>)
 8001a50:	0022      	movs	r2, r4
 8001a52:	e591      	b.n	8001578 <__aeabi_dmul+0xac>
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	0000041e 	.word	0x0000041e

08001a5c <__aeabi_dsub>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	464e      	mov	r6, r9
 8001a60:	4645      	mov	r5, r8
 8001a62:	46de      	mov	lr, fp
 8001a64:	4657      	mov	r7, sl
 8001a66:	b5e0      	push	{r5, r6, r7, lr}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	9000      	str	r0, [sp, #0]
 8001a6c:	9101      	str	r1, [sp, #4]
 8001a6e:	030c      	lsls	r4, r1, #12
 8001a70:	004f      	lsls	r7, r1, #1
 8001a72:	0fce      	lsrs	r6, r1, #31
 8001a74:	0a61      	lsrs	r1, r4, #9
 8001a76:	9c00      	ldr	r4, [sp, #0]
 8001a78:	46b0      	mov	r8, r6
 8001a7a:	0f64      	lsrs	r4, r4, #29
 8001a7c:	430c      	orrs	r4, r1
 8001a7e:	9900      	ldr	r1, [sp, #0]
 8001a80:	0d7f      	lsrs	r7, r7, #21
 8001a82:	00c8      	lsls	r0, r1, #3
 8001a84:	0011      	movs	r1, r2
 8001a86:	001a      	movs	r2, r3
 8001a88:	031b      	lsls	r3, r3, #12
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	9100      	str	r1, [sp, #0]
 8001a8e:	9201      	str	r2, [sp, #4]
 8001a90:	0051      	lsls	r1, r2, #1
 8001a92:	0d4b      	lsrs	r3, r1, #21
 8001a94:	4699      	mov	r9, r3
 8001a96:	9b01      	ldr	r3, [sp, #4]
 8001a98:	9d00      	ldr	r5, [sp, #0]
 8001a9a:	0fd9      	lsrs	r1, r3, #31
 8001a9c:	4663      	mov	r3, ip
 8001a9e:	0f6a      	lsrs	r2, r5, #29
 8001aa0:	0a5b      	lsrs	r3, r3, #9
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	00ea      	lsls	r2, r5, #3
 8001aa6:	4694      	mov	ip, r2
 8001aa8:	4693      	mov	fp, r2
 8001aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8001db0 <__aeabi_dsub+0x354>)
 8001aac:	9003      	str	r0, [sp, #12]
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	4591      	cmp	r9, r2
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x5a>
 8001ab4:	e0cd      	b.n	8001c52 <__aeabi_dsub+0x1f6>
 8001ab6:	2501      	movs	r5, #1
 8001ab8:	4069      	eors	r1, r5
 8001aba:	464d      	mov	r5, r9
 8001abc:	1b7d      	subs	r5, r7, r5
 8001abe:	46aa      	mov	sl, r5
 8001ac0:	428e      	cmp	r6, r1
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x6a>
 8001ac4:	e080      	b.n	8001bc8 <__aeabi_dsub+0x16c>
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	dc00      	bgt.n	8001acc <__aeabi_dsub+0x70>
 8001aca:	e335      	b.n	8002138 <__aeabi_dsub+0x6dc>
 8001acc:	4649      	mov	r1, r9
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x78>
 8001ad2:	e0df      	b.n	8001c94 <__aeabi_dsub+0x238>
 8001ad4:	4297      	cmp	r7, r2
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x7e>
 8001ad8:	e194      	b.n	8001e04 <__aeabi_dsub+0x3a8>
 8001ada:	4652      	mov	r2, sl
 8001adc:	2501      	movs	r5, #1
 8001ade:	2a38      	cmp	r2, #56	@ 0x38
 8001ae0:	dc19      	bgt.n	8001b16 <__aeabi_dsub+0xba>
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	9b02      	ldr	r3, [sp, #8]
 8001ae6:	0412      	lsls	r2, r2, #16
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	4652      	mov	r2, sl
 8001aee:	2a1f      	cmp	r2, #31
 8001af0:	dd00      	ble.n	8001af4 <__aeabi_dsub+0x98>
 8001af2:	e1e3      	b.n	8001ebc <__aeabi_dsub+0x460>
 8001af4:	4653      	mov	r3, sl
 8001af6:	2220      	movs	r2, #32
 8001af8:	4661      	mov	r1, ip
 8001afa:	9d02      	ldr	r5, [sp, #8]
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	4095      	lsls	r5, r2
 8001b00:	40d9      	lsrs	r1, r3
 8001b02:	430d      	orrs	r5, r1
 8001b04:	4661      	mov	r1, ip
 8001b06:	4091      	lsls	r1, r2
 8001b08:	000a      	movs	r2, r1
 8001b0a:	1e51      	subs	r1, r2, #1
 8001b0c:	418a      	sbcs	r2, r1
 8001b0e:	4315      	orrs	r5, r2
 8001b10:	9a02      	ldr	r2, [sp, #8]
 8001b12:	40da      	lsrs	r2, r3
 8001b14:	1aa4      	subs	r4, r4, r2
 8001b16:	1b45      	subs	r5, r0, r5
 8001b18:	42a8      	cmp	r0, r5
 8001b1a:	4180      	sbcs	r0, r0
 8001b1c:	4240      	negs	r0, r0
 8001b1e:	1a24      	subs	r4, r4, r0
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	d400      	bmi.n	8001b26 <__aeabi_dsub+0xca>
 8001b24:	e13d      	b.n	8001da2 <__aeabi_dsub+0x346>
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0a64      	lsrs	r4, r4, #9
 8001b2a:	2c00      	cmp	r4, #0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0xd4>
 8001b2e:	e147      	b.n	8001dc0 <__aeabi_dsub+0x364>
 8001b30:	0020      	movs	r0, r4
 8001b32:	f000 fc63 	bl	80023fc <__clzsi2>
 8001b36:	0003      	movs	r3, r0
 8001b38:	3b08      	subs	r3, #8
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	0028      	movs	r0, r5
 8001b3e:	1aca      	subs	r2, r1, r3
 8001b40:	40d0      	lsrs	r0, r2
 8001b42:	409c      	lsls	r4, r3
 8001b44:	0002      	movs	r2, r0
 8001b46:	409d      	lsls	r5, r3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	429f      	cmp	r7, r3
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_dsub+0xf4>
 8001b4e:	e177      	b.n	8001e40 <__aeabi_dsub+0x3e4>
 8001b50:	1bd8      	subs	r0, r3, r7
 8001b52:	3001      	adds	r0, #1
 8001b54:	1a09      	subs	r1, r1, r0
 8001b56:	002c      	movs	r4, r5
 8001b58:	408d      	lsls	r5, r1
 8001b5a:	40c4      	lsrs	r4, r0
 8001b5c:	1e6b      	subs	r3, r5, #1
 8001b5e:	419d      	sbcs	r5, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	40c2      	lsrs	r2, r0
 8001b64:	408b      	lsls	r3, r1
 8001b66:	4325      	orrs	r5, r4
 8001b68:	2700      	movs	r7, #0
 8001b6a:	0014      	movs	r4, r2
 8001b6c:	431d      	orrs	r5, r3
 8001b6e:	076b      	lsls	r3, r5, #29
 8001b70:	d009      	beq.n	8001b86 <__aeabi_dsub+0x12a>
 8001b72:	230f      	movs	r3, #15
 8001b74:	402b      	ands	r3, r5
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d005      	beq.n	8001b86 <__aeabi_dsub+0x12a>
 8001b7a:	1d2b      	adds	r3, r5, #4
 8001b7c:	42ab      	cmp	r3, r5
 8001b7e:	41ad      	sbcs	r5, r5
 8001b80:	426d      	negs	r5, r5
 8001b82:	1964      	adds	r4, r4, r5
 8001b84:	001d      	movs	r5, r3
 8001b86:	0223      	lsls	r3, r4, #8
 8001b88:	d400      	bmi.n	8001b8c <__aeabi_dsub+0x130>
 8001b8a:	e140      	b.n	8001e0e <__aeabi_dsub+0x3b2>
 8001b8c:	4a88      	ldr	r2, [pc, #544]	@ (8001db0 <__aeabi_dsub+0x354>)
 8001b8e:	3701      	adds	r7, #1
 8001b90:	4297      	cmp	r7, r2
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x13a>
 8001b94:	e101      	b.n	8001d9a <__aeabi_dsub+0x33e>
 8001b96:	2601      	movs	r6, #1
 8001b98:	4643      	mov	r3, r8
 8001b9a:	4986      	ldr	r1, [pc, #536]	@ (8001db4 <__aeabi_dsub+0x358>)
 8001b9c:	08ed      	lsrs	r5, r5, #3
 8001b9e:	4021      	ands	r1, r4
 8001ba0:	074a      	lsls	r2, r1, #29
 8001ba2:	432a      	orrs	r2, r5
 8001ba4:	057c      	lsls	r4, r7, #21
 8001ba6:	024d      	lsls	r5, r1, #9
 8001ba8:	0b2d      	lsrs	r5, r5, #12
 8001baa:	0d64      	lsrs	r4, r4, #21
 8001bac:	401e      	ands	r6, r3
 8001bae:	0524      	lsls	r4, r4, #20
 8001bb0:	432c      	orrs	r4, r5
 8001bb2:	07f6      	lsls	r6, r6, #31
 8001bb4:	4334      	orrs	r4, r6
 8001bb6:	0010      	movs	r0, r2
 8001bb8:	0021      	movs	r1, r4
 8001bba:	b005      	add	sp, #20
 8001bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8001bbe:	46bb      	mov	fp, r7
 8001bc0:	46b2      	mov	sl, r6
 8001bc2:	46a9      	mov	r9, r5
 8001bc4:	46a0      	mov	r8, r4
 8001bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc8:	2d00      	cmp	r5, #0
 8001bca:	dc00      	bgt.n	8001bce <__aeabi_dsub+0x172>
 8001bcc:	e2d0      	b.n	8002170 <__aeabi_dsub+0x714>
 8001bce:	4649      	mov	r1, r9
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x17a>
 8001bd4:	e0d4      	b.n	8001d80 <__aeabi_dsub+0x324>
 8001bd6:	4661      	mov	r1, ip
 8001bd8:	9b02      	ldr	r3, [sp, #8]
 8001bda:	4319      	orrs	r1, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x184>
 8001bde:	e12b      	b.n	8001e38 <__aeabi_dsub+0x3dc>
 8001be0:	1e69      	subs	r1, r5, #1
 8001be2:	2d01      	cmp	r5, #1
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x18c>
 8001be6:	e1d9      	b.n	8001f9c <__aeabi_dsub+0x540>
 8001be8:	4295      	cmp	r5, r2
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x192>
 8001bec:	e10a      	b.n	8001e04 <__aeabi_dsub+0x3a8>
 8001bee:	2501      	movs	r5, #1
 8001bf0:	2938      	cmp	r1, #56	@ 0x38
 8001bf2:	dc17      	bgt.n	8001c24 <__aeabi_dsub+0x1c8>
 8001bf4:	468a      	mov	sl, r1
 8001bf6:	4653      	mov	r3, sl
 8001bf8:	2b1f      	cmp	r3, #31
 8001bfa:	dd00      	ble.n	8001bfe <__aeabi_dsub+0x1a2>
 8001bfc:	e1e7      	b.n	8001fce <__aeabi_dsub+0x572>
 8001bfe:	2220      	movs	r2, #32
 8001c00:	1ad2      	subs	r2, r2, r3
 8001c02:	9b02      	ldr	r3, [sp, #8]
 8001c04:	4661      	mov	r1, ip
 8001c06:	4093      	lsls	r3, r2
 8001c08:	001d      	movs	r5, r3
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	40d9      	lsrs	r1, r3
 8001c0e:	4663      	mov	r3, ip
 8001c10:	4093      	lsls	r3, r2
 8001c12:	001a      	movs	r2, r3
 8001c14:	430d      	orrs	r5, r1
 8001c16:	1e51      	subs	r1, r2, #1
 8001c18:	418a      	sbcs	r2, r1
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	4315      	orrs	r5, r2
 8001c1e:	9a02      	ldr	r2, [sp, #8]
 8001c20:	40da      	lsrs	r2, r3
 8001c22:	18a4      	adds	r4, r4, r2
 8001c24:	182d      	adds	r5, r5, r0
 8001c26:	4285      	cmp	r5, r0
 8001c28:	4180      	sbcs	r0, r0
 8001c2a:	4240      	negs	r0, r0
 8001c2c:	1824      	adds	r4, r4, r0
 8001c2e:	0223      	lsls	r3, r4, #8
 8001c30:	d400      	bmi.n	8001c34 <__aeabi_dsub+0x1d8>
 8001c32:	e0b6      	b.n	8001da2 <__aeabi_dsub+0x346>
 8001c34:	4b5e      	ldr	r3, [pc, #376]	@ (8001db0 <__aeabi_dsub+0x354>)
 8001c36:	3701      	adds	r7, #1
 8001c38:	429f      	cmp	r7, r3
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dsub+0x1e2>
 8001c3c:	e0ad      	b.n	8001d9a <__aeabi_dsub+0x33e>
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4b5c      	ldr	r3, [pc, #368]	@ (8001db4 <__aeabi_dsub+0x358>)
 8001c42:	086a      	lsrs	r2, r5, #1
 8001c44:	401c      	ands	r4, r3
 8001c46:	4029      	ands	r1, r5
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	07e5      	lsls	r5, r4, #31
 8001c4c:	4315      	orrs	r5, r2
 8001c4e:	0864      	lsrs	r4, r4, #1
 8001c50:	e78d      	b.n	8001b6e <__aeabi_dsub+0x112>
 8001c52:	4a59      	ldr	r2, [pc, #356]	@ (8001db8 <__aeabi_dsub+0x35c>)
 8001c54:	9b02      	ldr	r3, [sp, #8]
 8001c56:	4692      	mov	sl, r2
 8001c58:	4662      	mov	r2, ip
 8001c5a:	44ba      	add	sl, r7
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	d02c      	beq.n	8001cba <__aeabi_dsub+0x25e>
 8001c60:	428e      	cmp	r6, r1
 8001c62:	d02e      	beq.n	8001cc2 <__aeabi_dsub+0x266>
 8001c64:	4652      	mov	r2, sl
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d060      	beq.n	8001d2c <__aeabi_dsub+0x2d0>
 8001c6a:	2f00      	cmp	r7, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x214>
 8001c6e:	e0db      	b.n	8001e28 <__aeabi_dsub+0x3cc>
 8001c70:	4663      	mov	r3, ip
 8001c72:	000e      	movs	r6, r1
 8001c74:	9c02      	ldr	r4, [sp, #8]
 8001c76:	08d8      	lsrs	r0, r3, #3
 8001c78:	0762      	lsls	r2, r4, #29
 8001c7a:	4302      	orrs	r2, r0
 8001c7c:	08e4      	lsrs	r4, r4, #3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	4323      	orrs	r3, r4
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x22a>
 8001c84:	e254      	b.n	8002130 <__aeabi_dsub+0x6d4>
 8001c86:	2580      	movs	r5, #128	@ 0x80
 8001c88:	032d      	lsls	r5, r5, #12
 8001c8a:	4325      	orrs	r5, r4
 8001c8c:	032d      	lsls	r5, r5, #12
 8001c8e:	4c48      	ldr	r4, [pc, #288]	@ (8001db0 <__aeabi_dsub+0x354>)
 8001c90:	0b2d      	lsrs	r5, r5, #12
 8001c92:	e78c      	b.n	8001bae <__aeabi_dsub+0x152>
 8001c94:	4661      	mov	r1, ip
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	4319      	orrs	r1, r3
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x242>
 8001c9c:	e0cc      	b.n	8001e38 <__aeabi_dsub+0x3dc>
 8001c9e:	0029      	movs	r1, r5
 8001ca0:	3901      	subs	r1, #1
 8001ca2:	2d01      	cmp	r5, #1
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x24c>
 8001ca6:	e188      	b.n	8001fba <__aeabi_dsub+0x55e>
 8001ca8:	4295      	cmp	r5, r2
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x252>
 8001cac:	e0aa      	b.n	8001e04 <__aeabi_dsub+0x3a8>
 8001cae:	2501      	movs	r5, #1
 8001cb0:	2938      	cmp	r1, #56	@ 0x38
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_dsub+0x25a>
 8001cb4:	e72f      	b.n	8001b16 <__aeabi_dsub+0xba>
 8001cb6:	468a      	mov	sl, r1
 8001cb8:	e718      	b.n	8001aec <__aeabi_dsub+0x90>
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4051      	eors	r1, r2
 8001cbe:	428e      	cmp	r6, r1
 8001cc0:	d1d0      	bne.n	8001c64 <__aeabi_dsub+0x208>
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x26e>
 8001cc8:	e0be      	b.n	8001e48 <__aeabi_dsub+0x3ec>
 8001cca:	2f00      	cmp	r7, #0
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dsub+0x274>
 8001cce:	e138      	b.n	8001f42 <__aeabi_dsub+0x4e6>
 8001cd0:	46ca      	mov	sl, r9
 8001cd2:	0022      	movs	r2, r4
 8001cd4:	4302      	orrs	r2, r0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dsub+0x27e>
 8001cd8:	e1e2      	b.n	80020a0 <__aeabi_dsub+0x644>
 8001cda:	4653      	mov	r3, sl
 8001cdc:	1e59      	subs	r1, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x288>
 8001ce2:	e20d      	b.n	8002100 <__aeabi_dsub+0x6a4>
 8001ce4:	4a32      	ldr	r2, [pc, #200]	@ (8001db0 <__aeabi_dsub+0x354>)
 8001ce6:	4592      	cmp	sl, r2
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x290>
 8001cea:	e1d2      	b.n	8002092 <__aeabi_dsub+0x636>
 8001cec:	2701      	movs	r7, #1
 8001cee:	2938      	cmp	r1, #56	@ 0x38
 8001cf0:	dc13      	bgt.n	8001d1a <__aeabi_dsub+0x2be>
 8001cf2:	291f      	cmp	r1, #31
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dsub+0x29c>
 8001cf6:	e1ee      	b.n	80020d6 <__aeabi_dsub+0x67a>
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	9b02      	ldr	r3, [sp, #8]
 8001cfc:	1a52      	subs	r2, r2, r1
 8001cfe:	0025      	movs	r5, r4
 8001d00:	0007      	movs	r7, r0
 8001d02:	469a      	mov	sl, r3
 8001d04:	40cc      	lsrs	r4, r1
 8001d06:	4090      	lsls	r0, r2
 8001d08:	4095      	lsls	r5, r2
 8001d0a:	40cf      	lsrs	r7, r1
 8001d0c:	44a2      	add	sl, r4
 8001d0e:	1e42      	subs	r2, r0, #1
 8001d10:	4190      	sbcs	r0, r2
 8001d12:	4653      	mov	r3, sl
 8001d14:	432f      	orrs	r7, r5
 8001d16:	4307      	orrs	r7, r0
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	003d      	movs	r5, r7
 8001d1c:	4465      	add	r5, ip
 8001d1e:	4565      	cmp	r5, ip
 8001d20:	4192      	sbcs	r2, r2
 8001d22:	9b02      	ldr	r3, [sp, #8]
 8001d24:	4252      	negs	r2, r2
 8001d26:	464f      	mov	r7, r9
 8001d28:	18d4      	adds	r4, r2, r3
 8001d2a:	e780      	b.n	8001c2e <__aeabi_dsub+0x1d2>
 8001d2c:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <__aeabi_dsub+0x360>)
 8001d2e:	1c7d      	adds	r5, r7, #1
 8001d30:	4215      	tst	r5, r2
 8001d32:	d000      	beq.n	8001d36 <__aeabi_dsub+0x2da>
 8001d34:	e0aa      	b.n	8001e8c <__aeabi_dsub+0x430>
 8001d36:	4662      	mov	r2, ip
 8001d38:	0025      	movs	r5, r4
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	4305      	orrs	r5, r0
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	2f00      	cmp	r7, #0
 8001d42:	d000      	beq.n	8001d46 <__aeabi_dsub+0x2ea>
 8001d44:	e0f5      	b.n	8001f32 <__aeabi_dsub+0x4d6>
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x2f0>
 8001d4a:	e16b      	b.n	8002024 <__aeabi_dsub+0x5c8>
 8001d4c:	2a00      	cmp	r2, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x2f6>
 8001d50:	e152      	b.n	8001ff8 <__aeabi_dsub+0x59c>
 8001d52:	4663      	mov	r3, ip
 8001d54:	1ac5      	subs	r5, r0, r3
 8001d56:	9b02      	ldr	r3, [sp, #8]
 8001d58:	1ae2      	subs	r2, r4, r3
 8001d5a:	42a8      	cmp	r0, r5
 8001d5c:	419b      	sbcs	r3, r3
 8001d5e:	425b      	negs	r3, r3
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	d400      	bmi.n	8001d68 <__aeabi_dsub+0x30c>
 8001d66:	e1d5      	b.n	8002114 <__aeabi_dsub+0x6b8>
 8001d68:	4663      	mov	r3, ip
 8001d6a:	1a1d      	subs	r5, r3, r0
 8001d6c:	45ac      	cmp	ip, r5
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	2601      	movs	r6, #1
 8001d72:	9b02      	ldr	r3, [sp, #8]
 8001d74:	4252      	negs	r2, r2
 8001d76:	1b1c      	subs	r4, r3, r4
 8001d78:	4688      	mov	r8, r1
 8001d7a:	1aa4      	subs	r4, r4, r2
 8001d7c:	400e      	ands	r6, r1
 8001d7e:	e6f6      	b.n	8001b6e <__aeabi_dsub+0x112>
 8001d80:	4297      	cmp	r7, r2
 8001d82:	d03f      	beq.n	8001e04 <__aeabi_dsub+0x3a8>
 8001d84:	4652      	mov	r2, sl
 8001d86:	2501      	movs	r5, #1
 8001d88:	2a38      	cmp	r2, #56	@ 0x38
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x332>
 8001d8c:	e74a      	b.n	8001c24 <__aeabi_dsub+0x1c8>
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	9b02      	ldr	r3, [sp, #8]
 8001d92:	0412      	lsls	r2, r2, #16
 8001d94:	4313      	orrs	r3, r2
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	e72d      	b.n	8001bf6 <__aeabi_dsub+0x19a>
 8001d9a:	003c      	movs	r4, r7
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	e705      	b.n	8001bae <__aeabi_dsub+0x152>
 8001da2:	2307      	movs	r3, #7
 8001da4:	402b      	ands	r3, r5
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x350>
 8001daa:	e6e2      	b.n	8001b72 <__aeabi_dsub+0x116>
 8001dac:	e06b      	b.n	8001e86 <__aeabi_dsub+0x42a>
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	000007ff 	.word	0x000007ff
 8001db4:	ff7fffff 	.word	0xff7fffff
 8001db8:	fffff801 	.word	0xfffff801
 8001dbc:	000007fe 	.word	0x000007fe
 8001dc0:	0028      	movs	r0, r5
 8001dc2:	f000 fb1b 	bl	80023fc <__clzsi2>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	3318      	adds	r3, #24
 8001dca:	2b1f      	cmp	r3, #31
 8001dcc:	dc00      	bgt.n	8001dd0 <__aeabi_dsub+0x374>
 8001dce:	e6b4      	b.n	8001b3a <__aeabi_dsub+0xde>
 8001dd0:	002a      	movs	r2, r5
 8001dd2:	3808      	subs	r0, #8
 8001dd4:	4082      	lsls	r2, r0
 8001dd6:	429f      	cmp	r7, r3
 8001dd8:	dd00      	ble.n	8001ddc <__aeabi_dsub+0x380>
 8001dda:	e0b9      	b.n	8001f50 <__aeabi_dsub+0x4f4>
 8001ddc:	1bdb      	subs	r3, r3, r7
 8001dde:	1c58      	adds	r0, r3, #1
 8001de0:	281f      	cmp	r0, #31
 8001de2:	dc00      	bgt.n	8001de6 <__aeabi_dsub+0x38a>
 8001de4:	e1a0      	b.n	8002128 <__aeabi_dsub+0x6cc>
 8001de6:	0015      	movs	r5, r2
 8001de8:	3b1f      	subs	r3, #31
 8001dea:	40dd      	lsrs	r5, r3
 8001dec:	2820      	cmp	r0, #32
 8001dee:	d005      	beq.n	8001dfc <__aeabi_dsub+0x3a0>
 8001df0:	2340      	movs	r3, #64	@ 0x40
 8001df2:	1a1b      	subs	r3, r3, r0
 8001df4:	409a      	lsls	r2, r3
 8001df6:	1e53      	subs	r3, r2, #1
 8001df8:	419a      	sbcs	r2, r3
 8001dfa:	4315      	orrs	r5, r2
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	2700      	movs	r7, #0
 8001e00:	402b      	ands	r3, r5
 8001e02:	e7d0      	b.n	8001da6 <__aeabi_dsub+0x34a>
 8001e04:	08c0      	lsrs	r0, r0, #3
 8001e06:	0762      	lsls	r2, r4, #29
 8001e08:	4302      	orrs	r2, r0
 8001e0a:	08e4      	lsrs	r4, r4, #3
 8001e0c:	e737      	b.n	8001c7e <__aeabi_dsub+0x222>
 8001e0e:	08ea      	lsrs	r2, r5, #3
 8001e10:	0763      	lsls	r3, r4, #29
 8001e12:	431a      	orrs	r2, r3
 8001e14:	4bd3      	ldr	r3, [pc, #844]	@ (8002164 <__aeabi_dsub+0x708>)
 8001e16:	08e4      	lsrs	r4, r4, #3
 8001e18:	429f      	cmp	r7, r3
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x3c2>
 8001e1c:	e72f      	b.n	8001c7e <__aeabi_dsub+0x222>
 8001e1e:	0324      	lsls	r4, r4, #12
 8001e20:	0b25      	lsrs	r5, r4, #12
 8001e22:	057c      	lsls	r4, r7, #21
 8001e24:	0d64      	lsrs	r4, r4, #21
 8001e26:	e6c2      	b.n	8001bae <__aeabi_dsub+0x152>
 8001e28:	46ca      	mov	sl, r9
 8001e2a:	0022      	movs	r2, r4
 8001e2c:	4302      	orrs	r2, r0
 8001e2e:	d158      	bne.n	8001ee2 <__aeabi_dsub+0x486>
 8001e30:	4663      	mov	r3, ip
 8001e32:	000e      	movs	r6, r1
 8001e34:	9c02      	ldr	r4, [sp, #8]
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	4657      	mov	r7, sl
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	e7e7      	b.n	8001e10 <__aeabi_dsub+0x3b4>
 8001e40:	4cc9      	ldr	r4, [pc, #804]	@ (8002168 <__aeabi_dsub+0x70c>)
 8001e42:	1aff      	subs	r7, r7, r3
 8001e44:	4014      	ands	r4, r2
 8001e46:	e692      	b.n	8001b6e <__aeabi_dsub+0x112>
 8001e48:	4dc8      	ldr	r5, [pc, #800]	@ (800216c <__aeabi_dsub+0x710>)
 8001e4a:	1c7a      	adds	r2, r7, #1
 8001e4c:	422a      	tst	r2, r5
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3f6>
 8001e50:	e084      	b.n	8001f5c <__aeabi_dsub+0x500>
 8001e52:	0022      	movs	r2, r4
 8001e54:	4302      	orrs	r2, r0
 8001e56:	2f00      	cmp	r7, #0
 8001e58:	d000      	beq.n	8001e5c <__aeabi_dsub+0x400>
 8001e5a:	e0ef      	b.n	800203c <__aeabi_dsub+0x5e0>
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x406>
 8001e60:	e0e5      	b.n	800202e <__aeabi_dsub+0x5d2>
 8001e62:	4662      	mov	r2, ip
 8001e64:	9902      	ldr	r1, [sp, #8]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x410>
 8001e6a:	e0c5      	b.n	8001ff8 <__aeabi_dsub+0x59c>
 8001e6c:	4663      	mov	r3, ip
 8001e6e:	18c5      	adds	r5, r0, r3
 8001e70:	468c      	mov	ip, r1
 8001e72:	4285      	cmp	r5, r0
 8001e74:	4180      	sbcs	r0, r0
 8001e76:	4464      	add	r4, ip
 8001e78:	4240      	negs	r0, r0
 8001e7a:	1824      	adds	r4, r4, r0
 8001e7c:	0223      	lsls	r3, r4, #8
 8001e7e:	d502      	bpl.n	8001e86 <__aeabi_dsub+0x42a>
 8001e80:	4bb9      	ldr	r3, [pc, #740]	@ (8002168 <__aeabi_dsub+0x70c>)
 8001e82:	3701      	adds	r7, #1
 8001e84:	401c      	ands	r4, r3
 8001e86:	46ba      	mov	sl, r7
 8001e88:	9503      	str	r5, [sp, #12]
 8001e8a:	e7d5      	b.n	8001e38 <__aeabi_dsub+0x3dc>
 8001e8c:	4662      	mov	r2, ip
 8001e8e:	1a85      	subs	r5, r0, r2
 8001e90:	42a8      	cmp	r0, r5
 8001e92:	4192      	sbcs	r2, r2
 8001e94:	4252      	negs	r2, r2
 8001e96:	4691      	mov	r9, r2
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	1ae3      	subs	r3, r4, r3
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	021a      	lsls	r2, r3, #8
 8001ea8:	d46c      	bmi.n	8001f84 <__aeabi_dsub+0x528>
 8001eaa:	464a      	mov	r2, r9
 8001eac:	464c      	mov	r4, r9
 8001eae:	432a      	orrs	r2, r5
 8001eb0:	d000      	beq.n	8001eb4 <__aeabi_dsub+0x458>
 8001eb2:	e63a      	b.n	8001b2a <__aeabi_dsub+0xce>
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	2400      	movs	r4, #0
 8001eb8:	2500      	movs	r5, #0
 8001eba:	e678      	b.n	8001bae <__aeabi_dsub+0x152>
 8001ebc:	9902      	ldr	r1, [sp, #8]
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	000d      	movs	r5, r1
 8001ec2:	3a20      	subs	r2, #32
 8001ec4:	40d5      	lsrs	r5, r2
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d006      	beq.n	8001ed8 <__aeabi_dsub+0x47c>
 8001eca:	2240      	movs	r2, #64	@ 0x40
 8001ecc:	1ad2      	subs	r2, r2, r3
 8001ece:	000b      	movs	r3, r1
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	4662      	mov	r2, ip
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	4693      	mov	fp, r2
 8001ed8:	465b      	mov	r3, fp
 8001eda:	1e5a      	subs	r2, r3, #1
 8001edc:	4193      	sbcs	r3, r2
 8001ede:	431d      	orrs	r5, r3
 8001ee0:	e619      	b.n	8001b16 <__aeabi_dsub+0xba>
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x490>
 8001eea:	e0c6      	b.n	800207a <__aeabi_dsub+0x61e>
 8001eec:	4e9d      	ldr	r6, [pc, #628]	@ (8002164 <__aeabi_dsub+0x708>)
 8001eee:	45b2      	cmp	sl, r6
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x498>
 8001ef2:	e6bd      	b.n	8001c70 <__aeabi_dsub+0x214>
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	000e      	movs	r6, r1
 8001ef8:	2501      	movs	r5, #1
 8001efa:	2a38      	cmp	r2, #56	@ 0x38
 8001efc:	dc10      	bgt.n	8001f20 <__aeabi_dsub+0x4c4>
 8001efe:	2a1f      	cmp	r2, #31
 8001f00:	dc7f      	bgt.n	8002002 <__aeabi_dsub+0x5a6>
 8001f02:	2120      	movs	r1, #32
 8001f04:	0025      	movs	r5, r4
 8001f06:	1a89      	subs	r1, r1, r2
 8001f08:	0007      	movs	r7, r0
 8001f0a:	4088      	lsls	r0, r1
 8001f0c:	408d      	lsls	r5, r1
 8001f0e:	40d7      	lsrs	r7, r2
 8001f10:	40d4      	lsrs	r4, r2
 8001f12:	1e41      	subs	r1, r0, #1
 8001f14:	4188      	sbcs	r0, r1
 8001f16:	9b02      	ldr	r3, [sp, #8]
 8001f18:	433d      	orrs	r5, r7
 8001f1a:	1b1b      	subs	r3, r3, r4
 8001f1c:	4305      	orrs	r5, r0
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	4662      	mov	r2, ip
 8001f22:	1b55      	subs	r5, r2, r5
 8001f24:	45ac      	cmp	ip, r5
 8001f26:	4192      	sbcs	r2, r2
 8001f28:	9b02      	ldr	r3, [sp, #8]
 8001f2a:	4252      	negs	r2, r2
 8001f2c:	464f      	mov	r7, r9
 8001f2e:	1a9c      	subs	r4, r3, r2
 8001f30:	e5f6      	b.n	8001b20 <__aeabi_dsub+0xc4>
 8001f32:	2d00      	cmp	r5, #0
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x4dc>
 8001f36:	e0b7      	b.n	80020a8 <__aeabi_dsub+0x64c>
 8001f38:	2a00      	cmp	r2, #0
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x4e2>
 8001f3c:	e0f0      	b.n	8002120 <__aeabi_dsub+0x6c4>
 8001f3e:	2601      	movs	r6, #1
 8001f40:	400e      	ands	r6, r1
 8001f42:	4663      	mov	r3, ip
 8001f44:	9802      	ldr	r0, [sp, #8]
 8001f46:	08d9      	lsrs	r1, r3, #3
 8001f48:	0742      	lsls	r2, r0, #29
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	08c4      	lsrs	r4, r0, #3
 8001f4e:	e696      	b.n	8001c7e <__aeabi_dsub+0x222>
 8001f50:	4c85      	ldr	r4, [pc, #532]	@ (8002168 <__aeabi_dsub+0x70c>)
 8001f52:	1aff      	subs	r7, r7, r3
 8001f54:	4014      	ands	r4, r2
 8001f56:	0762      	lsls	r2, r4, #29
 8001f58:	08e4      	lsrs	r4, r4, #3
 8001f5a:	e760      	b.n	8001e1e <__aeabi_dsub+0x3c2>
 8001f5c:	4981      	ldr	r1, [pc, #516]	@ (8002164 <__aeabi_dsub+0x708>)
 8001f5e:	428a      	cmp	r2, r1
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x508>
 8001f62:	e0c9      	b.n	80020f8 <__aeabi_dsub+0x69c>
 8001f64:	4663      	mov	r3, ip
 8001f66:	18c1      	adds	r1, r0, r3
 8001f68:	4281      	cmp	r1, r0
 8001f6a:	4180      	sbcs	r0, r0
 8001f6c:	9b02      	ldr	r3, [sp, #8]
 8001f6e:	4240      	negs	r0, r0
 8001f70:	18e3      	adds	r3, r4, r3
 8001f72:	181b      	adds	r3, r3, r0
 8001f74:	07dd      	lsls	r5, r3, #31
 8001f76:	085c      	lsrs	r4, r3, #1
 8001f78:	2307      	movs	r3, #7
 8001f7a:	0849      	lsrs	r1, r1, #1
 8001f7c:	430d      	orrs	r5, r1
 8001f7e:	0017      	movs	r7, r2
 8001f80:	402b      	ands	r3, r5
 8001f82:	e710      	b.n	8001da6 <__aeabi_dsub+0x34a>
 8001f84:	4663      	mov	r3, ip
 8001f86:	1a1d      	subs	r5, r3, r0
 8001f88:	45ac      	cmp	ip, r5
 8001f8a:	4192      	sbcs	r2, r2
 8001f8c:	2601      	movs	r6, #1
 8001f8e:	9b02      	ldr	r3, [sp, #8]
 8001f90:	4252      	negs	r2, r2
 8001f92:	1b1c      	subs	r4, r3, r4
 8001f94:	4688      	mov	r8, r1
 8001f96:	1aa4      	subs	r4, r4, r2
 8001f98:	400e      	ands	r6, r1
 8001f9a:	e5c6      	b.n	8001b2a <__aeabi_dsub+0xce>
 8001f9c:	4663      	mov	r3, ip
 8001f9e:	18c5      	adds	r5, r0, r3
 8001fa0:	9b02      	ldr	r3, [sp, #8]
 8001fa2:	4285      	cmp	r5, r0
 8001fa4:	4180      	sbcs	r0, r0
 8001fa6:	469c      	mov	ip, r3
 8001fa8:	4240      	negs	r0, r0
 8001faa:	4464      	add	r4, ip
 8001fac:	1824      	adds	r4, r4, r0
 8001fae:	2701      	movs	r7, #1
 8001fb0:	0223      	lsls	r3, r4, #8
 8001fb2:	d400      	bmi.n	8001fb6 <__aeabi_dsub+0x55a>
 8001fb4:	e6f5      	b.n	8001da2 <__aeabi_dsub+0x346>
 8001fb6:	2702      	movs	r7, #2
 8001fb8:	e641      	b.n	8001c3e <__aeabi_dsub+0x1e2>
 8001fba:	4663      	mov	r3, ip
 8001fbc:	1ac5      	subs	r5, r0, r3
 8001fbe:	42a8      	cmp	r0, r5
 8001fc0:	4180      	sbcs	r0, r0
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	4240      	negs	r0, r0
 8001fc6:	1ae4      	subs	r4, r4, r3
 8001fc8:	2701      	movs	r7, #1
 8001fca:	1a24      	subs	r4, r4, r0
 8001fcc:	e5a8      	b.n	8001b20 <__aeabi_dsub+0xc4>
 8001fce:	9d02      	ldr	r5, [sp, #8]
 8001fd0:	4652      	mov	r2, sl
 8001fd2:	002b      	movs	r3, r5
 8001fd4:	3a20      	subs	r2, #32
 8001fd6:	40d3      	lsrs	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	4653      	mov	r3, sl
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d006      	beq.n	8001fee <__aeabi_dsub+0x592>
 8001fe0:	2240      	movs	r2, #64	@ 0x40
 8001fe2:	1ad2      	subs	r2, r2, r3
 8001fe4:	002b      	movs	r3, r5
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	4662      	mov	r2, ip
 8001fea:	431a      	orrs	r2, r3
 8001fec:	4693      	mov	fp, r2
 8001fee:	465d      	mov	r5, fp
 8001ff0:	1e6b      	subs	r3, r5, #1
 8001ff2:	419d      	sbcs	r5, r3
 8001ff4:	430d      	orrs	r5, r1
 8001ff6:	e615      	b.n	8001c24 <__aeabi_dsub+0x1c8>
 8001ff8:	0762      	lsls	r2, r4, #29
 8001ffa:	08c0      	lsrs	r0, r0, #3
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	08e4      	lsrs	r4, r4, #3
 8002000:	e70d      	b.n	8001e1e <__aeabi_dsub+0x3c2>
 8002002:	0011      	movs	r1, r2
 8002004:	0027      	movs	r7, r4
 8002006:	3920      	subs	r1, #32
 8002008:	40cf      	lsrs	r7, r1
 800200a:	2a20      	cmp	r2, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x5be>
 800200e:	2140      	movs	r1, #64	@ 0x40
 8002010:	1a8a      	subs	r2, r1, r2
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	433d      	orrs	r5, r7
 8002022:	e77d      	b.n	8001f20 <__aeabi_dsub+0x4c4>
 8002024:	2a00      	cmp	r2, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x5ce>
 8002028:	e744      	b.n	8001eb4 <__aeabi_dsub+0x458>
 800202a:	2601      	movs	r6, #1
 800202c:	400e      	ands	r6, r1
 800202e:	4663      	mov	r3, ip
 8002030:	08d9      	lsrs	r1, r3, #3
 8002032:	9b02      	ldr	r3, [sp, #8]
 8002034:	075a      	lsls	r2, r3, #29
 8002036:	430a      	orrs	r2, r1
 8002038:	08dc      	lsrs	r4, r3, #3
 800203a:	e6f0      	b.n	8001e1e <__aeabi_dsub+0x3c2>
 800203c:	2a00      	cmp	r2, #0
 800203e:	d028      	beq.n	8002092 <__aeabi_dsub+0x636>
 8002040:	4662      	mov	r2, ip
 8002042:	9f02      	ldr	r7, [sp, #8]
 8002044:	08c0      	lsrs	r0, r0, #3
 8002046:	433a      	orrs	r2, r7
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x5f0>
 800204a:	e6dc      	b.n	8001e06 <__aeabi_dsub+0x3aa>
 800204c:	0762      	lsls	r2, r4, #29
 800204e:	4310      	orrs	r0, r2
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	08e4      	lsrs	r4, r4, #3
 8002054:	0312      	lsls	r2, r2, #12
 8002056:	4214      	tst	r4, r2
 8002058:	d009      	beq.n	800206e <__aeabi_dsub+0x612>
 800205a:	08fd      	lsrs	r5, r7, #3
 800205c:	4215      	tst	r5, r2
 800205e:	d106      	bne.n	800206e <__aeabi_dsub+0x612>
 8002060:	4663      	mov	r3, ip
 8002062:	2601      	movs	r6, #1
 8002064:	002c      	movs	r4, r5
 8002066:	08d8      	lsrs	r0, r3, #3
 8002068:	077b      	lsls	r3, r7, #29
 800206a:	4318      	orrs	r0, r3
 800206c:	400e      	ands	r6, r1
 800206e:	0f42      	lsrs	r2, r0, #29
 8002070:	00c0      	lsls	r0, r0, #3
 8002072:	08c0      	lsrs	r0, r0, #3
 8002074:	0752      	lsls	r2, r2, #29
 8002076:	4302      	orrs	r2, r0
 8002078:	e601      	b.n	8001c7e <__aeabi_dsub+0x222>
 800207a:	4663      	mov	r3, ip
 800207c:	1a1d      	subs	r5, r3, r0
 800207e:	45ac      	cmp	ip, r5
 8002080:	4192      	sbcs	r2, r2
 8002082:	9b02      	ldr	r3, [sp, #8]
 8002084:	4252      	negs	r2, r2
 8002086:	1b1c      	subs	r4, r3, r4
 8002088:	000e      	movs	r6, r1
 800208a:	4688      	mov	r8, r1
 800208c:	2701      	movs	r7, #1
 800208e:	1aa4      	subs	r4, r4, r2
 8002090:	e546      	b.n	8001b20 <__aeabi_dsub+0xc4>
 8002092:	4663      	mov	r3, ip
 8002094:	08d9      	lsrs	r1, r3, #3
 8002096:	9b02      	ldr	r3, [sp, #8]
 8002098:	075a      	lsls	r2, r3, #29
 800209a:	430a      	orrs	r2, r1
 800209c:	08dc      	lsrs	r4, r3, #3
 800209e:	e5ee      	b.n	8001c7e <__aeabi_dsub+0x222>
 80020a0:	4663      	mov	r3, ip
 80020a2:	9c02      	ldr	r4, [sp, #8]
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	e6c7      	b.n	8001e38 <__aeabi_dsub+0x3dc>
 80020a8:	08c0      	lsrs	r0, r0, #3
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x654>
 80020ae:	e6aa      	b.n	8001e06 <__aeabi_dsub+0x3aa>
 80020b0:	0762      	lsls	r2, r4, #29
 80020b2:	4310      	orrs	r0, r2
 80020b4:	2280      	movs	r2, #128	@ 0x80
 80020b6:	08e4      	lsrs	r4, r4, #3
 80020b8:	0312      	lsls	r2, r2, #12
 80020ba:	4214      	tst	r4, r2
 80020bc:	d0d7      	beq.n	800206e <__aeabi_dsub+0x612>
 80020be:	9f02      	ldr	r7, [sp, #8]
 80020c0:	08fd      	lsrs	r5, r7, #3
 80020c2:	4215      	tst	r5, r2
 80020c4:	d1d3      	bne.n	800206e <__aeabi_dsub+0x612>
 80020c6:	4663      	mov	r3, ip
 80020c8:	2601      	movs	r6, #1
 80020ca:	08d8      	lsrs	r0, r3, #3
 80020cc:	077b      	lsls	r3, r7, #29
 80020ce:	002c      	movs	r4, r5
 80020d0:	4318      	orrs	r0, r3
 80020d2:	400e      	ands	r6, r1
 80020d4:	e7cb      	b.n	800206e <__aeabi_dsub+0x612>
 80020d6:	000a      	movs	r2, r1
 80020d8:	0027      	movs	r7, r4
 80020da:	3a20      	subs	r2, #32
 80020dc:	40d7      	lsrs	r7, r2
 80020de:	2920      	cmp	r1, #32
 80020e0:	d005      	beq.n	80020ee <__aeabi_dsub+0x692>
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	1a52      	subs	r2, r2, r1
 80020e6:	4094      	lsls	r4, r2
 80020e8:	0025      	movs	r5, r4
 80020ea:	4305      	orrs	r5, r0
 80020ec:	9503      	str	r5, [sp, #12]
 80020ee:	9d03      	ldr	r5, [sp, #12]
 80020f0:	1e6a      	subs	r2, r5, #1
 80020f2:	4195      	sbcs	r5, r2
 80020f4:	432f      	orrs	r7, r5
 80020f6:	e610      	b.n	8001d1a <__aeabi_dsub+0x2be>
 80020f8:	0014      	movs	r4, r2
 80020fa:	2500      	movs	r5, #0
 80020fc:	2200      	movs	r2, #0
 80020fe:	e556      	b.n	8001bae <__aeabi_dsub+0x152>
 8002100:	9b02      	ldr	r3, [sp, #8]
 8002102:	4460      	add	r0, ip
 8002104:	4699      	mov	r9, r3
 8002106:	4560      	cmp	r0, ip
 8002108:	4192      	sbcs	r2, r2
 800210a:	444c      	add	r4, r9
 800210c:	4252      	negs	r2, r2
 800210e:	0005      	movs	r5, r0
 8002110:	18a4      	adds	r4, r4, r2
 8002112:	e74c      	b.n	8001fae <__aeabi_dsub+0x552>
 8002114:	001a      	movs	r2, r3
 8002116:	001c      	movs	r4, r3
 8002118:	432a      	orrs	r2, r5
 800211a:	d000      	beq.n	800211e <__aeabi_dsub+0x6c2>
 800211c:	e6b3      	b.n	8001e86 <__aeabi_dsub+0x42a>
 800211e:	e6c9      	b.n	8001eb4 <__aeabi_dsub+0x458>
 8002120:	2480      	movs	r4, #128	@ 0x80
 8002122:	2600      	movs	r6, #0
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	e5ae      	b.n	8001c86 <__aeabi_dsub+0x22a>
 8002128:	2120      	movs	r1, #32
 800212a:	2500      	movs	r5, #0
 800212c:	1a09      	subs	r1, r1, r0
 800212e:	e517      	b.n	8001b60 <__aeabi_dsub+0x104>
 8002130:	2200      	movs	r2, #0
 8002132:	2500      	movs	r5, #0
 8002134:	4c0b      	ldr	r4, [pc, #44]	@ (8002164 <__aeabi_dsub+0x708>)
 8002136:	e53a      	b.n	8001bae <__aeabi_dsub+0x152>
 8002138:	2d00      	cmp	r5, #0
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x6e2>
 800213c:	e5f6      	b.n	8001d2c <__aeabi_dsub+0x2d0>
 800213e:	464b      	mov	r3, r9
 8002140:	1bda      	subs	r2, r3, r7
 8002142:	4692      	mov	sl, r2
 8002144:	2f00      	cmp	r7, #0
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x6ee>
 8002148:	e66f      	b.n	8001e2a <__aeabi_dsub+0x3ce>
 800214a:	2a38      	cmp	r2, #56	@ 0x38
 800214c:	dc05      	bgt.n	800215a <__aeabi_dsub+0x6fe>
 800214e:	2680      	movs	r6, #128	@ 0x80
 8002150:	0436      	lsls	r6, r6, #16
 8002152:	4334      	orrs	r4, r6
 8002154:	4688      	mov	r8, r1
 8002156:	000e      	movs	r6, r1
 8002158:	e6d1      	b.n	8001efe <__aeabi_dsub+0x4a2>
 800215a:	4688      	mov	r8, r1
 800215c:	000e      	movs	r6, r1
 800215e:	2501      	movs	r5, #1
 8002160:	e6de      	b.n	8001f20 <__aeabi_dsub+0x4c4>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000007ff 	.word	0x000007ff
 8002168:	ff7fffff 	.word	0xff7fffff
 800216c:	000007fe 	.word	0x000007fe
 8002170:	2d00      	cmp	r5, #0
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x71a>
 8002174:	e668      	b.n	8001e48 <__aeabi_dsub+0x3ec>
 8002176:	464b      	mov	r3, r9
 8002178:	1bd9      	subs	r1, r3, r7
 800217a:	2f00      	cmp	r7, #0
 800217c:	d101      	bne.n	8002182 <__aeabi_dsub+0x726>
 800217e:	468a      	mov	sl, r1
 8002180:	e5a7      	b.n	8001cd2 <__aeabi_dsub+0x276>
 8002182:	2701      	movs	r7, #1
 8002184:	2938      	cmp	r1, #56	@ 0x38
 8002186:	dd00      	ble.n	800218a <__aeabi_dsub+0x72e>
 8002188:	e5c7      	b.n	8001d1a <__aeabi_dsub+0x2be>
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	0412      	lsls	r2, r2, #16
 800218e:	4314      	orrs	r4, r2
 8002190:	e5af      	b.n	8001cf2 <__aeabi_dsub+0x296>
 8002192:	46c0      	nop			@ (mov r8, r8)

08002194 <__aeabi_dcmpun>:
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	46c6      	mov	lr, r8
 8002198:	031e      	lsls	r6, r3, #12
 800219a:	0b36      	lsrs	r6, r6, #12
 800219c:	46b0      	mov	r8, r6
 800219e:	4e0d      	ldr	r6, [pc, #52]	@ (80021d4 <__aeabi_dcmpun+0x40>)
 80021a0:	030c      	lsls	r4, r1, #12
 80021a2:	004d      	lsls	r5, r1, #1
 80021a4:	005f      	lsls	r7, r3, #1
 80021a6:	b500      	push	{lr}
 80021a8:	0b24      	lsrs	r4, r4, #12
 80021aa:	0d6d      	lsrs	r5, r5, #21
 80021ac:	0d7f      	lsrs	r7, r7, #21
 80021ae:	42b5      	cmp	r5, r6
 80021b0:	d00b      	beq.n	80021ca <__aeabi_dcmpun+0x36>
 80021b2:	4908      	ldr	r1, [pc, #32]	@ (80021d4 <__aeabi_dcmpun+0x40>)
 80021b4:	2000      	movs	r0, #0
 80021b6:	428f      	cmp	r7, r1
 80021b8:	d104      	bne.n	80021c4 <__aeabi_dcmpun+0x30>
 80021ba:	4646      	mov	r6, r8
 80021bc:	4316      	orrs	r6, r2
 80021be:	0030      	movs	r0, r6
 80021c0:	1e43      	subs	r3, r0, #1
 80021c2:	4198      	sbcs	r0, r3
 80021c4:	bc80      	pop	{r7}
 80021c6:	46b8      	mov	r8, r7
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ca:	4304      	orrs	r4, r0
 80021cc:	2001      	movs	r0, #1
 80021ce:	2c00      	cmp	r4, #0
 80021d0:	d1f8      	bne.n	80021c4 <__aeabi_dcmpun+0x30>
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_dcmpun+0x1e>
 80021d4:	000007ff 	.word	0x000007ff

080021d8 <__aeabi_d2iz>:
 80021d8:	000b      	movs	r3, r1
 80021da:	0002      	movs	r2, r0
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	4d16      	ldr	r5, [pc, #88]	@ (8002238 <__aeabi_d2iz+0x60>)
 80021e0:	030c      	lsls	r4, r1, #12
 80021e2:	b082      	sub	sp, #8
 80021e4:	0049      	lsls	r1, r1, #1
 80021e6:	2000      	movs	r0, #0
 80021e8:	9200      	str	r2, [sp, #0]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	0b24      	lsrs	r4, r4, #12
 80021ee:	0d49      	lsrs	r1, r1, #21
 80021f0:	0fde      	lsrs	r6, r3, #31
 80021f2:	42a9      	cmp	r1, r5
 80021f4:	dd04      	ble.n	8002200 <__aeabi_d2iz+0x28>
 80021f6:	4811      	ldr	r0, [pc, #68]	@ (800223c <__aeabi_d2iz+0x64>)
 80021f8:	4281      	cmp	r1, r0
 80021fa:	dd03      	ble.n	8002204 <__aeabi_d2iz+0x2c>
 80021fc:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <__aeabi_d2iz+0x68>)
 80021fe:	18f0      	adds	r0, r6, r3
 8002200:	b002      	add	sp, #8
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	2080      	movs	r0, #128	@ 0x80
 8002206:	0340      	lsls	r0, r0, #13
 8002208:	4320      	orrs	r0, r4
 800220a:	4c0e      	ldr	r4, [pc, #56]	@ (8002244 <__aeabi_d2iz+0x6c>)
 800220c:	1a64      	subs	r4, r4, r1
 800220e:	2c1f      	cmp	r4, #31
 8002210:	dd08      	ble.n	8002224 <__aeabi_d2iz+0x4c>
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <__aeabi_d2iz+0x70>)
 8002214:	1a5b      	subs	r3, r3, r1
 8002216:	40d8      	lsrs	r0, r3
 8002218:	0003      	movs	r3, r0
 800221a:	4258      	negs	r0, r3
 800221c:	2e00      	cmp	r6, #0
 800221e:	d1ef      	bne.n	8002200 <__aeabi_d2iz+0x28>
 8002220:	0018      	movs	r0, r3
 8002222:	e7ed      	b.n	8002200 <__aeabi_d2iz+0x28>
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <__aeabi_d2iz+0x74>)
 8002226:	9a00      	ldr	r2, [sp, #0]
 8002228:	469c      	mov	ip, r3
 800222a:	0003      	movs	r3, r0
 800222c:	4461      	add	r1, ip
 800222e:	408b      	lsls	r3, r1
 8002230:	40e2      	lsrs	r2, r4
 8002232:	4313      	orrs	r3, r2
 8002234:	e7f1      	b.n	800221a <__aeabi_d2iz+0x42>
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	000003fe 	.word	0x000003fe
 800223c:	0000041d 	.word	0x0000041d
 8002240:	7fffffff 	.word	0x7fffffff
 8002244:	00000433 	.word	0x00000433
 8002248:	00000413 	.word	0x00000413
 800224c:	fffffbed 	.word	0xfffffbed

08002250 <__aeabi_i2d>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	2800      	cmp	r0, #0
 8002254:	d016      	beq.n	8002284 <__aeabi_i2d+0x34>
 8002256:	17c3      	asrs	r3, r0, #31
 8002258:	18c5      	adds	r5, r0, r3
 800225a:	405d      	eors	r5, r3
 800225c:	0fc4      	lsrs	r4, r0, #31
 800225e:	0028      	movs	r0, r5
 8002260:	f000 f8cc 	bl	80023fc <__clzsi2>
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <__aeabi_i2d+0x58>)
 8002266:	1a1b      	subs	r3, r3, r0
 8002268:	055b      	lsls	r3, r3, #21
 800226a:	0d5b      	lsrs	r3, r3, #21
 800226c:	280a      	cmp	r0, #10
 800226e:	dc14      	bgt.n	800229a <__aeabi_i2d+0x4a>
 8002270:	0002      	movs	r2, r0
 8002272:	002e      	movs	r6, r5
 8002274:	3215      	adds	r2, #21
 8002276:	4096      	lsls	r6, r2
 8002278:	220b      	movs	r2, #11
 800227a:	1a12      	subs	r2, r2, r0
 800227c:	40d5      	lsrs	r5, r2
 800227e:	032d      	lsls	r5, r5, #12
 8002280:	0b2d      	lsrs	r5, r5, #12
 8002282:	e003      	b.n	800228c <__aeabi_i2d+0x3c>
 8002284:	2400      	movs	r4, #0
 8002286:	2300      	movs	r3, #0
 8002288:	2500      	movs	r5, #0
 800228a:	2600      	movs	r6, #0
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	432b      	orrs	r3, r5
 8002290:	07e4      	lsls	r4, r4, #31
 8002292:	4323      	orrs	r3, r4
 8002294:	0030      	movs	r0, r6
 8002296:	0019      	movs	r1, r3
 8002298:	bd70      	pop	{r4, r5, r6, pc}
 800229a:	380b      	subs	r0, #11
 800229c:	4085      	lsls	r5, r0
 800229e:	032d      	lsls	r5, r5, #12
 80022a0:	2600      	movs	r6, #0
 80022a2:	0b2d      	lsrs	r5, r5, #12
 80022a4:	e7f2      	b.n	800228c <__aeabi_i2d+0x3c>
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	0000041e 	.word	0x0000041e

080022ac <__aeabi_ui2d>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	1e04      	subs	r4, r0, #0
 80022b0:	d010      	beq.n	80022d4 <__aeabi_ui2d+0x28>
 80022b2:	f000 f8a3 	bl	80023fc <__clzsi2>
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <__aeabi_ui2d+0x44>)
 80022b8:	1a1b      	subs	r3, r3, r0
 80022ba:	055b      	lsls	r3, r3, #21
 80022bc:	0d5b      	lsrs	r3, r3, #21
 80022be:	280a      	cmp	r0, #10
 80022c0:	dc0f      	bgt.n	80022e2 <__aeabi_ui2d+0x36>
 80022c2:	220b      	movs	r2, #11
 80022c4:	0021      	movs	r1, r4
 80022c6:	1a12      	subs	r2, r2, r0
 80022c8:	40d1      	lsrs	r1, r2
 80022ca:	3015      	adds	r0, #21
 80022cc:	030a      	lsls	r2, r1, #12
 80022ce:	4084      	lsls	r4, r0
 80022d0:	0b12      	lsrs	r2, r2, #12
 80022d2:	e001      	b.n	80022d8 <__aeabi_ui2d+0x2c>
 80022d4:	2300      	movs	r3, #0
 80022d6:	2200      	movs	r2, #0
 80022d8:	051b      	lsls	r3, r3, #20
 80022da:	4313      	orrs	r3, r2
 80022dc:	0020      	movs	r0, r4
 80022de:	0019      	movs	r1, r3
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	0022      	movs	r2, r4
 80022e4:	380b      	subs	r0, #11
 80022e6:	4082      	lsls	r2, r0
 80022e8:	0312      	lsls	r2, r2, #12
 80022ea:	2400      	movs	r4, #0
 80022ec:	0b12      	lsrs	r2, r2, #12
 80022ee:	e7f3      	b.n	80022d8 <__aeabi_ui2d+0x2c>
 80022f0:	0000041e 	.word	0x0000041e

080022f4 <__aeabi_d2f>:
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	004b      	lsls	r3, r1, #1
 80022f8:	030f      	lsls	r7, r1, #12
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	4c3b      	ldr	r4, [pc, #236]	@ (80023ec <__aeabi_d2f+0xf8>)
 80022fe:	0f45      	lsrs	r5, r0, #29
 8002300:	b083      	sub	sp, #12
 8002302:	0a7f      	lsrs	r7, r7, #9
 8002304:	1c5e      	adds	r6, r3, #1
 8002306:	432f      	orrs	r7, r5
 8002308:	9000      	str	r0, [sp, #0]
 800230a:	9101      	str	r1, [sp, #4]
 800230c:	0fca      	lsrs	r2, r1, #31
 800230e:	00c5      	lsls	r5, r0, #3
 8002310:	4226      	tst	r6, r4
 8002312:	d00b      	beq.n	800232c <__aeabi_d2f+0x38>
 8002314:	4936      	ldr	r1, [pc, #216]	@ (80023f0 <__aeabi_d2f+0xfc>)
 8002316:	185c      	adds	r4, r3, r1
 8002318:	2cfe      	cmp	r4, #254	@ 0xfe
 800231a:	dd13      	ble.n	8002344 <__aeabi_d2f+0x50>
 800231c:	20ff      	movs	r0, #255	@ 0xff
 800231e:	2300      	movs	r3, #0
 8002320:	05c0      	lsls	r0, r0, #23
 8002322:	4318      	orrs	r0, r3
 8002324:	07d2      	lsls	r2, r2, #31
 8002326:	4310      	orrs	r0, r2
 8002328:	b003      	add	sp, #12
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <__aeabi_d2f+0x42>
 8002330:	2000      	movs	r0, #0
 8002332:	2300      	movs	r3, #0
 8002334:	e7f4      	b.n	8002320 <__aeabi_d2f+0x2c>
 8002336:	433d      	orrs	r5, r7
 8002338:	d0f0      	beq.n	800231c <__aeabi_d2f+0x28>
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	03db      	lsls	r3, r3, #15
 800233e:	20ff      	movs	r0, #255	@ 0xff
 8002340:	433b      	orrs	r3, r7
 8002342:	e7ed      	b.n	8002320 <__aeabi_d2f+0x2c>
 8002344:	2c00      	cmp	r4, #0
 8002346:	dd14      	ble.n	8002372 <__aeabi_d2f+0x7e>
 8002348:	9b00      	ldr	r3, [sp, #0]
 800234a:	00ff      	lsls	r7, r7, #3
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	4183      	sbcs	r3, r0
 8002352:	0f69      	lsrs	r1, r5, #29
 8002354:	433b      	orrs	r3, r7
 8002356:	430b      	orrs	r3, r1
 8002358:	0759      	lsls	r1, r3, #29
 800235a:	d041      	beq.n	80023e0 <__aeabi_d2f+0xec>
 800235c:	210f      	movs	r1, #15
 800235e:	4019      	ands	r1, r3
 8002360:	2904      	cmp	r1, #4
 8002362:	d028      	beq.n	80023b6 <__aeabi_d2f+0xc2>
 8002364:	3304      	adds	r3, #4
 8002366:	0159      	lsls	r1, r3, #5
 8002368:	d525      	bpl.n	80023b6 <__aeabi_d2f+0xc2>
 800236a:	3401      	adds	r4, #1
 800236c:	2300      	movs	r3, #0
 800236e:	b2e0      	uxtb	r0, r4
 8002370:	e7d6      	b.n	8002320 <__aeabi_d2f+0x2c>
 8002372:	0021      	movs	r1, r4
 8002374:	3117      	adds	r1, #23
 8002376:	dbdb      	blt.n	8002330 <__aeabi_d2f+0x3c>
 8002378:	2180      	movs	r1, #128	@ 0x80
 800237a:	201e      	movs	r0, #30
 800237c:	0409      	lsls	r1, r1, #16
 800237e:	4339      	orrs	r1, r7
 8002380:	1b00      	subs	r0, r0, r4
 8002382:	281f      	cmp	r0, #31
 8002384:	dd1b      	ble.n	80023be <__aeabi_d2f+0xca>
 8002386:	2602      	movs	r6, #2
 8002388:	4276      	negs	r6, r6
 800238a:	1b34      	subs	r4, r6, r4
 800238c:	000e      	movs	r6, r1
 800238e:	40e6      	lsrs	r6, r4
 8002390:	0034      	movs	r4, r6
 8002392:	2820      	cmp	r0, #32
 8002394:	d004      	beq.n	80023a0 <__aeabi_d2f+0xac>
 8002396:	4817      	ldr	r0, [pc, #92]	@ (80023f4 <__aeabi_d2f+0x100>)
 8002398:	4684      	mov	ip, r0
 800239a:	4463      	add	r3, ip
 800239c:	4099      	lsls	r1, r3
 800239e:	430d      	orrs	r5, r1
 80023a0:	002b      	movs	r3, r5
 80023a2:	1e59      	subs	r1, r3, #1
 80023a4:	418b      	sbcs	r3, r1
 80023a6:	4323      	orrs	r3, r4
 80023a8:	0759      	lsls	r1, r3, #29
 80023aa:	d015      	beq.n	80023d8 <__aeabi_d2f+0xe4>
 80023ac:	210f      	movs	r1, #15
 80023ae:	2400      	movs	r4, #0
 80023b0:	4019      	ands	r1, r3
 80023b2:	2904      	cmp	r1, #4
 80023b4:	d117      	bne.n	80023e6 <__aeabi_d2f+0xf2>
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	0a5b      	lsrs	r3, r3, #9
 80023ba:	b2e0      	uxtb	r0, r4
 80023bc:	e7b0      	b.n	8002320 <__aeabi_d2f+0x2c>
 80023be:	4c0e      	ldr	r4, [pc, #56]	@ (80023f8 <__aeabi_d2f+0x104>)
 80023c0:	191c      	adds	r4, r3, r4
 80023c2:	002b      	movs	r3, r5
 80023c4:	40a5      	lsls	r5, r4
 80023c6:	40c3      	lsrs	r3, r0
 80023c8:	40a1      	lsls	r1, r4
 80023ca:	1e68      	subs	r0, r5, #1
 80023cc:	4185      	sbcs	r5, r0
 80023ce:	4329      	orrs	r1, r5
 80023d0:	430b      	orrs	r3, r1
 80023d2:	2400      	movs	r4, #0
 80023d4:	0759      	lsls	r1, r3, #29
 80023d6:	d1c1      	bne.n	800235c <__aeabi_d2f+0x68>
 80023d8:	019b      	lsls	r3, r3, #6
 80023da:	2000      	movs	r0, #0
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	e79f      	b.n	8002320 <__aeabi_d2f+0x2c>
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	b2e0      	uxtb	r0, r4
 80023e4:	e79c      	b.n	8002320 <__aeabi_d2f+0x2c>
 80023e6:	3304      	adds	r3, #4
 80023e8:	e7e5      	b.n	80023b6 <__aeabi_d2f+0xc2>
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	000007fe 	.word	0x000007fe
 80023f0:	fffffc80 	.word	0xfffffc80
 80023f4:	fffffca2 	.word	0xfffffca2
 80023f8:	fffffc82 	.word	0xfffffc82

080023fc <__clzsi2>:
 80023fc:	211c      	movs	r1, #28
 80023fe:	2301      	movs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	4298      	cmp	r0, r3
 8002404:	d301      	bcc.n	800240a <__clzsi2+0xe>
 8002406:	0c00      	lsrs	r0, r0, #16
 8002408:	3910      	subs	r1, #16
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	4298      	cmp	r0, r3
 800240e:	d301      	bcc.n	8002414 <__clzsi2+0x18>
 8002410:	0a00      	lsrs	r0, r0, #8
 8002412:	3908      	subs	r1, #8
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	4298      	cmp	r0, r3
 8002418:	d301      	bcc.n	800241e <__clzsi2+0x22>
 800241a:	0900      	lsrs	r0, r0, #4
 800241c:	3904      	subs	r1, #4
 800241e:	a202      	add	r2, pc, #8	@ (adr r2, 8002428 <__clzsi2+0x2c>)
 8002420:	5c10      	ldrb	r0, [r2, r0]
 8002422:	1840      	adds	r0, r0, r1
 8002424:	4770      	bx	lr
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	02020304 	.word	0x02020304
 800242c:	01010101 	.word	0x01010101
	...

08002438 <termistor>:
#include "string.h"
#include "math.h"
#include "ssd1306_tests.h"

double termistor(uint32_t analogValue)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	double temperature;
	uint32_t adcval = 4096-analogValue;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2280      	movs	r2, #128	@ 0x80
 8002444:	0152      	lsls	r2, r2, #5
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
	temperature = log((adcval*10000)/(4095-adcval));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	4a2b      	ldr	r2, [pc, #172]	@ (80024fc <termistor+0xc4>)
 800244e:	435a      	muls	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	492b      	ldr	r1, [pc, #172]	@ (8002500 <termistor+0xc8>)
 8002454:	1acb      	subs	r3, r1, r3
 8002456:	0019      	movs	r1, r3
 8002458:	0010      	movs	r0, r2
 800245a:	f7fd fe6d 	bl	8000138 <__udivsi3>
 800245e:	0003      	movs	r3, r0
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff ff23 	bl	80022ac <__aeabi_ui2d>
 8002466:	0002      	movs	r2, r0
 8002468:	000b      	movs	r3, r1
 800246a:	0010      	movs	r0, r2
 800246c:	0019      	movs	r1, r3
 800246e:	f008 ff8d 	bl	800b38c <log>
 8002472:	0002      	movs	r2, r0
 8002474:	000b      	movs	r3, r1
 8002476:	60ba      	str	r2, [r7, #8]
 8002478:	60fb      	str	r3, [r7, #12]
	temperature = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temperature * temperature)) * temperature);
 800247a:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <termistor+0xcc>)
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <termistor+0xd0>)
 800247e:	68b8      	ldr	r0, [r7, #8]
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	f7ff f823 	bl	80014cc <__aeabi_dmul>
 8002486:	0002      	movs	r2, r0
 8002488:	000b      	movs	r3, r1
 800248a:	0010      	movs	r0, r2
 800248c:	0019      	movs	r1, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f7ff f81b 	bl	80014cc <__aeabi_dmul>
 8002496:	0002      	movs	r2, r0
 8002498:	000b      	movs	r3, r1
 800249a:	0010      	movs	r0, r2
 800249c:	0019      	movs	r1, r3
 800249e:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <termistor+0xd4>)
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <termistor+0xd8>)
 80024a2:	f7fe f86b 	bl	800057c <__aeabi_dadd>
 80024a6:	0002      	movs	r2, r0
 80024a8:	000b      	movs	r3, r1
 80024aa:	0010      	movs	r0, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f7ff f80b 	bl	80014cc <__aeabi_dmul>
 80024b6:	0002      	movs	r2, r0
 80024b8:	000b      	movs	r3, r1
 80024ba:	0010      	movs	r0, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <termistor+0xdc>)
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <termistor+0xe0>)
 80024c2:	f7fe f85b 	bl	800057c <__aeabi_dadd>
 80024c6:	0002      	movs	r2, r0
 80024c8:	000b      	movs	r3, r1
 80024ca:	2000      	movs	r0, #0
 80024cc:	4913      	ldr	r1, [pc, #76]	@ (800251c <termistor+0xe4>)
 80024ce:	f7fe fbb9 	bl	8000c44 <__aeabi_ddiv>
 80024d2:	0002      	movs	r2, r0
 80024d4:	000b      	movs	r3, r1
 80024d6:	60ba      	str	r2, [r7, #8]
 80024d8:	60fb      	str	r3, [r7, #12]
	temperature = temperature - 273.15;
 80024da:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <termistor+0xe8>)
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <termistor+0xec>)
 80024de:	68b8      	ldr	r0, [r7, #8]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	f7ff fabb 	bl	8001a5c <__aeabi_dsub>
 80024e6:	0002      	movs	r2, r0
 80024e8:	000b      	movs	r3, r1
 80024ea:	60ba      	str	r2, [r7, #8]
 80024ec:	60fb      	str	r3, [r7, #12]
	return temperature;
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]

}
 80024f2:	0010      	movs	r0, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b006      	add	sp, #24
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	00002710 	.word	0x00002710
 8002500:	00000fff 	.word	0x00000fff
 8002504:	14170d19 	.word	0x14170d19
 8002508:	3e7788eb 	.word	0x3e7788eb
 800250c:	6fb4c3c2 	.word	0x6fb4c3c2
 8002510:	3f2eafee 	.word	0x3f2eafee
 8002514:	6edeb890 	.word	0x6edeb890
 8002518:	3f527ffd 	.word	0x3f527ffd
 800251c:	3ff00000 	.word	0x3ff00000
 8002520:	66666666 	.word	0x66666666
 8002524:	40711266 	.word	0x40711266

08002528 <port_atama>:
uint8_t ikilivalu[3];
char ale = 1;
uint8_t school_data[10] ="123456789";
uint8_t Rx_data[4];

void port_atama(uint8_t number) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	0002      	movs	r2, r0
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, ((number >> 0) & 0x01));
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4816      	ldr	r0, [pc, #88]	@ (8002598 <port_atama+0x70>)
 8002540:	001a      	movs	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	f002 f96a 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, ((number >> 1) & 0x01));
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4810      	ldr	r0, [pc, #64]	@ (8002598 <port_atama+0x70>)
 8002558:	001a      	movs	r2, r3
 800255a:	2102      	movs	r1, #2
 800255c:	f002 f95e 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, ((number >> 2) & 0x01));
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	480a      	ldr	r0, [pc, #40]	@ (8002598 <port_atama+0x70>)
 8002570:	001a      	movs	r2, r3
 8002572:	2104      	movs	r1, #4
 8002574:	f002 f952 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, ((number >> 3) & 0x01));
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4804      	ldr	r0, [pc, #16]	@ (8002598 <port_atama+0x70>)
 8002588:	001a      	movs	r2, r3
 800258a:	2108      	movs	r1, #8
 800258c:	f002 f946 	bl	800481c <HAL_GPIO_WritePin>
}
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}
 8002598:	50000c00 	.word	0x50000c00

0800259c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	0002      	movs	r2, r0
 80025a4:	1dbb      	adds	r3, r7, #6
 80025a6:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_7) {
 80025a8:	1dbb      	adds	r3, r7, #6
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	2b80      	cmp	r3, #128	@ 0x80
 80025ae:	d105      	bne.n	80025bc <HAL_GPIO_EXTI_Rising_Callback+0x20>
		sayi2++;
 80025b0:	4b30      	ldr	r3, [pc, #192]	@ (8002674 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 80025ba:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2) {
 80025bc:	1dbb      	adds	r3, r7, #6
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d10b      	bne.n	80025dc <HAL_GPIO_EXTI_Rising_Callback+0x40>
		sayi++;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 80025ce:	801a      	strh	r2, [r3, #0]
		port_atama(sayi);
 80025d0:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7ff ffa6 	bl	8002528 <port_atama>
	}

	if (GPIO_Pin == GPIO_PIN_10)
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d141      	bne.n	800266c <HAL_GPIO_EXTI_Rising_Callback+0xd0>
	{
		if (ale == 0) {
 80025e8:	4b24      	ldr	r3, [pc, #144]	@ (800267c <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11c      	bne.n	800262a <HAL_GPIO_EXTI_Rising_Callback+0x8e>

			ale = 1;
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
			for (uint8_t valuu = 49; valuu < 58; valuu++)
 80025f6:	230f      	movs	r3, #15
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2231      	movs	r2, #49	@ 0x31
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e00e      	b.n	800261e <HAL_GPIO_EXTI_Rising_Callback+0x82>
			{
				school_data[valuu-49] = (char)valuu;
 8002600:	210f      	movs	r1, #15
 8002602:	187b      	adds	r3, r7, r1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	3b31      	subs	r3, #49	@ 0x31
 8002608:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <HAL_GPIO_EXTI_Rising_Callback+0xe4>)
 800260a:	0008      	movs	r0, r1
 800260c:	1879      	adds	r1, r7, r1
 800260e:	7809      	ldrb	r1, [r1, #0]
 8002610:	54d1      	strb	r1, [r2, r3]
			for (uint8_t valuu = 49; valuu < 58; valuu++)
 8002612:	0001      	movs	r1, r0
 8002614:	187b      	adds	r3, r7, r1
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	187b      	adds	r3, r7, r1
 800261a:	3201      	adds	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	230f      	movs	r3, #15
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b39      	cmp	r3, #57	@ 0x39
 8002626:	d9eb      	bls.n	8002600 <HAL_GPIO_EXTI_Rising_Callback+0x64>
				school_data[57-valuu] = (char)valuu;
			}
			ale = 0;
		}
	}
}
 8002628:	e020      	b.n	800266c <HAL_GPIO_EXTI_Rising_Callback+0xd0>
		else if (ale == 1)
 800262a:	4b14      	ldr	r3, [pc, #80]	@ (800267c <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d11c      	bne.n	800266c <HAL_GPIO_EXTI_Rising_Callback+0xd0>
			for (uint8_t valuu = 57; valuu > 48; valuu--)
 8002632:	230e      	movs	r3, #14
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2239      	movs	r2, #57	@ 0x39
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e00f      	b.n	800265c <HAL_GPIO_EXTI_Rising_Callback+0xc0>
				school_data[57-valuu] = (char)valuu;
 800263c:	210e      	movs	r1, #14
 800263e:	187b      	adds	r3, r7, r1
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2239      	movs	r2, #57	@ 0x39
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	4a0e      	ldr	r2, [pc, #56]	@ (8002680 <HAL_GPIO_EXTI_Rising_Callback+0xe4>)
 8002648:	0008      	movs	r0, r1
 800264a:	1879      	adds	r1, r7, r1
 800264c:	7809      	ldrb	r1, [r1, #0]
 800264e:	54d1      	strb	r1, [r2, r3]
			for (uint8_t valuu = 57; valuu > 48; valuu--)
 8002650:	0001      	movs	r1, r0
 8002652:	187b      	adds	r3, r7, r1
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	187b      	adds	r3, r7, r1
 8002658:	3a01      	subs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	230e      	movs	r3, #14
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b30      	cmp	r3, #48	@ 0x30
 8002664:	d8ea      	bhi.n	800263c <HAL_GPIO_EXTI_Rising_Callback+0xa0>
			ale = 0;
 8002666:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_GPIO_EXTI_Rising_Callback+0xe0>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
}
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b004      	add	sp, #16
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000378 	.word	0x20000378
 8002678:	20000376 	.word	0x20000376
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	@ 0x30
 8002688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268a:	f000 ffb1 	bl	80035f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268e:	f000 f8d7 	bl	8002840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002692:	f000 fa25 	bl	8002ae0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002696:	f000 f995 	bl	80029c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800269a:	f000 f9d3 	bl	8002a44 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800269e:	f000 f929 	bl	80028f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 80026a2:	f000 fb23 	bl	8002cec <ssd1306_Init>
	ssd1306_Fill(Black);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 fb8c 	bl	8002dc4 <ssd1306_Fill>
	HAL_Delay(200);
 80026ac:	20c8      	movs	r0, #200	@ 0xc8
 80026ae:	f001 f825 	bl	80036fc <HAL_Delay>
	ssd1306_SetCursor(5, 2);
 80026b2:	2102      	movs	r1, #2
 80026b4:	2005      	movs	r0, #5
 80026b6:	f000 fcfb 	bl	80030b0 <ssd1306_SetCursor>
	ssd1306_WriteString("Wi-Fi", Font_7x10, White);
 80026ba:	4a50      	ldr	r2, [pc, #320]	@ (80027fc <main+0x178>)
 80026bc:	4850      	ldr	r0, [pc, #320]	@ (8002800 <main+0x17c>)
 80026be:	2301      	movs	r3, #1
 80026c0:	6811      	ldr	r1, [r2, #0]
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	f000 fcca 	bl	800305c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80026c8:	f000 fba0 	bl	8002e0c <ssd1306_UpdateScreen>
	  volatile uint32_t adcValues[10];
	  HAL_ADC_Start(&hadc1);
 80026cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002804 <main+0x180>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 fb16 	bl	8003d00 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		school_data[9]=0x0a;
 80026d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <main+0x184>)
 80026d6:	220a      	movs	r2, #10
 80026d8:	725a      	strb	r2, [r3, #9]

		if(Rx_data[0]=='A'&&Rx_data[1]=='1')
 80026da:	4b4c      	ldr	r3, [pc, #304]	@ (800280c <main+0x188>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b41      	cmp	r3, #65	@ 0x41
 80026e0:	d109      	bne.n	80026f6 <main+0x72>
 80026e2:	4b4a      	ldr	r3, [pc, #296]	@ (800280c <main+0x188>)
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	2b31      	cmp	r3, #49	@ 0x31
 80026e8:	d105      	bne.n	80026f6 <main+0x72>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, SET);
 80026ea:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <main+0x18c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	2101      	movs	r1, #1
 80026f0:	0018      	movs	r0, r3
 80026f2:	f002 f893 	bl	800481c <HAL_GPIO_WritePin>

		}
		if(Rx_data[0]=='A'&&Rx_data[1]=='2')
 80026f6:	4b45      	ldr	r3, [pc, #276]	@ (800280c <main+0x188>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b41      	cmp	r3, #65	@ 0x41
 80026fc:	d109      	bne.n	8002712 <main+0x8e>
 80026fe:	4b43      	ldr	r3, [pc, #268]	@ (800280c <main+0x188>)
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	2b32      	cmp	r3, #50	@ 0x32
 8002704:	d105      	bne.n	8002712 <main+0x8e>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, RESET);
 8002706:	4b42      	ldr	r3, [pc, #264]	@ (8002810 <main+0x18c>)
 8002708:	2200      	movs	r2, #0
 800270a:	2101      	movs	r1, #1
 800270c:	0018      	movs	r0, r3
 800270e:	f002 f885 	bl	800481c <HAL_GPIO_WritePin>

		}

		  HAL_ADC_PollForConversion(&hadc1, 50);
 8002712:	4b3c      	ldr	r3, [pc, #240]	@ (8002804 <main+0x180>)
 8002714:	2132      	movs	r1, #50	@ 0x32
 8002716:	0018      	movs	r0, r3
 8002718:	f001 fb40 	bl	8003d9c <HAL_ADC_PollForConversion>
		  adcValues[2] = HAL_ADC_GetValue(&hadc1);
 800271c:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <main+0x180>)
 800271e:	0018      	movs	r0, r3
 8002720:	f001 fbd0 	bl	8003ec4 <HAL_ADC_GetValue>
 8002724:	0002      	movs	r2, r0
 8002726:	003b      	movs	r3, r7
 8002728:	609a      	str	r2, [r3, #8]
		  temp1 = (termistor(adcValues[2]) - 10);
 800272a:	003b      	movs	r3, r7
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff fe82 	bl	8002438 <termistor>
 8002734:	2200      	movs	r2, #0
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <main+0x190>)
 8002738:	f7ff f990 	bl	8001a5c <__aeabi_dsub>
 800273c:	0002      	movs	r2, r0
 800273e:	000b      	movs	r3, r1
 8002740:	4935      	ldr	r1, [pc, #212]	@ (8002818 <main+0x194>)
 8002742:	600a      	str	r2, [r1, #0]
 8002744:	604b      	str	r3, [r1, #4]
		  snprintf(buffer, 10, "%f", temp1);
 8002746:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <main+0x194>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4933      	ldr	r1, [pc, #204]	@ (800281c <main+0x198>)
 800274e:	4834      	ldr	r0, [pc, #208]	@ (8002820 <main+0x19c>)
 8002750:	9200      	str	r2, [sp, #0]
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	000a      	movs	r2, r1
 8002756:	210a      	movs	r1, #10
 8002758:	f005 f8ca 	bl	80078f0 <sniprintf>
			ssd1306_SetCursor(5, 2);
 800275c:	2102      	movs	r1, #2
 800275e:	2005      	movs	r0, #5
 8002760:	f000 fca6 	bl	80030b0 <ssd1306_SetCursor>
			ssd1306_WriteString("SICAKLIK", Font_11x18, White);
 8002764:	4a2f      	ldr	r2, [pc, #188]	@ (8002824 <main+0x1a0>)
 8002766:	4830      	ldr	r0, [pc, #192]	@ (8002828 <main+0x1a4>)
 8002768:	2301      	movs	r3, #1
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	6852      	ldr	r2, [r2, #4]
 800276e:	f000 fc75 	bl	800305c <ssd1306_WriteString>
			ssd1306_SetCursor(14, 27);
 8002772:	211b      	movs	r1, #27
 8002774:	200e      	movs	r0, #14
 8002776:	f000 fc9b 	bl	80030b0 <ssd1306_SetCursor>
			ssd1306_WriteString(data, Font_11x18, White);
 800277a:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <main+0x1a0>)
 800277c:	482b      	ldr	r0, [pc, #172]	@ (800282c <main+0x1a8>)
 800277e:	2301      	movs	r3, #1
 8002780:	6811      	ldr	r1, [r2, #0]
 8002782:	6852      	ldr	r2, [r2, #4]
 8002784:	f000 fc6a 	bl	800305c <ssd1306_WriteString>
			ssd1306_SetCursor(45, 46);
 8002788:	212e      	movs	r1, #46	@ 0x2e
 800278a:	202d      	movs	r0, #45	@ 0x2d
 800278c:	f000 fc90 	bl	80030b0 <ssd1306_SetCursor>
			ssd1306_UpdateScreen();
 8002790:	f000 fb3c 	bl	8002e0c <ssd1306_UpdateScreen>

			ikilivalu[0]=buffer[0];ikilivalu[1]=buffer[1];ikilivalu[2]=0x0A;
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <main+0x19c>)
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <main+0x1ac>)
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <main+0x19c>)
 800279e:	785a      	ldrb	r2, [r3, #1]
 80027a0:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <main+0x1ac>)
 80027a2:	705a      	strb	r2, [r3, #1]
 80027a4:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <main+0x1ac>)
 80027a6:	220a      	movs	r2, #10
 80027a8:	709a      	strb	r2, [r3, #2]
			sprintf(data, "Giden %c%c", buffer[0],buffer[1]);
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <main+0x19c>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	001a      	movs	r2, r3
 80027b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <main+0x19c>)
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	491f      	ldr	r1, [pc, #124]	@ (8002834 <main+0x1b0>)
 80027b6:	481d      	ldr	r0, [pc, #116]	@ (800282c <main+0x1a8>)
 80027b8:	f005 f8ce 	bl	8007958 <siprintf>
			HAL_UART_Transmit(&huart1, ikilivalu, 10, 200);
 80027bc:	491c      	ldr	r1, [pc, #112]	@ (8002830 <main+0x1ac>)
 80027be:	481e      	ldr	r0, [pc, #120]	@ (8002838 <main+0x1b4>)
 80027c0:	23c8      	movs	r3, #200	@ 0xc8
 80027c2:	220a      	movs	r2, #10
 80027c4:	f003 fc04 	bl	8005fd0 <HAL_UART_Transmit>
			HAL_Delay(200);
 80027c8:	20c8      	movs	r0, #200	@ 0xc8
 80027ca:	f000 ff97 	bl	80036fc <HAL_Delay>


	if(temp1 > 23)
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <main+0x194>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <main+0x1b8>)
 80027d8:	f7fd fe4e 	bl	8000478 <__aeabi_dcmpgt>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d006      	beq.n	80027ee <main+0x16a>
	{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <main+0x18c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	2102      	movs	r1, #2
 80027e6:	0018      	movs	r0, r3
 80027e8:	f002 f818 	bl	800481c <HAL_GPIO_WritePin>
 80027ec:	e772      	b.n	80026d4 <main+0x50>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <main+0x18c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	2102      	movs	r1, #2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f002 f811 	bl	800481c <HAL_GPIO_WritePin>
		school_data[9]=0x0a;
 80027fa:	e76b      	b.n	80026d4 <main+0x50>
 80027fc:	20000010 	.word	0x20000010
 8002800:	0800b778 	.word	0x0800b778
 8002804:	20000220 	.word	0x20000220
 8002808:	20000004 	.word	0x20000004
 800280c:	200003d0 	.word	0x200003d0
 8002810:	50000c00 	.word	0x50000c00
 8002814:	40240000 	.word	0x40240000
 8002818:	20000218 	.word	0x20000218
 800281c:	0800b780 	.word	0x0800b780
 8002820:	2000036c 	.word	0x2000036c
 8002824:	20000018 	.word	0x20000018
 8002828:	0800b784 	.word	0x0800b784
 800282c:	2000037c 	.word	0x2000037c
 8002830:	200003cc 	.word	0x200003cc
 8002834:	0800b790 	.word	0x0800b790
 8002838:	200002d8 	.word	0x200002d8
 800283c:	40370000 	.word	0x40370000

08002840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b093      	sub	sp, #76	@ 0x4c
 8002844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002846:	2414      	movs	r4, #20
 8002848:	193b      	adds	r3, r7, r4
 800284a:	0018      	movs	r0, r3
 800284c:	2334      	movs	r3, #52	@ 0x34
 800284e:	001a      	movs	r2, r3
 8002850:	2100      	movs	r1, #0
 8002852:	f005 f900 	bl	8007a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	0018      	movs	r0, r3
 800285a:	2310      	movs	r3, #16
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f005 f8f9 	bl	8007a56 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002864:	2380      	movs	r3, #128	@ 0x80
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	0018      	movs	r0, r3
 800286a:	f002 fd2f 	bl	80052cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800286e:	193b      	adds	r3, r7, r4
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002874:	193b      	adds	r3, r7, r4
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	0052      	lsls	r2, r2, #1
 800287a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800287c:	0021      	movs	r1, r4
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2240      	movs	r2, #64	@ 0x40
 8002888:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2202      	movs	r2, #2
 800288e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2202      	movs	r2, #2
 8002894:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2200      	movs	r2, #0
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2208      	movs	r2, #8
 80028a0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0292      	lsls	r2, r2, #10
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	0592      	lsls	r2, r2, #22
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 fd55 	bl	8005364 <HAL_RCC_OscConfig>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80028be:	f000 f9d5 	bl	8002c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	2202      	movs	r2, #2
 80028cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2102      	movs	r1, #2
 80028de:	0018      	movs	r0, r3
 80028e0:	f003 f850 	bl	8005984 <HAL_RCC_ClockConfig>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80028e8:	f000 f9c0 	bl	8002c6c <Error_Handler>
  }
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b013      	add	sp, #76	@ 0x4c
 80028f2:	bd90      	pop	{r4, r7, pc}

080028f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	0018      	movs	r0, r3
 80028fe:	230c      	movs	r3, #12
 8002900:	001a      	movs	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f005 f8a7 	bl	8007a56 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002908:	4b2b      	ldr	r3, [pc, #172]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800290a:	4a2c      	ldr	r2, [pc, #176]	@ (80029bc <MX_ADC1_Init+0xc8>)
 800290c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800290e:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	05d2      	lsls	r2, r2, #23
 8002914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002916:	4b28      	ldr	r3, [pc, #160]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800291c:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002922:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002928:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800292a:	2204      	movs	r2, #4
 800292c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800292e:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002930:	2200      	movs	r2, #0
 8002932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002934:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002936:	2200      	movs	r2, #0
 8002938:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800293a:	4b1f      	ldr	r3, [pc, #124]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800293c:	2201      	movs	r2, #1
 800293e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002940:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002942:	2201      	movs	r2, #1
 8002944:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800294c:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002952:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002954:	222c      	movs	r2, #44	@ 0x2c
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800295a:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002966:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002968:	2200      	movs	r2, #0
 800296a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800296e:	223c      	movs	r2, #60	@ 0x3c
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002974:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002976:	2200      	movs	r2, #0
 8002978:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800297a:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800297c:	0018      	movs	r0, r3
 800297e:	f001 f817 	bl	80039b0 <HAL_ADC_Init>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002986:	f000 f971 	bl	8002c6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	4a0c      	ldr	r2, [pc, #48]	@ (80029c0 <MX_ADC1_Init+0xcc>)
 800298e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 80029a0:	0011      	movs	r1, r2
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 fa9a 	bl	8003edc <HAL_ADC_ConfigChannel>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d001      	beq.n	80029b0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80029ac:	f000 f95e 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000220 	.word	0x20000220
 80029bc:	40012400 	.word	0x40012400
 80029c0:	10000010 	.word	0x10000010

080029c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029ca:	4a1c      	ldr	r2, [pc, #112]	@ (8002a3c <MX_I2C1_Init+0x78>)
 80029cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <MX_I2C1_Init+0x7c>)
 80029d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029d4:	4b18      	ldr	r3, [pc, #96]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029da:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029dc:	2201      	movs	r2, #1
 80029de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e0:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <MX_I2C1_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <MX_I2C1_Init+0x74>)
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 ff5d 	bl	80048c0 <HAL_I2C_Init>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d001      	beq.n	8002a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a0a:	f000 f92f 	bl	8002c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <MX_I2C1_Init+0x74>)
 8002a10:	2100      	movs	r1, #0
 8002a12:	0018      	movs	r0, r3
 8002a14:	f002 fbc2 	bl	800519c <HAL_I2CEx_ConfigAnalogFilter>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a1c:	f000 f926 	bl	8002c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <MX_I2C1_Init+0x74>)
 8002a22:	2100      	movs	r1, #0
 8002a24:	0018      	movs	r0, r3
 8002a26:	f002 fc05 	bl	8005234 <HAL_I2CEx_ConfigDigitalFilter>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a2e:	f000 f91d 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000284 	.word	0x20000284
 8002a3c:	40005400 	.word	0x40005400
 8002a40:	00602173 	.word	0x00602173

08002a44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a48:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a4a:	4a24      	ldr	r2, [pc, #144]	@ (8002adc <MX_USART1_UART_Init+0x98>)
 8002a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a50:	22e1      	movs	r2, #225	@ 0xe1
 8002a52:	0252      	lsls	r2, r2, #9
 8002a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f003 fa48 	bl	8005f24 <HAL_UART_Init>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d001      	beq.n	8002a9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a98:	f000 f8e8 	bl	8002c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f003 ff11 	bl	80068c8 <HAL_UARTEx_SetTxFifoThreshold>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002aaa:	f000 f8df 	bl	8002c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f003 ff48 	bl	8006948 <HAL_UARTEx_SetRxFifoThreshold>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002abc:	f000 f8d6 	bl	8002c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <MX_USART1_UART_Init+0x94>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f003 fec6 	bl	8006854 <HAL_UARTEx_DisableFifoMode>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002acc:	f000 f8ce 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	200002d8 	.word	0x200002d8
 8002adc:	40013800 	.word	0x40013800

08002ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b08b      	sub	sp, #44	@ 0x2c
 8002ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae6:	2414      	movs	r4, #20
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	0018      	movs	r0, r3
 8002aec:	2314      	movs	r3, #20
 8002aee:	001a      	movs	r2, r3
 8002af0:	2100      	movs	r1, #0
 8002af2:	f004 ffb0 	bl	8007a56 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af6:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afa:	4b58      	ldr	r3, [pc, #352]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002afc:	2120      	movs	r1, #32
 8002afe:	430a      	orrs	r2, r1
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b02:	4b56      	ldr	r3, [pc, #344]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	2220      	movs	r2, #32
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	4b53      	ldr	r3, [pc, #332]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b12:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b1a:	4b50      	ldr	r3, [pc, #320]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	4b4d      	ldr	r3, [pc, #308]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b32:	4b4a      	ldr	r3, [pc, #296]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b42:	4b46      	ldr	r3, [pc, #280]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b44:	2108      	movs	r1, #8
 8002b46:	430a      	orrs	r2, r1
 8002b48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b4a:	4b44      	ldr	r3, [pc, #272]	@ (8002c5c <MX_GPIO_Init+0x17c>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	2208      	movs	r2, #8
 8002b50:	4013      	ands	r3, r2
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002b56:	23a0      	movs	r3, #160	@ 0xa0
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2140      	movs	r1, #64	@ 0x40
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f001 fe5c 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002b64:	4b3e      	ldr	r3, [pc, #248]	@ (8002c60 <MX_GPIO_Init+0x180>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	210f      	movs	r1, #15
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f001 fe56 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b70:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <MX_GPIO_Init+0x184>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	2108      	movs	r1, #8
 8002b76:	0018      	movs	r0, r3
 8002b78:	f001 fe50 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b7c:	193b      	adds	r3, r7, r4
 8002b7e:	2240      	movs	r2, #64	@ 0x40
 8002b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	2201      	movs	r2, #1
 8002b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	193b      	adds	r3, r7, r4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	193a      	adds	r2, r7, r4
 8002b96:	23a0      	movs	r3, #160	@ 0xa0
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f001 fcd9 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	2280      	movs	r2, #128	@ 0x80
 8002ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	22c4      	movs	r2, #196	@ 0xc4
 8002bac:	0392      	lsls	r2, r2, #14
 8002bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	193a      	adds	r2, r7, r4
 8002bb8:	23a0      	movs	r3, #160	@ 0xa0
 8002bba:	05db      	lsls	r3, r3, #23
 8002bbc:	0011      	movs	r1, r2
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f001 fcc8 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8002bc4:	0021      	movs	r1, r4
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <MX_GPIO_Init+0x188>)
 8002bca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	22c4      	movs	r2, #196	@ 0xc4
 8002bd0:	0392      	lsls	r2, r2, #14
 8002bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd4:	000c      	movs	r4, r1
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	2201      	movs	r2, #1
 8002bda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <MX_GPIO_Init+0x184>)
 8002be0:	0019      	movs	r1, r3
 8002be2:	0010      	movs	r0, r2
 8002be4:	f001 fcb6 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	220f      	movs	r2, #15
 8002bec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	193b      	adds	r3, r7, r4
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <MX_GPIO_Init+0x180>)
 8002c04:	0019      	movs	r1, r3
 8002c06:	0010      	movs	r0, r2
 8002c08:	f001 fca4 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c0c:	0021      	movs	r1, r4
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2208      	movs	r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2201      	movs	r2, #1
 8002c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	4a0e      	ldr	r2, [pc, #56]	@ (8002c64 <MX_GPIO_Init+0x184>)
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	0010      	movs	r0, r2
 8002c2e:	f001 fc91 	bl	8004554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2006      	movs	r0, #6
 8002c38:	f001 fc5a 	bl	80044f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002c3c:	2006      	movs	r0, #6
 8002c3e:	f001 fc6c 	bl	800451a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2007      	movs	r0, #7
 8002c48:	f001 fc52 	bl	80044f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002c4c:	2007      	movs	r0, #7
 8002c4e:	f001 fc64 	bl	800451a <HAL_NVIC_EnableIRQ>

}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b00b      	add	sp, #44	@ 0x2c
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	50000c00 	.word	0x50000c00
 8002c64:	50000400 	.word	0x50000400
 8002c68:	00000404 	.word	0x00000404

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
}
 8002c72:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	e7fd      	b.n	8002c74 <Error_Handler+0x8>

08002c78 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af04      	add	r7, sp, #16
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002c90:	4808      	ldr	r0, [pc, #32]	@ (8002cb4 <ssd1306_WriteCommand+0x30>)
 8002c92:	2301      	movs	r3, #1
 8002c94:	425b      	negs	r3, r3
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2178      	movs	r1, #120	@ 0x78
 8002ca6:	f001 feb1 	bl	8004a0c <HAL_I2C_Mem_Write>
}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	20000284 	.word	0x20000284

08002cb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4808      	ldr	r0, [pc, #32]	@ (8002ce8 <ssd1306_WriteData+0x30>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4252      	negs	r2, r2
 8002ccc:	9202      	str	r2, [sp, #8]
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	2240      	movs	r2, #64	@ 0x40
 8002cd8:	2178      	movs	r1, #120	@ 0x78
 8002cda:	f001 fe97 	bl	8004a0c <HAL_I2C_Mem_Write>
}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	20000284 	.word	0x20000284

08002cec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002cf0:	f7ff ffc2 	bl	8002c78 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002cf4:	2064      	movs	r0, #100	@ 0x64
 8002cf6:	f000 fd01 	bl	80036fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f000 fa0a 	bl	8003114 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002d00:	2020      	movs	r0, #32
 8002d02:	f7ff ffbf 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7ff ffbc 	bl	8002c84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d0c:	20b0      	movs	r0, #176	@ 0xb0
 8002d0e:	f7ff ffb9 	bl	8002c84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002d12:	20c8      	movs	r0, #200	@ 0xc8
 8002d14:	f7ff ffb6 	bl	8002c84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7ff ffb3 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002d1e:	2010      	movs	r0, #16
 8002d20:	f7ff ffb0 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002d24:	2040      	movs	r0, #64	@ 0x40
 8002d26:	f7ff ffad 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d2a:	20ff      	movs	r0, #255	@ 0xff
 8002d2c:	f000 f9da 	bl	80030e4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d30:	20a1      	movs	r0, #161	@ 0xa1
 8002d32:	f7ff ffa7 	bl	8002c84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d36:	20a6      	movs	r0, #166	@ 0xa6
 8002d38:	f7ff ffa4 	bl	8002c84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002d3c:	20a8      	movs	r0, #168	@ 0xa8
 8002d3e:	f7ff ffa1 	bl	8002c84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002d42:	203f      	movs	r0, #63	@ 0x3f
 8002d44:	f7ff ff9e 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d48:	20a4      	movs	r0, #164	@ 0xa4
 8002d4a:	f7ff ff9b 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002d4e:	20d3      	movs	r0, #211	@ 0xd3
 8002d50:	f7ff ff98 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff ff95 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d5a:	20d5      	movs	r0, #213	@ 0xd5
 8002d5c:	f7ff ff92 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d60:	20f0      	movs	r0, #240	@ 0xf0
 8002d62:	f7ff ff8f 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002d66:	20d9      	movs	r0, #217	@ 0xd9
 8002d68:	f7ff ff8c 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002d6c:	2022      	movs	r0, #34	@ 0x22
 8002d6e:	f7ff ff89 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002d72:	20da      	movs	r0, #218	@ 0xda
 8002d74:	f7ff ff86 	bl	8002c84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002d78:	2012      	movs	r0, #18
 8002d7a:	f7ff ff83 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002d7e:	20db      	movs	r0, #219	@ 0xdb
 8002d80:	f7ff ff80 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002d84:	2020      	movs	r0, #32
 8002d86:	f7ff ff7d 	bl	8002c84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002d8a:	208d      	movs	r0, #141	@ 0x8d
 8002d8c:	f7ff ff7a 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002d90:	2014      	movs	r0, #20
 8002d92:	f7ff ff77 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 f9bc 	bl	8003114 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f000 f811 	bl	8002dc4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002da2:	f000 f833 	bl	8002e0c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <ssd1306_Init+0xd4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <ssd1306_Init+0xd4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002db2:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <ssd1306_Init+0xd4>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	711a      	strb	r2, [r3, #4]
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	200007d4 	.word	0x200007d4

08002dc4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	0002      	movs	r2, r0
 8002dcc:	1dfb      	adds	r3, r7, #7
 8002dce:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e00e      	b.n	8002df4 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <ssd1306_Fill+0x1e>
 8002dde:	2100      	movs	r1, #0
 8002de0:	e000      	b.n	8002de4 <ssd1306_Fill+0x20>
 8002de2:	21ff      	movs	r1, #255	@ 0xff
 8002de4:	4a08      	ldr	r2, [pc, #32]	@ (8002e08 <ssd1306_Fill+0x44>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	18d3      	adds	r3, r2, r3
 8002dea:	1c0a      	adds	r2, r1, #0
 8002dec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3301      	adds	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3eb      	bcc.n	8002dd6 <ssd1306_Fill+0x12>
    }
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b004      	add	sp, #16
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200003d4 	.word	0x200003d4

08002e0c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e01a      	b.n	8002e50 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	3b50      	subs	r3, #80	@ 0x50
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff ff2e 	bl	8002c84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff ff2b 	bl	8002c84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e2e:	2010      	movs	r0, #16
 8002e30:	f7ff ff28 	bl	8002c84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	01da      	lsls	r2, r3, #7
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <ssd1306_UpdateScreen+0x58>)
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	2180      	movs	r1, #128	@ 0x80
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7ff ff39 	bl	8002cb8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	3201      	adds	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b07      	cmp	r3, #7
 8002e56:	d9e0      	bls.n	8002e1a <ssd1306_UpdateScreen+0xe>
    }
}
 8002e58:	46c0      	nop			@ (mov r8, r8)
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	200003d4 	.word	0x200003d4

08002e68 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	0004      	movs	r4, r0
 8002e70:	0008      	movs	r0, r1
 8002e72:	0011      	movs	r1, r2
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	1c22      	adds	r2, r4, #0
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	1dbb      	adds	r3, r7, #6
 8002e7c:	1c02      	adds	r2, r0, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	1d7b      	adds	r3, r7, #5
 8002e82:	1c0a      	adds	r2, r1, #0
 8002e84:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db47      	blt.n	8002f20 <ssd1306_DrawPixel+0xb8>
 8002e90:	1dbb      	adds	r3, r7, #6
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e96:	d843      	bhi.n	8002f20 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002e98:	1d7b      	adds	r3, r7, #5
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d11e      	bne.n	8002ede <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	1dbb      	adds	r3, r7, #6
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	b2d8      	uxtb	r0, r3
 8002eac:	0003      	movs	r3, r0
 8002eae:	01db      	lsls	r3, r3, #7
 8002eb0:	18d3      	adds	r3, r2, r3
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <ssd1306_DrawPixel+0xc0>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	b25a      	sxtb	r2, r3
 8002eb8:	1dbb      	adds	r3, r7, #6
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2107      	movs	r1, #7
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4099      	lsls	r1, r3
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b259      	sxtb	r1, r3
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	01db      	lsls	r3, r3, #7
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	b2c9      	uxtb	r1, r1
 8002ed8:	4a13      	ldr	r2, [pc, #76]	@ (8002f28 <ssd1306_DrawPixel+0xc0>)
 8002eda:	54d1      	strb	r1, [r2, r3]
 8002edc:	e021      	b.n	8002f22 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	1dbb      	adds	r3, r7, #6
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	b2d8      	uxtb	r0, r3
 8002eea:	0003      	movs	r3, r0
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <ssd1306_DrawPixel+0xc0>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	1dba      	adds	r2, r7, #6
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	2107      	movs	r1, #7
 8002efc:	400a      	ands	r2, r1
 8002efe:	2101      	movs	r1, #1
 8002f00:	4091      	lsls	r1, r2
 8002f02:	000a      	movs	r2, r1
 8002f04:	b252      	sxtb	r2, r2
 8002f06:	43d2      	mvns	r2, r2
 8002f08:	b252      	sxtb	r2, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b259      	sxtb	r1, r3
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	0003      	movs	r3, r0
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	18d3      	adds	r3, r2, r3
 8002f18:	b2c9      	uxtb	r1, r1
 8002f1a:	4a03      	ldr	r2, [pc, #12]	@ (8002f28 <ssd1306_DrawPixel+0xc0>)
 8002f1c:	54d1      	strb	r1, [r2, r3]
 8002f1e:	e000      	b.n	8002f22 <ssd1306_DrawPixel+0xba>
        return;
 8002f20:	46c0      	nop			@ (mov r8, r8)
    }
}
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b003      	add	sp, #12
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	200003d4 	.word	0x200003d4

08002f2c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	0004      	movs	r4, r0
 8002f34:	1d38      	adds	r0, r7, #4
 8002f36:	6001      	str	r1, [r0, #0]
 8002f38:	6042      	str	r2, [r0, #4]
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	200f      	movs	r0, #15
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	1c22      	adds	r2, r4, #0
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	230e      	movs	r3, #14
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	1c0a      	adds	r2, r1, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002f4c:	183b      	adds	r3, r7, r0
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b1f      	cmp	r3, #31
 8002f52:	d903      	bls.n	8002f5c <ssd1306_WriteChar+0x30>
 8002f54:	183b      	adds	r3, r7, r0
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b7e      	cmp	r3, #126	@ 0x7e
 8002f5a:	d901      	bls.n	8002f60 <ssd1306_WriteChar+0x34>
        return 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e077      	b.n	8003050 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f60:	4b3d      	ldr	r3, [pc, #244]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	001a      	movs	r2, r3
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	18d3      	adds	r3, r2, r3
 8002f6c:	2b80      	cmp	r3, #128	@ 0x80
 8002f6e:	dc07      	bgt.n	8002f80 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f70:	4b39      	ldr	r3, [pc, #228]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8002f72:	885b      	ldrh	r3, [r3, #2]
 8002f74:	001a      	movs	r2, r3
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f7c:	2b40      	cmp	r3, #64	@ 0x40
 8002f7e:	dd01      	ble.n	8002f84 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e065      	b.n	8003050 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	e051      	b.n	800302e <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	230f      	movs	r3, #15
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3b20      	subs	r3, #32
 8002f96:	1d39      	adds	r1, r7, #4
 8002f98:	7849      	ldrb	r1, [r1, #1]
 8002f9a:	434b      	muls	r3, r1
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	18cb      	adds	r3, r1, r3
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e035      	b.n	800301c <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d014      	beq.n	8002fe8 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	b2d8      	uxtb	r0, r3
 8002fcc:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8002fce:	885b      	ldrh	r3, [r3, #2]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	18d3      	adds	r3, r2, r3
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	230e      	movs	r3, #14
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	f7ff ff41 	bl	8002e68 <ssd1306_DrawPixel>
 8002fe6:	e016      	b.n	8003016 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	b2d8      	uxtb	r0, r3
 8002ff6:	4b18      	ldr	r3, [pc, #96]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8002ff8:	885b      	ldrh	r3, [r3, #2]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	18d3      	adds	r3, r2, r3
 8003002:	b2d9      	uxtb	r1, r3
 8003004:	230e      	movs	r3, #14
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	425a      	negs	r2, r3
 800300c:	4153      	adcs	r3, r2
 800300e:	b2db      	uxtb	r3, r3
 8003010:	001a      	movs	r2, r3
 8003012:	f7ff ff29 	bl	8002e68 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3301      	adds	r3, #1
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	001a      	movs	r2, r3
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4293      	cmp	r3, r2
 8003026:	d3c3      	bcc.n	8002fb0 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	785b      	ldrb	r3, [r3, #1]
 8003032:	001a      	movs	r2, r3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4293      	cmp	r3, r2
 8003038:	d3a7      	bcc.n	8002f8a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	1d3a      	adds	r2, r7, #4
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	189b      	adds	r3, r3, r2
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <ssd1306_WriteChar+0x12c>)
 8003048:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b009      	add	sp, #36	@ 0x24
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	200007d4 	.word	0x200007d4

0800305c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	1d38      	adds	r0, r7, #4
 8003066:	6001      	str	r1, [r0, #0]
 8003068:	6042      	str	r2, [r0, #4]
 800306a:	001a      	movs	r2, r3
 800306c:	1cfb      	adds	r3, r7, #3
 800306e:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8003070:	e014      	b.n	800309c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	7818      	ldrb	r0, [r3, #0]
 8003076:	1cfb      	adds	r3, r7, #3
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	1d3a      	adds	r2, r7, #4
 800307c:	6811      	ldr	r1, [r2, #0]
 800307e:	6852      	ldr	r2, [r2, #4]
 8003080:	f7ff ff54 	bl	8002f2c <ssd1306_WriteChar>
 8003084:	0003      	movs	r3, r0
 8003086:	001a      	movs	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d002      	beq.n	8003096 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	e008      	b.n	80030a8 <ssd1306_WriteString+0x4c>
        }
        str++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e6      	bne.n	8003072 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	781b      	ldrb	r3, [r3, #0]
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0002      	movs	r2, r0
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	1c0a      	adds	r2, r1, #0
 80030c0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <ssd1306_SetCursor+0x30>)
 80030ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <ssd1306_SetCursor+0x30>)
 80030d4:	805a      	strh	r2, [r3, #2]
}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	200007d4 	.word	0x200007d4

080030e4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	0002      	movs	r2, r0
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80030f0:	210f      	movs	r1, #15
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2281      	movs	r2, #129	@ 0x81
 80030f6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff fdc1 	bl	8002c84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff fdbc 	bl	8002c84 <ssd1306_WriteCommand>
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}

08003114 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	0002      	movs	r2, r0
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	22af      	movs	r2, #175	@ 0xaf
 800312e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003130:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <ssd1306_SetDisplayOn+0x48>)
 8003132:	2201      	movs	r2, #1
 8003134:	715a      	strb	r2, [r3, #5]
 8003136:	e006      	b.n	8003146 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003138:	230f      	movs	r3, #15
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	22ae      	movs	r2, #174	@ 0xae
 800313e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <ssd1306_SetDisplayOn+0x48>)
 8003142:	2200      	movs	r2, #0
 8003144:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fd99 	bl	8002c84 <ssd1306_WriteCommand>
}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b004      	add	sp, #16
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	200007d4 	.word	0x200007d4

08003160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <HAL_MspInit+0x44>)
 8003168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <HAL_MspInit+0x44>)
 800316c:	2101      	movs	r1, #1
 800316e:	430a      	orrs	r2, r1
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
 8003172:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_MspInit+0x44>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2201      	movs	r2, #1
 8003178:	4013      	ands	r3, r2
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_MspInit+0x44>)
 8003180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <HAL_MspInit+0x44>)
 8003184:	2180      	movs	r1, #128	@ 0x80
 8003186:	0549      	lsls	r1, r1, #21
 8003188:	430a      	orrs	r2, r1
 800318a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_MspInit+0x44>)
 800318e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	055b      	lsls	r3, r3, #21
 8003194:	4013      	ands	r3, r2
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b002      	add	sp, #8
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b08b      	sub	sp, #44	@ 0x2c
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	2414      	movs	r4, #20
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	0018      	movs	r0, r3
 80031b6:	2314      	movs	r3, #20
 80031b8:	001a      	movs	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	f004 fc4b 	bl	8007a56 <memset>
  if(hadc->Instance==ADC1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <HAL_ADC_MspInit+0x80>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d129      	bne.n	800321e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031ca:	4b18      	ldr	r3, [pc, #96]	@ (800322c <HAL_ADC_MspInit+0x84>)
 80031cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ce:	4b17      	ldr	r3, [pc, #92]	@ (800322c <HAL_ADC_MspInit+0x84>)
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	0349      	lsls	r1, r1, #13
 80031d4:	430a      	orrs	r2, r1
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80031d8:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_ADC_MspInit+0x84>)
 80031da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	035b      	lsls	r3, r3, #13
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_ADC_MspInit+0x84>)
 80031e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_ADC_MspInit+0x84>)
 80031ec:	2101      	movs	r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_ADC_MspInit+0x84>)
 80031f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	2210      	movs	r2, #16
 8003202:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2203      	movs	r2, #3
 8003208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	193b      	adds	r3, r7, r4
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	193a      	adds	r2, r7, r4
 8003212:	23a0      	movs	r3, #160	@ 0xa0
 8003214:	05db      	lsls	r3, r3, #23
 8003216:	0011      	movs	r1, r2
 8003218:	0018      	movs	r0, r3
 800321a:	f001 f99b 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b00b      	add	sp, #44	@ 0x2c
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	40012400 	.word	0x40012400
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b091      	sub	sp, #68	@ 0x44
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	232c      	movs	r3, #44	@ 0x2c
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	0018      	movs	r0, r3
 800323e:	2314      	movs	r3, #20
 8003240:	001a      	movs	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f004 fc07 	bl	8007a56 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003248:	2414      	movs	r4, #20
 800324a:	193b      	adds	r3, r7, r4
 800324c:	0018      	movs	r0, r3
 800324e:	2318      	movs	r3, #24
 8003250:	001a      	movs	r2, r3
 8003252:	2100      	movs	r1, #0
 8003254:	f004 fbff 	bl	8007a56 <memset>
  if(hi2c->Instance==I2C1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a22      	ldr	r2, [pc, #136]	@ (80032e8 <HAL_I2C_MspInit+0xb8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d13d      	bne.n	80032de <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003262:	193b      	adds	r3, r7, r4
 8003264:	2220      	movs	r2, #32
 8003266:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003268:	193b      	adds	r3, r7, r4
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800326e:	193b      	adds	r3, r7, r4
 8003270:	0018      	movs	r0, r3
 8003272:	f002 fd31 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800327a:	f7ff fcf7 	bl	8002c6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <HAL_I2C_MspInit+0xbc>)
 8003280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003282:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <HAL_I2C_MspInit+0xbc>)
 8003284:	2102      	movs	r1, #2
 8003286:	430a      	orrs	r2, r1
 8003288:	635a      	str	r2, [r3, #52]	@ 0x34
 800328a:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <HAL_I2C_MspInit+0xbc>)
 800328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328e:	2202      	movs	r2, #2
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003296:	212c      	movs	r1, #44	@ 0x2c
 8003298:	187b      	adds	r3, r7, r1
 800329a:	22c0      	movs	r2, #192	@ 0xc0
 800329c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	2212      	movs	r2, #18
 80032a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	2206      	movs	r2, #6
 80032b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <HAL_I2C_MspInit+0xc0>)
 80032ba:	0019      	movs	r1, r3
 80032bc:	0010      	movs	r0, r2
 80032be:	f001 f949 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032c2:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_I2C_MspInit+0xbc>)
 80032c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_I2C_MspInit+0xbc>)
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	0389      	lsls	r1, r1, #14
 80032cc:	430a      	orrs	r2, r1
 80032ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_I2C_MspInit+0xbc>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	039b      	lsls	r3, r3, #14
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b011      	add	sp, #68	@ 0x44
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	40005400 	.word	0x40005400
 80032ec:	40021000 	.word	0x40021000
 80032f0:	50000400 	.word	0x50000400

080032f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b091      	sub	sp, #68	@ 0x44
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	232c      	movs	r3, #44	@ 0x2c
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	0018      	movs	r0, r3
 8003302:	2314      	movs	r3, #20
 8003304:	001a      	movs	r2, r3
 8003306:	2100      	movs	r1, #0
 8003308:	f004 fba5 	bl	8007a56 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800330c:	2414      	movs	r4, #20
 800330e:	193b      	adds	r3, r7, r4
 8003310:	0018      	movs	r0, r3
 8003312:	2318      	movs	r3, #24
 8003314:	001a      	movs	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f004 fb9d 	bl	8007a56 <memset>
  if(huart->Instance==USART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a23      	ldr	r2, [pc, #140]	@ (80033b0 <HAL_UART_MspInit+0xbc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d13f      	bne.n	80033a6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003326:	193b      	adds	r3, r7, r4
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800332c:	193b      	adds	r3, r7, r4
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003332:	193b      	adds	r3, r7, r4
 8003334:	0018      	movs	r0, r3
 8003336:	f002 fccf 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d001      	beq.n	8003342 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800333e:	f7ff fc95 	bl	8002c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003342:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <HAL_UART_MspInit+0xc0>)
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_UART_MspInit+0xc0>)
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	01c9      	lsls	r1, r1, #7
 800334c:	430a      	orrs	r2, r1
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003350:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <HAL_UART_MspInit+0xc0>)
 8003352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	01db      	lsls	r3, r3, #7
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_UART_MspInit+0xc0>)
 8003360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003362:	4b14      	ldr	r3, [pc, #80]	@ (80033b4 <HAL_UART_MspInit+0xc0>)
 8003364:	2101      	movs	r1, #1
 8003366:	430a      	orrs	r2, r1
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34
 800336a:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <HAL_UART_MspInit+0xc0>)
 800336c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336e:	2201      	movs	r2, #1
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003376:	212c      	movs	r1, #44	@ 0x2c
 8003378:	187b      	adds	r3, r7, r1
 800337a:	22c0      	movs	r2, #192	@ 0xc0
 800337c:	00d2      	lsls	r2, r2, #3
 800337e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	187b      	adds	r3, r7, r1
 8003382:	2202      	movs	r2, #2
 8003384:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	187b      	adds	r3, r7, r1
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2201      	movs	r2, #1
 8003396:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	187a      	adds	r2, r7, r1
 800339a:	23a0      	movs	r3, #160	@ 0xa0
 800339c:	05db      	lsls	r3, r3, #23
 800339e:	0011      	movs	r1, r2
 80033a0:	0018      	movs	r0, r3
 80033a2:	f001 f8d7 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b011      	add	sp, #68	@ 0x44
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40021000 	.word	0x40021000

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	e7fd      	b.n	80033bc <NMI_Handler+0x4>

080033c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	e7fd      	b.n	80033c4 <HardFault_Handler+0x4>

080033c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e0:	f000 f970 	bl	80036c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e4:	46c0      	nop			@ (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80033ee:	2004      	movs	r0, #4
 80033f0:	f001 fa32 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80033fe:	2080      	movs	r0, #128	@ 0x80
 8003400:	f001 fa2a 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	0018      	movs	r0, r3
 800340a:	f001 fa25 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_kill>:

int _kill(int pid, int sig)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800342a:	f004 fb6f 	bl	8007b0c <__errno>
 800342e:	0003      	movs	r3, r0
 8003430:	2216      	movs	r2, #22
 8003432:	601a      	str	r2, [r3, #0]
  return -1;
 8003434:	2301      	movs	r3, #1
 8003436:	425b      	negs	r3, r3
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <_exit>:

void _exit (int status)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003448:	2301      	movs	r3, #1
 800344a:	425a      	negs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff ffe5 	bl	8003420 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	e7fd      	b.n	8003456 <_exit+0x16>

0800345a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e00a      	b.n	8003482 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800346c:	e000      	b.n	8003470 <_read+0x16>
 800346e:	bf00      	nop
 8003470:	0001      	movs	r1, r0
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	60ba      	str	r2, [r7, #8]
 8003478:	b2ca      	uxtb	r2, r1
 800347a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	dbf0      	blt.n	800346c <_read+0x12>
  }

  return len;
 800348a:	687b      	ldr	r3, [r7, #4]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b006      	add	sp, #24
 8003492:	bd80      	pop	{r7, pc}

08003494 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e009      	b.n	80034ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	60ba      	str	r2, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	0018      	movs	r0, r3
 80034b0:	e000      	b.n	80034b4 <_write+0x20>
 80034b2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	dbf1      	blt.n	80034a6 <_write+0x12>
  }
  return len;
 80034c2:	687b      	ldr	r3, [r7, #4]
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}

080034cc <_close>:

int _close(int file)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	425b      	negs	r3, r3
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2280      	movs	r2, #128	@ 0x80
 80034ee:	0192      	lsls	r2, r2, #6
 80034f0:	605a      	str	r2, [r3, #4]
  return 0;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_isatty>:

int _isatty(int file)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003504:	2301      	movs	r3, #1
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}

0800350e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}

08003524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800352c:	4a14      	ldr	r2, [pc, #80]	@ (8003580 <_sbrk+0x5c>)
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <_sbrk+0x60>)
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003538:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003540:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <_sbrk+0x64>)
 8003542:	4a12      	ldr	r2, [pc, #72]	@ (800358c <_sbrk+0x68>)
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003546:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003554:	f004 fada 	bl	8007b0c <__errno>
 8003558:	0003      	movs	r3, r0
 800355a:	220c      	movs	r2, #12
 800355c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800355e:	2301      	movs	r3, #1
 8003560:	425b      	negs	r3, r3
 8003562:	e009      	b.n	8003578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003564:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356a:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	18d2      	adds	r2, r2, r3
 8003572:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <_sbrk+0x64>)
 8003574:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20002000 	.word	0x20002000
 8003584:	00000400 	.word	0x00000400
 8003588:	200007dc 	.word	0x200007dc
 800358c:	20000930 	.word	0x20000930

08003590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800359c:	480d      	ldr	r0, [pc, #52]	@ (80035d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800359e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035a0:	f7ff fff6 	bl	8003590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035a4:	480c      	ldr	r0, [pc, #48]	@ (80035d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80035a6:	490d      	ldr	r1, [pc, #52]	@ (80035dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80035a8:	4a0d      	ldr	r2, [pc, #52]	@ (80035e0 <LoopForever+0xe>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035bc:	4c0a      	ldr	r4, [pc, #40]	@ (80035e8 <LoopForever+0x16>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ca:	f004 faa5 	bl	8007b18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035ce:	f7ff f859 	bl	8002684 <main>

080035d2 <LoopForever>:

LoopForever:
  b LoopForever
 80035d2:	e7fe      	b.n	80035d2 <LoopForever>
  ldr   r0, =_estack
 80035d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80035d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035dc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80035e0:	0800d160 	.word	0x0800d160
  ldr r2, =_sbss
 80035e4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80035e8:	20000930 	.word	0x20000930

080035ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC1_IRQHandler>
	...

080035f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_Init+0x3c>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_Init+0x3c>)
 8003602:	2180      	movs	r1, #128	@ 0x80
 8003604:	0049      	lsls	r1, r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800360a:	2003      	movs	r0, #3
 800360c:	f000 f810 	bl	8003630 <HAL_InitTick>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d003      	beq.n	800361c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e001      	b.n	8003620 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800361c:	f7ff fda0 	bl	8003160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003640:	4b1d      	ldr	r3, [pc, #116]	@ (80036b8 <HAL_InitTick+0x88>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02b      	beq.n	80036a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003648:	4b1c      	ldr	r3, [pc, #112]	@ (80036bc <HAL_InitTick+0x8c>)
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	4b1a      	ldr	r3, [pc, #104]	@ (80036b8 <HAL_InitTick+0x88>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	0019      	movs	r1, r3
 8003652:	23fa      	movs	r3, #250	@ 0xfa
 8003654:	0098      	lsls	r0, r3, #2
 8003656:	f7fc fd6f 	bl	8000138 <__udivsi3>
 800365a:	0003      	movs	r3, r0
 800365c:	0019      	movs	r1, r3
 800365e:	0020      	movs	r0, r4
 8003660:	f7fc fd6a 	bl	8000138 <__udivsi3>
 8003664:	0003      	movs	r3, r0
 8003666:	0018      	movs	r0, r3
 8003668:	f000 ff67 	bl	800453a <HAL_SYSTICK_Config>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d112      	bne.n	8003696 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d80a      	bhi.n	800368c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	2301      	movs	r3, #1
 800367a:	425b      	negs	r3, r3
 800367c:	2200      	movs	r2, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f000 ff36 	bl	80044f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003684:	4b0e      	ldr	r3, [pc, #56]	@ (80036c0 <HAL_InitTick+0x90>)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e00d      	b.n	80036a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e008      	b.n	80036a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003696:	230f      	movs	r3, #15
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e003      	b.n	80036a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036a8:	230f      	movs	r3, #15
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b005      	add	sp, #20
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000028 	.word	0x20000028
 80036bc:	20000020 	.word	0x20000020
 80036c0:	20000024 	.word	0x20000024

080036c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_IncTick+0x1c>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	001a      	movs	r2, r3
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_IncTick+0x20>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	18d2      	adds	r2, r2, r3
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <HAL_IncTick+0x20>)
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	46c0      	nop			@ (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20000028 	.word	0x20000028
 80036e4:	200007e0 	.word	0x200007e0

080036e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  return uwTick;
 80036ec:	4b02      	ldr	r3, [pc, #8]	@ (80036f8 <HAL_GetTick+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	200007e0 	.word	0x200007e0

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff fff0 	bl	80036e8 <HAL_GetTick>
 8003708:	0003      	movs	r3, r0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_Delay+0x44>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	001a      	movs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	189b      	adds	r3, r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	f7ff ffe0 	bl	80036e8 <HAL_GetTick>
 8003728:	0002      	movs	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b004      	add	sp, #16
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	20000028 	.word	0x20000028

08003744 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a05      	ldr	r2, [pc, #20]	@ (8003768 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003754:	401a      	ands	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	fe3fffff 	.word	0xfe3fffff

0800376c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	23e0      	movs	r3, #224	@ 0xe0
 800377a:	045b      	lsls	r3, r3, #17
 800377c:	4013      	ands	r3, r2
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}

08003786 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	2104      	movs	r1, #4
 800379a:	400a      	ands	r2, r1
 800379c:	2107      	movs	r1, #7
 800379e:	4091      	lsls	r1, r2
 80037a0:	000a      	movs	r2, r1
 80037a2:	43d2      	mvns	r2, r2
 80037a4:	401a      	ands	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2104      	movs	r1, #4
 80037aa:	400b      	ands	r3, r1
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4099      	lsls	r1, r3
 80037b0:	000b      	movs	r3, r1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80037b8:	46c0      	nop			@ (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b004      	add	sp, #16
 80037be:	bd80      	pop	{r7, pc}

080037c0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	2104      	movs	r1, #4
 80037d2:	400a      	ands	r2, r1
 80037d4:	2107      	movs	r1, #7
 80037d6:	4091      	lsls	r1, r2
 80037d8:	000a      	movs	r2, r1
 80037da:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2104      	movs	r1, #4
 80037e0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80037e2:	40da      	lsrs	r2, r3
 80037e4:	0013      	movs	r3, r2
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}

080037ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	23c0      	movs	r3, #192	@ 0xc0
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	d101      	bne.n	8003806 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	211f      	movs	r1, #31
 8003824:	400a      	ands	r2, r1
 8003826:	210f      	movs	r1, #15
 8003828:	4091      	lsls	r1, r2
 800382a:	000a      	movs	r2, r1
 800382c:	43d2      	mvns	r2, r2
 800382e:	401a      	ands	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	0e9b      	lsrs	r3, r3, #26
 8003834:	210f      	movs	r1, #15
 8003836:	4019      	ands	r1, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	201f      	movs	r0, #31
 800383c:	4003      	ands	r3, r0
 800383e:	4099      	lsls	r1, r3
 8003840:	000b      	movs	r3, r1
 8003842:	431a      	orrs	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b004      	add	sp, #16
 800384e:	bd80      	pop	{r7, pc}

08003850 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	035b      	lsls	r3, r3, #13
 8003862:	0b5b      	lsrs	r3, r3, #13
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}

08003872 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	0352      	lsls	r2, r2, #13
 8003884:	0b52      	lsrs	r2, r2, #13
 8003886:	43d2      	mvns	r2, r2
 8003888:	401a      	ands	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	0212      	lsls	r2, r2, #8
 80038ac:	43d2      	mvns	r2, r2
 80038ae:	401a      	ands	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	400b      	ands	r3, r1
 80038b8:	4904      	ldr	r1, [pc, #16]	@ (80038cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80038ba:	400b      	ands	r3, r1
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b004      	add	sp, #16
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	07ffff00 	.word	0x07ffff00

080038d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a05      	ldr	r2, [pc, #20]	@ (80038f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2280      	movs	r2, #128	@ 0x80
 80038e2:	0552      	lsls	r2, r2, #21
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	6fffffe8 	.word	0x6fffffe8

080038f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	055b      	lsls	r3, r3, #21
 8003908:	401a      	ands	r2, r3
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	055b      	lsls	r3, r3, #21
 800390e:	429a      	cmp	r2, r3
 8003910:	d101      	bne.n	8003916 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003916:	2300      	movs	r3, #0
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <LL_ADC_Enable+0x20>)
 800392e:	4013      	ands	r3, r2
 8003930:	2201      	movs	r2, #1
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	7fffffe8 	.word	0x7fffffe8

08003944 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2201      	movs	r2, #1
 8003952:	4013      	ands	r3, r2
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <LL_ADC_IsEnabled+0x18>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <LL_ADC_IsEnabled+0x1a>
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a04      	ldr	r2, [pc, #16]	@ (8003988 <LL_ADC_REG_StartConversion+0x20>)
 8003976:	4013      	ands	r3, r2
 8003978:	2204      	movs	r2, #4
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}
 8003988:	7fffffe8 	.word	0x7fffffe8

0800398c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2204      	movs	r2, #4
 800399a:	4013      	ands	r3, r2
 800399c:	2b04      	cmp	r3, #4
 800399e:	d101      	bne.n	80039a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b8:	231f      	movs	r3, #31
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e17f      	b.n	8003cd6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff fbe1 	bl	80031a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2254      	movs	r2, #84	@ 0x54
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff ff7d 	bl	80038f8 <LL_ADC_IsInternalRegulatorEnabled>
 80039fe:	1e03      	subs	r3, r0, #0
 8003a00:	d115      	bne.n	8003a2e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7ff ff62 	bl	80038d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a0c:	4bb4      	ldr	r3, [pc, #720]	@ (8003ce0 <HAL_ADC_Init+0x330>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	49b4      	ldr	r1, [pc, #720]	@ (8003ce4 <HAL_ADC_Init+0x334>)
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7fc fb90 	bl	8000138 <__udivsi3>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f9      	bne.n	8003a22 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7ff ff60 	bl	80038f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d10f      	bne.n	8003a5c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	2210      	movs	r2, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a54:	231f      	movs	r3, #31
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff ff93 	bl	800398c <LL_ADC_REG_IsConversionOngoing>
 8003a66:	0003      	movs	r3, r0
 8003a68:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	2210      	movs	r2, #16
 8003a70:	4013      	ands	r3, r2
 8003a72:	d000      	beq.n	8003a76 <HAL_ADC_Init+0xc6>
 8003a74:	e122      	b.n	8003cbc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d000      	beq.n	8003a7e <HAL_ADC_Init+0xce>
 8003a7c:	e11e      	b.n	8003cbc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	4a99      	ldr	r2, [pc, #612]	@ (8003ce8 <HAL_ADC_Init+0x338>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	2202      	movs	r2, #2
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7ff ff56 	bl	8003944 <LL_ADC_IsEnabled>
 8003a98:	1e03      	subs	r3, r0, #0
 8003a9a:	d000      	beq.n	8003a9e <HAL_ADC_Init+0xee>
 8003a9c:	e0ad      	b.n	8003bfa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7e1b      	ldrb	r3, [r3, #24]
 8003aa6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003aa8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7e5b      	ldrb	r3, [r3, #25]
 8003aae:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ab0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7e9b      	ldrb	r3, [r3, #26]
 8003ab6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ab8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_ADC_Init+0x118>
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	015b      	lsls	r3, r3, #5
 8003ac6:	e000      	b.n	8003aca <HAL_ADC_Init+0x11a>
 8003ac8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003aca:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ad0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da04      	bge.n	8003ae4 <HAL_ADC_Init+0x134>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	e001      	b.n	8003ae8 <HAL_ADC_Init+0x138>
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003ae8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	212c      	movs	r1, #44	@ 0x2c
 8003aee:	5c5b      	ldrb	r3, [r3, r1]
 8003af0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003af2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	5c9b      	ldrb	r3, [r3, r2]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d115      	bne.n	8003b30 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7e9b      	ldrb	r3, [r3, #26]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2280      	movs	r2, #128	@ 0x80
 8003b10:	0252      	lsls	r2, r2, #9
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e00b      	b.n	8003b30 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b3c:	23e0      	movs	r3, #224	@ 0xe0
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b46:	4313      	orrs	r3, r2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a65      	ldr	r2, [pc, #404]	@ (8003cec <HAL_ADC_Init+0x33c>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0f9b      	lsrs	r3, r3, #30
 8003b6a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b70:	4313      	orrs	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	223c      	movs	r2, #60	@ 0x3c
 8003b7c:	5c9b      	ldrb	r3, [r3, r2]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d111      	bne.n	8003ba6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0f9b      	lsrs	r3, r3, #30
 8003b88:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b8e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003b94:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003b9a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4a50      	ldr	r2, [pc, #320]	@ (8003cf0 <HAL_ADC_Init+0x340>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	23c0      	movs	r3, #192	@ 0xc0
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d018      	beq.n	8003bfa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	05db      	lsls	r3, r3, #23
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d012      	beq.n	8003bfa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d00c      	beq.n	8003bfa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003be0:	4b44      	ldr	r3, [pc, #272]	@ (8003cf4 <HAL_ADC_Init+0x344>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a44      	ldr	r2, [pc, #272]	@ (8003cf8 <HAL_ADC_Init+0x348>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	23f0      	movs	r3, #240	@ 0xf0
 8003bf0:	039b      	lsls	r3, r3, #14
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf4 <HAL_ADC_Init+0x344>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c02:	001a      	movs	r2, r3
 8003c04:	2100      	movs	r1, #0
 8003c06:	f7ff fdbe 	bl	8003786 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	493a      	ldr	r1, [pc, #232]	@ (8003cfc <HAL_ADC_Init+0x34c>)
 8003c14:	001a      	movs	r2, r3
 8003c16:	f7ff fdb6 	bl	8003786 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2110      	movs	r1, #16
 8003c2e:	4249      	negs	r1, r1
 8003c30:	430a      	orrs	r2, r1
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c34:	e018      	b.n	8003c68 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	039b      	lsls	r3, r3, #14
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d112      	bne.n	8003c68 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	221c      	movs	r2, #28
 8003c52:	4013      	ands	r3, r2
 8003c54:	2210      	movs	r2, #16
 8003c56:	4252      	negs	r2, r2
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7ff fda6 	bl	80037c0 <LL_ADC_GetSamplingTimeCommonChannels>
 8003c74:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10b      	bne.n	8003c96 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	2203      	movs	r2, #3
 8003c8a:	4393      	bics	r3, r2
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c94:	e01c      	b.n	8003cd0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	2212      	movs	r2, #18
 8003c9c:	4393      	bics	r3, r2
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	2201      	movs	r2, #1
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003cba:	e009      	b.n	8003cd0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003cc8:	231f      	movs	r3, #31
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b008      	add	sp, #32
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	20000020 	.word	0x20000020
 8003ce4:	00030d40 	.word	0x00030d40
 8003ce8:	fffffefd 	.word	0xfffffefd
 8003cec:	ffde0201 	.word	0xffde0201
 8003cf0:	1ffffc02 	.word	0x1ffffc02
 8003cf4:	40012708 	.word	0x40012708
 8003cf8:	ffc3ffff 	.word	0xffc3ffff
 8003cfc:	07ffff04 	.word	0x07ffff04

08003d00 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7ff fe3d 	bl	800398c <LL_ADC_REG_IsConversionOngoing>
 8003d12:	1e03      	subs	r3, r0, #0
 8003d14:	d135      	bne.n	8003d82 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2254      	movs	r2, #84	@ 0x54
 8003d1a:	5c9b      	ldrb	r3, [r3, r2]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_Start+0x24>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e035      	b.n	8003d90 <HAL_ADC_Start+0x90>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2254      	movs	r2, #84	@ 0x54
 8003d28:	2101      	movs	r1, #1
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d2c:	250f      	movs	r5, #15
 8003d2e:	197c      	adds	r4, r7, r5
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 faaa 	bl	800428c <ADC_Enable>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d3c:	197b      	adds	r3, r7, r5
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d119      	bne.n	8003d78 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <HAL_ADC_Start+0x98>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2280      	movs	r2, #128	@ 0x80
 8003d4e:	0052      	lsls	r2, r2, #1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	221c      	movs	r2, #28
 8003d62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2254      	movs	r2, #84	@ 0x54
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff fdf9 	bl	8003968 <LL_ADC_REG_StartConversion>
 8003d76:	e008      	b.n	8003d8a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2254      	movs	r2, #84	@ 0x54
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	5499      	strb	r1, [r3, r2]
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d82:	230f      	movs	r3, #15
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	2202      	movs	r2, #2
 8003d88:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003d8a:	230f      	movs	r3, #15
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	781b      	ldrb	r3, [r3, #0]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b004      	add	sp, #16
 8003d96:	bdb0      	pop	{r4, r5, r7, pc}
 8003d98:	fffff0fe 	.word	0xfffff0fe

08003d9c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d102      	bne.n	8003db4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003dae:	2308      	movs	r3, #8
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e00f      	b.n	8003dd4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e072      	b.n	8003eb6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003dd4:	f7ff fc88 	bl	80036e8 <HAL_GetTick>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ddc:	e01f      	b.n	8003e1e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	d01c      	beq.n	8003e1e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003de4:	f7ff fc80 	bl	80036e8 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <HAL_ADC_PollForConversion+0x5e>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d111      	bne.n	8003e1e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	d10b      	bne.n	8003e1e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2254      	movs	r2, #84	@ 0x54
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04b      	b.n	8003eb6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	d0d9      	beq.n	8003dde <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	2280      	movs	r2, #128	@ 0x80
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff fcd6 	bl	80037ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d02e      	beq.n	8003ea4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7e9b      	ldrb	r3, [r3, #26]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d12a      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2208      	movs	r2, #8
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d123      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff fd93 	bl	800398c <LL_ADC_REG_IsConversionOngoing>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d110      	bne.n	8003e8c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	210c      	movs	r1, #12
 8003e76:	438a      	bics	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	4a10      	ldr	r2, [pc, #64]	@ (8003ec0 <HAL_ADC_PollForConversion+0x124>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	2201      	movs	r2, #1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e8a:	e00b      	b.n	8003ea4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	2220      	movs	r2, #32
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7e1b      	ldrb	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	220c      	movs	r2, #12
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	fffffefe 	.word	0xfffffefe

08003ec4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b002      	add	sp, #8
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee6:	2317      	movs	r3, #23
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2254      	movs	r2, #84	@ 0x54
 8003ef6:	5c9b      	ldrb	r3, [r3, r2]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x24>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e1c0      	b.n	8004282 <HAL_ADC_ConfigChannel+0x3a6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2254      	movs	r2, #84	@ 0x54
 8003f04:	2101      	movs	r1, #1
 8003f06:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff fd3d 	bl	800398c <LL_ADC_REG_IsConversionOngoing>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d000      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x3c>
 8003f16:	e1a3      	b.n	8004260 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d100      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x46>
 8003f20:	e143      	b.n	80041aa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d004      	beq.n	8003f38 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f32:	4ac1      	ldr	r2, [pc, #772]	@ (8004238 <HAL_ADC_ConfigChannel+0x35c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d108      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0019      	movs	r1, r3
 8003f42:	0010      	movs	r0, r2
 8003f44:	f7ff fc84 	bl	8003850 <LL_ADC_REG_SetSequencerChAdd>
 8003f48:	e0c9      	b.n	80040de <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	211f      	movs	r1, #31
 8003f54:	400b      	ands	r3, r1
 8003f56:	210f      	movs	r1, #15
 8003f58:	4099      	lsls	r1, r3
 8003f5a:	000b      	movs	r3, r1
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	035b      	lsls	r3, r3, #13
 8003f68:	0b5b      	lsrs	r3, r3, #13
 8003f6a:	d105      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x9c>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0e9b      	lsrs	r3, r3, #26
 8003f72:	221f      	movs	r2, #31
 8003f74:	4013      	ands	r3, r2
 8003f76:	e098      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d000      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0xa8>
 8003f82:	e091      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x1cc>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d000      	beq.n	8003f90 <HAL_ADC_ConfigChannel+0xb4>
 8003f8e:	e089      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x1c8>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	4013      	ands	r3, r2
 8003f98:	d000      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0xc0>
 8003f9a:	e081      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x1c4>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d000      	beq.n	8003fa8 <HAL_ADC_ConfigChannel+0xcc>
 8003fa6:	e079      	b.n	800409c <HAL_ADC_ConfigChannel+0x1c0>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2210      	movs	r2, #16
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d000      	beq.n	8003fb4 <HAL_ADC_ConfigChannel+0xd8>
 8003fb2:	e071      	b.n	8004098 <HAL_ADC_ConfigChannel+0x1bc>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d000      	beq.n	8003fc0 <HAL_ADC_ConfigChannel+0xe4>
 8003fbe:	e069      	b.n	8004094 <HAL_ADC_ConfigChannel+0x1b8>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2240      	movs	r2, #64	@ 0x40
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d000      	beq.n	8003fcc <HAL_ADC_ConfigChannel+0xf0>
 8003fca:	e061      	b.n	8004090 <HAL_ADC_ConfigChannel+0x1b4>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d000      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0xfc>
 8003fd6:	e059      	b.n	800408c <HAL_ADC_ConfigChannel+0x1b0>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d151      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1ac>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d149      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x1a8>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d141      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x1a4>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	4013      	ands	r3, r2
 8004006:	d139      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1a0>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	015b      	lsls	r3, r3, #5
 8004010:	4013      	ands	r3, r2
 8004012:	d131      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x19c>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	@ 0x80
 800401a:	019b      	lsls	r3, r3, #6
 800401c:	4013      	ands	r3, r2
 800401e:	d129      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x198>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	01db      	lsls	r3, r3, #7
 8004028:	4013      	ands	r3, r2
 800402a:	d121      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x194>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	4013      	ands	r3, r2
 8004036:	d119      	bne.n	800406c <HAL_ADC_ConfigChannel+0x190>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	025b      	lsls	r3, r3, #9
 8004040:	4013      	ands	r3, r2
 8004042:	d111      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x18c>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	029b      	lsls	r3, r3, #10
 800404c:	4013      	ands	r3, r2
 800404e:	d109      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x188>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	02db      	lsls	r3, r3, #11
 8004058:	4013      	ands	r3, r2
 800405a:	d001      	beq.n	8004060 <HAL_ADC_ConfigChannel+0x184>
 800405c:	2312      	movs	r3, #18
 800405e:	e024      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004060:	2300      	movs	r3, #0
 8004062:	e022      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004064:	2311      	movs	r3, #17
 8004066:	e020      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004068:	2310      	movs	r3, #16
 800406a:	e01e      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 800406c:	230f      	movs	r3, #15
 800406e:	e01c      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004070:	230e      	movs	r3, #14
 8004072:	e01a      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004074:	230d      	movs	r3, #13
 8004076:	e018      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004078:	230c      	movs	r3, #12
 800407a:	e016      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 800407c:	230b      	movs	r3, #11
 800407e:	e014      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004080:	230a      	movs	r3, #10
 8004082:	e012      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004084:	2309      	movs	r3, #9
 8004086:	e010      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004088:	2308      	movs	r3, #8
 800408a:	e00e      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 800408c:	2307      	movs	r3, #7
 800408e:	e00c      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004090:	2306      	movs	r3, #6
 8004092:	e00a      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004094:	2305      	movs	r3, #5
 8004096:	e008      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 8004098:	2304      	movs	r3, #4
 800409a:	e006      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 800409c:	2303      	movs	r3, #3
 800409e:	e004      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e002      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_ADC_ConfigChannel+0x1ce>
 80040a8:	2300      	movs	r3, #0
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	6852      	ldr	r2, [r2, #4]
 80040ae:	201f      	movs	r0, #31
 80040b0:	4002      	ands	r2, r0
 80040b2:	4093      	lsls	r3, r2
 80040b4:	000a      	movs	r2, r1
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d808      	bhi.n	80040de <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	001a      	movs	r2, r3
 80040da:	f7ff fb99 	bl	8003810 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	001a      	movs	r2, r3
 80040ec:	f7ff fbd4 	bl	8003898 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db00      	blt.n	80040fa <HAL_ADC_ConfigChannel+0x21e>
 80040f8:	e0bc      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040fa:	4b50      	ldr	r3, [pc, #320]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7ff fb35 	bl	800376c <LL_ADC_GetCommonPathInternalCh>
 8004102:	0003      	movs	r3, r0
 8004104:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a4d      	ldr	r2, [pc, #308]	@ (8004240 <HAL_ADC_ConfigChannel+0x364>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d122      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004118:	d11d      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2280      	movs	r2, #128	@ 0x80
 800411e:	0412      	lsls	r2, r2, #16
 8004120:	4313      	orrs	r3, r2
 8004122:	4a46      	ldr	r2, [pc, #280]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 8004124:	0019      	movs	r1, r3
 8004126:	0010      	movs	r0, r2
 8004128:	f7ff fb0c 	bl	8003744 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800412c:	4b45      	ldr	r3, [pc, #276]	@ (8004244 <HAL_ADC_ConfigChannel+0x368>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4945      	ldr	r1, [pc, #276]	@ (8004248 <HAL_ADC_ConfigChannel+0x36c>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7fc f800 	bl	8000138 <__udivsi3>
 8004138:	0003      	movs	r3, r0
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	0013      	movs	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	189b      	adds	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004146:	e002      	b.n	800414e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f9      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004154:	e08e      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3c      	ldr	r2, [pc, #240]	@ (800424c <HAL_ADC_ConfigChannel+0x370>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10e      	bne.n	800417e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	045b      	lsls	r3, r3, #17
 8004166:	4013      	ands	r3, r2
 8004168:	d109      	bne.n	800417e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	0452      	lsls	r2, r2, #17
 8004170:	4313      	orrs	r3, r2
 8004172:	4a32      	ldr	r2, [pc, #200]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 8004174:	0019      	movs	r1, r3
 8004176:	0010      	movs	r0, r2
 8004178:	f7ff fae4 	bl	8003744 <LL_ADC_SetCommonPathInternalCh>
 800417c:	e07a      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a33      	ldr	r2, [pc, #204]	@ (8004250 <HAL_ADC_ConfigChannel+0x374>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d000      	beq.n	800418a <HAL_ADC_ConfigChannel+0x2ae>
 8004188:	e074      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	03db      	lsls	r3, r3, #15
 8004190:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004192:	d000      	beq.n	8004196 <HAL_ADC_ConfigChannel+0x2ba>
 8004194:	e06e      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2280      	movs	r2, #128	@ 0x80
 800419a:	03d2      	lsls	r2, r2, #15
 800419c:	4313      	orrs	r3, r2
 800419e:	4a27      	ldr	r2, [pc, #156]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 80041a0:	0019      	movs	r1, r3
 80041a2:	0010      	movs	r0, r2
 80041a4:	f7ff face 	bl	8003744 <LL_ADC_SetCommonPathInternalCh>
 80041a8:	e064      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d004      	beq.n	80041c0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <HAL_ADC_ConfigChannel+0x35c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0019      	movs	r1, r3
 80041ca:	0010      	movs	r0, r2
 80041cc:	f7ff fb51 	bl	8003872 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	da4d      	bge.n	8004274 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 80041da:	0018      	movs	r0, r3
 80041dc:	f7ff fac6 	bl	800376c <LL_ADC_GetCommonPathInternalCh>
 80041e0:	0003      	movs	r3, r0
 80041e2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_ADC_ConfigChannel+0x364>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d108      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4a18      	ldr	r2, [pc, #96]	@ (8004254 <HAL_ADC_ConfigChannel+0x378>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	4a11      	ldr	r2, [pc, #68]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 80041f6:	0019      	movs	r1, r3
 80041f8:	0010      	movs	r0, r2
 80041fa:	f7ff faa3 	bl	8003744 <LL_ADC_SetCommonPathInternalCh>
 80041fe:	e039      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a11      	ldr	r2, [pc, #68]	@ (800424c <HAL_ADC_ConfigChannel+0x370>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4a12      	ldr	r2, [pc, #72]	@ (8004258 <HAL_ADC_ConfigChannel+0x37c>)
 800420e:	4013      	ands	r3, r2
 8004210:	4a0a      	ldr	r2, [pc, #40]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 8004212:	0019      	movs	r1, r3
 8004214:	0010      	movs	r0, r2
 8004216:	f7ff fa95 	bl	8003744 <LL_ADC_SetCommonPathInternalCh>
 800421a:	e02b      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0b      	ldr	r2, [pc, #44]	@ (8004250 <HAL_ADC_ConfigChannel+0x374>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d126      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4a0c      	ldr	r2, [pc, #48]	@ (800425c <HAL_ADC_ConfigChannel+0x380>)
 800422a:	4013      	ands	r3, r2
 800422c:	4a03      	ldr	r2, [pc, #12]	@ (800423c <HAL_ADC_ConfigChannel+0x360>)
 800422e:	0019      	movs	r1, r3
 8004230:	0010      	movs	r0, r2
 8004232:	f7ff fa87 	bl	8003744 <LL_ADC_SetCommonPathInternalCh>
 8004236:	e01d      	b.n	8004274 <HAL_ADC_ConfigChannel+0x398>
 8004238:	80000004 	.word	0x80000004
 800423c:	40012708 	.word	0x40012708
 8004240:	b0001000 	.word	0xb0001000
 8004244:	20000020 	.word	0x20000020
 8004248:	00030d40 	.word	0x00030d40
 800424c:	b8004000 	.word	0xb8004000
 8004250:	b4002000 	.word	0xb4002000
 8004254:	ff7fffff 	.word	0xff7fffff
 8004258:	feffffff 	.word	0xfeffffff
 800425c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	2220      	movs	r2, #32
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800426c:	2317      	movs	r3, #23
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2254      	movs	r2, #84	@ 0x54
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800427c:	2317      	movs	r3, #23
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	781b      	ldrb	r3, [r3, #0]
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)

0800428c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0018      	movs	r0, r3
 800429e:	f7ff fb51 	bl	8003944 <LL_ADC_IsEnabled>
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d000      	beq.n	80042a8 <ADC_Enable+0x1c>
 80042a6:	e069      	b.n	800437c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	4a36      	ldr	r2, [pc, #216]	@ (8004388 <ADC_Enable+0xfc>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00d      	beq.n	80042d0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	2210      	movs	r2, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	2201      	movs	r2, #1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e056      	b.n	800437e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fb23 	bl	8003920 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80042da:	4b2c      	ldr	r3, [pc, #176]	@ (800438c <ADC_Enable+0x100>)
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff fa45 	bl	800376c <LL_ADC_GetCommonPathInternalCh>
 80042e2:	0002      	movs	r2, r0
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	4013      	ands	r3, r2
 80042ea:	d00f      	beq.n	800430c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042ec:	4b28      	ldr	r3, [pc, #160]	@ (8004390 <ADC_Enable+0x104>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4928      	ldr	r1, [pc, #160]	@ (8004394 <ADC_Enable+0x108>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fb ff20 	bl	8000138 <__udivsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80042fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042fe:	e002      	b.n	8004306 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3b01      	subs	r3, #1
 8004304:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f9      	bne.n	8004300 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7e5b      	ldrb	r3, [r3, #25]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d033      	beq.n	800437c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004314:	f7ff f9e8 	bl	80036e8 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800431c:	e027      	b.n	800436e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0018      	movs	r0, r3
 8004324:	f7ff fb0e 	bl	8003944 <LL_ADC_IsEnabled>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d104      	bne.n	8004336 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff faf5 	bl	8003920 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004336:	f7ff f9d7 	bl	80036e8 <HAL_GetTick>
 800433a:	0002      	movs	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d914      	bls.n	800436e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	2b01      	cmp	r3, #1
 8004350:	d00d      	beq.n	800436e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004356:	2210      	movs	r2, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004362:	2201      	movs	r2, #1
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e007      	b.n	800437e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	4013      	ands	r3, r2
 8004378:	2b01      	cmp	r3, #1
 800437a:	d1d0      	bne.n	800431e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b004      	add	sp, #16
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	80000017 	.word	0x80000017
 800438c:	40012708 	.word	0x40012708
 8004390:	20000020 	.word	0x20000020
 8004394:	00030d40 	.word	0x00030d40

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	0002      	movs	r2, r0
 80043a0:	1dfb      	adds	r3, r7, #7
 80043a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80043aa:	d809      	bhi.n	80043c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ac:	1dfb      	adds	r3, r7, #7
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	001a      	movs	r2, r3
 80043b2:	231f      	movs	r3, #31
 80043b4:	401a      	ands	r2, r3
 80043b6:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <__NVIC_EnableIRQ+0x30>)
 80043b8:	2101      	movs	r1, #1
 80043ba:	4091      	lsls	r1, r2
 80043bc:	000a      	movs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	0002      	movs	r2, r0
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b7f      	cmp	r3, #127	@ 0x7f
 80043e0:	d828      	bhi.n	8004434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043e2:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <__NVIC_SetPriority+0xd4>)
 80043e4:	1dfb      	adds	r3, r7, #7
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	33c0      	adds	r3, #192	@ 0xc0
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	589b      	ldr	r3, [r3, r2]
 80043f2:	1dfa      	adds	r2, r7, #7
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	0011      	movs	r1, r2
 80043f8:	2203      	movs	r2, #3
 80043fa:	400a      	ands	r2, r1
 80043fc:	00d2      	lsls	r2, r2, #3
 80043fe:	21ff      	movs	r1, #255	@ 0xff
 8004400:	4091      	lsls	r1, r2
 8004402:	000a      	movs	r2, r1
 8004404:	43d2      	mvns	r2, r2
 8004406:	401a      	ands	r2, r3
 8004408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	22ff      	movs	r2, #255	@ 0xff
 8004410:	401a      	ands	r2, r3
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	0018      	movs	r0, r3
 8004418:	2303      	movs	r3, #3
 800441a:	4003      	ands	r3, r0
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004420:	481f      	ldr	r0, [pc, #124]	@ (80044a0 <__NVIC_SetPriority+0xd4>)
 8004422:	1dfb      	adds	r3, r7, #7
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b25b      	sxtb	r3, r3
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	430a      	orrs	r2, r1
 800442c:	33c0      	adds	r3, #192	@ 0xc0
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004432:	e031      	b.n	8004498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004434:	4a1b      	ldr	r2, [pc, #108]	@ (80044a4 <__NVIC_SetPriority+0xd8>)
 8004436:	1dfb      	adds	r3, r7, #7
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	0019      	movs	r1, r3
 800443c:	230f      	movs	r3, #15
 800443e:	400b      	ands	r3, r1
 8004440:	3b08      	subs	r3, #8
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	3306      	adds	r3, #6
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	18d3      	adds	r3, r2, r3
 800444a:	3304      	adds	r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1dfa      	adds	r2, r7, #7
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	0011      	movs	r1, r2
 8004454:	2203      	movs	r2, #3
 8004456:	400a      	ands	r2, r1
 8004458:	00d2      	lsls	r2, r2, #3
 800445a:	21ff      	movs	r1, #255	@ 0xff
 800445c:	4091      	lsls	r1, r2
 800445e:	000a      	movs	r2, r1
 8004460:	43d2      	mvns	r2, r2
 8004462:	401a      	ands	r2, r3
 8004464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	22ff      	movs	r2, #255	@ 0xff
 800446c:	401a      	ands	r2, r3
 800446e:	1dfb      	adds	r3, r7, #7
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	0018      	movs	r0, r3
 8004474:	2303      	movs	r3, #3
 8004476:	4003      	ands	r3, r0
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800447c:	4809      	ldr	r0, [pc, #36]	@ (80044a4 <__NVIC_SetPriority+0xd8>)
 800447e:	1dfb      	adds	r3, r7, #7
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	001c      	movs	r4, r3
 8004484:	230f      	movs	r3, #15
 8004486:	4023      	ands	r3, r4
 8004488:	3b08      	subs	r3, #8
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	430a      	orrs	r2, r1
 800448e:	3306      	adds	r3, #6
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	18c3      	adds	r3, r0, r3
 8004494:	3304      	adds	r3, #4
 8004496:	601a      	str	r2, [r3, #0]
}
 8004498:	46c0      	nop			@ (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	b003      	add	sp, #12
 800449e:	bd90      	pop	{r4, r7, pc}
 80044a0:	e000e100 	.word	0xe000e100
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	045b      	lsls	r3, r3, #17
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d301      	bcc.n	80044c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044bc:	2301      	movs	r3, #1
 80044be:	e010      	b.n	80044e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <SysTick_Config+0x44>)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	3a01      	subs	r2, #1
 80044c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044c8:	2301      	movs	r3, #1
 80044ca:	425b      	negs	r3, r3
 80044cc:	2103      	movs	r1, #3
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff ff7c 	bl	80043cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <SysTick_Config+0x44>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044da:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <SysTick_Config+0x44>)
 80044dc:	2207      	movs	r2, #7
 80044de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b002      	add	sp, #8
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	e000e010 	.word	0xe000e010

080044f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	210f      	movs	r1, #15
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	1c02      	adds	r2, r0, #0
 8004500:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	187b      	adds	r3, r7, r1
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b25b      	sxtb	r3, r3
 800450a:	0011      	movs	r1, r2
 800450c:	0018      	movs	r0, r3
 800450e:	f7ff ff5d 	bl	80043cc <__NVIC_SetPriority>
}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	0002      	movs	r2, r0
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004526:	1dfb      	adds	r3, r7, #7
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b25b      	sxtb	r3, r3
 800452c:	0018      	movs	r0, r3
 800452e:	f7ff ff33 	bl	8004398 <__NVIC_EnableIRQ>
}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b002      	add	sp, #8
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff ffaf 	bl	80044a8 <SysTick_Config>
 800454a:	0003      	movs	r3, r0
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004562:	e147      	b.n	80047f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4091      	lsls	r1, r2
 800456e:	000a      	movs	r2, r1
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d100      	bne.n	800457c <HAL_GPIO_Init+0x28>
 800457a:	e138      	b.n	80047ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2203      	movs	r2, #3
 8004582:	4013      	ands	r3, r2
 8004584:	2b01      	cmp	r3, #1
 8004586:	d005      	beq.n	8004594 <HAL_GPIO_Init+0x40>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	4013      	ands	r3, r2
 8004590:	2b02      	cmp	r3, #2
 8004592:	d130      	bne.n	80045f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	2203      	movs	r2, #3
 80045a0:	409a      	lsls	r2, r3
 80045a2:	0013      	movs	r3, r2
 80045a4:	43da      	mvns	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	0013      	movs	r3, r2
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ca:	2201      	movs	r2, #1
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	409a      	lsls	r2, r3
 80045d0:	0013      	movs	r3, r2
 80045d2:	43da      	mvns	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	2201      	movs	r2, #1
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
 80045e8:	0013      	movs	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2203      	movs	r2, #3
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d017      	beq.n	8004632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	2203      	movs	r2, #3
 800460e:	409a      	lsls	r2, r3
 8004610:	0013      	movs	r3, r2
 8004612:	43da      	mvns	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	409a      	lsls	r2, r3
 8004624:	0013      	movs	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	4013      	ands	r3, r2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d123      	bne.n	8004686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	08da      	lsrs	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3208      	adds	r2, #8
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	58d3      	ldr	r3, [r2, r3]
 800464a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2207      	movs	r2, #7
 8004650:	4013      	ands	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	220f      	movs	r2, #15
 8004656:	409a      	lsls	r2, r3
 8004658:	0013      	movs	r3, r2
 800465a:	43da      	mvns	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2107      	movs	r1, #7
 800466a:	400b      	ands	r3, r1
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	409a      	lsls	r2, r3
 8004670:	0013      	movs	r3, r2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	08da      	lsrs	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3208      	adds	r2, #8
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	6939      	ldr	r1, [r7, #16]
 8004684:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	409a      	lsls	r2, r3
 8004694:	0013      	movs	r3, r2
 8004696:	43da      	mvns	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	401a      	ands	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	409a      	lsls	r2, r3
 80046ac:	0013      	movs	r3, r2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	23c0      	movs	r3, #192	@ 0xc0
 80046c0:	029b      	lsls	r3, r3, #10
 80046c2:	4013      	ands	r3, r2
 80046c4:	d100      	bne.n	80046c8 <HAL_GPIO_Init+0x174>
 80046c6:	e092      	b.n	80047ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80046c8:	4a50      	ldr	r2, [pc, #320]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	3318      	adds	r3, #24
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	589b      	ldr	r3, [r3, r2]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2203      	movs	r2, #3
 80046da:	4013      	ands	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	220f      	movs	r2, #15
 80046e0:	409a      	lsls	r2, r3
 80046e2:	0013      	movs	r3, r2
 80046e4:	43da      	mvns	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	23a0      	movs	r3, #160	@ 0xa0
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d013      	beq.n	800471e <HAL_GPIO_Init+0x1ca>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a45      	ldr	r2, [pc, #276]	@ (8004810 <HAL_GPIO_Init+0x2bc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00d      	beq.n	800471a <HAL_GPIO_Init+0x1c6>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a44      	ldr	r2, [pc, #272]	@ (8004814 <HAL_GPIO_Init+0x2c0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_Init+0x1c2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a43      	ldr	r2, [pc, #268]	@ (8004818 <HAL_GPIO_Init+0x2c4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_GPIO_Init+0x1be>
 800470e:	2303      	movs	r3, #3
 8004710:	e006      	b.n	8004720 <HAL_GPIO_Init+0x1cc>
 8004712:	2305      	movs	r3, #5
 8004714:	e004      	b.n	8004720 <HAL_GPIO_Init+0x1cc>
 8004716:	2302      	movs	r3, #2
 8004718:	e002      	b.n	8004720 <HAL_GPIO_Init+0x1cc>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_GPIO_Init+0x1cc>
 800471e:	2300      	movs	r3, #0
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	2103      	movs	r1, #3
 8004724:	400a      	ands	r2, r1
 8004726:	00d2      	lsls	r2, r2, #3
 8004728:	4093      	lsls	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004730:	4936      	ldr	r1, [pc, #216]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	3318      	adds	r3, #24
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800473e:	4b33      	ldr	r3, [pc, #204]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	43da      	mvns	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	035b      	lsls	r3, r3, #13
 8004756:	4013      	ands	r3, r2
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004762:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004768:	4b28      	ldr	r3, [pc, #160]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43da      	mvns	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	039b      	lsls	r3, r3, #14
 8004780:	4013      	ands	r3, r2
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800478c:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004792:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 8004794:	2384      	movs	r3, #132	@ 0x84
 8004796:	58d3      	ldr	r3, [r2, r3]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43da      	mvns	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	2380      	movs	r3, #128	@ 0x80
 80047aa:	029b      	lsls	r3, r3, #10
 80047ac:	4013      	ands	r3, r2
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047b8:	4914      	ldr	r1, [pc, #80]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 80047ba:	2284      	movs	r2, #132	@ 0x84
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80047c0:	4a12      	ldr	r2, [pc, #72]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	58d3      	ldr	r3, [r2, r3]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	025b      	lsls	r3, r3, #9
 80047da:	4013      	ands	r3, r2
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047e6:	4909      	ldr	r1, [pc, #36]	@ (800480c <HAL_GPIO_Init+0x2b8>)
 80047e8:	2280      	movs	r2, #128	@ 0x80
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	3301      	adds	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	40da      	lsrs	r2, r3
 80047fc:	1e13      	subs	r3, r2, #0
 80047fe:	d000      	beq.n	8004802 <HAL_GPIO_Init+0x2ae>
 8004800:	e6b0      	b.n	8004564 <HAL_GPIO_Init+0x10>
  }
}
 8004802:	46c0      	nop			@ (mov r8, r8)
 8004804:	46c0      	nop			@ (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b006      	add	sp, #24
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021800 	.word	0x40021800
 8004810:	50000400 	.word	0x50000400
 8004814:	50000800 	.word	0x50000800
 8004818:	50000c00 	.word	0x50000c00

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	0008      	movs	r0, r1
 8004826:	0011      	movs	r1, r2
 8004828:	1cbb      	adds	r3, r7, #2
 800482a:	1c02      	adds	r2, r0, #0
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	1c7b      	adds	r3, r7, #1
 8004830:	1c0a      	adds	r2, r1, #0
 8004832:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004834:	1c7b      	adds	r3, r7, #1
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800483c:	1cbb      	adds	r3, r7, #2
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004844:	e003      	b.n	800484e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004846:	1cbb      	adds	r3, r7, #2
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	0002      	movs	r2, r0
 8004860:	1dbb      	adds	r3, r7, #6
 8004862:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004864:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	1dba      	adds	r2, r7, #6
 800486a:	8812      	ldrh	r2, [r2, #0]
 800486c:	4013      	ands	r3, r2
 800486e:	d008      	beq.n	8004882 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004870:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004872:	1dba      	adds	r2, r7, #6
 8004874:	8812      	ldrh	r2, [r2, #0]
 8004876:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004878:	1dbb      	adds	r3, r7, #6
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	0018      	movs	r0, r3
 800487e:	f7fd fe8d 	bl	800259c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004882:	4b09      	ldr	r3, [pc, #36]	@ (80048a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	1dba      	adds	r2, r7, #6
 8004888:	8812      	ldrh	r2, [r2, #0]
 800488a:	4013      	ands	r3, r2
 800488c:	d008      	beq.n	80048a0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004890:	1dba      	adds	r2, r7, #6
 8004892:	8812      	ldrh	r2, [r2, #0]
 8004894:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004896:	1dbb      	adds	r3, r7, #6
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	0018      	movs	r0, r3
 800489c:	f000 f806 	bl	80048ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021800 	.word	0x40021800

080048ac <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	0002      	movs	r2, r0
 80048b4:	1dbb      	adds	r3, r7, #6
 80048b6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e08f      	b.n	80049f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2241      	movs	r2, #65	@ 0x41
 80048d6:	5c9b      	ldrb	r3, [r3, r2]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2240      	movs	r2, #64	@ 0x40
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7fe fca1 	bl	8003230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2241      	movs	r2, #65	@ 0x41
 80048f2:	2124      	movs	r1, #36	@ 0x24
 80048f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	438a      	bics	r2, r1
 8004904:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	493b      	ldr	r1, [pc, #236]	@ (80049fc <HAL_I2C_Init+0x13c>)
 8004910:	400a      	ands	r2, r1
 8004912:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4938      	ldr	r1, [pc, #224]	@ (8004a00 <HAL_I2C_Init+0x140>)
 8004920:	400a      	ands	r2, r1
 8004922:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d108      	bne.n	800493e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2180      	movs	r1, #128	@ 0x80
 8004936:	0209      	lsls	r1, r1, #8
 8004938:	430a      	orrs	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e007      	b.n	800494e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2184      	movs	r1, #132	@ 0x84
 8004948:	0209      	lsls	r1, r1, #8
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d109      	bne.n	800496a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2180      	movs	r1, #128	@ 0x80
 8004962:	0109      	lsls	r1, r1, #4
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	e007      	b.n	800497a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4923      	ldr	r1, [pc, #140]	@ (8004a04 <HAL_I2C_Init+0x144>)
 8004976:	400a      	ands	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4920      	ldr	r1, [pc, #128]	@ (8004a08 <HAL_I2C_Init+0x148>)
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	491a      	ldr	r1, [pc, #104]	@ (8004a00 <HAL_I2C_Init+0x140>)
 8004996:	400a      	ands	r2, r1
 8004998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2241      	movs	r2, #65	@ 0x41
 80049de:	2120      	movs	r1, #32
 80049e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2242      	movs	r2, #66	@ 0x42
 80049ec:	2100      	movs	r1, #0
 80049ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b002      	add	sp, #8
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	f0ffffff 	.word	0xf0ffffff
 8004a00:	ffff7fff 	.word	0xffff7fff
 8004a04:	fffff7ff 	.word	0xfffff7ff
 8004a08:	02008000 	.word	0x02008000

08004a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b089      	sub	sp, #36	@ 0x24
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	000c      	movs	r4, r1
 8004a16:	0010      	movs	r0, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	230a      	movs	r3, #10
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	1c22      	adds	r2, r4, #0
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	2308      	movs	r3, #8
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	1c02      	adds	r2, r0, #0
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	1dbb      	adds	r3, r7, #6
 8004a2c:	1c0a      	adds	r2, r1, #0
 8004a2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2241      	movs	r2, #65	@ 0x41
 8004a34:	5c9b      	ldrb	r3, [r3, r2]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d000      	beq.n	8004a3e <HAL_I2C_Mem_Write+0x32>
 8004a3c:	e10c      	b.n	8004c58 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_I2C_Mem_Write+0x42>
 8004a44:	232c      	movs	r3, #44	@ 0x2c
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2280      	movs	r2, #128	@ 0x80
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0ff      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2240      	movs	r2, #64	@ 0x40
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2C_Mem_Write+0x5c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0f8      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2240      	movs	r2, #64	@ 0x40
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a70:	f7fe fe3a 	bl	80036e8 <HAL_GetTick>
 8004a74:	0003      	movs	r3, r0
 8004a76:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	0219      	lsls	r1, r3, #8
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	2319      	movs	r3, #25
 8004a84:	2201      	movs	r2, #1
 8004a86:	f000 f975 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	1e03      	subs	r3, r0, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0e3      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2241      	movs	r2, #65	@ 0x41
 8004a96:	2121      	movs	r1, #33	@ 0x21
 8004a98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2242      	movs	r2, #66	@ 0x42
 8004a9e:	2140      	movs	r1, #64	@ 0x40
 8004aa0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	222c      	movs	r2, #44	@ 0x2c
 8004ab2:	18ba      	adds	r2, r7, r2
 8004ab4:	8812      	ldrh	r2, [r2, #0]
 8004ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004abe:	1dbb      	adds	r3, r7, #6
 8004ac0:	881c      	ldrh	r4, [r3, #0]
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	230a      	movs	r3, #10
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	8819      	ldrh	r1, [r3, #0]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	0023      	movs	r3, r4
 8004ada:	f000 f8c5 	bl	8004c68 <I2C_RequestMemoryWrite>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2240      	movs	r2, #64	@ 0x40
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0b5      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2bff      	cmp	r3, #255	@ 0xff
 8004af6:	d911      	bls.n	8004b1c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	@ 0xff
 8004afc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	045c      	lsls	r4, r3, #17
 8004b08:	230a      	movs	r3, #10
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	8819      	ldrh	r1, [r3, #0]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	0023      	movs	r3, r4
 8004b16:	f000 fb07 	bl	8005128 <I2C_TransferConfig>
 8004b1a:	e012      	b.n	8004b42 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	2380      	movs	r3, #128	@ 0x80
 8004b2e:	049c      	lsls	r4, r3, #18
 8004b30:	230a      	movs	r3, #10
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	8819      	ldrh	r1, [r3, #0]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	f000 faf3 	bl	8005128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 f96b 	bl	8004e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e081      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03a      	beq.n	8004c06 <HAL_I2C_Mem_Write+0x1fa>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d136      	bne.n	8004c06 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2180      	movs	r1, #128	@ 0x80
 8004ba6:	f000 f8e5 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004baa:	1e03      	subs	r3, r0, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e053      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2bff      	cmp	r3, #255	@ 0xff
 8004bba:	d911      	bls.n	8004be0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	22ff      	movs	r2, #255	@ 0xff
 8004bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	045c      	lsls	r4, r3, #17
 8004bcc:	230a      	movs	r3, #10
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	8819      	ldrh	r1, [r3, #0]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	0023      	movs	r3, r4
 8004bda:	f000 faa5 	bl	8005128 <I2C_TransferConfig>
 8004bde:	e012      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	049c      	lsls	r4, r3, #18
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	8819      	ldrh	r1, [r3, #0]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	0023      	movs	r3, r4
 8004c02:	f000 fa91 	bl	8005128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d198      	bne.n	8004b42 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 f94a 	bl	8004eb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e01a      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	490b      	ldr	r1, [pc, #44]	@ (8004c64 <HAL_I2C_Mem_Write+0x258>)
 8004c38:	400a      	ands	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2241      	movs	r2, #65	@ 0x41
 8004c40:	2120      	movs	r1, #32
 8004c42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2242      	movs	r2, #66	@ 0x42
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2240      	movs	r2, #64	@ 0x40
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
  }
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b007      	add	sp, #28
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	fe00e800 	.word	0xfe00e800

08004c68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c68:	b5b0      	push	{r4, r5, r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	000c      	movs	r4, r1
 8004c72:	0010      	movs	r0, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	250a      	movs	r5, #10
 8004c78:	197b      	adds	r3, r7, r5
 8004c7a:	1c22      	adds	r2, r4, #0
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	2308      	movs	r3, #8
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	1c02      	adds	r2, r0, #0
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	1dbb      	adds	r3, r7, #6
 8004c88:	1c0a      	adds	r2, r1, #0
 8004c8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c8c:	1dbb      	adds	r3, r7, #6
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	045c      	lsls	r4, r3, #17
 8004c96:	197b      	adds	r3, r7, r5
 8004c98:	8819      	ldrh	r1, [r3, #0]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	4b23      	ldr	r3, [pc, #140]	@ (8004d2c <I2C_RequestMemoryWrite+0xc4>)
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	0023      	movs	r3, r4
 8004ca2:	f000 fa41 	bl	8005128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca8:	6a39      	ldr	r1, [r7, #32]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 f8b9 	bl	8004e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cb2:	1e03      	subs	r3, r0, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e033      	b.n	8004d22 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cd0:	e019      	b.n	8004d06 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	6a39      	ldr	r1, [r7, #32]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 f89a 	bl	8004e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf0:	1e03      	subs	r3, r0, #0
 8004cf2:	d001      	beq.n	8004cf8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e014      	b.n	8004d22 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	0013      	movs	r3, r2
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	@ 0x80
 8004d14:	f000 f82e 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b004      	add	sp, #16
 8004d28:	bdb0      	pop	{r4, r5, r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	80002000 	.word	0x80002000

08004d30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d103      	bne.n	8004d4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	2201      	movs	r2, #1
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d007      	beq.n	8004d6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
  }
}
 8004d6c:	46c0      	nop			@ (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b002      	add	sp, #8
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	1dfb      	adds	r3, r7, #7
 8004d82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d84:	e03a      	b.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f8d3 	bl	8004f38 <I2C_IsErrorOccurred>
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d001      	beq.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e040      	b.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	d02d      	beq.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da0:	f7fe fca2 	bl	80036e8 <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d122      	bne.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	425a      	negs	r2, r3
 8004dc6:	4153      	adcs	r3, r2
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	001a      	movs	r2, r3
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d113      	bne.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd8:	2220      	movs	r2, #32
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2241      	movs	r2, #65	@ 0x41
 8004de4:	2120      	movs	r1, #32
 8004de6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2242      	movs	r2, #66	@ 0x42
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	2100      	movs	r1, #0
 8004df6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e00f      	b.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	425a      	negs	r2, r3
 8004e0c:	4153      	adcs	r3, r2
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	001a      	movs	r2, r3
 8004e12:	1dfb      	adds	r3, r7, #7
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d0b5      	beq.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b004      	add	sp, #16
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e30:	e032      	b.n	8004e98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 f87d 	bl	8004f38 <I2C_IsErrorOccurred>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d001      	beq.n	8004e46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e030      	b.n	8004ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	d025      	beq.n	8004e98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4c:	f7fe fc4c 	bl	80036e8 <HAL_GetTick>
 8004e50:	0002      	movs	r2, r0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d302      	bcc.n	8004e62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11a      	bne.n	8004e98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d013      	beq.n	8004e98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e74:	2220      	movs	r2, #32
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2241      	movs	r2, #65	@ 0x41
 8004e80:	2120      	movs	r1, #32
 8004e82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2242      	movs	r2, #66	@ 0x42
 8004e88:	2100      	movs	r1, #0
 8004e8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2240      	movs	r2, #64	@ 0x40
 8004e90:	2100      	movs	r1, #0
 8004e92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e007      	b.n	8004ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d1c5      	bne.n	8004e32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b004      	add	sp, #16
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ebc:	e02f      	b.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 f837 	bl	8004f38 <I2C_IsErrorOccurred>
 8004eca:	1e03      	subs	r3, r0, #0
 8004ecc:	d001      	beq.n	8004ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e02d      	b.n	8004f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fe fc09 	bl	80036e8 <HAL_GetTick>
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11a      	bne.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d013      	beq.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efa:	2220      	movs	r2, #32
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2241      	movs	r2, #65	@ 0x41
 8004f06:	2120      	movs	r1, #32
 8004f08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2242      	movs	r2, #66	@ 0x42
 8004f0e:	2100      	movs	r1, #0
 8004f10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2240      	movs	r2, #64	@ 0x40
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e007      	b.n	8004f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2220      	movs	r2, #32
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d1c8      	bne.n	8004ebe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b004      	add	sp, #16
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f44:	2327      	movs	r3, #39	@ 0x27
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	4013      	ands	r3, r2
 8004f62:	d100      	bne.n	8004f66 <I2C_IsErrorOccurred+0x2e>
 8004f64:	e079      	b.n	800505a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f6e:	e057      	b.n	8005020 <I2C_IsErrorOccurred+0xe8>
 8004f70:	2227      	movs	r2, #39	@ 0x27
 8004f72:	18bb      	adds	r3, r7, r2
 8004f74:	18ba      	adds	r2, r7, r2
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	d04f      	beq.n	8005020 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fe fbb2 	bl	80036e8 <HAL_GetTick>
 8004f84:	0002      	movs	r2, r0
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_IsErrorOccurred+0x5e>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d144      	bne.n	8005020 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	01db      	lsls	r3, r3, #7
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fa4:	2013      	movs	r0, #19
 8004fa6:	183b      	adds	r3, r7, r0
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	2142      	movs	r1, #66	@ 0x42
 8004fac:	5c52      	ldrb	r2, [r2, r1]
 8004fae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	401a      	ands	r2, r3
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d126      	bne.n	8005012 <I2C_IsErrorOccurred+0xda>
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	01db      	lsls	r3, r3, #7
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d021      	beq.n	8005012 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004fce:	183b      	adds	r3, r7, r0
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d01d      	beq.n	8005012 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2180      	movs	r1, #128	@ 0x80
 8004fe2:	01c9      	lsls	r1, r1, #7
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004fe8:	f7fe fb7e 	bl	80036e8 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff0:	e00f      	b.n	8005012 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ff2:	f7fe fb79 	bl	80036e8 <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b19      	cmp	r3, #25
 8004ffe:	d908      	bls.n	8005012 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2220      	movs	r2, #32
 8005004:	4313      	orrs	r3, r2
 8005006:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005008:	2327      	movs	r3, #39	@ 0x27
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]

              break;
 8005010:	e006      	b.n	8005020 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2220      	movs	r2, #32
 800501a:	4013      	ands	r3, r2
 800501c:	2b20      	cmp	r3, #32
 800501e:	d1e8      	bne.n	8004ff2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2220      	movs	r2, #32
 8005028:	4013      	ands	r3, r2
 800502a:	2b20      	cmp	r3, #32
 800502c:	d004      	beq.n	8005038 <I2C_IsErrorOccurred+0x100>
 800502e:	2327      	movs	r3, #39	@ 0x27
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d09b      	beq.n	8004f70 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005038:	2327      	movs	r3, #39	@ 0x27
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2220      	movs	r2, #32
 8005048:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	2204      	movs	r2, #4
 800504e:	4313      	orrs	r3, r2
 8005050:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005052:	2327      	movs	r3, #39	@ 0x27
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4013      	ands	r3, r2
 800506a:	d00c      	beq.n	8005086 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2201      	movs	r2, #1
 8005070:	4313      	orrs	r3, r2
 8005072:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2280      	movs	r2, #128	@ 0x80
 800507a:	0052      	lsls	r2, r2, #1
 800507c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800507e:	2327      	movs	r3, #39	@ 0x27
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4013      	ands	r3, r2
 800508e:	d00c      	beq.n	80050aa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2208      	movs	r2, #8
 8005094:	4313      	orrs	r3, r2
 8005096:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2280      	movs	r2, #128	@ 0x80
 800509e:	00d2      	lsls	r2, r2, #3
 80050a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050a2:	2327      	movs	r3, #39	@ 0x27
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4013      	ands	r3, r2
 80050b2:	d00c      	beq.n	80050ce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2202      	movs	r2, #2
 80050b8:	4313      	orrs	r3, r2
 80050ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2280      	movs	r2, #128	@ 0x80
 80050c2:	0092      	lsls	r2, r2, #2
 80050c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050c6:	2327      	movs	r3, #39	@ 0x27
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80050ce:	2327      	movs	r3, #39	@ 0x27
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01d      	beq.n	8005114 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	0018      	movs	r0, r3
 80050dc:	f7ff fe28 	bl	8004d30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	490e      	ldr	r1, [pc, #56]	@ (8005124 <I2C_IsErrorOccurred+0x1ec>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2241      	movs	r2, #65	@ 0x41
 8005100:	2120      	movs	r1, #32
 8005102:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2242      	movs	r2, #66	@ 0x42
 8005108:	2100      	movs	r1, #0
 800510a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2240      	movs	r2, #64	@ 0x40
 8005110:	2100      	movs	r1, #0
 8005112:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005114:	2327      	movs	r3, #39	@ 0x27
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	781b      	ldrb	r3, [r3, #0]
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b00a      	add	sp, #40	@ 0x28
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	fe00e800 	.word	0xfe00e800

08005128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	0008      	movs	r0, r1
 8005132:	0011      	movs	r1, r2
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	240a      	movs	r4, #10
 8005138:	193b      	adds	r3, r7, r4
 800513a:	1c02      	adds	r2, r0, #0
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	2009      	movs	r0, #9
 8005140:	183b      	adds	r3, r7, r0
 8005142:	1c0a      	adds	r2, r1, #0
 8005144:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005146:	193b      	adds	r3, r7, r4
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	059b      	lsls	r3, r3, #22
 800514c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800514e:	183b      	adds	r3, r7, r0
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	0419      	lsls	r1, r3, #16
 8005154:	23ff      	movs	r3, #255	@ 0xff
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800515a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	4313      	orrs	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005172:	0d51      	lsrs	r1, r2, #21
 8005174:	2280      	movs	r2, #128	@ 0x80
 8005176:	00d2      	lsls	r2, r2, #3
 8005178:	400a      	ands	r2, r1
 800517a:	4907      	ldr	r1, [pc, #28]	@ (8005198 <I2C_TransferConfig+0x70>)
 800517c:	430a      	orrs	r2, r1
 800517e:	43d2      	mvns	r2, r2
 8005180:	401a      	ands	r2, r3
 8005182:	0011      	movs	r1, r2
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b007      	add	sp, #28
 8005194:	bd90      	pop	{r4, r7, pc}
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	03ff63ff 	.word	0x03ff63ff

0800519c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2241      	movs	r2, #65	@ 0x41
 80051aa:	5c9b      	ldrb	r3, [r3, r2]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d138      	bne.n	8005224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2240      	movs	r2, #64	@ 0x40
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051bc:	2302      	movs	r3, #2
 80051be:	e032      	b.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	2101      	movs	r1, #1
 80051c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2241      	movs	r2, #65	@ 0x41
 80051cc:	2124      	movs	r1, #36	@ 0x24
 80051ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	438a      	bics	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4911      	ldr	r1, [pc, #68]	@ (8005230 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2101      	movs	r1, #1
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2241      	movs	r2, #65	@ 0x41
 8005214:	2120      	movs	r1, #32
 8005216:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2240      	movs	r2, #64	@ 0x40
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b002      	add	sp, #8
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	ffffefff 	.word	0xffffefff

08005234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2241      	movs	r2, #65	@ 0x41
 8005242:	5c9b      	ldrb	r3, [r3, r2]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b20      	cmp	r3, #32
 8005248:	d139      	bne.n	80052be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2240      	movs	r2, #64	@ 0x40
 800524e:	5c9b      	ldrb	r3, [r3, r2]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005254:	2302      	movs	r3, #2
 8005256:	e033      	b.n	80052c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	2101      	movs	r1, #1
 800525e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2241      	movs	r2, #65	@ 0x41
 8005264:	2124      	movs	r1, #36	@ 0x24
 8005266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2101      	movs	r1, #1
 8005274:	438a      	bics	r2, r1
 8005276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a11      	ldr	r2, [pc, #68]	@ (80052c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2101      	movs	r1, #1
 80052a6:	430a      	orrs	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2241      	movs	r2, #65	@ 0x41
 80052ae:	2120      	movs	r1, #32
 80052b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2240      	movs	r2, #64	@ 0x40
 80052b6:	2100      	movs	r1, #0
 80052b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b004      	add	sp, #16
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	fffff0ff 	.word	0xfffff0ff

080052cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	@ (8005340 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80052da:	4013      	ands	r3, r2
 80052dc:	0019      	movs	r1, r3
 80052de:	4b17      	ldr	r3, [pc, #92]	@ (800533c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d11f      	bne.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80052f0:	4b14      	ldr	r3, [pc, #80]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	0013      	movs	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4912      	ldr	r1, [pc, #72]	@ (8005348 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80052fe:	0018      	movs	r0, r3
 8005300:	f7fa ff1a 	bl	8000138 <__udivsi3>
 8005304:	0003      	movs	r3, r0
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800530a:	e008      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b01      	subs	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e001      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e009      	b.n	8005332 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800531e:	4b07      	ldr	r3, [pc, #28]	@ (800533c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	2380      	movs	r3, #128	@ 0x80
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	401a      	ands	r2, r3
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	429a      	cmp	r2, r3
 800532e:	d0ed      	beq.n	800530c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b004      	add	sp, #16
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			@ (mov r8, r8)
 800533c:	40007000 	.word	0x40007000
 8005340:	fffff9ff 	.word	0xfffff9ff
 8005344:	20000020 	.word	0x20000020
 8005348:	000f4240 	.word	0x000f4240

0800534c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005350:	4b03      	ldr	r3, [pc, #12]	@ (8005360 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	23e0      	movs	r3, #224	@ 0xe0
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	4013      	ands	r3, r2
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000

08005364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e2f3      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	4013      	ands	r3, r2
 800537e:	d100      	bne.n	8005382 <HAL_RCC_OscConfig+0x1e>
 8005380:	e07c      	b.n	800547c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005382:	4bc3      	ldr	r3, [pc, #780]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2238      	movs	r2, #56	@ 0x38
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800538c:	4bc0      	ldr	r3, [pc, #768]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2203      	movs	r2, #3
 8005392:	4013      	ands	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b10      	cmp	r3, #16
 800539a:	d102      	bne.n	80053a2 <HAL_RCC_OscConfig+0x3e>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d002      	beq.n	80053a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	4bb9      	ldr	r3, [pc, #740]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	029b      	lsls	r3, r3, #10
 80053b0:	4013      	ands	r3, r2
 80053b2:	d062      	beq.n	800547a <HAL_RCC_OscConfig+0x116>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d15e      	bne.n	800547a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e2ce      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	025b      	lsls	r3, r3, #9
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_OscConfig+0x78>
 80053cc:	4bb0      	ldr	r3, [pc, #704]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4baf      	ldr	r3, [pc, #700]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053d2:	2180      	movs	r1, #128	@ 0x80
 80053d4:	0249      	lsls	r1, r1, #9
 80053d6:	430a      	orrs	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e020      	b.n	800541e <HAL_RCC_OscConfig+0xba>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	23a0      	movs	r3, #160	@ 0xa0
 80053e2:	02db      	lsls	r3, r3, #11
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d10e      	bne.n	8005406 <HAL_RCC_OscConfig+0xa2>
 80053e8:	4ba9      	ldr	r3, [pc, #676]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4ba8      	ldr	r3, [pc, #672]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053ee:	2180      	movs	r1, #128	@ 0x80
 80053f0:	02c9      	lsls	r1, r1, #11
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	4ba6      	ldr	r3, [pc, #664]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4ba5      	ldr	r3, [pc, #660]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	0249      	lsls	r1, r1, #9
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e00b      	b.n	800541e <HAL_RCC_OscConfig+0xba>
 8005406:	4ba2      	ldr	r3, [pc, #648]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4ba1      	ldr	r3, [pc, #644]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800540c:	49a1      	ldr	r1, [pc, #644]	@ (8005694 <HAL_RCC_OscConfig+0x330>)
 800540e:	400a      	ands	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	4b9f      	ldr	r3, [pc, #636]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b9e      	ldr	r3, [pc, #632]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005418:	499f      	ldr	r1, [pc, #636]	@ (8005698 <HAL_RCC_OscConfig+0x334>)
 800541a:	400a      	ands	r2, r1
 800541c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d014      	beq.n	8005450 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fe f95f 	bl	80036e8 <HAL_GetTick>
 800542a:	0003      	movs	r3, r0
 800542c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005430:	f7fe f95a 	bl	80036e8 <HAL_GetTick>
 8005434:	0002      	movs	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	@ 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e28d      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005442:	4b93      	ldr	r3, [pc, #588]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	029b      	lsls	r3, r3, #10
 800544a:	4013      	ands	r3, r2
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xcc>
 800544e:	e015      	b.n	800547c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fe f94a 	bl	80036e8 <HAL_GetTick>
 8005454:	0003      	movs	r3, r0
 8005456:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545a:	f7fe f945 	bl	80036e8 <HAL_GetTick>
 800545e:	0002      	movs	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b64      	cmp	r3, #100	@ 0x64
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e278      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800546c:	4b88      	ldr	r3, [pc, #544]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	029b      	lsls	r3, r3, #10
 8005474:	4013      	ands	r3, r2
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0xf6>
 8005478:	e000      	b.n	800547c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2202      	movs	r2, #2
 8005482:	4013      	ands	r3, r2
 8005484:	d100      	bne.n	8005488 <HAL_RCC_OscConfig+0x124>
 8005486:	e099      	b.n	80055bc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005488:	4b81      	ldr	r3, [pc, #516]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2238      	movs	r2, #56	@ 0x38
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005492:	4b7f      	ldr	r3, [pc, #508]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2203      	movs	r2, #3
 8005498:	4013      	ands	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d102      	bne.n	80054a8 <HAL_RCC_OscConfig+0x144>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d002      	beq.n	80054ae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d135      	bne.n	800551a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ae:	4b78      	ldr	r3, [pc, #480]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	2380      	movs	r3, #128	@ 0x80
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4013      	ands	r3, r2
 80054b8:	d005      	beq.n	80054c6 <HAL_RCC_OscConfig+0x162>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e24b      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c6:	4b72      	ldr	r3, [pc, #456]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4a74      	ldr	r2, [pc, #464]	@ (800569c <HAL_RCC_OscConfig+0x338>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	4b6e      	ldr	r3, [pc, #440]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d112      	bne.n	8005508 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054e2:	4b6b      	ldr	r3, [pc, #428]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6e      	ldr	r2, [pc, #440]	@ (80056a0 <HAL_RCC_OscConfig+0x33c>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	0019      	movs	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	4b67      	ldr	r3, [pc, #412]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80054f6:	4b66      	ldr	r3, [pc, #408]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	0adb      	lsrs	r3, r3, #11
 80054fc:	2207      	movs	r2, #7
 80054fe:	4013      	ands	r3, r2
 8005500:	4a68      	ldr	r2, [pc, #416]	@ (80056a4 <HAL_RCC_OscConfig+0x340>)
 8005502:	40da      	lsrs	r2, r3
 8005504:	4b68      	ldr	r3, [pc, #416]	@ (80056a8 <HAL_RCC_OscConfig+0x344>)
 8005506:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005508:	4b68      	ldr	r3, [pc, #416]	@ (80056ac <HAL_RCC_OscConfig+0x348>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	0018      	movs	r0, r3
 800550e:	f7fe f88f 	bl	8003630 <HAL_InitTick>
 8005512:	1e03      	subs	r3, r0, #0
 8005514:	d051      	beq.n	80055ba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e221      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d030      	beq.n	8005584 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005522:	4b5b      	ldr	r3, [pc, #364]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5e      	ldr	r2, [pc, #376]	@ (80056a0 <HAL_RCC_OscConfig+0x33c>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	4b57      	ldr	r3, [pc, #348]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005536:	4b56      	ldr	r3, [pc, #344]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b55      	ldr	r3, [pc, #340]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800553c:	2180      	movs	r1, #128	@ 0x80
 800553e:	0049      	lsls	r1, r1, #1
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fe f8d0 	bl	80036e8 <HAL_GetTick>
 8005548:	0003      	movs	r3, r0
 800554a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800554e:	f7fe f8cb 	bl	80036e8 <HAL_GetTick>
 8005552:	0002      	movs	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e1fe      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005560:	4b4b      	ldr	r3, [pc, #300]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4013      	ands	r3, r2
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556c:	4b48      	ldr	r3, [pc, #288]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a4a      	ldr	r2, [pc, #296]	@ (800569c <HAL_RCC_OscConfig+0x338>)
 8005572:	4013      	ands	r3, r2
 8005574:	0019      	movs	r1, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e01b      	b.n	80055bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005584:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b41      	ldr	r3, [pc, #260]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800558a:	4949      	ldr	r1, [pc, #292]	@ (80056b0 <HAL_RCC_OscConfig+0x34c>)
 800558c:	400a      	ands	r2, r1
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fe f8aa 	bl	80036e8 <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559a:	f7fe f8a5 	bl	80036e8 <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1d8      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ac:	4b38      	ldr	r3, [pc, #224]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	@ 0x80
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4013      	ands	r3, r2
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0x236>
 80055b8:	e000      	b.n	80055bc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	4013      	ands	r3, r2
 80055c4:	d047      	beq.n	8005656 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055c6:	4b32      	ldr	r3, [pc, #200]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2238      	movs	r2, #56	@ 0x38
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b18      	cmp	r3, #24
 80055d0:	d10a      	bne.n	80055e8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80055d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80055d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d6:	2202      	movs	r2, #2
 80055d8:	4013      	ands	r3, r2
 80055da:	d03c      	beq.n	8005656 <HAL_RCC_OscConfig+0x2f2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d138      	bne.n	8005656 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e1ba      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d019      	beq.n	8005624 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80055f0:	4b27      	ldr	r3, [pc, #156]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80055f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055f4:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 80055f6:	2101      	movs	r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fe f874 	bl	80036e8 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005606:	f7fe f86f 	bl	80036e8 <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1a2      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005618:	4b1d      	ldr	r3, [pc, #116]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800561a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561c:	2202      	movs	r2, #2
 800561e:	4013      	ands	r3, r2
 8005620:	d0f1      	beq.n	8005606 <HAL_RCC_OscConfig+0x2a2>
 8005622:	e018      	b.n	8005656 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005624:	4b1a      	ldr	r3, [pc, #104]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005626:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005628:	4b19      	ldr	r3, [pc, #100]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800562a:	2101      	movs	r1, #1
 800562c:	438a      	bics	r2, r1
 800562e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fe f85a 	bl	80036e8 <HAL_GetTick>
 8005634:	0003      	movs	r3, r0
 8005636:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563a:	f7fe f855 	bl	80036e8 <HAL_GetTick>
 800563e:	0002      	movs	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e188      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800564c:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800564e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005650:	2202      	movs	r2, #2
 8005652:	4013      	ands	r3, r2
 8005654:	d1f1      	bne.n	800563a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2204      	movs	r2, #4
 800565c:	4013      	ands	r3, r2
 800565e:	d100      	bne.n	8005662 <HAL_RCC_OscConfig+0x2fe>
 8005660:	e0c6      	b.n	80057f0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005662:	231f      	movs	r3, #31
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2238      	movs	r2, #56	@ 0x38
 8005670:	4013      	ands	r3, r2
 8005672:	2b20      	cmp	r3, #32
 8005674:	d11e      	bne.n	80056b4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <HAL_RCC_OscConfig+0x32c>)
 8005678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567a:	2202      	movs	r2, #2
 800567c:	4013      	ands	r3, r2
 800567e:	d100      	bne.n	8005682 <HAL_RCC_OscConfig+0x31e>
 8005680:	e0b6      	b.n	80057f0 <HAL_RCC_OscConfig+0x48c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d000      	beq.n	800568c <HAL_RCC_OscConfig+0x328>
 800568a:	e0b1      	b.n	80057f0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e166      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
 8005690:	40021000 	.word	0x40021000
 8005694:	fffeffff 	.word	0xfffeffff
 8005698:	fffbffff 	.word	0xfffbffff
 800569c:	ffff80ff 	.word	0xffff80ff
 80056a0:	ffffc7ff 	.word	0xffffc7ff
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	20000020 	.word	0x20000020
 80056ac:	20000024 	.word	0x20000024
 80056b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056b4:	4bac      	ldr	r3, [pc, #688]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80056b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	055b      	lsls	r3, r3, #21
 80056bc:	4013      	ands	r3, r2
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_OscConfig+0x360>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x362>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d011      	beq.n	80056ee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80056cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ce:	4ba6      	ldr	r3, [pc, #664]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80056d0:	2180      	movs	r1, #128	@ 0x80
 80056d2:	0549      	lsls	r1, r1, #21
 80056d4:	430a      	orrs	r2, r1
 80056d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056d8:	4ba3      	ldr	r3, [pc, #652]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80056da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	055b      	lsls	r3, r3, #21
 80056e0:	4013      	ands	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80056e6:	231f      	movs	r3, #31
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ee:	4b9f      	ldr	r3, [pc, #636]	@ (800596c <HAL_RCC_OscConfig+0x608>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	2380      	movs	r3, #128	@ 0x80
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	d11a      	bne.n	8005730 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fa:	4b9c      	ldr	r3, [pc, #624]	@ (800596c <HAL_RCC_OscConfig+0x608>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b9b      	ldr	r3, [pc, #620]	@ (800596c <HAL_RCC_OscConfig+0x608>)
 8005700:	2180      	movs	r1, #128	@ 0x80
 8005702:	0049      	lsls	r1, r1, #1
 8005704:	430a      	orrs	r2, r1
 8005706:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005708:	f7fd ffee 	bl	80036e8 <HAL_GetTick>
 800570c:	0003      	movs	r3, r0
 800570e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005712:	f7fd ffe9 	bl	80036e8 <HAL_GetTick>
 8005716:	0002      	movs	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e11c      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005724:	4b91      	ldr	r3, [pc, #580]	@ (800596c <HAL_RCC_OscConfig+0x608>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4013      	ands	r3, r2
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d106      	bne.n	8005746 <HAL_RCC_OscConfig+0x3e2>
 8005738:	4b8b      	ldr	r3, [pc, #556]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800573a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800573c:	4b8a      	ldr	r3, [pc, #552]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800573e:	2101      	movs	r1, #1
 8005740:	430a      	orrs	r2, r1
 8005742:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005744:	e01c      	b.n	8005780 <HAL_RCC_OscConfig+0x41c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b05      	cmp	r3, #5
 800574c:	d10c      	bne.n	8005768 <HAL_RCC_OscConfig+0x404>
 800574e:	4b86      	ldr	r3, [pc, #536]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005750:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005752:	4b85      	ldr	r3, [pc, #532]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005754:	2104      	movs	r1, #4
 8005756:	430a      	orrs	r2, r1
 8005758:	65da      	str	r2, [r3, #92]	@ 0x5c
 800575a:	4b83      	ldr	r3, [pc, #524]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800575c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800575e:	4b82      	ldr	r3, [pc, #520]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005760:	2101      	movs	r1, #1
 8005762:	430a      	orrs	r2, r1
 8005764:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0x41c>
 8005768:	4b7f      	ldr	r3, [pc, #508]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800576a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800576c:	4b7e      	ldr	r3, [pc, #504]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800576e:	2101      	movs	r1, #1
 8005770:	438a      	bics	r2, r1
 8005772:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005774:	4b7c      	ldr	r3, [pc, #496]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005778:	4b7b      	ldr	r3, [pc, #492]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800577a:	2104      	movs	r1, #4
 800577c:	438a      	bics	r2, r1
 800577e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d014      	beq.n	80057b2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fd ffae 	bl	80036e8 <HAL_GetTick>
 800578c:	0003      	movs	r3, r0
 800578e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005790:	e009      	b.n	80057a6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fd ffa9 	bl	80036e8 <HAL_GetTick>
 8005796:	0002      	movs	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	4a74      	ldr	r2, [pc, #464]	@ (8005970 <HAL_RCC_OscConfig+0x60c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0db      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a6:	4b70      	ldr	r3, [pc, #448]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80057a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057aa:	2202      	movs	r2, #2
 80057ac:	4013      	ands	r3, r2
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x42e>
 80057b0:	e013      	b.n	80057da <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7fd ff99 	bl	80036e8 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057ba:	e009      	b.n	80057d0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057bc:	f7fd ff94 	bl	80036e8 <HAL_GetTick>
 80057c0:	0002      	movs	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	4a6a      	ldr	r2, [pc, #424]	@ (8005970 <HAL_RCC_OscConfig+0x60c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e0c6      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057d0:	4b65      	ldr	r3, [pc, #404]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80057d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d4:	2202      	movs	r2, #2
 80057d6:	4013      	ands	r3, r2
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057da:	231f      	movs	r3, #31
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057e4:	4b60      	ldr	r3, [pc, #384]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80057e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e8:	4b5f      	ldr	r3, [pc, #380]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80057ea:	4962      	ldr	r1, [pc, #392]	@ (8005974 <HAL_RCC_OscConfig+0x610>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d100      	bne.n	80057fa <HAL_RCC_OscConfig+0x496>
 80057f8:	e0b0      	b.n	800595c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2238      	movs	r2, #56	@ 0x38
 8005800:	4013      	ands	r3, r2
 8005802:	2b10      	cmp	r3, #16
 8005804:	d100      	bne.n	8005808 <HAL_RCC_OscConfig+0x4a4>
 8005806:	e078      	b.n	80058fa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d153      	bne.n	80058b8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005810:	4b55      	ldr	r3, [pc, #340]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b54      	ldr	r3, [pc, #336]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005816:	4958      	ldr	r1, [pc, #352]	@ (8005978 <HAL_RCC_OscConfig+0x614>)
 8005818:	400a      	ands	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fd ff64 	bl	80036e8 <HAL_GetTick>
 8005820:	0003      	movs	r3, r0
 8005822:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005826:	f7fd ff5f 	bl	80036e8 <HAL_GetTick>
 800582a:	0002      	movs	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e092      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005838:	4b4b      	ldr	r3, [pc, #300]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	049b      	lsls	r3, r3, #18
 8005840:	4013      	ands	r3, r2
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005844:	4b48      	ldr	r3, [pc, #288]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a4c      	ldr	r2, [pc, #304]	@ (800597c <HAL_RCC_OscConfig+0x618>)
 800584a:	4013      	ands	r3, r2
 800584c:	0019      	movs	r1, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	431a      	orrs	r2, r3
 800586c:	4b3e      	ldr	r3, [pc, #248]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 800586e:	430a      	orrs	r2, r1
 8005870:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005872:	4b3d      	ldr	r3, [pc, #244]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b3c      	ldr	r3, [pc, #240]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005878:	2180      	movs	r1, #128	@ 0x80
 800587a:	0449      	lsls	r1, r1, #17
 800587c:	430a      	orrs	r2, r1
 800587e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005880:	4b39      	ldr	r3, [pc, #228]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	4b38      	ldr	r3, [pc, #224]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	0549      	lsls	r1, r1, #21
 800588a:	430a      	orrs	r2, r1
 800588c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fd ff2b 	bl	80036e8 <HAL_GetTick>
 8005892:	0003      	movs	r3, r0
 8005894:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fd ff26 	bl	80036e8 <HAL_GetTick>
 800589c:	0002      	movs	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e059      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	049b      	lsls	r3, r3, #18
 80058b2:	4013      	ands	r3, r2
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x534>
 80058b6:	e051      	b.n	800595c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80058be:	492e      	ldr	r1, [pc, #184]	@ (8005978 <HAL_RCC_OscConfig+0x614>)
 80058c0:	400a      	ands	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fd ff10 	bl	80036e8 <HAL_GetTick>
 80058c8:	0003      	movs	r3, r0
 80058ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ce:	f7fd ff0b 	bl	80036e8 <HAL_GetTick>
 80058d2:	0002      	movs	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e03e      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e0:	4b21      	ldr	r3, [pc, #132]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	049b      	lsls	r3, r3, #18
 80058e8:	4013      	ands	r3, r2
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80058ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 80058f2:	4923      	ldr	r1, [pc, #140]	@ (8005980 <HAL_RCC_OscConfig+0x61c>)
 80058f4:	400a      	ands	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	e030      	b.n	800595c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e02b      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005906:	4b18      	ldr	r3, [pc, #96]	@ (8005968 <HAL_RCC_OscConfig+0x604>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2203      	movs	r2, #3
 8005910:	401a      	ands	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	429a      	cmp	r2, r3
 8005918:	d11e      	bne.n	8005958 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2270      	movs	r2, #112	@ 0x70
 800591e:	401a      	ands	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d117      	bne.n	8005958 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	23fe      	movs	r3, #254	@ 0xfe
 800592c:	01db      	lsls	r3, r3, #7
 800592e:	401a      	ands	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d10e      	bne.n	8005958 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	23f8      	movs	r3, #248	@ 0xf8
 800593e:	039b      	lsls	r3, r3, #14
 8005940:	401a      	ands	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d106      	bne.n	8005958 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	0f5b      	lsrs	r3, r3, #29
 800594e:	075a      	lsls	r2, r3, #29
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b008      	add	sp, #32
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	40021000 	.word	0x40021000
 800596c:	40007000 	.word	0x40007000
 8005970:	00001388 	.word	0x00001388
 8005974:	efffffff 	.word	0xefffffff
 8005978:	feffffff 	.word	0xfeffffff
 800597c:	1fc1808c 	.word	0x1fc1808c
 8005980:	effefffc 	.word	0xeffefffc

08005984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0e9      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005998:	4b76      	ldr	r3, [pc, #472]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2207      	movs	r2, #7
 800599e:	4013      	ands	r3, r2
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d91e      	bls.n	80059e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b73      	ldr	r3, [pc, #460]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2207      	movs	r2, #7
 80059ac:	4393      	bics	r3, r2
 80059ae:	0019      	movs	r1, r3
 80059b0:	4b70      	ldr	r3, [pc, #448]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059b8:	f7fd fe96 	bl	80036e8 <HAL_GetTick>
 80059bc:	0003      	movs	r3, r0
 80059be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059c0:	e009      	b.n	80059d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c2:	f7fd fe91 	bl	80036e8 <HAL_GetTick>
 80059c6:	0002      	movs	r2, r0
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005b78 <HAL_RCC_ClockConfig+0x1f4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0ca      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059d6:	4b67      	ldr	r3, [pc, #412]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2207      	movs	r2, #7
 80059dc:	4013      	ands	r3, r2
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d1ee      	bne.n	80059c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2202      	movs	r2, #2
 80059ea:	4013      	ands	r3, r2
 80059ec:	d015      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2204      	movs	r2, #4
 80059f4:	4013      	ands	r3, r2
 80059f6:	d006      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059f8:	4b60      	ldr	r3, [pc, #384]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	4b5f      	ldr	r3, [pc, #380]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 80059fe:	21e0      	movs	r1, #224	@ 0xe0
 8005a00:	01c9      	lsls	r1, r1, #7
 8005a02:	430a      	orrs	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a06:	4b5d      	ldr	r3, [pc, #372]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b80 <HAL_RCC_ClockConfig+0x1fc>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	0019      	movs	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	4b59      	ldr	r3, [pc, #356]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a16:	430a      	orrs	r2, r1
 8005a18:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4013      	ands	r3, r2
 8005a22:	d057      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a2c:	4b53      	ldr	r3, [pc, #332]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	4013      	ands	r3, r2
 8005a36:	d12b      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e097      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a44:	4b4d      	ldr	r3, [pc, #308]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	2380      	movs	r3, #128	@ 0x80
 8005a4a:	049b      	lsls	r3, r3, #18
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d11f      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e08b      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a5c:	4b47      	ldr	r3, [pc, #284]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2380      	movs	r3, #128	@ 0x80
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4013      	ands	r3, r2
 8005a66:	d113      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e07f      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d106      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a74:	4b41      	ldr	r3, [pc, #260]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a78:	2202      	movs	r2, #2
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e074      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a82:	4b3e      	ldr	r3, [pc, #248]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a86:	2202      	movs	r2, #2
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e06d      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a90:	4b3a      	ldr	r3, [pc, #232]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2207      	movs	r2, #7
 8005a96:	4393      	bics	r3, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4b37      	ldr	r3, [pc, #220]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa4:	f7fd fe20 	bl	80036e8 <HAL_GetTick>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aac:	e009      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aae:	f7fd fe1b 	bl	80036e8 <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b78 <HAL_RCC_ClockConfig+0x1f4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e054      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2238      	movs	r2, #56	@ 0x38
 8005ac8:	401a      	ands	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1ec      	bne.n	8005aae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad4:	4b27      	ldr	r3, [pc, #156]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2207      	movs	r2, #7
 8005ada:	4013      	ands	r3, r2
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d21e      	bcs.n	8005b20 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae2:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	4393      	bics	r3, r2
 8005aea:	0019      	movs	r1, r3
 8005aec:	4b21      	ldr	r3, [pc, #132]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005af4:	f7fd fdf8 	bl	80036e8 <HAL_GetTick>
 8005af8:	0003      	movs	r3, r0
 8005afa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005afc:	e009      	b.n	8005b12 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afe:	f7fd fdf3 	bl	80036e8 <HAL_GetTick>
 8005b02:	0002      	movs	r2, r0
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	4a1b      	ldr	r2, [pc, #108]	@ (8005b78 <HAL_RCC_ClockConfig+0x1f4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e02c      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b12:	4b18      	ldr	r3, [pc, #96]	@ (8005b74 <HAL_RCC_ClockConfig+0x1f0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2207      	movs	r2, #7
 8005b18:	4013      	ands	r3, r2
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d1ee      	bne.n	8005afe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2204      	movs	r2, #4
 8005b26:	4013      	ands	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005b2a:	4b14      	ldr	r3, [pc, #80]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <HAL_RCC_ClockConfig+0x200>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	4b10      	ldr	r3, [pc, #64]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b3e:	f000 f829 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8005b42:	0001      	movs	r1, r0
 8005b44:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <HAL_RCC_ClockConfig+0x1f8>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	220f      	movs	r2, #15
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <HAL_RCC_ClockConfig+0x204>)
 8005b50:	0092      	lsls	r2, r2, #2
 8005b52:	58d3      	ldr	r3, [r2, r3]
 8005b54:	221f      	movs	r2, #31
 8005b56:	4013      	ands	r3, r2
 8005b58:	000a      	movs	r2, r1
 8005b5a:	40da      	lsrs	r2, r3
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <HAL_RCC_ClockConfig+0x208>)
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b60:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <HAL_RCC_ClockConfig+0x20c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f7fd fd63 	bl	8003630 <HAL_InitTick>
 8005b6a:	0003      	movs	r3, r0
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b004      	add	sp, #16
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40022000 	.word	0x40022000
 8005b78:	00001388 	.word	0x00001388
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	fffff0ff 	.word	0xfffff0ff
 8005b84:	ffff8fff 	.word	0xffff8fff
 8005b88:	0800cca4 	.word	0x0800cca4
 8005b8c:	20000020 	.word	0x20000020
 8005b90:	20000024 	.word	0x20000024

08005b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2238      	movs	r2, #56	@ 0x38
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d10f      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ba4:	4b39      	ldr	r3, [pc, #228]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	0adb      	lsrs	r3, r3, #11
 8005baa:	2207      	movs	r2, #7
 8005bac:	4013      	ands	r3, r2
 8005bae:	2201      	movs	r2, #1
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	0013      	movs	r3, r2
 8005bb4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	4835      	ldr	r0, [pc, #212]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bba:	f7fa fabd 	bl	8000138 <__udivsi3>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	e05d      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bc4:	4b31      	ldr	r3, [pc, #196]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2238      	movs	r2, #56	@ 0x38
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bd0:	4b30      	ldr	r3, [pc, #192]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e054      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2238      	movs	r2, #56	@ 0x38
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d138      	bne.n	8005c54 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005be2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2203      	movs	r2, #3
 8005be8:	4013      	ands	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bec:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	2207      	movs	r2, #7
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d10d      	bne.n	8005c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4824      	ldr	r0, [pc, #144]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x100>)
 8005c04:	f7fa fa98 	bl	8000138 <__udivsi3>
 8005c08:	0003      	movs	r3, r0
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	227f      	movs	r2, #127	@ 0x7f
 8005c14:	4013      	ands	r3, r2
 8005c16:	434b      	muls	r3, r1
 8005c18:	617b      	str	r3, [r7, #20]
        break;
 8005c1a:	e00d      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	481c      	ldr	r0, [pc, #112]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c20:	f7fa fa8a 	bl	8000138 <__udivsi3>
 8005c24:	0003      	movs	r3, r0
 8005c26:	0019      	movs	r1, r3
 8005c28:	4b18      	ldr	r3, [pc, #96]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	227f      	movs	r2, #127	@ 0x7f
 8005c30:	4013      	ands	r3, r2
 8005c32:	434b      	muls	r3, r1
 8005c34:	617b      	str	r3, [r7, #20]
        break;
 8005c36:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005c38:	4b14      	ldr	r3, [pc, #80]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	0f5b      	lsrs	r3, r3, #29
 8005c3e:	2207      	movs	r2, #7
 8005c40:	4013      	ands	r3, r2
 8005c42:	3301      	adds	r3, #1
 8005c44:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	6978      	ldr	r0, [r7, #20]
 8005c4a:	f7fa fa75 	bl	8000138 <__udivsi3>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e015      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c54:	4b0d      	ldr	r3, [pc, #52]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2238      	movs	r2, #56	@ 0x38
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d103      	bne.n	8005c68 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c60:	2380      	movs	r3, #128	@ 0x80
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	e00b      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c68:	4b08      	ldr	r3, [pc, #32]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2238      	movs	r2, #56	@ 0x38
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b18      	cmp	r3, #24
 8005c72:	d103      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c74:	23fa      	movs	r3, #250	@ 0xfa
 8005c76:	01db      	lsls	r3, r3, #7
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e001      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c80:	693b      	ldr	r3, [r7, #16]
}
 8005c82:	0018      	movs	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b006      	add	sp, #24
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	007a1200 	.word	0x007a1200

08005c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c9c:	4b02      	ldr	r3, [pc, #8]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	20000020 	.word	0x20000020

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b5b0      	push	{r4, r5, r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cb0:	f7ff fff2 	bl	8005c98 <HAL_RCC_GetHCLKFreq>
 8005cb4:	0004      	movs	r4, r0
 8005cb6:	f7ff fb49 	bl	800534c <LL_RCC_GetAPB1Prescaler>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	0b1a      	lsrs	r2, r3, #12
 8005cbe:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cc0:	0092      	lsls	r2, r2, #2
 8005cc2:	58d3      	ldr	r3, [r2, r3]
 8005cc4:	221f      	movs	r2, #31
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	40dc      	lsrs	r4, r3
 8005cca:	0023      	movs	r3, r4
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	0800cce4 	.word	0x0800cce4

08005cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ce0:	2313      	movs	r3, #19
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ce8:	2312      	movs	r3, #18
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	029b      	lsls	r3, r3, #10
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005cfc:	e0a3      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cfe:	2011      	movs	r0, #17
 8005d00:	183b      	adds	r3, r7, r0
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d06:	4b7f      	ldr	r3, [pc, #508]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d0a:	2380      	movs	r3, #128	@ 0x80
 8005d0c:	055b      	lsls	r3, r3, #21
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d110      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d12:	4b7c      	ldr	r3, [pc, #496]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d16:	4b7b      	ldr	r3, [pc, #492]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d18:	2180      	movs	r1, #128	@ 0x80
 8005d1a:	0549      	lsls	r1, r1, #21
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d20:	4b78      	ldr	r3, [pc, #480]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	055b      	lsls	r3, r3, #21
 8005d28:	4013      	ands	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2e:	183b      	adds	r3, r7, r0
 8005d30:	2201      	movs	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d34:	4b74      	ldr	r3, [pc, #464]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b73      	ldr	r3, [pc, #460]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d3a:	2180      	movs	r1, #128	@ 0x80
 8005d3c:	0049      	lsls	r1, r1, #1
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d42:	f7fd fcd1 	bl	80036e8 <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4c:	f7fd fccc 	bl	80036e8 <HAL_GetTick>
 8005d50:	0002      	movs	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d904      	bls.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d5a:	2313      	movs	r3, #19
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	2203      	movs	r2, #3
 8005d60:	701a      	strb	r2, [r3, #0]
        break;
 8005d62:	e005      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d64:	4b68      	ldr	r3, [pc, #416]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d0ed      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d70:	2313      	movs	r3, #19
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d154      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d7a:	4b62      	ldr	r3, [pc, #392]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d7e:	23c0      	movs	r3, #192	@ 0xc0
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4013      	ands	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d019      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d014      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d96:	4b5b      	ldr	r3, [pc, #364]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005da0:	4b58      	ldr	r3, [pc, #352]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005da2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da4:	4b57      	ldr	r3, [pc, #348]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005da6:	2180      	movs	r1, #128	@ 0x80
 8005da8:	0249      	lsls	r1, r1, #9
 8005daa:	430a      	orrs	r2, r1
 8005dac:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dae:	4b55      	ldr	r3, [pc, #340]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005db0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005db2:	4b54      	ldr	r3, [pc, #336]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005db4:	4956      	ldr	r1, [pc, #344]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005db6:	400a      	ands	r2, r1
 8005db8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dba:	4b52      	ldr	r3, [pc, #328]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d016      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fc8e 	bl	80036e8 <HAL_GetTick>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd0:	e00c      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd2:	f7fd fc89 	bl	80036e8 <HAL_GetTick>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d904      	bls.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005de2:	2313      	movs	r3, #19
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	2203      	movs	r2, #3
 8005de8:	701a      	strb	r2, [r3, #0]
            break;
 8005dea:	e004      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dec:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	d0ed      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005df6:	2313      	movs	r3, #19
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e00:	4b40      	ldr	r3, [pc, #256]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e04:	4a41      	ldr	r2, [pc, #260]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695a      	ldr	r2, [r3, #20]
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e10:	430a      	orrs	r2, r1
 8005e12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e14:	e00c      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e16:	2312      	movs	r3, #18
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	2213      	movs	r2, #19
 8005e1c:	18ba      	adds	r2, r7, r2
 8005e1e:	7812      	ldrb	r2, [r2, #0]
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e005      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	2312      	movs	r3, #18
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	2213      	movs	r2, #19
 8005e2a:	18ba      	adds	r2, r7, r2
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e30:	2311      	movs	r3, #17
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d105      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3a:	4b32      	ldr	r3, [pc, #200]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e3e:	4b31      	ldr	r3, [pc, #196]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e40:	4935      	ldr	r1, [pc, #212]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e42:	400a      	ands	r2, r1
 8005e44:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e50:	4b2c      	ldr	r3, [pc, #176]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e54:	2203      	movs	r2, #3
 8005e56:	4393      	bics	r3, r2
 8005e58:	0019      	movs	r1, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	4b29      	ldr	r3, [pc, #164]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e60:	430a      	orrs	r2, r1
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e6e:	4b25      	ldr	r3, [pc, #148]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	4a2a      	ldr	r2, [pc, #168]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	0019      	movs	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	2380      	movs	r3, #128	@ 0x80
 8005e88:	01db      	lsls	r3, r3, #7
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d015      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	0899      	lsrs	r1, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	2380      	movs	r3, #128	@ 0x80
 8005ea6:	05db      	lsls	r3, r3, #23
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d106      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005eac:	4b15      	ldr	r3, [pc, #84]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	4b14      	ldr	r3, [pc, #80]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eb2:	2180      	movs	r1, #128	@ 0x80
 8005eb4:	0249      	lsls	r1, r1, #9
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	2380      	movs	r3, #128	@ 0x80
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d016      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	4a15      	ldr	r2, [pc, #84]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	2380      	movs	r3, #128	@ 0x80
 8005ee0:	01db      	lsls	r3, r3, #7
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ee6:	4b07      	ldr	r3, [pc, #28]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eec:	2180      	movs	r1, #128	@ 0x80
 8005eee:	0249      	lsls	r1, r1, #9
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005ef4:	2312      	movs	r3, #18
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	781b      	ldrb	r3, [r3, #0]
}
 8005efa:	0018      	movs	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b006      	add	sp, #24
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40007000 	.word	0x40007000
 8005f0c:	fffffcff 	.word	0xfffffcff
 8005f10:	fffeffff 	.word	0xfffeffff
 8005f14:	00001388 	.word	0x00001388
 8005f18:	efffffff 	.word	0xefffffff
 8005f1c:	ffffcfff 	.word	0xffffcfff
 8005f20:	ffff3fff 	.word	0xffff3fff

08005f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e046      	b.n	8005fc4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2288      	movs	r2, #136	@ 0x88
 8005f3a:	589b      	ldr	r3, [r3, r2]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2284      	movs	r2, #132	@ 0x84
 8005f44:	2100      	movs	r1, #0
 8005f46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f7fd f9d2 	bl	80032f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2288      	movs	r2, #136	@ 0x88
 8005f54:	2124      	movs	r1, #36	@ 0x24
 8005f56:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	438a      	bics	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 fa3a 	bl	80063ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f000 f8cc 	bl	8006118 <UART_SetConfig>
 8005f80:	0003      	movs	r3, r0
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e01c      	b.n	8005fc4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	490d      	ldr	r1, [pc, #52]	@ (8005fcc <HAL_UART_Init+0xa8>)
 8005f96:	400a      	ands	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	212a      	movs	r1, #42	@ 0x2a
 8005fa6:	438a      	bics	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 fac9 	bl	8006554 <UART_CheckIdleState>
 8005fc2:	0003      	movs	r3, r0
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	ffffb7ff 	.word	0xffffb7ff

08005fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	@ 0x28
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	1dbb      	adds	r3, r7, #6
 8005fde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2288      	movs	r2, #136	@ 0x88
 8005fe4:	589b      	ldr	r3, [r3, r2]
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d000      	beq.n	8005fec <HAL_UART_Transmit+0x1c>
 8005fea:	e090      	b.n	800610e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_UART_Transmit+0x2a>
 8005ff2:	1dbb      	adds	r3, r7, #6
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e088      	b.n	8006110 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	015b      	lsls	r3, r3, #5
 8006006:	429a      	cmp	r2, r3
 8006008:	d109      	bne.n	800601e <HAL_UART_Transmit+0x4e>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d105      	bne.n	800601e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2201      	movs	r2, #1
 8006016:	4013      	ands	r3, r2
 8006018:	d001      	beq.n	800601e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e078      	b.n	8006110 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2290      	movs	r2, #144	@ 0x90
 8006022:	2100      	movs	r1, #0
 8006024:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2288      	movs	r2, #136	@ 0x88
 800602a:	2121      	movs	r1, #33	@ 0x21
 800602c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800602e:	f7fd fb5b 	bl	80036e8 <HAL_GetTick>
 8006032:	0003      	movs	r3, r0
 8006034:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1dba      	adds	r2, r7, #6
 800603a:	2154      	movs	r1, #84	@ 0x54
 800603c:	8812      	ldrh	r2, [r2, #0]
 800603e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1dba      	adds	r2, r7, #6
 8006044:	2156      	movs	r1, #86	@ 0x56
 8006046:	8812      	ldrh	r2, [r2, #0]
 8006048:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	2380      	movs	r3, #128	@ 0x80
 8006050:	015b      	lsls	r3, r3, #5
 8006052:	429a      	cmp	r2, r3
 8006054:	d108      	bne.n	8006068 <HAL_UART_Transmit+0x98>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e003      	b.n	8006070 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006070:	e030      	b.n	80060d4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	0013      	movs	r3, r2
 800607c:	2200      	movs	r2, #0
 800607e:	2180      	movs	r1, #128	@ 0x80
 8006080:	f000 fb12 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8006084:	1e03      	subs	r3, r0, #0
 8006086:	d005      	beq.n	8006094 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2288      	movs	r2, #136	@ 0x88
 800608c:	2120      	movs	r1, #32
 800608e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e03d      	b.n	8006110 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	001a      	movs	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	05d2      	lsls	r2, r2, #23
 80060a6:	0dd2      	lsrs	r2, r2, #23
 80060a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	3302      	adds	r3, #2
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e007      	b.n	80060c2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2256      	movs	r2, #86	@ 0x56
 80060c6:	5a9b      	ldrh	r3, [r3, r2]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b299      	uxth	r1, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2256      	movs	r2, #86	@ 0x56
 80060d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2256      	movs	r2, #86	@ 0x56
 80060d8:	5a9b      	ldrh	r3, [r3, r2]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1c8      	bne.n	8006072 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	0013      	movs	r3, r2
 80060ea:	2200      	movs	r2, #0
 80060ec:	2140      	movs	r1, #64	@ 0x40
 80060ee:	f000 fadb 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 80060f2:	1e03      	subs	r3, r0, #0
 80060f4:	d005      	beq.n	8006102 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2288      	movs	r2, #136	@ 0x88
 80060fa:	2120      	movs	r1, #32
 80060fc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e006      	b.n	8006110 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2288      	movs	r2, #136	@ 0x88
 8006106:	2120      	movs	r1, #32
 8006108:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e000      	b.n	8006110 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800610e:	2302      	movs	r3, #2
  }
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b008      	add	sp, #32
 8006116:	bd80      	pop	{r7, pc}

08006118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006120:	231a      	movs	r3, #26
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	4313      	orrs	r3, r2
 800613e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4aa1      	ldr	r2, [pc, #644]	@ (80063cc <UART_SetConfig+0x2b4>)
 8006148:	4013      	ands	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a9c      	ldr	r2, [pc, #624]	@ (80063d0 <UART_SetConfig+0x2b8>)
 800615e:	4013      	ands	r3, r2
 8006160:	0019      	movs	r1, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	4313      	orrs	r3, r2
 800617c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4a93      	ldr	r2, [pc, #588]	@ (80063d4 <UART_SetConfig+0x2bc>)
 8006186:	4013      	ands	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	220f      	movs	r2, #15
 800619c:	4393      	bics	r3, r2
 800619e:	0019      	movs	r1, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a89      	ldr	r2, [pc, #548]	@ (80063d8 <UART_SetConfig+0x2c0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d127      	bne.n	8006206 <UART_SetConfig+0xee>
 80061b6:	4b89      	ldr	r3, [pc, #548]	@ (80063dc <UART_SetConfig+0x2c4>)
 80061b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ba:	2203      	movs	r2, #3
 80061bc:	4013      	ands	r3, r2
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d017      	beq.n	80061f2 <UART_SetConfig+0xda>
 80061c2:	d81b      	bhi.n	80061fc <UART_SetConfig+0xe4>
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d00a      	beq.n	80061de <UART_SetConfig+0xc6>
 80061c8:	d818      	bhi.n	80061fc <UART_SetConfig+0xe4>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <UART_SetConfig+0xbc>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d00a      	beq.n	80061e8 <UART_SetConfig+0xd0>
 80061d2:	e013      	b.n	80061fc <UART_SetConfig+0xe4>
 80061d4:	231b      	movs	r3, #27
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e021      	b.n	8006222 <UART_SetConfig+0x10a>
 80061de:	231b      	movs	r3, #27
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	2202      	movs	r2, #2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e01c      	b.n	8006222 <UART_SetConfig+0x10a>
 80061e8:	231b      	movs	r3, #27
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	2204      	movs	r2, #4
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e017      	b.n	8006222 <UART_SetConfig+0x10a>
 80061f2:	231b      	movs	r3, #27
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	2208      	movs	r2, #8
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	e012      	b.n	8006222 <UART_SetConfig+0x10a>
 80061fc:	231b      	movs	r3, #27
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2210      	movs	r2, #16
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	e00d      	b.n	8006222 <UART_SetConfig+0x10a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a75      	ldr	r2, [pc, #468]	@ (80063e0 <UART_SetConfig+0x2c8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d104      	bne.n	800621a <UART_SetConfig+0x102>
 8006210:	231b      	movs	r3, #27
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	e003      	b.n	8006222 <UART_SetConfig+0x10a>
 800621a:	231b      	movs	r3, #27
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	2210      	movs	r2, #16
 8006220:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	2380      	movs	r3, #128	@ 0x80
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	429a      	cmp	r2, r3
 800622c:	d000      	beq.n	8006230 <UART_SetConfig+0x118>
 800622e:	e065      	b.n	80062fc <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8006230:	231b      	movs	r3, #27
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b08      	cmp	r3, #8
 8006238:	d015      	beq.n	8006266 <UART_SetConfig+0x14e>
 800623a:	dc18      	bgt.n	800626e <UART_SetConfig+0x156>
 800623c:	2b04      	cmp	r3, #4
 800623e:	d00d      	beq.n	800625c <UART_SetConfig+0x144>
 8006240:	dc15      	bgt.n	800626e <UART_SetConfig+0x156>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <UART_SetConfig+0x134>
 8006246:	2b02      	cmp	r3, #2
 8006248:	d005      	beq.n	8006256 <UART_SetConfig+0x13e>
 800624a:	e010      	b.n	800626e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7ff fd2e 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8006250:	0003      	movs	r3, r0
 8006252:	617b      	str	r3, [r7, #20]
        break;
 8006254:	e012      	b.n	800627c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006256:	4b63      	ldr	r3, [pc, #396]	@ (80063e4 <UART_SetConfig+0x2cc>)
 8006258:	617b      	str	r3, [r7, #20]
        break;
 800625a:	e00f      	b.n	800627c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625c:	f7ff fc9a 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8006260:	0003      	movs	r3, r0
 8006262:	617b      	str	r3, [r7, #20]
        break;
 8006264:	e00a      	b.n	800627c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	2380      	movs	r3, #128	@ 0x80
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	617b      	str	r3, [r7, #20]
        break;
 800626c:	e006      	b.n	800627c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006272:	231a      	movs	r3, #26
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
        break;
 800627a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d100      	bne.n	8006284 <UART_SetConfig+0x16c>
 8006282:	e08d      	b.n	80063a0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006288:	4b57      	ldr	r3, [pc, #348]	@ (80063e8 <UART_SetConfig+0x2d0>)
 800628a:	0052      	lsls	r2, r2, #1
 800628c:	5ad3      	ldrh	r3, [r2, r3]
 800628e:	0019      	movs	r1, r3
 8006290:	6978      	ldr	r0, [r7, #20]
 8006292:	f7f9 ff51 	bl	8000138 <__udivsi3>
 8006296:	0003      	movs	r3, r0
 8006298:	005a      	lsls	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	18d2      	adds	r2, r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	0019      	movs	r1, r3
 80062a8:	0010      	movs	r0, r2
 80062aa:	f7f9 ff45 	bl	8000138 <__udivsi3>
 80062ae:	0003      	movs	r3, r0
 80062b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d91c      	bls.n	80062f2 <UART_SetConfig+0x1da>
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	2380      	movs	r3, #128	@ 0x80
 80062bc:	025b      	lsls	r3, r3, #9
 80062be:	429a      	cmp	r2, r3
 80062c0:	d217      	bcs.n	80062f2 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	200e      	movs	r0, #14
 80062c8:	183b      	adds	r3, r7, r0
 80062ca:	210f      	movs	r1, #15
 80062cc:	438a      	bics	r2, r1
 80062ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2207      	movs	r2, #7
 80062d8:	4013      	ands	r3, r2
 80062da:	b299      	uxth	r1, r3
 80062dc:	183b      	adds	r3, r7, r0
 80062de:	183a      	adds	r2, r7, r0
 80062e0:	8812      	ldrh	r2, [r2, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	183a      	adds	r2, r7, r0
 80062ec:	8812      	ldrh	r2, [r2, #0]
 80062ee:	60da      	str	r2, [r3, #12]
 80062f0:	e056      	b.n	80063a0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80062f2:	231a      	movs	r3, #26
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e051      	b.n	80063a0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062fc:	231b      	movs	r3, #27
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b08      	cmp	r3, #8
 8006304:	d015      	beq.n	8006332 <UART_SetConfig+0x21a>
 8006306:	dc18      	bgt.n	800633a <UART_SetConfig+0x222>
 8006308:	2b04      	cmp	r3, #4
 800630a:	d00d      	beq.n	8006328 <UART_SetConfig+0x210>
 800630c:	dc15      	bgt.n	800633a <UART_SetConfig+0x222>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <UART_SetConfig+0x200>
 8006312:	2b02      	cmp	r3, #2
 8006314:	d005      	beq.n	8006322 <UART_SetConfig+0x20a>
 8006316:	e010      	b.n	800633a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7ff fcc8 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 800631c:	0003      	movs	r3, r0
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e012      	b.n	8006348 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006322:	4b30      	ldr	r3, [pc, #192]	@ (80063e4 <UART_SetConfig+0x2cc>)
 8006324:	617b      	str	r3, [r7, #20]
        break;
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006328:	f7ff fc34 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 800632c:	0003      	movs	r3, r0
 800632e:	617b      	str	r3, [r7, #20]
        break;
 8006330:	e00a      	b.n	8006348 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006332:	2380      	movs	r3, #128	@ 0x80
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	617b      	str	r3, [r7, #20]
        break;
 8006338:	e006      	b.n	8006348 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800633e:	231a      	movs	r3, #26
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
        break;
 8006346:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d028      	beq.n	80063a0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006352:	4b25      	ldr	r3, [pc, #148]	@ (80063e8 <UART_SetConfig+0x2d0>)
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	5ad3      	ldrh	r3, [r2, r3]
 8006358:	0019      	movs	r1, r3
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	f7f9 feec 	bl	8000138 <__udivsi3>
 8006360:	0003      	movs	r3, r0
 8006362:	001a      	movs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	18d2      	adds	r2, r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	0019      	movs	r1, r3
 8006372:	0010      	movs	r0, r2
 8006374:	f7f9 fee0 	bl	8000138 <__udivsi3>
 8006378:	0003      	movs	r3, r0
 800637a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d90a      	bls.n	8006398 <UART_SetConfig+0x280>
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	2380      	movs	r3, #128	@ 0x80
 8006386:	025b      	lsls	r3, r3, #9
 8006388:	429a      	cmp	r2, r3
 800638a:	d205      	bcs.n	8006398 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e003      	b.n	80063a0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006398:	231a      	movs	r3, #26
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	226a      	movs	r2, #106	@ 0x6a
 80063a4:	2101      	movs	r1, #1
 80063a6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2268      	movs	r2, #104	@ 0x68
 80063ac:	2101      	movs	r1, #1
 80063ae:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063bc:	231a      	movs	r3, #26
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	781b      	ldrb	r3, [r3, #0]
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b008      	add	sp, #32
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	cfff69f3 	.word	0xcfff69f3
 80063d0:	ffffcfff 	.word	0xffffcfff
 80063d4:	11fff4ff 	.word	0x11fff4ff
 80063d8:	40013800 	.word	0x40013800
 80063dc:	40021000 	.word	0x40021000
 80063e0:	40004400 	.word	0x40004400
 80063e4:	00f42400 	.word	0x00f42400
 80063e8:	0800cd04 	.word	0x0800cd04

080063ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	2208      	movs	r2, #8
 80063fa:	4013      	ands	r3, r2
 80063fc:	d00b      	beq.n	8006416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a4a      	ldr	r2, [pc, #296]	@ (8006530 <UART_AdvFeatureConfig+0x144>)
 8006406:	4013      	ands	r3, r2
 8006408:	0019      	movs	r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	2201      	movs	r2, #1
 800641c:	4013      	ands	r3, r2
 800641e:	d00b      	beq.n	8006438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <UART_AdvFeatureConfig+0x148>)
 8006428:	4013      	ands	r3, r2
 800642a:	0019      	movs	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	2202      	movs	r2, #2
 800643e:	4013      	ands	r3, r2
 8006440:	d00b      	beq.n	800645a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a3b      	ldr	r2, [pc, #236]	@ (8006538 <UART_AdvFeatureConfig+0x14c>)
 800644a:	4013      	ands	r3, r2
 800644c:	0019      	movs	r1, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645e:	2204      	movs	r2, #4
 8006460:	4013      	ands	r3, r2
 8006462:	d00b      	beq.n	800647c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4a34      	ldr	r2, [pc, #208]	@ (800653c <UART_AdvFeatureConfig+0x150>)
 800646c:	4013      	ands	r3, r2
 800646e:	0019      	movs	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	2210      	movs	r2, #16
 8006482:	4013      	ands	r3, r2
 8006484:	d00b      	beq.n	800649e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a2c      	ldr	r2, [pc, #176]	@ (8006540 <UART_AdvFeatureConfig+0x154>)
 800648e:	4013      	ands	r3, r2
 8006490:	0019      	movs	r1, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	2220      	movs	r2, #32
 80064a4:	4013      	ands	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4a25      	ldr	r2, [pc, #148]	@ (8006544 <UART_AdvFeatureConfig+0x158>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c4:	2240      	movs	r2, #64	@ 0x40
 80064c6:	4013      	ands	r3, r2
 80064c8:	d01d      	beq.n	8006506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <UART_AdvFeatureConfig+0x15c>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	0019      	movs	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064e6:	2380      	movs	r3, #128	@ 0x80
 80064e8:	035b      	lsls	r3, r3, #13
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d10b      	bne.n	8006506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a15      	ldr	r2, [pc, #84]	@ (800654c <UART_AdvFeatureConfig+0x160>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	0019      	movs	r1, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	2280      	movs	r2, #128	@ 0x80
 800650c:	4013      	ands	r3, r2
 800650e:	d00b      	beq.n	8006528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a0e      	ldr	r2, [pc, #56]	@ (8006550 <UART_AdvFeatureConfig+0x164>)
 8006518:	4013      	ands	r3, r2
 800651a:	0019      	movs	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  }
}
 8006528:	46c0      	nop			@ (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b002      	add	sp, #8
 800652e:	bd80      	pop	{r7, pc}
 8006530:	ffff7fff 	.word	0xffff7fff
 8006534:	fffdffff 	.word	0xfffdffff
 8006538:	fffeffff 	.word	0xfffeffff
 800653c:	fffbffff 	.word	0xfffbffff
 8006540:	ffffefff 	.word	0xffffefff
 8006544:	ffffdfff 	.word	0xffffdfff
 8006548:	ffefffff 	.word	0xffefffff
 800654c:	ff9fffff 	.word	0xff9fffff
 8006550:	fff7ffff 	.word	0xfff7ffff

08006554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b092      	sub	sp, #72	@ 0x48
 8006558:	af02      	add	r7, sp, #8
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2290      	movs	r2, #144	@ 0x90
 8006560:	2100      	movs	r1, #0
 8006562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006564:	f7fd f8c0 	bl	80036e8 <HAL_GetTick>
 8006568:	0003      	movs	r3, r0
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2208      	movs	r2, #8
 8006574:	4013      	ands	r3, r2
 8006576:	2b08      	cmp	r3, #8
 8006578:	d12d      	bne.n	80065d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	2280      	movs	r2, #128	@ 0x80
 800657e:	0391      	lsls	r1, r2, #14
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4a47      	ldr	r2, [pc, #284]	@ (80066a0 <UART_CheckIdleState+0x14c>)
 8006584:	9200      	str	r2, [sp, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	f000 f88e 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 800658c:	1e03      	subs	r3, r0, #0
 800658e:	d022      	beq.n	80065d6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006590:	f3ef 8310 	mrs	r3, PRIMASK
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800659a:	2301      	movs	r3, #1
 800659c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	46c0      	nop			@ (mov r8, r8)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2180      	movs	r1, #128	@ 0x80
 80065b2:	438a      	bics	r2, r1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	f383 8810 	msr	PRIMASK, r3
}
 80065c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2288      	movs	r2, #136	@ 0x88
 80065c6:	2120      	movs	r1, #32
 80065c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2284      	movs	r2, #132	@ 0x84
 80065ce:	2100      	movs	r1, #0
 80065d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e060      	b.n	8006698 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2204      	movs	r2, #4
 80065de:	4013      	ands	r3, r2
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d146      	bne.n	8006672 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e6:	2280      	movs	r2, #128	@ 0x80
 80065e8:	03d1      	lsls	r1, r2, #15
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4a2c      	ldr	r2, [pc, #176]	@ (80066a0 <UART_CheckIdleState+0x14c>)
 80065ee:	9200      	str	r2, [sp, #0]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f000 f859 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 80065f6:	1e03      	subs	r3, r0, #0
 80065f8:	d03b      	beq.n	8006672 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fa:	f3ef 8310 	mrs	r3, PRIMASK
 80065fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006600:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	2301      	movs	r3, #1
 8006606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f383 8810 	msr	PRIMASK, r3
}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4922      	ldr	r1, [pc, #136]	@ (80066a4 <UART_CheckIdleState+0x150>)
 800661c:	400a      	ands	r2, r1
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f383 8810 	msr	PRIMASK, r3
}
 800662a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662c:	f3ef 8310 	mrs	r3, PRIMASK
 8006630:	61bb      	str	r3, [r7, #24]
  return(result);
 8006632:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30
 8006636:	2301      	movs	r3, #1
 8006638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f383 8810 	msr	PRIMASK, r3
}
 8006640:	46c0      	nop			@ (mov r8, r8)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2101      	movs	r1, #1
 800664e:	438a      	bics	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	f383 8810 	msr	PRIMASK, r3
}
 800665c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	228c      	movs	r2, #140	@ 0x8c
 8006662:	2120      	movs	r1, #32
 8006664:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2284      	movs	r2, #132	@ 0x84
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e012      	b.n	8006698 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2288      	movs	r2, #136	@ 0x88
 8006676:	2120      	movs	r1, #32
 8006678:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	228c      	movs	r2, #140	@ 0x8c
 800667e:	2120      	movs	r1, #32
 8006680:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2284      	movs	r2, #132	@ 0x84
 8006692:	2100      	movs	r1, #0
 8006694:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	0018      	movs	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	b010      	add	sp, #64	@ 0x40
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	01ffffff 	.word	0x01ffffff
 80066a4:	fffffedf 	.word	0xfffffedf

080066a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	e051      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	3301      	adds	r3, #1
 80066be:	d04e      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c0:	f7fd f812 	bl	80036e8 <HAL_GetTick>
 80066c4:	0002      	movs	r2, r0
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e051      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2204      	movs	r2, #4
 80066e2:	4013      	ands	r3, r2
 80066e4:	d03b      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0xb6>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b80      	cmp	r3, #128	@ 0x80
 80066ea:	d038      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0xb6>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b40      	cmp	r3, #64	@ 0x40
 80066f0:	d035      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	2208      	movs	r2, #8
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d111      	bne.n	8006724 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2208      	movs	r2, #8
 8006706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	0018      	movs	r0, r3
 800670c:	f000 f83c 	bl	8006788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2290      	movs	r2, #144	@ 0x90
 8006714:	2108      	movs	r1, #8
 8006716:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2284      	movs	r2, #132	@ 0x84
 800671c:	2100      	movs	r1, #0
 800671e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e02c      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	69da      	ldr	r2, [r3, #28]
 800672a:	2380      	movs	r3, #128	@ 0x80
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	401a      	ands	r2, r3
 8006730:	2380      	movs	r3, #128	@ 0x80
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	429a      	cmp	r2, r3
 8006736:	d112      	bne.n	800675e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2280      	movs	r2, #128	@ 0x80
 800673e:	0112      	lsls	r2, r2, #4
 8006740:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	0018      	movs	r0, r3
 8006746:	f000 f81f 	bl	8006788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2290      	movs	r2, #144	@ 0x90
 800674e:	2120      	movs	r1, #32
 8006750:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2284      	movs	r2, #132	@ 0x84
 8006756:	2100      	movs	r1, #0
 8006758:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e00f      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	4013      	ands	r3, r2
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	425a      	negs	r2, r3
 800676e:	4153      	adcs	r3, r2
 8006770:	b2db      	uxtb	r3, r3
 8006772:	001a      	movs	r2, r3
 8006774:	1dfb      	adds	r3, r7, #7
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d09e      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b004      	add	sp, #16
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08e      	sub	sp, #56	@ 0x38
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006790:	f3ef 8310 	mrs	r3, PRIMASK
 8006794:	617b      	str	r3, [r7, #20]
  return(result);
 8006796:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
 800679a:	2301      	movs	r3, #1
 800679c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f383 8810 	msr	PRIMASK, r3
}
 80067a4:	46c0      	nop			@ (mov r8, r8)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4926      	ldr	r1, [pc, #152]	@ (800684c <UART_EndRxTransfer+0xc4>)
 80067b2:	400a      	ands	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f383 8810 	msr	PRIMASK, r3
}
 80067c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c2:	f3ef 8310 	mrs	r3, PRIMASK
 80067c6:	623b      	str	r3, [r7, #32]
  return(result);
 80067c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80067cc:	2301      	movs	r3, #1
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	f383 8810 	msr	PRIMASK, r3
}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	491b      	ldr	r1, [pc, #108]	@ (8006850 <UART_EndRxTransfer+0xc8>)
 80067e4:	400a      	ands	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	f383 8810 	msr	PRIMASK, r3
}
 80067f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d118      	bne.n	800682e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006800:	60bb      	str	r3, [r7, #8]
  return(result);
 8006802:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006806:	2301      	movs	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f383 8810 	msr	PRIMASK, r3
}
 8006810:	46c0      	nop			@ (mov r8, r8)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2110      	movs	r1, #16
 800681e:	438a      	bics	r2, r1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f383 8810 	msr	PRIMASK, r3
}
 800682c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	228c      	movs	r2, #140	@ 0x8c
 8006832:	2120      	movs	r1, #32
 8006834:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	46bd      	mov	sp, r7
 8006846:	b00e      	add	sp, #56	@ 0x38
 8006848:	bd80      	pop	{r7, pc}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	fffffedf 	.word	0xfffffedf
 8006850:	effffffe 	.word	0xeffffffe

08006854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2284      	movs	r2, #132	@ 0x84
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_UARTEx_DisableFifoMode+0x16>
 8006866:	2302      	movs	r3, #2
 8006868:	e027      	b.n	80068ba <HAL_UARTEx_DisableFifoMode+0x66>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2284      	movs	r2, #132	@ 0x84
 800686e:	2101      	movs	r1, #1
 8006870:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2288      	movs	r2, #136	@ 0x88
 8006876:	2124      	movs	r1, #36	@ 0x24
 8006878:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2101      	movs	r1, #1
 800688e:	438a      	bics	r2, r1
 8006890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a0b      	ldr	r2, [pc, #44]	@ (80068c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006896:	4013      	ands	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2288      	movs	r2, #136	@ 0x88
 80068ac:	2120      	movs	r1, #32
 80068ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2284      	movs	r2, #132	@ 0x84
 80068b4:	2100      	movs	r1, #0
 80068b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	0018      	movs	r0, r3
 80068bc:	46bd      	mov	sp, r7
 80068be:	b004      	add	sp, #16
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			@ (mov r8, r8)
 80068c4:	dfffffff 	.word	0xdfffffff

080068c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2284      	movs	r2, #132	@ 0x84
 80068d6:	5c9b      	ldrb	r3, [r3, r2]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068dc:	2302      	movs	r3, #2
 80068de:	e02e      	b.n	800693e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2284      	movs	r2, #132	@ 0x84
 80068e4:	2101      	movs	r1, #1
 80068e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2288      	movs	r2, #136	@ 0x88
 80068ec:	2124      	movs	r1, #36	@ 0x24
 80068ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2101      	movs	r1, #1
 8006904:	438a      	bics	r2, r1
 8006906:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	08d9      	lsrs	r1, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0018      	movs	r0, r3
 8006920:	f000 f854 	bl	80069cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2288      	movs	r2, #136	@ 0x88
 8006930:	2120      	movs	r1, #32
 8006932:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2284      	movs	r2, #132	@ 0x84
 8006938:	2100      	movs	r1, #0
 800693a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	0018      	movs	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	b004      	add	sp, #16
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2284      	movs	r2, #132	@ 0x84
 8006956:	5c9b      	ldrb	r3, [r3, r2]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e02f      	b.n	80069c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2284      	movs	r2, #132	@ 0x84
 8006964:	2101      	movs	r1, #1
 8006966:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2288      	movs	r2, #136	@ 0x88
 800696c:	2124      	movs	r1, #36	@ 0x24
 800696e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2101      	movs	r1, #1
 8006984:	438a      	bics	r2, r1
 8006986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	4a0e      	ldr	r2, [pc, #56]	@ (80069c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006990:	4013      	ands	r3, r2
 8006992:	0019      	movs	r1, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f000 f813 	bl	80069cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2288      	movs	r2, #136	@ 0x88
 80069b2:	2120      	movs	r1, #32
 80069b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2284      	movs	r2, #132	@ 0x84
 80069ba:	2100      	movs	r1, #0
 80069bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b004      	add	sp, #16
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	f1ffffff 	.word	0xf1ffffff

080069cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d108      	bne.n	80069ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	226a      	movs	r2, #106	@ 0x6a
 80069e0:	2101      	movs	r1, #1
 80069e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2268      	movs	r2, #104	@ 0x68
 80069e8:	2101      	movs	r1, #1
 80069ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069ec:	e043      	b.n	8006a76 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069ee:	260f      	movs	r6, #15
 80069f0:	19bb      	adds	r3, r7, r6
 80069f2:	2208      	movs	r2, #8
 80069f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069f6:	200e      	movs	r0, #14
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	2208      	movs	r2, #8
 80069fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	0e5b      	lsrs	r3, r3, #25
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	240d      	movs	r4, #13
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	2107      	movs	r1, #7
 8006a0e:	400a      	ands	r2, r1
 8006a10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0f5b      	lsrs	r3, r3, #29
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	250c      	movs	r5, #12
 8006a1e:	197b      	adds	r3, r7, r5
 8006a20:	2107      	movs	r1, #7
 8006a22:	400a      	ands	r2, r1
 8006a24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a26:	183b      	adds	r3, r7, r0
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	197a      	adds	r2, r7, r5
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	4914      	ldr	r1, [pc, #80]	@ (8006a80 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a30:	5c8a      	ldrb	r2, [r1, r2]
 8006a32:	435a      	muls	r2, r3
 8006a34:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a36:	197b      	adds	r3, r7, r5
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4a12      	ldr	r2, [pc, #72]	@ (8006a84 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a3e:	0019      	movs	r1, r3
 8006a40:	f7f9 fc04 	bl	800024c <__divsi3>
 8006a44:	0003      	movs	r3, r0
 8006a46:	b299      	uxth	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	226a      	movs	r2, #106	@ 0x6a
 8006a4c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a4e:	19bb      	adds	r3, r7, r6
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	193a      	adds	r2, r7, r4
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	490a      	ldr	r1, [pc, #40]	@ (8006a80 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a58:	5c8a      	ldrb	r2, [r1, r2]
 8006a5a:	435a      	muls	r2, r3
 8006a5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a5e:	193b      	adds	r3, r7, r4
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	4a08      	ldr	r2, [pc, #32]	@ (8006a84 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a66:	0019      	movs	r1, r3
 8006a68:	f7f9 fbf0 	bl	800024c <__divsi3>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2268      	movs	r2, #104	@ 0x68
 8006a74:	5299      	strh	r1, [r3, r2]
}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b005      	add	sp, #20
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	0800cd1c 	.word	0x0800cd1c
 8006a84:	0800cd24 	.word	0x0800cd24

08006a88 <__cvt>:
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	001f      	movs	r7, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	0016      	movs	r6, r2
 8006a90:	b08b      	sub	sp, #44	@ 0x2c
 8006a92:	429f      	cmp	r7, r3
 8006a94:	da04      	bge.n	8006aa0 <__cvt+0x18>
 8006a96:	2180      	movs	r1, #128	@ 0x80
 8006a98:	0609      	lsls	r1, r1, #24
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	001f      	movs	r7, r3
 8006a9e:	232d      	movs	r3, #45	@ 0x2d
 8006aa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006aa2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006aa4:	7013      	strb	r3, [r2, #0]
 8006aa6:	2320      	movs	r3, #32
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	439d      	bics	r5, r3
 8006aac:	2d46      	cmp	r5, #70	@ 0x46
 8006aae:	d007      	beq.n	8006ac0 <__cvt+0x38>
 8006ab0:	002b      	movs	r3, r5
 8006ab2:	3b45      	subs	r3, #69	@ 0x45
 8006ab4:	4259      	negs	r1, r3
 8006ab6:	414b      	adcs	r3, r1
 8006ab8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006aba:	3a01      	subs	r2, #1
 8006abc:	18cb      	adds	r3, r1, r3
 8006abe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ac0:	ab09      	add	r3, sp, #36	@ 0x24
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	ab08      	add	r3, sp, #32
 8006ac6:	9303      	str	r3, [sp, #12]
 8006ac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006aca:	9200      	str	r2, [sp, #0]
 8006acc:	9302      	str	r3, [sp, #8]
 8006ace:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ad0:	0032      	movs	r2, r6
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	003b      	movs	r3, r7
 8006ad6:	f001 f8ed 	bl	8007cb4 <_dtoa_r>
 8006ada:	0004      	movs	r4, r0
 8006adc:	2d47      	cmp	r5, #71	@ 0x47
 8006ade:	d11b      	bne.n	8006b18 <__cvt+0x90>
 8006ae0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ae2:	07db      	lsls	r3, r3, #31
 8006ae4:	d511      	bpl.n	8006b0a <__cvt+0x82>
 8006ae6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ae8:	18c3      	adds	r3, r0, r3
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	0030      	movs	r0, r6
 8006af2:	0039      	movs	r1, r7
 8006af4:	f7f9 fca6 	bl	8000444 <__aeabi_dcmpeq>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d001      	beq.n	8006b00 <__cvt+0x78>
 8006afc:	9b07      	ldr	r3, [sp, #28]
 8006afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b00:	2230      	movs	r2, #48	@ 0x30
 8006b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b04:	9907      	ldr	r1, [sp, #28]
 8006b06:	428b      	cmp	r3, r1
 8006b08:	d320      	bcc.n	8006b4c <__cvt+0xc4>
 8006b0a:	0020      	movs	r0, r4
 8006b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006b10:	1b1b      	subs	r3, r3, r4
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	b00b      	add	sp, #44	@ 0x2c
 8006b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b1a:	18c3      	adds	r3, r0, r3
 8006b1c:	9307      	str	r3, [sp, #28]
 8006b1e:	2d46      	cmp	r5, #70	@ 0x46
 8006b20:	d1e4      	bne.n	8006aec <__cvt+0x64>
 8006b22:	7803      	ldrb	r3, [r0, #0]
 8006b24:	2b30      	cmp	r3, #48	@ 0x30
 8006b26:	d10c      	bne.n	8006b42 <__cvt+0xba>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	0030      	movs	r0, r6
 8006b2e:	0039      	movs	r1, r7
 8006b30:	f7f9 fc88 	bl	8000444 <__aeabi_dcmpeq>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d104      	bne.n	8006b42 <__cvt+0xba>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b44:	9a07      	ldr	r2, [sp, #28]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	18d3      	adds	r3, r2, r3
 8006b4a:	e7ce      	b.n	8006aea <__cvt+0x62>
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e7d6      	b.n	8006b02 <__cvt+0x7a>

08006b54 <__exponent>:
 8006b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b56:	232b      	movs	r3, #43	@ 0x2b
 8006b58:	0005      	movs	r5, r0
 8006b5a:	000c      	movs	r4, r1
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	7002      	strb	r2, [r0, #0]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	da01      	bge.n	8006b68 <__exponent+0x14>
 8006b64:	424c      	negs	r4, r1
 8006b66:	3302      	adds	r3, #2
 8006b68:	706b      	strb	r3, [r5, #1]
 8006b6a:	2c09      	cmp	r4, #9
 8006b6c:	dd2c      	ble.n	8006bc8 <__exponent+0x74>
 8006b6e:	ab02      	add	r3, sp, #8
 8006b70:	1dde      	adds	r6, r3, #7
 8006b72:	0020      	movs	r0, r4
 8006b74:	210a      	movs	r1, #10
 8006b76:	f7f9 fc4f 	bl	8000418 <__aeabi_idivmod>
 8006b7a:	0037      	movs	r7, r6
 8006b7c:	3130      	adds	r1, #48	@ 0x30
 8006b7e:	3e01      	subs	r6, #1
 8006b80:	0020      	movs	r0, r4
 8006b82:	7031      	strb	r1, [r6, #0]
 8006b84:	210a      	movs	r1, #10
 8006b86:	9401      	str	r4, [sp, #4]
 8006b88:	f7f9 fb60 	bl	800024c <__divsi3>
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	0004      	movs	r4, r0
 8006b90:	2b63      	cmp	r3, #99	@ 0x63
 8006b92:	dcee      	bgt.n	8006b72 <__exponent+0x1e>
 8006b94:	1eba      	subs	r2, r7, #2
 8006b96:	1ca8      	adds	r0, r5, #2
 8006b98:	0001      	movs	r1, r0
 8006b9a:	0013      	movs	r3, r2
 8006b9c:	3430      	adds	r4, #48	@ 0x30
 8006b9e:	7014      	strb	r4, [r2, #0]
 8006ba0:	ac02      	add	r4, sp, #8
 8006ba2:	3407      	adds	r4, #7
 8006ba4:	429c      	cmp	r4, r3
 8006ba6:	d80a      	bhi.n	8006bbe <__exponent+0x6a>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	42a2      	cmp	r2, r4
 8006bac:	d803      	bhi.n	8006bb6 <__exponent+0x62>
 8006bae:	3309      	adds	r3, #9
 8006bb0:	aa02      	add	r2, sp, #8
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	1bdb      	subs	r3, r3, r7
 8006bb6:	18c0      	adds	r0, r0, r3
 8006bb8:	1b40      	subs	r0, r0, r5
 8006bba:	b005      	add	sp, #20
 8006bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bbe:	781c      	ldrb	r4, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	700c      	strb	r4, [r1, #0]
 8006bc4:	3101      	adds	r1, #1
 8006bc6:	e7eb      	b.n	8006ba0 <__exponent+0x4c>
 8006bc8:	2330      	movs	r3, #48	@ 0x30
 8006bca:	18e4      	adds	r4, r4, r3
 8006bcc:	70ab      	strb	r3, [r5, #2]
 8006bce:	1d28      	adds	r0, r5, #4
 8006bd0:	70ec      	strb	r4, [r5, #3]
 8006bd2:	e7f1      	b.n	8006bb8 <__exponent+0x64>

08006bd4 <_printf_float>:
 8006bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd6:	b097      	sub	sp, #92	@ 0x5c
 8006bd8:	000d      	movs	r5, r1
 8006bda:	920a      	str	r2, [sp, #40]	@ 0x28
 8006bdc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006be0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006be2:	f000 ff41 	bl	8007a68 <_localeconv_r>
 8006be6:	6803      	ldr	r3, [r0, #0]
 8006be8:	0018      	movs	r0, r3
 8006bea:	930d      	str	r3, [sp, #52]	@ 0x34
 8006bec:	f7f9 fa88 	bl	8000100 <strlen>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006bf4:	9314      	str	r3, [sp, #80]	@ 0x50
 8006bf6:	7e2b      	ldrb	r3, [r5, #24]
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	05c9      	lsls	r1, r1, #23
 8006c06:	d545      	bpl.n	8006c94 <_printf_float+0xc0>
 8006c08:	189b      	adds	r3, r3, r2
 8006c0a:	4393      	bics	r3, r2
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	3208      	adds	r2, #8
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	2201      	movs	r2, #1
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	685f      	ldr	r7, [r3, #4]
 8006c18:	007b      	lsls	r3, r7, #1
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c1e:	9610      	str	r6, [sp, #64]	@ 0x40
 8006c20:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006c22:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006c24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006c26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006c28:	4ba7      	ldr	r3, [pc, #668]	@ (8006ec8 <_printf_float+0x2f4>)
 8006c2a:	4252      	negs	r2, r2
 8006c2c:	f7fb fab2 	bl	8002194 <__aeabi_dcmpun>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d131      	bne.n	8006c98 <_printf_float+0xc4>
 8006c34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006c36:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4ba3      	ldr	r3, [pc, #652]	@ (8006ec8 <_printf_float+0x2f4>)
 8006c3c:	4252      	negs	r2, r2
 8006c3e:	f7f9 fc11 	bl	8000464 <__aeabi_dcmple>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d128      	bne.n	8006c98 <_printf_float+0xc4>
 8006c46:	2200      	movs	r2, #0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	0030      	movs	r0, r6
 8006c4c:	0039      	movs	r1, r7
 8006c4e:	f7f9 fbff 	bl	8000450 <__aeabi_dcmplt>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d003      	beq.n	8006c5e <_printf_float+0x8a>
 8006c56:	002b      	movs	r3, r5
 8006c58:	222d      	movs	r2, #45	@ 0x2d
 8006c5a:	3343      	adds	r3, #67	@ 0x43
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c60:	4f9a      	ldr	r7, [pc, #616]	@ (8006ecc <_printf_float+0x2f8>)
 8006c62:	2b47      	cmp	r3, #71	@ 0x47
 8006c64:	d900      	bls.n	8006c68 <_printf_float+0x94>
 8006c66:	4f9a      	ldr	r7, [pc, #616]	@ (8006ed0 <_printf_float+0x2fc>)
 8006c68:	2303      	movs	r3, #3
 8006c6a:	2400      	movs	r4, #0
 8006c6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c6e:	612b      	str	r3, [r5, #16]
 8006c70:	3301      	adds	r3, #1
 8006c72:	439a      	bics	r2, r3
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c78:	0029      	movs	r1, r5
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c80:	aa15      	add	r2, sp, #84	@ 0x54
 8006c82:	f000 f9e5 	bl	8007050 <_printf_common>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d000      	beq.n	8006c8c <_printf_float+0xb8>
 8006c8a:	e09f      	b.n	8006dcc <_printf_float+0x1f8>
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	4240      	negs	r0, r0
 8006c90:	b017      	add	sp, #92	@ 0x5c
 8006c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c94:	3307      	adds	r3, #7
 8006c96:	e7b8      	b.n	8006c0a <_printf_float+0x36>
 8006c98:	0032      	movs	r2, r6
 8006c9a:	003b      	movs	r3, r7
 8006c9c:	0030      	movs	r0, r6
 8006c9e:	0039      	movs	r1, r7
 8006ca0:	f7fb fa78 	bl	8002194 <__aeabi_dcmpun>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d00b      	beq.n	8006cc0 <_printf_float+0xec>
 8006ca8:	2f00      	cmp	r7, #0
 8006caa:	da03      	bge.n	8006cb4 <_printf_float+0xe0>
 8006cac:	002b      	movs	r3, r5
 8006cae:	222d      	movs	r2, #45	@ 0x2d
 8006cb0:	3343      	adds	r3, #67	@ 0x43
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cb6:	4f87      	ldr	r7, [pc, #540]	@ (8006ed4 <_printf_float+0x300>)
 8006cb8:	2b47      	cmp	r3, #71	@ 0x47
 8006cba:	d9d5      	bls.n	8006c68 <_printf_float+0x94>
 8006cbc:	4f86      	ldr	r7, [pc, #536]	@ (8006ed8 <_printf_float+0x304>)
 8006cbe:	e7d3      	b.n	8006c68 <_printf_float+0x94>
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006cc4:	686b      	ldr	r3, [r5, #4]
 8006cc6:	4394      	bics	r4, r2
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	d146      	bne.n	8006d5a <_printf_float+0x186>
 8006ccc:	3307      	adds	r3, #7
 8006cce:	606b      	str	r3, [r5, #4]
 8006cd0:	2380      	movs	r3, #128	@ 0x80
 8006cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	2200      	movs	r2, #0
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	9206      	str	r2, [sp, #24]
 8006cde:	aa14      	add	r2, sp, #80	@ 0x50
 8006ce0:	9205      	str	r2, [sp, #20]
 8006ce2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ce4:	a90a      	add	r1, sp, #40	@ 0x28
 8006ce6:	9204      	str	r2, [sp, #16]
 8006ce8:	aa13      	add	r2, sp, #76	@ 0x4c
 8006cea:	9203      	str	r2, [sp, #12]
 8006cec:	2223      	movs	r2, #35	@ 0x23
 8006cee:	1852      	adds	r2, r2, r1
 8006cf0:	9202      	str	r2, [sp, #8]
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	686b      	ldr	r3, [r5, #4]
 8006cf6:	0032      	movs	r2, r6
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cfc:	003b      	movs	r3, r7
 8006cfe:	f7ff fec3 	bl	8006a88 <__cvt>
 8006d02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d04:	0007      	movs	r7, r0
 8006d06:	2c47      	cmp	r4, #71	@ 0x47
 8006d08:	d12d      	bne.n	8006d66 <_printf_float+0x192>
 8006d0a:	1cd3      	adds	r3, r2, #3
 8006d0c:	db02      	blt.n	8006d14 <_printf_float+0x140>
 8006d0e:	686b      	ldr	r3, [r5, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	dd48      	ble.n	8006da6 <_printf_float+0x1d2>
 8006d14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d18:	3b02      	subs	r3, #2
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d1e:	0028      	movs	r0, r5
 8006d20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d22:	3901      	subs	r1, #1
 8006d24:	3050      	adds	r0, #80	@ 0x50
 8006d26:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006d28:	f7ff ff14 	bl	8006b54 <__exponent>
 8006d2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d2e:	0004      	movs	r4, r0
 8006d30:	1813      	adds	r3, r2, r0
 8006d32:	612b      	str	r3, [r5, #16]
 8006d34:	2a01      	cmp	r2, #1
 8006d36:	dc02      	bgt.n	8006d3e <_printf_float+0x16a>
 8006d38:	682a      	ldr	r2, [r5, #0]
 8006d3a:	07d2      	lsls	r2, r2, #31
 8006d3c:	d501      	bpl.n	8006d42 <_printf_float+0x16e>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	612b      	str	r3, [r5, #16]
 8006d42:	2323      	movs	r3, #35	@ 0x23
 8006d44:	aa0a      	add	r2, sp, #40	@ 0x28
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d100      	bne.n	8006d50 <_printf_float+0x17c>
 8006d4e:	e792      	b.n	8006c76 <_printf_float+0xa2>
 8006d50:	002b      	movs	r3, r5
 8006d52:	222d      	movs	r2, #45	@ 0x2d
 8006d54:	3343      	adds	r3, #67	@ 0x43
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e78d      	b.n	8006c76 <_printf_float+0xa2>
 8006d5a:	2c47      	cmp	r4, #71	@ 0x47
 8006d5c:	d1b8      	bne.n	8006cd0 <_printf_float+0xfc>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1b6      	bne.n	8006cd0 <_printf_float+0xfc>
 8006d62:	3301      	adds	r3, #1
 8006d64:	e7b3      	b.n	8006cce <_printf_float+0xfa>
 8006d66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d68:	0011      	movs	r1, r2
 8006d6a:	2b65      	cmp	r3, #101	@ 0x65
 8006d6c:	d9d7      	bls.n	8006d1e <_printf_float+0x14a>
 8006d6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d70:	2b66      	cmp	r3, #102	@ 0x66
 8006d72:	d11a      	bne.n	8006daa <_printf_float+0x1d6>
 8006d74:	686b      	ldr	r3, [r5, #4]
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	dd09      	ble.n	8006d8e <_printf_float+0x1ba>
 8006d7a:	612a      	str	r2, [r5, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <_printf_float+0x1b2>
 8006d80:	6829      	ldr	r1, [r5, #0]
 8006d82:	07c9      	lsls	r1, r1, #31
 8006d84:	d50b      	bpl.n	8006d9e <_printf_float+0x1ca>
 8006d86:	3301      	adds	r3, #1
 8006d88:	189b      	adds	r3, r3, r2
 8006d8a:	612b      	str	r3, [r5, #16]
 8006d8c:	e007      	b.n	8006d9e <_printf_float+0x1ca>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d103      	bne.n	8006d9a <_printf_float+0x1c6>
 8006d92:	2201      	movs	r2, #1
 8006d94:	6829      	ldr	r1, [r5, #0]
 8006d96:	4211      	tst	r1, r2
 8006d98:	d000      	beq.n	8006d9c <_printf_float+0x1c8>
 8006d9a:	1c9a      	adds	r2, r3, #2
 8006d9c:	612a      	str	r2, [r5, #16]
 8006d9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006da0:	2400      	movs	r4, #0
 8006da2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006da4:	e7cd      	b.n	8006d42 <_printf_float+0x16e>
 8006da6:	2367      	movs	r3, #103	@ 0x67
 8006da8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006daa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dae:	4299      	cmp	r1, r3
 8006db0:	db06      	blt.n	8006dc0 <_printf_float+0x1ec>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	6129      	str	r1, [r5, #16]
 8006db6:	07db      	lsls	r3, r3, #31
 8006db8:	d5f1      	bpl.n	8006d9e <_printf_float+0x1ca>
 8006dba:	3101      	adds	r1, #1
 8006dbc:	6129      	str	r1, [r5, #16]
 8006dbe:	e7ee      	b.n	8006d9e <_printf_float+0x1ca>
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	dce0      	bgt.n	8006d88 <_printf_float+0x1b4>
 8006dc6:	1892      	adds	r2, r2, r2
 8006dc8:	1a52      	subs	r2, r2, r1
 8006dca:	e7dd      	b.n	8006d88 <_printf_float+0x1b4>
 8006dcc:	682a      	ldr	r2, [r5, #0]
 8006dce:	0553      	lsls	r3, r2, #21
 8006dd0:	d408      	bmi.n	8006de4 <_printf_float+0x210>
 8006dd2:	692b      	ldr	r3, [r5, #16]
 8006dd4:	003a      	movs	r2, r7
 8006dd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dda:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ddc:	47a0      	blx	r4
 8006dde:	3001      	adds	r0, #1
 8006de0:	d129      	bne.n	8006e36 <_printf_float+0x262>
 8006de2:	e753      	b.n	8006c8c <_printf_float+0xb8>
 8006de4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006de6:	2b65      	cmp	r3, #101	@ 0x65
 8006de8:	d800      	bhi.n	8006dec <_printf_float+0x218>
 8006dea:	e0da      	b.n	8006fa2 <_printf_float+0x3ce>
 8006dec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006dee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006df0:	2200      	movs	r2, #0
 8006df2:	2300      	movs	r3, #0
 8006df4:	f7f9 fb26 	bl	8000444 <__aeabi_dcmpeq>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d033      	beq.n	8006e64 <_printf_float+0x290>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4a37      	ldr	r2, [pc, #220]	@ (8006edc <_printf_float+0x308>)
 8006e00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e06:	47a0      	blx	r4
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d100      	bne.n	8006e0e <_printf_float+0x23a>
 8006e0c:	e73e      	b.n	8006c8c <_printf_float+0xb8>
 8006e0e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006e10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e12:	42b3      	cmp	r3, r6
 8006e14:	db02      	blt.n	8006e1c <_printf_float+0x248>
 8006e16:	682b      	ldr	r3, [r5, #0]
 8006e18:	07db      	lsls	r3, r3, #31
 8006e1a:	d50c      	bpl.n	8006e36 <_printf_float+0x262>
 8006e1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e26:	47a0      	blx	r4
 8006e28:	2400      	movs	r4, #0
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d100      	bne.n	8006e30 <_printf_float+0x25c>
 8006e2e:	e72d      	b.n	8006c8c <_printf_float+0xb8>
 8006e30:	1e73      	subs	r3, r6, #1
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	dc0a      	bgt.n	8006e4c <_printf_float+0x278>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	079b      	lsls	r3, r3, #30
 8006e3a:	d500      	bpl.n	8006e3e <_printf_float+0x26a>
 8006e3c:	e105      	b.n	800704a <_printf_float+0x476>
 8006e3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e40:	68e8      	ldr	r0, [r5, #12]
 8006e42:	4298      	cmp	r0, r3
 8006e44:	db00      	blt.n	8006e48 <_printf_float+0x274>
 8006e46:	e723      	b.n	8006c90 <_printf_float+0xbc>
 8006e48:	0018      	movs	r0, r3
 8006e4a:	e721      	b.n	8006c90 <_printf_float+0xbc>
 8006e4c:	002a      	movs	r2, r5
 8006e4e:	2301      	movs	r3, #1
 8006e50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e54:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006e56:	321a      	adds	r2, #26
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d100      	bne.n	8006e60 <_printf_float+0x28c>
 8006e5e:	e715      	b.n	8006c8c <_printf_float+0xb8>
 8006e60:	3401      	adds	r4, #1
 8006e62:	e7e5      	b.n	8006e30 <_printf_float+0x25c>
 8006e64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dc3a      	bgt.n	8006ee0 <_printf_float+0x30c>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006edc <_printf_float+0x308>)
 8006e6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e74:	47a0      	blx	r4
 8006e76:	3001      	adds	r0, #1
 8006e78:	d100      	bne.n	8006e7c <_printf_float+0x2a8>
 8006e7a:	e707      	b.n	8006c8c <_printf_float+0xb8>
 8006e7c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006e7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e80:	4333      	orrs	r3, r6
 8006e82:	d102      	bne.n	8006e8a <_printf_float+0x2b6>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	07db      	lsls	r3, r3, #31
 8006e88:	d5d5      	bpl.n	8006e36 <_printf_float+0x262>
 8006e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e94:	47a0      	blx	r4
 8006e96:	2300      	movs	r3, #0
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d100      	bne.n	8006e9e <_printf_float+0x2ca>
 8006e9c:	e6f6      	b.n	8006c8c <_printf_float+0xb8>
 8006e9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ea0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ea2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ea4:	425b      	negs	r3, r3
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	dc01      	bgt.n	8006eae <_printf_float+0x2da>
 8006eaa:	0033      	movs	r3, r6
 8006eac:	e792      	b.n	8006dd4 <_printf_float+0x200>
 8006eae:	002a      	movs	r2, r5
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006eb8:	321a      	adds	r2, #26
 8006eba:	47a0      	blx	r4
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d100      	bne.n	8006ec2 <_printf_float+0x2ee>
 8006ec0:	e6e4      	b.n	8006c8c <_printf_float+0xb8>
 8006ec2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	e7ea      	b.n	8006e9e <_printf_float+0x2ca>
 8006ec8:	7fefffff 	.word	0x7fefffff
 8006ecc:	0800cd2c 	.word	0x0800cd2c
 8006ed0:	0800cd30 	.word	0x0800cd30
 8006ed4:	0800cd34 	.word	0x0800cd34
 8006ed8:	0800cd38 	.word	0x0800cd38
 8006edc:	0800cd3c 	.word	0x0800cd3c
 8006ee0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ee2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006ee4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ee6:	429e      	cmp	r6, r3
 8006ee8:	dd00      	ble.n	8006eec <_printf_float+0x318>
 8006eea:	001e      	movs	r6, r3
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	dc31      	bgt.n	8006f54 <_printf_float+0x380>
 8006ef0:	43f3      	mvns	r3, r6
 8006ef2:	2400      	movs	r4, #0
 8006ef4:	17db      	asrs	r3, r3, #31
 8006ef6:	4033      	ands	r3, r6
 8006ef8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006efa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006efe:	1af3      	subs	r3, r6, r3
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	dc30      	bgt.n	8006f66 <_printf_float+0x392>
 8006f04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	dc38      	bgt.n	8006f7e <_printf_float+0x3aa>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	07db      	lsls	r3, r3, #31
 8006f10:	d435      	bmi.n	8006f7e <_printf_float+0x3aa>
 8006f12:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006f14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	1b14      	subs	r4, r2, r4
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	dd00      	ble.n	8006f22 <_printf_float+0x34e>
 8006f20:	001c      	movs	r4, r3
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	dc34      	bgt.n	8006f90 <_printf_float+0x3bc>
 8006f26:	43e3      	mvns	r3, r4
 8006f28:	2600      	movs	r6, #0
 8006f2a:	17db      	asrs	r3, r3, #31
 8006f2c:	401c      	ands	r4, r3
 8006f2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	1b1b      	subs	r3, r3, r4
 8006f36:	42b3      	cmp	r3, r6
 8006f38:	dc00      	bgt.n	8006f3c <_printf_float+0x368>
 8006f3a:	e77c      	b.n	8006e36 <_printf_float+0x262>
 8006f3c:	002a      	movs	r2, r5
 8006f3e:	2301      	movs	r3, #1
 8006f40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006f46:	321a      	adds	r2, #26
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d100      	bne.n	8006f50 <_printf_float+0x37c>
 8006f4e:	e69d      	b.n	8006c8c <_printf_float+0xb8>
 8006f50:	3601      	adds	r6, #1
 8006f52:	e7ec      	b.n	8006f2e <_printf_float+0x35a>
 8006f54:	0033      	movs	r3, r6
 8006f56:	003a      	movs	r2, r7
 8006f58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f5c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f5e:	47a0      	blx	r4
 8006f60:	3001      	adds	r0, #1
 8006f62:	d1c5      	bne.n	8006ef0 <_printf_float+0x31c>
 8006f64:	e692      	b.n	8006c8c <_printf_float+0xb8>
 8006f66:	002a      	movs	r2, r5
 8006f68:	2301      	movs	r3, #1
 8006f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f6e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f70:	321a      	adds	r2, #26
 8006f72:	47b0      	blx	r6
 8006f74:	3001      	adds	r0, #1
 8006f76:	d100      	bne.n	8006f7a <_printf_float+0x3a6>
 8006f78:	e688      	b.n	8006c8c <_printf_float+0xb8>
 8006f7a:	3401      	adds	r4, #1
 8006f7c:	e7bd      	b.n	8006efa <_printf_float+0x326>
 8006f7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f88:	47a0      	blx	r4
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d1c1      	bne.n	8006f12 <_printf_float+0x33e>
 8006f8e:	e67d      	b.n	8006c8c <_printf_float+0xb8>
 8006f90:	19ba      	adds	r2, r7, r6
 8006f92:	0023      	movs	r3, r4
 8006f94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f98:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f9a:	47b0      	blx	r6
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d1c2      	bne.n	8006f26 <_printf_float+0x352>
 8006fa0:	e674      	b.n	8006c8c <_printf_float+0xb8>
 8006fa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	dc02      	bgt.n	8006fb0 <_printf_float+0x3dc>
 8006faa:	2301      	movs	r3, #1
 8006fac:	421a      	tst	r2, r3
 8006fae:	d039      	beq.n	8007024 <_printf_float+0x450>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	003a      	movs	r2, r7
 8006fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fb8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006fba:	47b0      	blx	r6
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d100      	bne.n	8006fc2 <_printf_float+0x3ee>
 8006fc0:	e664      	b.n	8006c8c <_printf_float+0xb8>
 8006fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fc8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006fcc:	47b0      	blx	r6
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d100      	bne.n	8006fd4 <_printf_float+0x400>
 8006fd2:	e65b      	b.n	8006c8c <_printf_float+0xb8>
 8006fd4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006fd6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fda:	2200      	movs	r2, #0
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f7f9 fa2f 	bl	8000444 <__aeabi_dcmpeq>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d11a      	bne.n	8007020 <_printf_float+0x44c>
 8006fea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fec:	1c7a      	adds	r2, r7, #1
 8006fee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ff0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ff2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006ff4:	47b0      	blx	r6
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d10e      	bne.n	8007018 <_printf_float+0x444>
 8006ffa:	e647      	b.n	8006c8c <_printf_float+0xb8>
 8006ffc:	002a      	movs	r2, r5
 8006ffe:	2301      	movs	r3, #1
 8007000:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007004:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007006:	321a      	adds	r2, #26
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	d100      	bne.n	8007010 <_printf_float+0x43c>
 800700e:	e63d      	b.n	8006c8c <_printf_float+0xb8>
 8007010:	3601      	adds	r6, #1
 8007012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007014:	429e      	cmp	r6, r3
 8007016:	dbf1      	blt.n	8006ffc <_printf_float+0x428>
 8007018:	002a      	movs	r2, r5
 800701a:	0023      	movs	r3, r4
 800701c:	3250      	adds	r2, #80	@ 0x50
 800701e:	e6da      	b.n	8006dd6 <_printf_float+0x202>
 8007020:	2600      	movs	r6, #0
 8007022:	e7f6      	b.n	8007012 <_printf_float+0x43e>
 8007024:	003a      	movs	r2, r7
 8007026:	e7e2      	b.n	8006fee <_printf_float+0x41a>
 8007028:	002a      	movs	r2, r5
 800702a:	2301      	movs	r3, #1
 800702c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800702e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007030:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007032:	3219      	adds	r2, #25
 8007034:	47b0      	blx	r6
 8007036:	3001      	adds	r0, #1
 8007038:	d100      	bne.n	800703c <_printf_float+0x468>
 800703a:	e627      	b.n	8006c8c <_printf_float+0xb8>
 800703c:	3401      	adds	r4, #1
 800703e:	68eb      	ldr	r3, [r5, #12]
 8007040:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	42a3      	cmp	r3, r4
 8007046:	dcef      	bgt.n	8007028 <_printf_float+0x454>
 8007048:	e6f9      	b.n	8006e3e <_printf_float+0x26a>
 800704a:	2400      	movs	r4, #0
 800704c:	e7f7      	b.n	800703e <_printf_float+0x46a>
 800704e:	46c0      	nop			@ (mov r8, r8)

08007050 <_printf_common>:
 8007050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007052:	0016      	movs	r6, r2
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	688a      	ldr	r2, [r1, #8]
 8007058:	690b      	ldr	r3, [r1, #16]
 800705a:	000c      	movs	r4, r1
 800705c:	9000      	str	r0, [sp, #0]
 800705e:	4293      	cmp	r3, r2
 8007060:	da00      	bge.n	8007064 <_printf_common+0x14>
 8007062:	0013      	movs	r3, r2
 8007064:	0022      	movs	r2, r4
 8007066:	6033      	str	r3, [r6, #0]
 8007068:	3243      	adds	r2, #67	@ 0x43
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	2a00      	cmp	r2, #0
 800706e:	d001      	beq.n	8007074 <_printf_common+0x24>
 8007070:	3301      	adds	r3, #1
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	069b      	lsls	r3, r3, #26
 8007078:	d502      	bpl.n	8007080 <_printf_common+0x30>
 800707a:	6833      	ldr	r3, [r6, #0]
 800707c:	3302      	adds	r3, #2
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	6822      	ldr	r2, [r4, #0]
 8007082:	2306      	movs	r3, #6
 8007084:	0015      	movs	r5, r2
 8007086:	401d      	ands	r5, r3
 8007088:	421a      	tst	r2, r3
 800708a:	d027      	beq.n	80070dc <_printf_common+0x8c>
 800708c:	0023      	movs	r3, r4
 800708e:	3343      	adds	r3, #67	@ 0x43
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	1e5a      	subs	r2, r3, #1
 8007094:	4193      	sbcs	r3, r2
 8007096:	6822      	ldr	r2, [r4, #0]
 8007098:	0692      	lsls	r2, r2, #26
 800709a:	d430      	bmi.n	80070fe <_printf_common+0xae>
 800709c:	0022      	movs	r2, r4
 800709e:	9901      	ldr	r1, [sp, #4]
 80070a0:	9800      	ldr	r0, [sp, #0]
 80070a2:	9d08      	ldr	r5, [sp, #32]
 80070a4:	3243      	adds	r2, #67	@ 0x43
 80070a6:	47a8      	blx	r5
 80070a8:	3001      	adds	r0, #1
 80070aa:	d025      	beq.n	80070f8 <_printf_common+0xa8>
 80070ac:	2206      	movs	r2, #6
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	2500      	movs	r5, #0
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d105      	bne.n	80070c4 <_printf_common+0x74>
 80070b8:	6833      	ldr	r3, [r6, #0]
 80070ba:	68e5      	ldr	r5, [r4, #12]
 80070bc:	1aed      	subs	r5, r5, r3
 80070be:	43eb      	mvns	r3, r5
 80070c0:	17db      	asrs	r3, r3, #31
 80070c2:	401d      	ands	r5, r3
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	6922      	ldr	r2, [r4, #16]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	dd01      	ble.n	80070d0 <_printf_common+0x80>
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	18ed      	adds	r5, r5, r3
 80070d0:	2600      	movs	r6, #0
 80070d2:	42b5      	cmp	r5, r6
 80070d4:	d120      	bne.n	8007118 <_printf_common+0xc8>
 80070d6:	2000      	movs	r0, #0
 80070d8:	e010      	b.n	80070fc <_printf_common+0xac>
 80070da:	3501      	adds	r5, #1
 80070dc:	68e3      	ldr	r3, [r4, #12]
 80070de:	6832      	ldr	r2, [r6, #0]
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	42ab      	cmp	r3, r5
 80070e4:	ddd2      	ble.n	800708c <_printf_common+0x3c>
 80070e6:	0022      	movs	r2, r4
 80070e8:	2301      	movs	r3, #1
 80070ea:	9901      	ldr	r1, [sp, #4]
 80070ec:	9800      	ldr	r0, [sp, #0]
 80070ee:	9f08      	ldr	r7, [sp, #32]
 80070f0:	3219      	adds	r2, #25
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	d1f0      	bne.n	80070da <_printf_common+0x8a>
 80070f8:	2001      	movs	r0, #1
 80070fa:	4240      	negs	r0, r0
 80070fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070fe:	2030      	movs	r0, #48	@ 0x30
 8007100:	18e1      	adds	r1, r4, r3
 8007102:	3143      	adds	r1, #67	@ 0x43
 8007104:	7008      	strb	r0, [r1, #0]
 8007106:	0021      	movs	r1, r4
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	3145      	adds	r1, #69	@ 0x45
 800710c:	7809      	ldrb	r1, [r1, #0]
 800710e:	18a2      	adds	r2, r4, r2
 8007110:	3243      	adds	r2, #67	@ 0x43
 8007112:	3302      	adds	r3, #2
 8007114:	7011      	strb	r1, [r2, #0]
 8007116:	e7c1      	b.n	800709c <_printf_common+0x4c>
 8007118:	0022      	movs	r2, r4
 800711a:	2301      	movs	r3, #1
 800711c:	9901      	ldr	r1, [sp, #4]
 800711e:	9800      	ldr	r0, [sp, #0]
 8007120:	9f08      	ldr	r7, [sp, #32]
 8007122:	321a      	adds	r2, #26
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	d0e6      	beq.n	80070f8 <_printf_common+0xa8>
 800712a:	3601      	adds	r6, #1
 800712c:	e7d1      	b.n	80070d2 <_printf_common+0x82>
	...

08007130 <_printf_i>:
 8007130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007132:	b08b      	sub	sp, #44	@ 0x2c
 8007134:	9206      	str	r2, [sp, #24]
 8007136:	000a      	movs	r2, r1
 8007138:	3243      	adds	r2, #67	@ 0x43
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	9005      	str	r0, [sp, #20]
 800713e:	9203      	str	r2, [sp, #12]
 8007140:	7e0a      	ldrb	r2, [r1, #24]
 8007142:	000c      	movs	r4, r1
 8007144:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007146:	2a78      	cmp	r2, #120	@ 0x78
 8007148:	d809      	bhi.n	800715e <_printf_i+0x2e>
 800714a:	2a62      	cmp	r2, #98	@ 0x62
 800714c:	d80b      	bhi.n	8007166 <_printf_i+0x36>
 800714e:	2a00      	cmp	r2, #0
 8007150:	d100      	bne.n	8007154 <_printf_i+0x24>
 8007152:	e0bc      	b.n	80072ce <_printf_i+0x19e>
 8007154:	497b      	ldr	r1, [pc, #492]	@ (8007344 <_printf_i+0x214>)
 8007156:	9104      	str	r1, [sp, #16]
 8007158:	2a58      	cmp	r2, #88	@ 0x58
 800715a:	d100      	bne.n	800715e <_printf_i+0x2e>
 800715c:	e090      	b.n	8007280 <_printf_i+0x150>
 800715e:	0025      	movs	r5, r4
 8007160:	3542      	adds	r5, #66	@ 0x42
 8007162:	702a      	strb	r2, [r5, #0]
 8007164:	e022      	b.n	80071ac <_printf_i+0x7c>
 8007166:	0010      	movs	r0, r2
 8007168:	3863      	subs	r0, #99	@ 0x63
 800716a:	2815      	cmp	r0, #21
 800716c:	d8f7      	bhi.n	800715e <_printf_i+0x2e>
 800716e:	f7f8 ffd9 	bl	8000124 <__gnu_thumb1_case_shi>
 8007172:	0016      	.short	0x0016
 8007174:	fff6001f 	.word	0xfff6001f
 8007178:	fff6fff6 	.word	0xfff6fff6
 800717c:	001ffff6 	.word	0x001ffff6
 8007180:	fff6fff6 	.word	0xfff6fff6
 8007184:	fff6fff6 	.word	0xfff6fff6
 8007188:	003600a1 	.word	0x003600a1
 800718c:	fff60080 	.word	0xfff60080
 8007190:	00b2fff6 	.word	0x00b2fff6
 8007194:	0036fff6 	.word	0x0036fff6
 8007198:	fff6fff6 	.word	0xfff6fff6
 800719c:	0084      	.short	0x0084
 800719e:	0025      	movs	r5, r4
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	3542      	adds	r5, #66	@ 0x42
 80071a4:	1d11      	adds	r1, r2, #4
 80071a6:	6019      	str	r1, [r3, #0]
 80071a8:	6813      	ldr	r3, [r2, #0]
 80071aa:	702b      	strb	r3, [r5, #0]
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0a0      	b.n	80072f2 <_printf_i+0x1c2>
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	6809      	ldr	r1, [r1, #0]
 80071b4:	1d02      	adds	r2, r0, #4
 80071b6:	060d      	lsls	r5, r1, #24
 80071b8:	d50b      	bpl.n	80071d2 <_printf_i+0xa2>
 80071ba:	6806      	ldr	r6, [r0, #0]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	2e00      	cmp	r6, #0
 80071c0:	da03      	bge.n	80071ca <_printf_i+0x9a>
 80071c2:	232d      	movs	r3, #45	@ 0x2d
 80071c4:	9a03      	ldr	r2, [sp, #12]
 80071c6:	4276      	negs	r6, r6
 80071c8:	7013      	strb	r3, [r2, #0]
 80071ca:	4b5e      	ldr	r3, [pc, #376]	@ (8007344 <_printf_i+0x214>)
 80071cc:	270a      	movs	r7, #10
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	e018      	b.n	8007204 <_printf_i+0xd4>
 80071d2:	6806      	ldr	r6, [r0, #0]
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	0649      	lsls	r1, r1, #25
 80071d8:	d5f1      	bpl.n	80071be <_printf_i+0x8e>
 80071da:	b236      	sxth	r6, r6
 80071dc:	e7ef      	b.n	80071be <_printf_i+0x8e>
 80071de:	6808      	ldr	r0, [r1, #0]
 80071e0:	6819      	ldr	r1, [r3, #0]
 80071e2:	c940      	ldmia	r1!, {r6}
 80071e4:	0605      	lsls	r5, r0, #24
 80071e6:	d402      	bmi.n	80071ee <_printf_i+0xbe>
 80071e8:	0640      	lsls	r0, r0, #25
 80071ea:	d500      	bpl.n	80071ee <_printf_i+0xbe>
 80071ec:	b2b6      	uxth	r6, r6
 80071ee:	6019      	str	r1, [r3, #0]
 80071f0:	4b54      	ldr	r3, [pc, #336]	@ (8007344 <_printf_i+0x214>)
 80071f2:	270a      	movs	r7, #10
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	2a6f      	cmp	r2, #111	@ 0x6f
 80071f8:	d100      	bne.n	80071fc <_printf_i+0xcc>
 80071fa:	3f02      	subs	r7, #2
 80071fc:	0023      	movs	r3, r4
 80071fe:	2200      	movs	r2, #0
 8007200:	3343      	adds	r3, #67	@ 0x43
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	60a3      	str	r3, [r4, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	db03      	blt.n	8007214 <_printf_i+0xe4>
 800720c:	2104      	movs	r1, #4
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	438a      	bics	r2, r1
 8007212:	6022      	str	r2, [r4, #0]
 8007214:	2e00      	cmp	r6, #0
 8007216:	d102      	bne.n	800721e <_printf_i+0xee>
 8007218:	9d03      	ldr	r5, [sp, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <_printf_i+0x108>
 800721e:	9d03      	ldr	r5, [sp, #12]
 8007220:	0030      	movs	r0, r6
 8007222:	0039      	movs	r1, r7
 8007224:	f7f9 f80e 	bl	8000244 <__aeabi_uidivmod>
 8007228:	9b04      	ldr	r3, [sp, #16]
 800722a:	3d01      	subs	r5, #1
 800722c:	5c5b      	ldrb	r3, [r3, r1]
 800722e:	702b      	strb	r3, [r5, #0]
 8007230:	0033      	movs	r3, r6
 8007232:	0006      	movs	r6, r0
 8007234:	429f      	cmp	r7, r3
 8007236:	d9f3      	bls.n	8007220 <_printf_i+0xf0>
 8007238:	2f08      	cmp	r7, #8
 800723a:	d109      	bne.n	8007250 <_printf_i+0x120>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	07db      	lsls	r3, r3, #31
 8007240:	d506      	bpl.n	8007250 <_printf_i+0x120>
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	dc02      	bgt.n	8007250 <_printf_i+0x120>
 800724a:	2330      	movs	r3, #48	@ 0x30
 800724c:	3d01      	subs	r5, #1
 800724e:	702b      	strb	r3, [r5, #0]
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	1b5b      	subs	r3, r3, r5
 8007254:	6123      	str	r3, [r4, #16]
 8007256:	9b07      	ldr	r3, [sp, #28]
 8007258:	0021      	movs	r1, r4
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	9805      	ldr	r0, [sp, #20]
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	aa09      	add	r2, sp, #36	@ 0x24
 8007262:	f7ff fef5 	bl	8007050 <_printf_common>
 8007266:	3001      	adds	r0, #1
 8007268:	d148      	bne.n	80072fc <_printf_i+0x1cc>
 800726a:	2001      	movs	r0, #1
 800726c:	4240      	negs	r0, r0
 800726e:	b00b      	add	sp, #44	@ 0x2c
 8007270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007272:	2220      	movs	r2, #32
 8007274:	6809      	ldr	r1, [r1, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	6022      	str	r2, [r4, #0]
 800727a:	2278      	movs	r2, #120	@ 0x78
 800727c:	4932      	ldr	r1, [pc, #200]	@ (8007348 <_printf_i+0x218>)
 800727e:	9104      	str	r1, [sp, #16]
 8007280:	0021      	movs	r1, r4
 8007282:	3145      	adds	r1, #69	@ 0x45
 8007284:	700a      	strb	r2, [r1, #0]
 8007286:	6819      	ldr	r1, [r3, #0]
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	c940      	ldmia	r1!, {r6}
 800728c:	0610      	lsls	r0, r2, #24
 800728e:	d402      	bmi.n	8007296 <_printf_i+0x166>
 8007290:	0650      	lsls	r0, r2, #25
 8007292:	d500      	bpl.n	8007296 <_printf_i+0x166>
 8007294:	b2b6      	uxth	r6, r6
 8007296:	6019      	str	r1, [r3, #0]
 8007298:	07d3      	lsls	r3, r2, #31
 800729a:	d502      	bpl.n	80072a2 <_printf_i+0x172>
 800729c:	2320      	movs	r3, #32
 800729e:	4313      	orrs	r3, r2
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	d001      	beq.n	80072aa <_printf_i+0x17a>
 80072a6:	2710      	movs	r7, #16
 80072a8:	e7a8      	b.n	80071fc <_printf_i+0xcc>
 80072aa:	2220      	movs	r2, #32
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	4393      	bics	r3, r2
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	e7f8      	b.n	80072a6 <_printf_i+0x176>
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	680d      	ldr	r5, [r1, #0]
 80072b8:	1d10      	adds	r0, r2, #4
 80072ba:	6949      	ldr	r1, [r1, #20]
 80072bc:	6018      	str	r0, [r3, #0]
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	062e      	lsls	r6, r5, #24
 80072c2:	d501      	bpl.n	80072c8 <_printf_i+0x198>
 80072c4:	6019      	str	r1, [r3, #0]
 80072c6:	e002      	b.n	80072ce <_printf_i+0x19e>
 80072c8:	066d      	lsls	r5, r5, #25
 80072ca:	d5fb      	bpl.n	80072c4 <_printf_i+0x194>
 80072cc:	8019      	strh	r1, [r3, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9d03      	ldr	r5, [sp, #12]
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	e7bf      	b.n	8007256 <_printf_i+0x126>
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	1d11      	adds	r1, r2, #4
 80072da:	6019      	str	r1, [r3, #0]
 80072dc:	6815      	ldr	r5, [r2, #0]
 80072de:	2100      	movs	r1, #0
 80072e0:	0028      	movs	r0, r5
 80072e2:	6862      	ldr	r2, [r4, #4]
 80072e4:	f000 fc3f 	bl	8007b66 <memchr>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d001      	beq.n	80072f0 <_printf_i+0x1c0>
 80072ec:	1b40      	subs	r0, r0, r5
 80072ee:	6060      	str	r0, [r4, #4]
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	2300      	movs	r3, #0
 80072f6:	9a03      	ldr	r2, [sp, #12]
 80072f8:	7013      	strb	r3, [r2, #0]
 80072fa:	e7ac      	b.n	8007256 <_printf_i+0x126>
 80072fc:	002a      	movs	r2, r5
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	9906      	ldr	r1, [sp, #24]
 8007302:	9805      	ldr	r0, [sp, #20]
 8007304:	9d07      	ldr	r5, [sp, #28]
 8007306:	47a8      	blx	r5
 8007308:	3001      	adds	r0, #1
 800730a:	d0ae      	beq.n	800726a <_printf_i+0x13a>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	079b      	lsls	r3, r3, #30
 8007310:	d415      	bmi.n	800733e <_printf_i+0x20e>
 8007312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007314:	68e0      	ldr	r0, [r4, #12]
 8007316:	4298      	cmp	r0, r3
 8007318:	daa9      	bge.n	800726e <_printf_i+0x13e>
 800731a:	0018      	movs	r0, r3
 800731c:	e7a7      	b.n	800726e <_printf_i+0x13e>
 800731e:	0022      	movs	r2, r4
 8007320:	2301      	movs	r3, #1
 8007322:	9906      	ldr	r1, [sp, #24]
 8007324:	9805      	ldr	r0, [sp, #20]
 8007326:	9e07      	ldr	r6, [sp, #28]
 8007328:	3219      	adds	r2, #25
 800732a:	47b0      	blx	r6
 800732c:	3001      	adds	r0, #1
 800732e:	d09c      	beq.n	800726a <_printf_i+0x13a>
 8007330:	3501      	adds	r5, #1
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	42ab      	cmp	r3, r5
 800733a:	dcf0      	bgt.n	800731e <_printf_i+0x1ee>
 800733c:	e7e9      	b.n	8007312 <_printf_i+0x1e2>
 800733e:	2500      	movs	r5, #0
 8007340:	e7f7      	b.n	8007332 <_printf_i+0x202>
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	0800cd3e 	.word	0x0800cd3e
 8007348:	0800cd4f 	.word	0x0800cd4f

0800734c <_scanf_float>:
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b08b      	sub	sp, #44	@ 0x2c
 8007350:	0016      	movs	r6, r2
 8007352:	9003      	str	r0, [sp, #12]
 8007354:	22ae      	movs	r2, #174	@ 0xae
 8007356:	2000      	movs	r0, #0
 8007358:	9307      	str	r3, [sp, #28]
 800735a:	688b      	ldr	r3, [r1, #8]
 800735c:	000c      	movs	r4, r1
 800735e:	1e59      	subs	r1, r3, #1
 8007360:	0052      	lsls	r2, r2, #1
 8007362:	9006      	str	r0, [sp, #24]
 8007364:	4291      	cmp	r1, r2
 8007366:	d905      	bls.n	8007374 <_scanf_float+0x28>
 8007368:	3b5e      	subs	r3, #94	@ 0x5e
 800736a:	3bff      	subs	r3, #255	@ 0xff
 800736c:	9306      	str	r3, [sp, #24]
 800736e:	235e      	movs	r3, #94	@ 0x5e
 8007370:	33ff      	adds	r3, #255	@ 0xff
 8007372:	60a3      	str	r3, [r4, #8]
 8007374:	23f0      	movs	r3, #240	@ 0xf0
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	4313      	orrs	r3, r2
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	0023      	movs	r3, r4
 8007380:	2500      	movs	r5, #0
 8007382:	331c      	adds	r3, #28
 8007384:	001f      	movs	r7, r3
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	9502      	str	r5, [sp, #8]
 800738a:	9509      	str	r5, [sp, #36]	@ 0x24
 800738c:	9508      	str	r5, [sp, #32]
 800738e:	9501      	str	r5, [sp, #4]
 8007390:	9505      	str	r5, [sp, #20]
 8007392:	68a2      	ldr	r2, [r4, #8]
 8007394:	2a00      	cmp	r2, #0
 8007396:	d00a      	beq.n	80073ae <_scanf_float+0x62>
 8007398:	6833      	ldr	r3, [r6, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b4e      	cmp	r3, #78	@ 0x4e
 800739e:	d844      	bhi.n	800742a <_scanf_float+0xde>
 80073a0:	0018      	movs	r0, r3
 80073a2:	2b40      	cmp	r3, #64	@ 0x40
 80073a4:	d82c      	bhi.n	8007400 <_scanf_float+0xb4>
 80073a6:	382b      	subs	r0, #43	@ 0x2b
 80073a8:	b2c1      	uxtb	r1, r0
 80073aa:	290e      	cmp	r1, #14
 80073ac:	d92a      	bls.n	8007404 <_scanf_float+0xb8>
 80073ae:	9b01      	ldr	r3, [sp, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <_scanf_float+0x70>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	4aa6      	ldr	r2, [pc, #664]	@ (8007650 <_scanf_float+0x304>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	3b01      	subs	r3, #1
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d900      	bls.n	80073c6 <_scanf_float+0x7a>
 80073c4:	e0fe      	b.n	80075c4 <_scanf_float+0x278>
 80073c6:	25be      	movs	r5, #190	@ 0xbe
 80073c8:	006d      	lsls	r5, r5, #1
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	429f      	cmp	r7, r3
 80073ce:	d900      	bls.n	80073d2 <_scanf_float+0x86>
 80073d0:	e0ee      	b.n	80075b0 <_scanf_float+0x264>
 80073d2:	2001      	movs	r0, #1
 80073d4:	b00b      	add	sp, #44	@ 0x2c
 80073d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d8:	0018      	movs	r0, r3
 80073da:	3861      	subs	r0, #97	@ 0x61
 80073dc:	280d      	cmp	r0, #13
 80073de:	d8e6      	bhi.n	80073ae <_scanf_float+0x62>
 80073e0:	f7f8 fea0 	bl	8000124 <__gnu_thumb1_case_shi>
 80073e4:	ffe50089 	.word	0xffe50089
 80073e8:	ffe5ffe5 	.word	0xffe5ffe5
 80073ec:	00a700bb 	.word	0x00a700bb
 80073f0:	ffe5ffe5 	.word	0xffe5ffe5
 80073f4:	ffe5008f 	.word	0xffe5008f
 80073f8:	ffe5ffe5 	.word	0xffe5ffe5
 80073fc:	006bffe5 	.word	0x006bffe5
 8007400:	3841      	subs	r0, #65	@ 0x41
 8007402:	e7eb      	b.n	80073dc <_scanf_float+0x90>
 8007404:	280e      	cmp	r0, #14
 8007406:	d8d2      	bhi.n	80073ae <_scanf_float+0x62>
 8007408:	f7f8 fe8c 	bl	8000124 <__gnu_thumb1_case_shi>
 800740c:	ffd1004f 	.word	0xffd1004f
 8007410:	009d004f 	.word	0x009d004f
 8007414:	0021ffd1 	.word	0x0021ffd1
 8007418:	00410041 	.word	0x00410041
 800741c:	00410041 	.word	0x00410041
 8007420:	00410041 	.word	0x00410041
 8007424:	00410041 	.word	0x00410041
 8007428:	0041      	.short	0x0041
 800742a:	2b6e      	cmp	r3, #110	@ 0x6e
 800742c:	d80a      	bhi.n	8007444 <_scanf_float+0xf8>
 800742e:	2b60      	cmp	r3, #96	@ 0x60
 8007430:	d8d2      	bhi.n	80073d8 <_scanf_float+0x8c>
 8007432:	2b54      	cmp	r3, #84	@ 0x54
 8007434:	d100      	bne.n	8007438 <_scanf_float+0xec>
 8007436:	e081      	b.n	800753c <_scanf_float+0x1f0>
 8007438:	2b59      	cmp	r3, #89	@ 0x59
 800743a:	d1b8      	bne.n	80073ae <_scanf_float+0x62>
 800743c:	2d07      	cmp	r5, #7
 800743e:	d1b6      	bne.n	80073ae <_scanf_float+0x62>
 8007440:	2508      	movs	r5, #8
 8007442:	e02f      	b.n	80074a4 <_scanf_float+0x158>
 8007444:	2b74      	cmp	r3, #116	@ 0x74
 8007446:	d079      	beq.n	800753c <_scanf_float+0x1f0>
 8007448:	2b79      	cmp	r3, #121	@ 0x79
 800744a:	d0f7      	beq.n	800743c <_scanf_float+0xf0>
 800744c:	e7af      	b.n	80073ae <_scanf_float+0x62>
 800744e:	6821      	ldr	r1, [r4, #0]
 8007450:	05c8      	lsls	r0, r1, #23
 8007452:	d51c      	bpl.n	800748e <_scanf_float+0x142>
 8007454:	2380      	movs	r3, #128	@ 0x80
 8007456:	4399      	bics	r1, r3
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	6021      	str	r1, [r4, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	9b06      	ldr	r3, [sp, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <_scanf_float+0x122>
 8007466:	3b01      	subs	r3, #1
 8007468:	3201      	adds	r2, #1
 800746a:	9306      	str	r3, [sp, #24]
 800746c:	60a2      	str	r2, [r4, #8]
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	3b01      	subs	r3, #1
 8007472:	60a3      	str	r3, [r4, #8]
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	3301      	adds	r3, #1
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	6873      	ldr	r3, [r6, #4]
 800747c:	3b01      	subs	r3, #1
 800747e:	6073      	str	r3, [r6, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	dc00      	bgt.n	8007486 <_scanf_float+0x13a>
 8007484:	e08a      	b.n	800759c <_scanf_float+0x250>
 8007486:	6833      	ldr	r3, [r6, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	e781      	b.n	8007392 <_scanf_float+0x46>
 800748e:	9a02      	ldr	r2, [sp, #8]
 8007490:	1951      	adds	r1, r2, r5
 8007492:	2900      	cmp	r1, #0
 8007494:	d000      	beq.n	8007498 <_scanf_float+0x14c>
 8007496:	e78a      	b.n	80073ae <_scanf_float+0x62>
 8007498:	000d      	movs	r5, r1
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	486d      	ldr	r0, [pc, #436]	@ (8007654 <_scanf_float+0x308>)
 800749e:	9102      	str	r1, [sp, #8]
 80074a0:	4002      	ands	r2, r0
 80074a2:	6022      	str	r2, [r4, #0]
 80074a4:	703b      	strb	r3, [r7, #0]
 80074a6:	3701      	adds	r7, #1
 80074a8:	e7e1      	b.n	800746e <_scanf_float+0x122>
 80074aa:	2180      	movs	r1, #128	@ 0x80
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	420a      	tst	r2, r1
 80074b0:	d100      	bne.n	80074b4 <_scanf_float+0x168>
 80074b2:	e77c      	b.n	80073ae <_scanf_float+0x62>
 80074b4:	438a      	bics	r2, r1
 80074b6:	6022      	str	r2, [r4, #0]
 80074b8:	e7f4      	b.n	80074a4 <_scanf_float+0x158>
 80074ba:	9a02      	ldr	r2, [sp, #8]
 80074bc:	2a00      	cmp	r2, #0
 80074be:	d10f      	bne.n	80074e0 <_scanf_float+0x194>
 80074c0:	9a01      	ldr	r2, [sp, #4]
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d10f      	bne.n	80074e6 <_scanf_float+0x19a>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	21e0      	movs	r1, #224	@ 0xe0
 80074ca:	0010      	movs	r0, r2
 80074cc:	00c9      	lsls	r1, r1, #3
 80074ce:	4008      	ands	r0, r1
 80074d0:	4288      	cmp	r0, r1
 80074d2:	d108      	bne.n	80074e6 <_scanf_float+0x19a>
 80074d4:	4960      	ldr	r1, [pc, #384]	@ (8007658 <_scanf_float+0x30c>)
 80074d6:	400a      	ands	r2, r1
 80074d8:	6022      	str	r2, [r4, #0]
 80074da:	2201      	movs	r2, #1
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	e7e1      	b.n	80074a4 <_scanf_float+0x158>
 80074e0:	9a02      	ldr	r2, [sp, #8]
 80074e2:	2a02      	cmp	r2, #2
 80074e4:	d058      	beq.n	8007598 <_scanf_float+0x24c>
 80074e6:	2d01      	cmp	r5, #1
 80074e8:	d002      	beq.n	80074f0 <_scanf_float+0x1a4>
 80074ea:	2d04      	cmp	r5, #4
 80074ec:	d000      	beq.n	80074f0 <_scanf_float+0x1a4>
 80074ee:	e75e      	b.n	80073ae <_scanf_float+0x62>
 80074f0:	3501      	adds	r5, #1
 80074f2:	b2ed      	uxtb	r5, r5
 80074f4:	e7d6      	b.n	80074a4 <_scanf_float+0x158>
 80074f6:	9a02      	ldr	r2, [sp, #8]
 80074f8:	2a01      	cmp	r2, #1
 80074fa:	d000      	beq.n	80074fe <_scanf_float+0x1b2>
 80074fc:	e757      	b.n	80073ae <_scanf_float+0x62>
 80074fe:	2202      	movs	r2, #2
 8007500:	e7ec      	b.n	80074dc <_scanf_float+0x190>
 8007502:	2d00      	cmp	r5, #0
 8007504:	d110      	bne.n	8007528 <_scanf_float+0x1dc>
 8007506:	9a01      	ldr	r2, [sp, #4]
 8007508:	2a00      	cmp	r2, #0
 800750a:	d000      	beq.n	800750e <_scanf_float+0x1c2>
 800750c:	e752      	b.n	80073b4 <_scanf_float+0x68>
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	21e0      	movs	r1, #224	@ 0xe0
 8007512:	0010      	movs	r0, r2
 8007514:	00c9      	lsls	r1, r1, #3
 8007516:	4008      	ands	r0, r1
 8007518:	4288      	cmp	r0, r1
 800751a:	d000      	beq.n	800751e <_scanf_float+0x1d2>
 800751c:	e11d      	b.n	800775a <_scanf_float+0x40e>
 800751e:	494e      	ldr	r1, [pc, #312]	@ (8007658 <_scanf_float+0x30c>)
 8007520:	3501      	adds	r5, #1
 8007522:	400a      	ands	r2, r1
 8007524:	6022      	str	r2, [r4, #0]
 8007526:	e7bd      	b.n	80074a4 <_scanf_float+0x158>
 8007528:	21fd      	movs	r1, #253	@ 0xfd
 800752a:	1eea      	subs	r2, r5, #3
 800752c:	420a      	tst	r2, r1
 800752e:	d0df      	beq.n	80074f0 <_scanf_float+0x1a4>
 8007530:	e73d      	b.n	80073ae <_scanf_float+0x62>
 8007532:	2d02      	cmp	r5, #2
 8007534:	d000      	beq.n	8007538 <_scanf_float+0x1ec>
 8007536:	e73a      	b.n	80073ae <_scanf_float+0x62>
 8007538:	2503      	movs	r5, #3
 800753a:	e7b3      	b.n	80074a4 <_scanf_float+0x158>
 800753c:	2d06      	cmp	r5, #6
 800753e:	d000      	beq.n	8007542 <_scanf_float+0x1f6>
 8007540:	e735      	b.n	80073ae <_scanf_float+0x62>
 8007542:	2507      	movs	r5, #7
 8007544:	e7ae      	b.n	80074a4 <_scanf_float+0x158>
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	0591      	lsls	r1, r2, #22
 800754a:	d400      	bmi.n	800754e <_scanf_float+0x202>
 800754c:	e72f      	b.n	80073ae <_scanf_float+0x62>
 800754e:	4943      	ldr	r1, [pc, #268]	@ (800765c <_scanf_float+0x310>)
 8007550:	400a      	ands	r2, r1
 8007552:	6022      	str	r2, [r4, #0]
 8007554:	9a01      	ldr	r2, [sp, #4]
 8007556:	9205      	str	r2, [sp, #20]
 8007558:	e7a4      	b.n	80074a4 <_scanf_float+0x158>
 800755a:	21a0      	movs	r1, #160	@ 0xa0
 800755c:	2080      	movs	r0, #128	@ 0x80
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	00c9      	lsls	r1, r1, #3
 8007562:	4011      	ands	r1, r2
 8007564:	00c0      	lsls	r0, r0, #3
 8007566:	4281      	cmp	r1, r0
 8007568:	d006      	beq.n	8007578 <_scanf_float+0x22c>
 800756a:	4202      	tst	r2, r0
 800756c:	d100      	bne.n	8007570 <_scanf_float+0x224>
 800756e:	e71e      	b.n	80073ae <_scanf_float+0x62>
 8007570:	9901      	ldr	r1, [sp, #4]
 8007572:	2900      	cmp	r1, #0
 8007574:	d100      	bne.n	8007578 <_scanf_float+0x22c>
 8007576:	e0f0      	b.n	800775a <_scanf_float+0x40e>
 8007578:	0591      	lsls	r1, r2, #22
 800757a:	d404      	bmi.n	8007586 <_scanf_float+0x23a>
 800757c:	9901      	ldr	r1, [sp, #4]
 800757e:	9805      	ldr	r0, [sp, #20]
 8007580:	9709      	str	r7, [sp, #36]	@ 0x24
 8007582:	1a09      	subs	r1, r1, r0
 8007584:	9108      	str	r1, [sp, #32]
 8007586:	4934      	ldr	r1, [pc, #208]	@ (8007658 <_scanf_float+0x30c>)
 8007588:	400a      	ands	r2, r1
 800758a:	21c0      	movs	r1, #192	@ 0xc0
 800758c:	0049      	lsls	r1, r1, #1
 800758e:	430a      	orrs	r2, r1
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	9201      	str	r2, [sp, #4]
 8007596:	e785      	b.n	80074a4 <_scanf_float+0x158>
 8007598:	2203      	movs	r2, #3
 800759a:	e79f      	b.n	80074dc <_scanf_float+0x190>
 800759c:	23c0      	movs	r3, #192	@ 0xc0
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	0031      	movs	r1, r6
 80075a2:	58e3      	ldr	r3, [r4, r3]
 80075a4:	9803      	ldr	r0, [sp, #12]
 80075a6:	4798      	blx	r3
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d100      	bne.n	80075ae <_scanf_float+0x262>
 80075ac:	e6f1      	b.n	8007392 <_scanf_float+0x46>
 80075ae:	e6fe      	b.n	80073ae <_scanf_float+0x62>
 80075b0:	3f01      	subs	r7, #1
 80075b2:	5963      	ldr	r3, [r4, r5]
 80075b4:	0032      	movs	r2, r6
 80075b6:	7839      	ldrb	r1, [r7, #0]
 80075b8:	9803      	ldr	r0, [sp, #12]
 80075ba:	4798      	blx	r3
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	3b01      	subs	r3, #1
 80075c0:	6123      	str	r3, [r4, #16]
 80075c2:	e702      	b.n	80073ca <_scanf_float+0x7e>
 80075c4:	1e6b      	subs	r3, r5, #1
 80075c6:	2b06      	cmp	r3, #6
 80075c8:	d80e      	bhi.n	80075e8 <_scanf_float+0x29c>
 80075ca:	9702      	str	r7, [sp, #8]
 80075cc:	2d02      	cmp	r5, #2
 80075ce:	d920      	bls.n	8007612 <_scanf_float+0x2c6>
 80075d0:	1beb      	subs	r3, r5, r7
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	9306      	str	r3, [sp, #24]
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	9a06      	ldr	r2, [sp, #24]
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d127      	bne.n	8007632 <_scanf_float+0x2e6>
 80075e2:	3d03      	subs	r5, #3
 80075e4:	b2ed      	uxtb	r5, r5
 80075e6:	1b7f      	subs	r7, r7, r5
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	05da      	lsls	r2, r3, #23
 80075ec:	d553      	bpl.n	8007696 <_scanf_float+0x34a>
 80075ee:	055b      	lsls	r3, r3, #21
 80075f0:	d536      	bpl.n	8007660 <_scanf_float+0x314>
 80075f2:	25be      	movs	r5, #190	@ 0xbe
 80075f4:	006d      	lsls	r5, r5, #1
 80075f6:	9b04      	ldr	r3, [sp, #16]
 80075f8:	429f      	cmp	r7, r3
 80075fa:	d800      	bhi.n	80075fe <_scanf_float+0x2b2>
 80075fc:	e6e9      	b.n	80073d2 <_scanf_float+0x86>
 80075fe:	3f01      	subs	r7, #1
 8007600:	5963      	ldr	r3, [r4, r5]
 8007602:	0032      	movs	r2, r6
 8007604:	7839      	ldrb	r1, [r7, #0]
 8007606:	9803      	ldr	r0, [sp, #12]
 8007608:	4798      	blx	r3
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	e7f1      	b.n	80075f6 <_scanf_float+0x2aa>
 8007612:	25be      	movs	r5, #190	@ 0xbe
 8007614:	006d      	lsls	r5, r5, #1
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	429f      	cmp	r7, r3
 800761a:	d800      	bhi.n	800761e <_scanf_float+0x2d2>
 800761c:	e6d9      	b.n	80073d2 <_scanf_float+0x86>
 800761e:	3f01      	subs	r7, #1
 8007620:	5963      	ldr	r3, [r4, r5]
 8007622:	0032      	movs	r2, r6
 8007624:	7839      	ldrb	r1, [r7, #0]
 8007626:	9803      	ldr	r0, [sp, #12]
 8007628:	4798      	blx	r3
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	3b01      	subs	r3, #1
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	e7f1      	b.n	8007616 <_scanf_float+0x2ca>
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	0032      	movs	r2, r6
 8007636:	3b01      	subs	r3, #1
 8007638:	7819      	ldrb	r1, [r3, #0]
 800763a:	9302      	str	r3, [sp, #8]
 800763c:	23be      	movs	r3, #190	@ 0xbe
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	58e3      	ldr	r3, [r4, r3]
 8007642:	9803      	ldr	r0, [sp, #12]
 8007644:	4798      	blx	r3
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	e7c3      	b.n	80075d6 <_scanf_float+0x28a>
 800764e:	46c0      	nop			@ (mov r8, r8)
 8007650:	fffffeff 	.word	0xfffffeff
 8007654:	fffffe7f 	.word	0xfffffe7f
 8007658:	fffff87f 	.word	0xfffff87f
 800765c:	fffffd7f 	.word	0xfffffd7f
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	1e7d      	subs	r5, r7, #1
 8007664:	7829      	ldrb	r1, [r5, #0]
 8007666:	3b01      	subs	r3, #1
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	2965      	cmp	r1, #101	@ 0x65
 800766c:	d00c      	beq.n	8007688 <_scanf_float+0x33c>
 800766e:	2945      	cmp	r1, #69	@ 0x45
 8007670:	d00a      	beq.n	8007688 <_scanf_float+0x33c>
 8007672:	23be      	movs	r3, #190	@ 0xbe
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	58e3      	ldr	r3, [r4, r3]
 8007678:	0032      	movs	r2, r6
 800767a:	9803      	ldr	r0, [sp, #12]
 800767c:	4798      	blx	r3
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	1ebd      	subs	r5, r7, #2
 8007682:	3b01      	subs	r3, #1
 8007684:	7829      	ldrb	r1, [r5, #0]
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	23be      	movs	r3, #190	@ 0xbe
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	0032      	movs	r2, r6
 800768e:	58e3      	ldr	r3, [r4, r3]
 8007690:	9803      	ldr	r0, [sp, #12]
 8007692:	4798      	blx	r3
 8007694:	002f      	movs	r7, r5
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	2310      	movs	r3, #16
 800769a:	000a      	movs	r2, r1
 800769c:	401a      	ands	r2, r3
 800769e:	4219      	tst	r1, r3
 80076a0:	d001      	beq.n	80076a6 <_scanf_float+0x35a>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e696      	b.n	80073d4 <_scanf_float+0x88>
 80076a6:	21c0      	movs	r1, #192	@ 0xc0
 80076a8:	703a      	strb	r2, [r7, #0]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	00c9      	lsls	r1, r1, #3
 80076ae:	400b      	ands	r3, r1
 80076b0:	2180      	movs	r1, #128	@ 0x80
 80076b2:	00c9      	lsls	r1, r1, #3
 80076b4:	428b      	cmp	r3, r1
 80076b6:	d11c      	bne.n	80076f2 <_scanf_float+0x3a6>
 80076b8:	9b05      	ldr	r3, [sp, #20]
 80076ba:	9a01      	ldr	r2, [sp, #4]
 80076bc:	9905      	ldr	r1, [sp, #20]
 80076be:	1a9a      	subs	r2, r3, r2
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	428b      	cmp	r3, r1
 80076c4:	d121      	bne.n	800770a <_scanf_float+0x3be>
 80076c6:	2200      	movs	r2, #0
 80076c8:	9904      	ldr	r1, [sp, #16]
 80076ca:	9803      	ldr	r0, [sp, #12]
 80076cc:	f002 fcc0 	bl	800a050 <_strtod_r>
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	0006      	movs	r6, r0
 80076d6:	000f      	movs	r7, r1
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	0791      	lsls	r1, r2, #30
 80076dc:	d522      	bpl.n	8007724 <_scanf_float+0x3d8>
 80076de:	9907      	ldr	r1, [sp, #28]
 80076e0:	1d1a      	adds	r2, r3, #4
 80076e2:	600a      	str	r2, [r1, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	601e      	str	r6, [r3, #0]
 80076e8:	605f      	str	r7, [r3, #4]
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60e3      	str	r3, [r4, #12]
 80076f0:	e7d7      	b.n	80076a2 <_scanf_float+0x356>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0e6      	beq.n	80076c6 <_scanf_float+0x37a>
 80076f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076fa:	9803      	ldr	r0, [sp, #12]
 80076fc:	1c59      	adds	r1, r3, #1
 80076fe:	230a      	movs	r3, #10
 8007700:	f002 fd38 	bl	800a174 <_strtol_r>
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007708:	1ac2      	subs	r2, r0, r3
 800770a:	0023      	movs	r3, r4
 800770c:	3370      	adds	r3, #112	@ 0x70
 800770e:	33ff      	adds	r3, #255	@ 0xff
 8007710:	429f      	cmp	r7, r3
 8007712:	d302      	bcc.n	800771a <_scanf_float+0x3ce>
 8007714:	0027      	movs	r7, r4
 8007716:	376f      	adds	r7, #111	@ 0x6f
 8007718:	37ff      	adds	r7, #255	@ 0xff
 800771a:	0038      	movs	r0, r7
 800771c:	4910      	ldr	r1, [pc, #64]	@ (8007760 <_scanf_float+0x414>)
 800771e:	f000 f91b 	bl	8007958 <siprintf>
 8007722:	e7d0      	b.n	80076c6 <_scanf_float+0x37a>
 8007724:	1d19      	adds	r1, r3, #4
 8007726:	0752      	lsls	r2, r2, #29
 8007728:	d502      	bpl.n	8007730 <_scanf_float+0x3e4>
 800772a:	9a07      	ldr	r2, [sp, #28]
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	e7d9      	b.n	80076e4 <_scanf_float+0x398>
 8007730:	9a07      	ldr	r2, [sp, #28]
 8007732:	0030      	movs	r0, r6
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	681d      	ldr	r5, [r3, #0]
 8007738:	0032      	movs	r2, r6
 800773a:	003b      	movs	r3, r7
 800773c:	0039      	movs	r1, r7
 800773e:	f7fa fd29 	bl	8002194 <__aeabi_dcmpun>
 8007742:	2800      	cmp	r0, #0
 8007744:	d004      	beq.n	8007750 <_scanf_float+0x404>
 8007746:	4807      	ldr	r0, [pc, #28]	@ (8007764 <_scanf_float+0x418>)
 8007748:	f000 fa22 	bl	8007b90 <nanf>
 800774c:	6028      	str	r0, [r5, #0]
 800774e:	e7cc      	b.n	80076ea <_scanf_float+0x39e>
 8007750:	0030      	movs	r0, r6
 8007752:	0039      	movs	r1, r7
 8007754:	f7fa fdce 	bl	80022f4 <__aeabi_d2f>
 8007758:	e7f8      	b.n	800774c <_scanf_float+0x400>
 800775a:	2300      	movs	r3, #0
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	e62d      	b.n	80073bc <_scanf_float+0x70>
 8007760:	0800cd60 	.word	0x0800cd60
 8007764:	0800d0f5 	.word	0x0800d0f5

08007768 <std>:
 8007768:	2300      	movs	r3, #0
 800776a:	b510      	push	{r4, lr}
 800776c:	0004      	movs	r4, r0
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	6043      	str	r3, [r0, #4]
 8007772:	6083      	str	r3, [r0, #8]
 8007774:	8181      	strh	r1, [r0, #12]
 8007776:	6643      	str	r3, [r0, #100]	@ 0x64
 8007778:	81c2      	strh	r2, [r0, #14]
 800777a:	6103      	str	r3, [r0, #16]
 800777c:	6143      	str	r3, [r0, #20]
 800777e:	6183      	str	r3, [r0, #24]
 8007780:	0019      	movs	r1, r3
 8007782:	2208      	movs	r2, #8
 8007784:	305c      	adds	r0, #92	@ 0x5c
 8007786:	f000 f966 	bl	8007a56 <memset>
 800778a:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <std+0x50>)
 800778c:	6224      	str	r4, [r4, #32]
 800778e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <std+0x54>)
 8007792:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007794:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <std+0x58>)
 8007796:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007798:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <std+0x5c>)
 800779a:	6323      	str	r3, [r4, #48]	@ 0x30
 800779c:	4b0a      	ldr	r3, [pc, #40]	@ (80077c8 <std+0x60>)
 800779e:	429c      	cmp	r4, r3
 80077a0:	d005      	beq.n	80077ae <std+0x46>
 80077a2:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <std+0x64>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d002      	beq.n	80077ae <std+0x46>
 80077a8:	4b09      	ldr	r3, [pc, #36]	@ (80077d0 <std+0x68>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d103      	bne.n	80077b6 <std+0x4e>
 80077ae:	0020      	movs	r0, r4
 80077b0:	3058      	adds	r0, #88	@ 0x58
 80077b2:	f000 f9d5 	bl	8007b60 <__retarget_lock_init_recursive>
 80077b6:	bd10      	pop	{r4, pc}
 80077b8:	08007999 	.word	0x08007999
 80077bc:	080079c1 	.word	0x080079c1
 80077c0:	080079f9 	.word	0x080079f9
 80077c4:	08007a25 	.word	0x08007a25
 80077c8:	200007e4 	.word	0x200007e4
 80077cc:	2000084c 	.word	0x2000084c
 80077d0:	200008b4 	.word	0x200008b4

080077d4 <stdio_exit_handler>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	4a03      	ldr	r2, [pc, #12]	@ (80077e4 <stdio_exit_handler+0x10>)
 80077d8:	4903      	ldr	r1, [pc, #12]	@ (80077e8 <stdio_exit_handler+0x14>)
 80077da:	4804      	ldr	r0, [pc, #16]	@ (80077ec <stdio_exit_handler+0x18>)
 80077dc:	f000 f86c 	bl	80078b8 <_fwalk_sglue>
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	2000002c 	.word	0x2000002c
 80077e8:	0800a545 	.word	0x0800a545
 80077ec:	2000003c 	.word	0x2000003c

080077f0 <cleanup_stdio>:
 80077f0:	6841      	ldr	r1, [r0, #4]
 80077f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <cleanup_stdio+0x30>)
 80077f4:	b510      	push	{r4, lr}
 80077f6:	0004      	movs	r4, r0
 80077f8:	4299      	cmp	r1, r3
 80077fa:	d001      	beq.n	8007800 <cleanup_stdio+0x10>
 80077fc:	f002 fea2 	bl	800a544 <_fflush_r>
 8007800:	68a1      	ldr	r1, [r4, #8]
 8007802:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <cleanup_stdio+0x34>)
 8007804:	4299      	cmp	r1, r3
 8007806:	d002      	beq.n	800780e <cleanup_stdio+0x1e>
 8007808:	0020      	movs	r0, r4
 800780a:	f002 fe9b 	bl	800a544 <_fflush_r>
 800780e:	68e1      	ldr	r1, [r4, #12]
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <cleanup_stdio+0x38>)
 8007812:	4299      	cmp	r1, r3
 8007814:	d002      	beq.n	800781c <cleanup_stdio+0x2c>
 8007816:	0020      	movs	r0, r4
 8007818:	f002 fe94 	bl	800a544 <_fflush_r>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	200007e4 	.word	0x200007e4
 8007824:	2000084c 	.word	0x2000084c
 8007828:	200008b4 	.word	0x200008b4

0800782c <global_stdio_init.part.0>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <global_stdio_init.part.0+0x28>)
 8007830:	4a09      	ldr	r2, [pc, #36]	@ (8007858 <global_stdio_init.part.0+0x2c>)
 8007832:	2104      	movs	r1, #4
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	4809      	ldr	r0, [pc, #36]	@ (800785c <global_stdio_init.part.0+0x30>)
 8007838:	2200      	movs	r2, #0
 800783a:	f7ff ff95 	bl	8007768 <std>
 800783e:	2201      	movs	r2, #1
 8007840:	2109      	movs	r1, #9
 8007842:	4807      	ldr	r0, [pc, #28]	@ (8007860 <global_stdio_init.part.0+0x34>)
 8007844:	f7ff ff90 	bl	8007768 <std>
 8007848:	2202      	movs	r2, #2
 800784a:	2112      	movs	r1, #18
 800784c:	4805      	ldr	r0, [pc, #20]	@ (8007864 <global_stdio_init.part.0+0x38>)
 800784e:	f7ff ff8b 	bl	8007768 <std>
 8007852:	bd10      	pop	{r4, pc}
 8007854:	2000091c 	.word	0x2000091c
 8007858:	080077d5 	.word	0x080077d5
 800785c:	200007e4 	.word	0x200007e4
 8007860:	2000084c 	.word	0x2000084c
 8007864:	200008b4 	.word	0x200008b4

08007868 <__sfp_lock_acquire>:
 8007868:	b510      	push	{r4, lr}
 800786a:	4802      	ldr	r0, [pc, #8]	@ (8007874 <__sfp_lock_acquire+0xc>)
 800786c:	f000 f979 	bl	8007b62 <__retarget_lock_acquire_recursive>
 8007870:	bd10      	pop	{r4, pc}
 8007872:	46c0      	nop			@ (mov r8, r8)
 8007874:	20000925 	.word	0x20000925

08007878 <__sfp_lock_release>:
 8007878:	b510      	push	{r4, lr}
 800787a:	4802      	ldr	r0, [pc, #8]	@ (8007884 <__sfp_lock_release+0xc>)
 800787c:	f000 f972 	bl	8007b64 <__retarget_lock_release_recursive>
 8007880:	bd10      	pop	{r4, pc}
 8007882:	46c0      	nop			@ (mov r8, r8)
 8007884:	20000925 	.word	0x20000925

08007888 <__sinit>:
 8007888:	b510      	push	{r4, lr}
 800788a:	0004      	movs	r4, r0
 800788c:	f7ff ffec 	bl	8007868 <__sfp_lock_acquire>
 8007890:	6a23      	ldr	r3, [r4, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <__sinit+0x14>
 8007896:	f7ff ffef 	bl	8007878 <__sfp_lock_release>
 800789a:	bd10      	pop	{r4, pc}
 800789c:	4b04      	ldr	r3, [pc, #16]	@ (80078b0 <__sinit+0x28>)
 800789e:	6223      	str	r3, [r4, #32]
 80078a0:	4b04      	ldr	r3, [pc, #16]	@ (80078b4 <__sinit+0x2c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1f6      	bne.n	8007896 <__sinit+0xe>
 80078a8:	f7ff ffc0 	bl	800782c <global_stdio_init.part.0>
 80078ac:	e7f3      	b.n	8007896 <__sinit+0xe>
 80078ae:	46c0      	nop			@ (mov r8, r8)
 80078b0:	080077f1 	.word	0x080077f1
 80078b4:	2000091c 	.word	0x2000091c

080078b8 <_fwalk_sglue>:
 80078b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ba:	0014      	movs	r4, r2
 80078bc:	2600      	movs	r6, #0
 80078be:	9000      	str	r0, [sp, #0]
 80078c0:	9101      	str	r1, [sp, #4]
 80078c2:	68a5      	ldr	r5, [r4, #8]
 80078c4:	6867      	ldr	r7, [r4, #4]
 80078c6:	3f01      	subs	r7, #1
 80078c8:	d504      	bpl.n	80078d4 <_fwalk_sglue+0x1c>
 80078ca:	6824      	ldr	r4, [r4, #0]
 80078cc:	2c00      	cmp	r4, #0
 80078ce:	d1f8      	bne.n	80078c2 <_fwalk_sglue+0xa>
 80078d0:	0030      	movs	r0, r6
 80078d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078d4:	89ab      	ldrh	r3, [r5, #12]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d908      	bls.n	80078ec <_fwalk_sglue+0x34>
 80078da:	220e      	movs	r2, #14
 80078dc:	5eab      	ldrsh	r3, [r5, r2]
 80078de:	3301      	adds	r3, #1
 80078e0:	d004      	beq.n	80078ec <_fwalk_sglue+0x34>
 80078e2:	0029      	movs	r1, r5
 80078e4:	9800      	ldr	r0, [sp, #0]
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	4798      	blx	r3
 80078ea:	4306      	orrs	r6, r0
 80078ec:	3568      	adds	r5, #104	@ 0x68
 80078ee:	e7ea      	b.n	80078c6 <_fwalk_sglue+0xe>

080078f0 <sniprintf>:
 80078f0:	b40c      	push	{r2, r3}
 80078f2:	b530      	push	{r4, r5, lr}
 80078f4:	4b17      	ldr	r3, [pc, #92]	@ (8007954 <sniprintf+0x64>)
 80078f6:	000c      	movs	r4, r1
 80078f8:	681d      	ldr	r5, [r3, #0]
 80078fa:	b09d      	sub	sp, #116	@ 0x74
 80078fc:	2900      	cmp	r1, #0
 80078fe:	da08      	bge.n	8007912 <sniprintf+0x22>
 8007900:	238b      	movs	r3, #139	@ 0x8b
 8007902:	2001      	movs	r0, #1
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	4240      	negs	r0, r0
 8007908:	b01d      	add	sp, #116	@ 0x74
 800790a:	bc30      	pop	{r4, r5}
 800790c:	bc08      	pop	{r3}
 800790e:	b002      	add	sp, #8
 8007910:	4718      	bx	r3
 8007912:	2382      	movs	r3, #130	@ 0x82
 8007914:	466a      	mov	r2, sp
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	8293      	strh	r3, [r2, #20]
 800791a:	2300      	movs	r3, #0
 800791c:	9002      	str	r0, [sp, #8]
 800791e:	9006      	str	r0, [sp, #24]
 8007920:	4299      	cmp	r1, r3
 8007922:	d000      	beq.n	8007926 <sniprintf+0x36>
 8007924:	1e4b      	subs	r3, r1, #1
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	9307      	str	r3, [sp, #28]
 800792a:	2301      	movs	r3, #1
 800792c:	466a      	mov	r2, sp
 800792e:	425b      	negs	r3, r3
 8007930:	82d3      	strh	r3, [r2, #22]
 8007932:	0028      	movs	r0, r5
 8007934:	ab21      	add	r3, sp, #132	@ 0x84
 8007936:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007938:	a902      	add	r1, sp, #8
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	f002 fc7e 	bl	800a23c <_svfiprintf_r>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	da01      	bge.n	8007948 <sniprintf+0x58>
 8007944:	238b      	movs	r3, #139	@ 0x8b
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	2c00      	cmp	r4, #0
 800794a:	d0dd      	beq.n	8007908 <sniprintf+0x18>
 800794c:	2200      	movs	r2, #0
 800794e:	9b02      	ldr	r3, [sp, #8]
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e7d9      	b.n	8007908 <sniprintf+0x18>
 8007954:	20000038 	.word	0x20000038

08007958 <siprintf>:
 8007958:	b40e      	push	{r1, r2, r3}
 800795a:	b500      	push	{lr}
 800795c:	490b      	ldr	r1, [pc, #44]	@ (800798c <siprintf+0x34>)
 800795e:	b09c      	sub	sp, #112	@ 0x70
 8007960:	ab1d      	add	r3, sp, #116	@ 0x74
 8007962:	9002      	str	r0, [sp, #8]
 8007964:	9006      	str	r0, [sp, #24]
 8007966:	9107      	str	r1, [sp, #28]
 8007968:	9104      	str	r1, [sp, #16]
 800796a:	4809      	ldr	r0, [pc, #36]	@ (8007990 <siprintf+0x38>)
 800796c:	4909      	ldr	r1, [pc, #36]	@ (8007994 <siprintf+0x3c>)
 800796e:	cb04      	ldmia	r3!, {r2}
 8007970:	9105      	str	r1, [sp, #20]
 8007972:	6800      	ldr	r0, [r0, #0]
 8007974:	a902      	add	r1, sp, #8
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	f002 fc60 	bl	800a23c <_svfiprintf_r>
 800797c:	2200      	movs	r2, #0
 800797e:	9b02      	ldr	r3, [sp, #8]
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	b01c      	add	sp, #112	@ 0x70
 8007984:	bc08      	pop	{r3}
 8007986:	b003      	add	sp, #12
 8007988:	4718      	bx	r3
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	7fffffff 	.word	0x7fffffff
 8007990:	20000038 	.word	0x20000038
 8007994:	ffff0208 	.word	0xffff0208

08007998 <__sread>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	000c      	movs	r4, r1
 800799c:	250e      	movs	r5, #14
 800799e:	5f49      	ldrsh	r1, [r1, r5]
 80079a0:	f000 f88c 	bl	8007abc <_read_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	db03      	blt.n	80079b0 <__sread+0x18>
 80079a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80079aa:	181b      	adds	r3, r3, r0
 80079ac:	6563      	str	r3, [r4, #84]	@ 0x54
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	4a02      	ldr	r2, [pc, #8]	@ (80079bc <__sread+0x24>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	e7f9      	b.n	80079ae <__sread+0x16>
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	ffffefff 	.word	0xffffefff

080079c0 <__swrite>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	001f      	movs	r7, r3
 80079c4:	898b      	ldrh	r3, [r1, #12]
 80079c6:	0005      	movs	r5, r0
 80079c8:	000c      	movs	r4, r1
 80079ca:	0016      	movs	r6, r2
 80079cc:	05db      	lsls	r3, r3, #23
 80079ce:	d505      	bpl.n	80079dc <__swrite+0x1c>
 80079d0:	230e      	movs	r3, #14
 80079d2:	5ec9      	ldrsh	r1, [r1, r3]
 80079d4:	2200      	movs	r2, #0
 80079d6:	2302      	movs	r3, #2
 80079d8:	f000 f85c 	bl	8007a94 <_lseek_r>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	4a05      	ldr	r2, [pc, #20]	@ (80079f4 <__swrite+0x34>)
 80079e0:	0028      	movs	r0, r5
 80079e2:	4013      	ands	r3, r2
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	0032      	movs	r2, r6
 80079e8:	230e      	movs	r3, #14
 80079ea:	5ee1      	ldrsh	r1, [r4, r3]
 80079ec:	003b      	movs	r3, r7
 80079ee:	f000 f879 	bl	8007ae4 <_write_r>
 80079f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f4:	ffffefff 	.word	0xffffefff

080079f8 <__sseek>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	000c      	movs	r4, r1
 80079fc:	250e      	movs	r5, #14
 80079fe:	5f49      	ldrsh	r1, [r1, r5]
 8007a00:	f000 f848 	bl	8007a94 <_lseek_r>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	1c42      	adds	r2, r0, #1
 8007a08:	d103      	bne.n	8007a12 <__sseek+0x1a>
 8007a0a:	4a05      	ldr	r2, [pc, #20]	@ (8007a20 <__sseek+0x28>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	bd70      	pop	{r4, r5, r6, pc}
 8007a12:	2280      	movs	r2, #128	@ 0x80
 8007a14:	0152      	lsls	r2, r2, #5
 8007a16:	4313      	orrs	r3, r2
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a1c:	e7f8      	b.n	8007a10 <__sseek+0x18>
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	ffffefff 	.word	0xffffefff

08007a24 <__sclose>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	230e      	movs	r3, #14
 8007a28:	5ec9      	ldrsh	r1, [r1, r3]
 8007a2a:	f000 f821 	bl	8007a70 <_close_r>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <memmove>:
 8007a30:	b510      	push	{r4, lr}
 8007a32:	4288      	cmp	r0, r1
 8007a34:	d806      	bhi.n	8007a44 <memmove+0x14>
 8007a36:	2300      	movs	r3, #0
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d008      	beq.n	8007a4e <memmove+0x1e>
 8007a3c:	5ccc      	ldrb	r4, [r1, r3]
 8007a3e:	54c4      	strb	r4, [r0, r3]
 8007a40:	3301      	adds	r3, #1
 8007a42:	e7f9      	b.n	8007a38 <memmove+0x8>
 8007a44:	188b      	adds	r3, r1, r2
 8007a46:	4298      	cmp	r0, r3
 8007a48:	d2f5      	bcs.n	8007a36 <memmove+0x6>
 8007a4a:	3a01      	subs	r2, #1
 8007a4c:	d200      	bcs.n	8007a50 <memmove+0x20>
 8007a4e:	bd10      	pop	{r4, pc}
 8007a50:	5c8b      	ldrb	r3, [r1, r2]
 8007a52:	5483      	strb	r3, [r0, r2]
 8007a54:	e7f9      	b.n	8007a4a <memmove+0x1a>

08007a56 <memset>:
 8007a56:	0003      	movs	r3, r0
 8007a58:	1882      	adds	r2, r0, r2
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d100      	bne.n	8007a60 <memset+0xa>
 8007a5e:	4770      	bx	lr
 8007a60:	7019      	strb	r1, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	e7f9      	b.n	8007a5a <memset+0x4>
	...

08007a68 <_localeconv_r>:
 8007a68:	4800      	ldr	r0, [pc, #0]	@ (8007a6c <_localeconv_r+0x4>)
 8007a6a:	4770      	bx	lr
 8007a6c:	20000178 	.word	0x20000178

08007a70 <_close_r>:
 8007a70:	2300      	movs	r3, #0
 8007a72:	b570      	push	{r4, r5, r6, lr}
 8007a74:	4d06      	ldr	r5, [pc, #24]	@ (8007a90 <_close_r+0x20>)
 8007a76:	0004      	movs	r4, r0
 8007a78:	0008      	movs	r0, r1
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f7fb fd26 	bl	80034cc <_close>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d103      	bne.n	8007a8c <_close_r+0x1c>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d000      	beq.n	8007a8c <_close_r+0x1c>
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	46c0      	nop			@ (mov r8, r8)
 8007a90:	20000920 	.word	0x20000920

08007a94 <_lseek_r>:
 8007a94:	b570      	push	{r4, r5, r6, lr}
 8007a96:	0004      	movs	r4, r0
 8007a98:	0008      	movs	r0, r1
 8007a9a:	0011      	movs	r1, r2
 8007a9c:	001a      	movs	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4d05      	ldr	r5, [pc, #20]	@ (8007ab8 <_lseek_r+0x24>)
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7fb fd33 	bl	800350e <_lseek>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d103      	bne.n	8007ab4 <_lseek_r+0x20>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d000      	beq.n	8007ab4 <_lseek_r+0x20>
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	bd70      	pop	{r4, r5, r6, pc}
 8007ab6:	46c0      	nop			@ (mov r8, r8)
 8007ab8:	20000920 	.word	0x20000920

08007abc <_read_r>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	0004      	movs	r4, r0
 8007ac0:	0008      	movs	r0, r1
 8007ac2:	0011      	movs	r1, r2
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4d05      	ldr	r5, [pc, #20]	@ (8007ae0 <_read_r+0x24>)
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	f7fb fcc5 	bl	800345a <_read>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d103      	bne.n	8007adc <_read_r+0x20>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d000      	beq.n	8007adc <_read_r+0x20>
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	20000920 	.word	0x20000920

08007ae4 <_write_r>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	0004      	movs	r4, r0
 8007ae8:	0008      	movs	r0, r1
 8007aea:	0011      	movs	r1, r2
 8007aec:	001a      	movs	r2, r3
 8007aee:	2300      	movs	r3, #0
 8007af0:	4d05      	ldr	r5, [pc, #20]	@ (8007b08 <_write_r+0x24>)
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7fb fcce 	bl	8003494 <_write>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d103      	bne.n	8007b04 <_write_r+0x20>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d000      	beq.n	8007b04 <_write_r+0x20>
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	20000920 	.word	0x20000920

08007b0c <__errno>:
 8007b0c:	4b01      	ldr	r3, [pc, #4]	@ (8007b14 <__errno+0x8>)
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	4770      	bx	lr
 8007b12:	46c0      	nop			@ (mov r8, r8)
 8007b14:	20000038 	.word	0x20000038

08007b18 <__libc_init_array>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	4c0c      	ldr	r4, [pc, #48]	@ (8007b50 <__libc_init_array+0x38>)
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b54 <__libc_init_array+0x3c>)
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	d109      	bne.n	8007b3c <__libc_init_array+0x24>
 8007b28:	2600      	movs	r6, #0
 8007b2a:	f003 fe17 	bl	800b75c <_init>
 8007b2e:	4c0a      	ldr	r4, [pc, #40]	@ (8007b58 <__libc_init_array+0x40>)
 8007b30:	4d0a      	ldr	r5, [pc, #40]	@ (8007b5c <__libc_init_array+0x44>)
 8007b32:	1b64      	subs	r4, r4, r5
 8007b34:	10a4      	asrs	r4, r4, #2
 8007b36:	42a6      	cmp	r6, r4
 8007b38:	d105      	bne.n	8007b46 <__libc_init_array+0x2e>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	00b3      	lsls	r3, r6, #2
 8007b3e:	58eb      	ldr	r3, [r5, r3]
 8007b40:	4798      	blx	r3
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7ee      	b.n	8007b24 <__libc_init_array+0xc>
 8007b46:	00b3      	lsls	r3, r6, #2
 8007b48:	58eb      	ldr	r3, [r5, r3]
 8007b4a:	4798      	blx	r3
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	e7f2      	b.n	8007b36 <__libc_init_array+0x1e>
 8007b50:	0800d158 	.word	0x0800d158
 8007b54:	0800d158 	.word	0x0800d158
 8007b58:	0800d15c 	.word	0x0800d15c
 8007b5c:	0800d158 	.word	0x0800d158

08007b60 <__retarget_lock_init_recursive>:
 8007b60:	4770      	bx	lr

08007b62 <__retarget_lock_acquire_recursive>:
 8007b62:	4770      	bx	lr

08007b64 <__retarget_lock_release_recursive>:
 8007b64:	4770      	bx	lr

08007b66 <memchr>:
 8007b66:	b2c9      	uxtb	r1, r1
 8007b68:	1882      	adds	r2, r0, r2
 8007b6a:	4290      	cmp	r0, r2
 8007b6c:	d101      	bne.n	8007b72 <memchr+0xc>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	4770      	bx	lr
 8007b72:	7803      	ldrb	r3, [r0, #0]
 8007b74:	428b      	cmp	r3, r1
 8007b76:	d0fb      	beq.n	8007b70 <memchr+0xa>
 8007b78:	3001      	adds	r0, #1
 8007b7a:	e7f6      	b.n	8007b6a <memchr+0x4>

08007b7c <memcpy>:
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d100      	bne.n	8007b86 <memcpy+0xa>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	5ccc      	ldrb	r4, [r1, r3]
 8007b88:	54c4      	strb	r4, [r0, r3]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	e7f8      	b.n	8007b80 <memcpy+0x4>
	...

08007b90 <nanf>:
 8007b90:	4800      	ldr	r0, [pc, #0]	@ (8007b94 <nanf+0x4>)
 8007b92:	4770      	bx	lr
 8007b94:	7fc00000 	.word	0x7fc00000

08007b98 <quorem>:
 8007b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9a:	6902      	ldr	r2, [r0, #16]
 8007b9c:	690f      	ldr	r7, [r1, #16]
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	0006      	movs	r6, r0
 8007ba2:	000b      	movs	r3, r1
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	9102      	str	r1, [sp, #8]
 8007ba8:	42ba      	cmp	r2, r7
 8007baa:	db6d      	blt.n	8007c88 <quorem+0xf0>
 8007bac:	3f01      	subs	r7, #1
 8007bae:	00bc      	lsls	r4, r7, #2
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	191b      	adds	r3, r3, r4
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	0033      	movs	r3, r6
 8007bba:	3314      	adds	r3, #20
 8007bbc:	191c      	adds	r4, r3, r4
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	9804      	ldr	r0, [sp, #16]
 8007bc8:	681d      	ldr	r5, [r3, #0]
 8007bca:	3501      	adds	r5, #1
 8007bcc:	0029      	movs	r1, r5
 8007bce:	f7f8 fab3 	bl	8000138 <__udivsi3>
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	9000      	str	r0, [sp, #0]
 8007bd6:	42ab      	cmp	r3, r5
 8007bd8:	d32b      	bcc.n	8007c32 <quorem+0x9a>
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	9d01      	ldr	r5, [sp, #4]
 8007bde:	469c      	mov	ip, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	9305      	str	r3, [sp, #20]
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	4662      	mov	r2, ip
 8007be8:	ca08      	ldmia	r2!, {r3}
 8007bea:	6828      	ldr	r0, [r5, #0]
 8007bec:	4694      	mov	ip, r2
 8007bee:	9a00      	ldr	r2, [sp, #0]
 8007bf0:	b299      	uxth	r1, r3
 8007bf2:	4351      	muls	r1, r2
 8007bf4:	9a05      	ldr	r2, [sp, #20]
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	1889      	adds	r1, r1, r2
 8007bfa:	9a00      	ldr	r2, [sp, #0]
 8007bfc:	4353      	muls	r3, r2
 8007bfe:	0c0a      	lsrs	r2, r1, #16
 8007c00:	189b      	adds	r3, r3, r2
 8007c02:	0c1a      	lsrs	r2, r3, #16
 8007c04:	b289      	uxth	r1, r1
 8007c06:	9205      	str	r2, [sp, #20]
 8007c08:	b282      	uxth	r2, r0
 8007c0a:	1a52      	subs	r2, r2, r1
 8007c0c:	9904      	ldr	r1, [sp, #16]
 8007c0e:	0c00      	lsrs	r0, r0, #16
 8007c10:	1852      	adds	r2, r2, r1
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	1411      	asrs	r1, r2, #16
 8007c16:	1ac3      	subs	r3, r0, r3
 8007c18:	185b      	adds	r3, r3, r1
 8007c1a:	1419      	asrs	r1, r3, #16
 8007c1c:	b292      	uxth	r2, r2
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	431a      	orrs	r2, r3
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	9104      	str	r1, [sp, #16]
 8007c26:	c504      	stmia	r5!, {r2}
 8007c28:	4563      	cmp	r3, ip
 8007c2a:	d2dc      	bcs.n	8007be6 <quorem+0x4e>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d030      	beq.n	8007c94 <quorem+0xfc>
 8007c32:	0030      	movs	r0, r6
 8007c34:	9902      	ldr	r1, [sp, #8]
 8007c36:	f001 fa11 	bl	800905c <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	db23      	blt.n	8007c86 <quorem+0xee>
 8007c3e:	0034      	movs	r4, r6
 8007c40:	2500      	movs	r5, #0
 8007c42:	9902      	ldr	r1, [sp, #8]
 8007c44:	3414      	adds	r4, #20
 8007c46:	3114      	adds	r1, #20
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	c901      	ldmia	r1!, {r0}
 8007c4c:	9302      	str	r3, [sp, #8]
 8007c4e:	466b      	mov	r3, sp
 8007c50:	891b      	ldrh	r3, [r3, #8]
 8007c52:	b282      	uxth	r2, r0
 8007c54:	1a9a      	subs	r2, r3, r2
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	1952      	adds	r2, r2, r5
 8007c5a:	0c00      	lsrs	r0, r0, #16
 8007c5c:	0c1b      	lsrs	r3, r3, #16
 8007c5e:	1a1b      	subs	r3, r3, r0
 8007c60:	1410      	asrs	r0, r2, #16
 8007c62:	181b      	adds	r3, r3, r0
 8007c64:	141d      	asrs	r5, r3, #16
 8007c66:	b292      	uxth	r2, r2
 8007c68:	041b      	lsls	r3, r3, #16
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	c404      	stmia	r4!, {r2}
 8007c70:	428b      	cmp	r3, r1
 8007c72:	d2e9      	bcs.n	8007c48 <quorem+0xb0>
 8007c74:	9a01      	ldr	r2, [sp, #4]
 8007c76:	00bb      	lsls	r3, r7, #2
 8007c78:	18d3      	adds	r3, r2, r3
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d013      	beq.n	8007ca8 <quorem+0x110>
 8007c80:	9b00      	ldr	r3, [sp, #0]
 8007c82:	3301      	adds	r3, #1
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	9800      	ldr	r0, [sp, #0]
 8007c88:	b007      	add	sp, #28
 8007c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <quorem+0x104>
 8007c92:	3f01      	subs	r7, #1
 8007c94:	9b01      	ldr	r3, [sp, #4]
 8007c96:	3c04      	subs	r4, #4
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	d3f7      	bcc.n	8007c8c <quorem+0xf4>
 8007c9c:	6137      	str	r7, [r6, #16]
 8007c9e:	e7c8      	b.n	8007c32 <quorem+0x9a>
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d104      	bne.n	8007cb0 <quorem+0x118>
 8007ca6:	3f01      	subs	r7, #1
 8007ca8:	9a01      	ldr	r2, [sp, #4]
 8007caa:	3b04      	subs	r3, #4
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3f7      	bcc.n	8007ca0 <quorem+0x108>
 8007cb0:	6137      	str	r7, [r6, #16]
 8007cb2:	e7e5      	b.n	8007c80 <quorem+0xe8>

08007cb4 <_dtoa_r>:
 8007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb6:	0014      	movs	r4, r2
 8007cb8:	001d      	movs	r5, r3
 8007cba:	69c6      	ldr	r6, [r0, #28]
 8007cbc:	b09d      	sub	sp, #116	@ 0x74
 8007cbe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cc0:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007cc2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007cc4:	9003      	str	r0, [sp, #12]
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	d10f      	bne.n	8007cea <_dtoa_r+0x36>
 8007cca:	2010      	movs	r0, #16
 8007ccc:	f000 fe30 	bl	8008930 <malloc>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	1e02      	subs	r2, r0, #0
 8007cd4:	61d8      	str	r0, [r3, #28]
 8007cd6:	d104      	bne.n	8007ce2 <_dtoa_r+0x2e>
 8007cd8:	21ef      	movs	r1, #239	@ 0xef
 8007cda:	4bc7      	ldr	r3, [pc, #796]	@ (8007ff8 <_dtoa_r+0x344>)
 8007cdc:	48c7      	ldr	r0, [pc, #796]	@ (8007ffc <_dtoa_r+0x348>)
 8007cde:	f002 fc85 	bl	800a5ec <__assert_func>
 8007ce2:	6046      	str	r6, [r0, #4]
 8007ce4:	6086      	str	r6, [r0, #8]
 8007ce6:	6006      	str	r6, [r0, #0]
 8007ce8:	60c6      	str	r6, [r0, #12]
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d00b      	beq.n	8007d0c <_dtoa_r+0x58>
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4093      	lsls	r3, r2
 8007cfa:	604a      	str	r2, [r1, #4]
 8007cfc:	608b      	str	r3, [r1, #8]
 8007cfe:	9803      	ldr	r0, [sp, #12]
 8007d00:	f000 ff16 	bl	8008b30 <_Bfree>
 8007d04:	2200      	movs	r2, #0
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	da1e      	bge.n	8007d4e <_dtoa_r+0x9a>
 8007d10:	2301      	movs	r3, #1
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	006b      	lsls	r3, r5, #1
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8008000 <_dtoa_r+0x34c>)
 8007d1e:	4ab8      	ldr	r2, [pc, #736]	@ (8008000 <_dtoa_r+0x34c>)
 8007d20:	403b      	ands	r3, r7
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d116      	bne.n	8007d54 <_dtoa_r+0xa0>
 8007d26:	4bb7      	ldr	r3, [pc, #732]	@ (8008004 <_dtoa_r+0x350>)
 8007d28:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	033b      	lsls	r3, r7, #12
 8007d2e:	0b1b      	lsrs	r3, r3, #12
 8007d30:	4323      	orrs	r3, r4
 8007d32:	d101      	bne.n	8007d38 <_dtoa_r+0x84>
 8007d34:	f000 fd83 	bl	800883e <_dtoa_r+0xb8a>
 8007d38:	4bb3      	ldr	r3, [pc, #716]	@ (8008008 <_dtoa_r+0x354>)
 8007d3a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d3c:	9308      	str	r3, [sp, #32]
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	d002      	beq.n	8007d48 <_dtoa_r+0x94>
 8007d42:	4bb2      	ldr	r3, [pc, #712]	@ (800800c <_dtoa_r+0x358>)
 8007d44:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	9808      	ldr	r0, [sp, #32]
 8007d4a:	b01d      	add	sp, #116	@ 0x74
 8007d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4e:	2300      	movs	r3, #0
 8007d50:	603b      	str	r3, [r7, #0]
 8007d52:	e7e2      	b.n	8007d1a <_dtoa_r+0x66>
 8007d54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d58:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007d5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007d60:	2200      	movs	r2, #0
 8007d62:	2300      	movs	r3, #0
 8007d64:	f7f8 fb6e 	bl	8000444 <__aeabi_dcmpeq>
 8007d68:	1e06      	subs	r6, r0, #0
 8007d6a:	d00b      	beq.n	8007d84 <_dtoa_r+0xd0>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <_dtoa_r+0xca>
 8007d78:	4ba5      	ldr	r3, [pc, #660]	@ (8008010 <_dtoa_r+0x35c>)
 8007d7a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	4ba5      	ldr	r3, [pc, #660]	@ (8008014 <_dtoa_r+0x360>)
 8007d80:	9308      	str	r3, [sp, #32]
 8007d82:	e7e1      	b.n	8007d48 <_dtoa_r+0x94>
 8007d84:	ab1a      	add	r3, sp, #104	@ 0x68
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	9803      	ldr	r0, [sp, #12]
 8007d8e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d92:	f001 fa85 	bl	80092a0 <__d2b>
 8007d96:	007a      	lsls	r2, r7, #1
 8007d98:	9005      	str	r0, [sp, #20]
 8007d9a:	0d52      	lsrs	r2, r2, #21
 8007d9c:	d100      	bne.n	8007da0 <_dtoa_r+0xec>
 8007d9e:	e07b      	b.n	8007e98 <_dtoa_r+0x1e4>
 8007da0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007da2:	9618      	str	r6, [sp, #96]	@ 0x60
 8007da4:	0319      	lsls	r1, r3, #12
 8007da6:	4b9c      	ldr	r3, [pc, #624]	@ (8008018 <_dtoa_r+0x364>)
 8007da8:	0b09      	lsrs	r1, r1, #12
 8007daa:	430b      	orrs	r3, r1
 8007dac:	499b      	ldr	r1, [pc, #620]	@ (800801c <_dtoa_r+0x368>)
 8007dae:	1857      	adds	r7, r2, r1
 8007db0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007db2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007db4:	0019      	movs	r1, r3
 8007db6:	2200      	movs	r2, #0
 8007db8:	4b99      	ldr	r3, [pc, #612]	@ (8008020 <_dtoa_r+0x36c>)
 8007dba:	f7f9 fe4f 	bl	8001a5c <__aeabi_dsub>
 8007dbe:	4a99      	ldr	r2, [pc, #612]	@ (8008024 <_dtoa_r+0x370>)
 8007dc0:	4b99      	ldr	r3, [pc, #612]	@ (8008028 <_dtoa_r+0x374>)
 8007dc2:	f7f9 fb83 	bl	80014cc <__aeabi_dmul>
 8007dc6:	4a99      	ldr	r2, [pc, #612]	@ (800802c <_dtoa_r+0x378>)
 8007dc8:	4b99      	ldr	r3, [pc, #612]	@ (8008030 <_dtoa_r+0x37c>)
 8007dca:	f7f8 fbd7 	bl	800057c <__aeabi_dadd>
 8007dce:	0004      	movs	r4, r0
 8007dd0:	0038      	movs	r0, r7
 8007dd2:	000d      	movs	r5, r1
 8007dd4:	f7fa fa3c 	bl	8002250 <__aeabi_i2d>
 8007dd8:	4a96      	ldr	r2, [pc, #600]	@ (8008034 <_dtoa_r+0x380>)
 8007dda:	4b97      	ldr	r3, [pc, #604]	@ (8008038 <_dtoa_r+0x384>)
 8007ddc:	f7f9 fb76 	bl	80014cc <__aeabi_dmul>
 8007de0:	0002      	movs	r2, r0
 8007de2:	000b      	movs	r3, r1
 8007de4:	0020      	movs	r0, r4
 8007de6:	0029      	movs	r1, r5
 8007de8:	f7f8 fbc8 	bl	800057c <__aeabi_dadd>
 8007dec:	0004      	movs	r4, r0
 8007dee:	000d      	movs	r5, r1
 8007df0:	f7fa f9f2 	bl	80021d8 <__aeabi_d2iz>
 8007df4:	2200      	movs	r2, #0
 8007df6:	9004      	str	r0, [sp, #16]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	0020      	movs	r0, r4
 8007dfc:	0029      	movs	r1, r5
 8007dfe:	f7f8 fb27 	bl	8000450 <__aeabi_dcmplt>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d00b      	beq.n	8007e1e <_dtoa_r+0x16a>
 8007e06:	9804      	ldr	r0, [sp, #16]
 8007e08:	f7fa fa22 	bl	8002250 <__aeabi_i2d>
 8007e0c:	002b      	movs	r3, r5
 8007e0e:	0022      	movs	r2, r4
 8007e10:	f7f8 fb18 	bl	8000444 <__aeabi_dcmpeq>
 8007e14:	4243      	negs	r3, r0
 8007e16:	4158      	adcs	r0, r3
 8007e18:	9b04      	ldr	r3, [sp, #16]
 8007e1a:	1a1b      	subs	r3, r3, r0
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	2301      	movs	r3, #1
 8007e20:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	2b16      	cmp	r3, #22
 8007e26:	d810      	bhi.n	8007e4a <_dtoa_r+0x196>
 8007e28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e2c:	9a04      	ldr	r2, [sp, #16]
 8007e2e:	4b83      	ldr	r3, [pc, #524]	@ (800803c <_dtoa_r+0x388>)
 8007e30:	00d2      	lsls	r2, r2, #3
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f7f8 fb0a 	bl	8000450 <__aeabi_dcmplt>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d047      	beq.n	8007ed0 <_dtoa_r+0x21c>
 8007e40:	9b04      	ldr	r3, [sp, #16]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007e4e:	9206      	str	r2, [sp, #24]
 8007e50:	1bdb      	subs	r3, r3, r7
 8007e52:	1e5a      	subs	r2, r3, #1
 8007e54:	d53e      	bpl.n	8007ed4 <_dtoa_r+0x220>
 8007e56:	2201      	movs	r2, #1
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	9306      	str	r3, [sp, #24]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	db38      	blt.n	8007ed8 <_dtoa_r+0x224>
 8007e66:	9a04      	ldr	r2, [sp, #16]
 8007e68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e6a:	4694      	mov	ip, r2
 8007e6c:	4463      	add	r3, ip
 8007e6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e70:	2300      	movs	r3, #0
 8007e72:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e78:	2401      	movs	r4, #1
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d867      	bhi.n	8007f4e <_dtoa_r+0x29a>
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	dd02      	ble.n	8007e88 <_dtoa_r+0x1d4>
 8007e82:	2400      	movs	r4, #0
 8007e84:	3b04      	subs	r3, #4
 8007e86:	9322      	str	r3, [sp, #136]	@ 0x88
 8007e88:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e8a:	1e98      	subs	r0, r3, #2
 8007e8c:	2803      	cmp	r0, #3
 8007e8e:	d867      	bhi.n	8007f60 <_dtoa_r+0x2ac>
 8007e90:	f7f8 f93e 	bl	8000110 <__gnu_thumb1_case_uqi>
 8007e94:	5b383a2b 	.word	0x5b383a2b
 8007e98:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007e9a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007e9c:	18f6      	adds	r6, r6, r3
 8007e9e:	4b68      	ldr	r3, [pc, #416]	@ (8008040 <_dtoa_r+0x38c>)
 8007ea0:	18f2      	adds	r2, r6, r3
 8007ea2:	2a20      	cmp	r2, #32
 8007ea4:	dd0f      	ble.n	8007ec6 <_dtoa_r+0x212>
 8007ea6:	2340      	movs	r3, #64	@ 0x40
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	409f      	lsls	r7, r3
 8007eac:	4b65      	ldr	r3, [pc, #404]	@ (8008044 <_dtoa_r+0x390>)
 8007eae:	0038      	movs	r0, r7
 8007eb0:	18f3      	adds	r3, r6, r3
 8007eb2:	40dc      	lsrs	r4, r3
 8007eb4:	4320      	orrs	r0, r4
 8007eb6:	f7fa f9f9 	bl	80022ac <__aeabi_ui2d>
 8007eba:	2201      	movs	r2, #1
 8007ebc:	4b62      	ldr	r3, [pc, #392]	@ (8008048 <_dtoa_r+0x394>)
 8007ebe:	1e77      	subs	r7, r6, #1
 8007ec0:	18cb      	adds	r3, r1, r3
 8007ec2:	9218      	str	r2, [sp, #96]	@ 0x60
 8007ec4:	e776      	b.n	8007db4 <_dtoa_r+0x100>
 8007ec6:	2320      	movs	r3, #32
 8007ec8:	0020      	movs	r0, r4
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	4098      	lsls	r0, r3
 8007ece:	e7f2      	b.n	8007eb6 <_dtoa_r+0x202>
 8007ed0:	9015      	str	r0, [sp, #84]	@ 0x54
 8007ed2:	e7ba      	b.n	8007e4a <_dtoa_r+0x196>
 8007ed4:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ed6:	e7c3      	b.n	8007e60 <_dtoa_r+0x1ac>
 8007ed8:	9b06      	ldr	r3, [sp, #24]
 8007eda:	9a04      	ldr	r2, [sp, #16]
 8007edc:	1a9b      	subs	r3, r3, r2
 8007ede:	9306      	str	r3, [sp, #24]
 8007ee0:	4253      	negs	r3, r2
 8007ee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9314      	str	r3, [sp, #80]	@ 0x50
 8007ee8:	e7c5      	b.n	8007e76 <_dtoa_r+0x1c2>
 8007eea:	2300      	movs	r3, #0
 8007eec:	9310      	str	r3, [sp, #64]	@ 0x40
 8007eee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ef0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dc13      	bgt.n	8007f20 <_dtoa_r+0x26c>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	001a      	movs	r2, r3
 8007efc:	930e      	str	r3, [sp, #56]	@ 0x38
 8007efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f00:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007f02:	e00d      	b.n	8007f20 <_dtoa_r+0x26c>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e7f1      	b.n	8007eec <_dtoa_r+0x238>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f0e:	4694      	mov	ip, r2
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	4463      	add	r3, ip
 8007f14:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f16:	3301      	adds	r3, #1
 8007f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dc00      	bgt.n	8007f20 <_dtoa_r+0x26c>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	9a03      	ldr	r2, [sp, #12]
 8007f22:	2100      	movs	r1, #0
 8007f24:	69d0      	ldr	r0, [r2, #28]
 8007f26:	2204      	movs	r2, #4
 8007f28:	0015      	movs	r5, r2
 8007f2a:	3514      	adds	r5, #20
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	d91b      	bls.n	8007f68 <_dtoa_r+0x2b4>
 8007f30:	6041      	str	r1, [r0, #4]
 8007f32:	9803      	ldr	r0, [sp, #12]
 8007f34:	f000 fdb8 	bl	8008aa8 <_Balloc>
 8007f38:	9008      	str	r0, [sp, #32]
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d117      	bne.n	8007f6e <_dtoa_r+0x2ba>
 8007f3e:	21b0      	movs	r1, #176	@ 0xb0
 8007f40:	4b42      	ldr	r3, [pc, #264]	@ (800804c <_dtoa_r+0x398>)
 8007f42:	482e      	ldr	r0, [pc, #184]	@ (8007ffc <_dtoa_r+0x348>)
 8007f44:	9a08      	ldr	r2, [sp, #32]
 8007f46:	31ff      	adds	r1, #255	@ 0xff
 8007f48:	e6c9      	b.n	8007cde <_dtoa_r+0x2a>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e7dd      	b.n	8007f0a <_dtoa_r+0x256>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9410      	str	r4, [sp, #64]	@ 0x40
 8007f52:	9322      	str	r3, [sp, #136]	@ 0x88
 8007f54:	3b01      	subs	r3, #1
 8007f56:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	3313      	adds	r3, #19
 8007f5e:	e7cf      	b.n	8007f00 <_dtoa_r+0x24c>
 8007f60:	2301      	movs	r3, #1
 8007f62:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f64:	3b02      	subs	r3, #2
 8007f66:	e7f6      	b.n	8007f56 <_dtoa_r+0x2a2>
 8007f68:	3101      	adds	r1, #1
 8007f6a:	0052      	lsls	r2, r2, #1
 8007f6c:	e7dc      	b.n	8007f28 <_dtoa_r+0x274>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	9a08      	ldr	r2, [sp, #32]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f78:	2b0e      	cmp	r3, #14
 8007f7a:	d900      	bls.n	8007f7e <_dtoa_r+0x2ca>
 8007f7c:	e0d9      	b.n	8008132 <_dtoa_r+0x47e>
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d100      	bne.n	8007f84 <_dtoa_r+0x2d0>
 8007f82:	e0d6      	b.n	8008132 <_dtoa_r+0x47e>
 8007f84:	9b04      	ldr	r3, [sp, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	dd64      	ble.n	8008054 <_dtoa_r+0x3a0>
 8007f8a:	210f      	movs	r1, #15
 8007f8c:	9a04      	ldr	r2, [sp, #16]
 8007f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800803c <_dtoa_r+0x388>)
 8007f90:	400a      	ands	r2, r1
 8007f92:	00d2      	lsls	r2, r2, #3
 8007f94:	189b      	adds	r3, r3, r2
 8007f96:	681e      	ldr	r6, [r3, #0]
 8007f98:	685f      	ldr	r7, [r3, #4]
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	2402      	movs	r4, #2
 8007f9e:	111d      	asrs	r5, r3, #4
 8007fa0:	05db      	lsls	r3, r3, #23
 8007fa2:	d50a      	bpl.n	8007fba <_dtoa_r+0x306>
 8007fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8008050 <_dtoa_r+0x39c>)
 8007fa6:	400d      	ands	r5, r1
 8007fa8:	6a1a      	ldr	r2, [r3, #32]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007fae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007fb0:	f7f8 fe48 	bl	8000c44 <__aeabi_ddiv>
 8007fb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007fb8:	3401      	adds	r4, #1
 8007fba:	4b25      	ldr	r3, [pc, #148]	@ (8008050 <_dtoa_r+0x39c>)
 8007fbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	d108      	bne.n	8007fd4 <_dtoa_r+0x320>
 8007fc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007fc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fc6:	0032      	movs	r2, r6
 8007fc8:	003b      	movs	r3, r7
 8007fca:	f7f8 fe3b 	bl	8000c44 <__aeabi_ddiv>
 8007fce:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fd0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007fd2:	e05a      	b.n	800808a <_dtoa_r+0x3d6>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	421d      	tst	r5, r3
 8007fd8:	d009      	beq.n	8007fee <_dtoa_r+0x33a>
 8007fda:	18e4      	adds	r4, r4, r3
 8007fdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fde:	0030      	movs	r0, r6
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	0039      	movs	r1, r7
 8007fe6:	f7f9 fa71 	bl	80014cc <__aeabi_dmul>
 8007fea:	0006      	movs	r6, r0
 8007fec:	000f      	movs	r7, r1
 8007fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ff0:	106d      	asrs	r5, r5, #1
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	e7e2      	b.n	8007fbc <_dtoa_r+0x308>
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	0800cd72 	.word	0x0800cd72
 8007ffc:	0800cd89 	.word	0x0800cd89
 8008000:	7ff00000 	.word	0x7ff00000
 8008004:	0000270f 	.word	0x0000270f
 8008008:	0800cd6e 	.word	0x0800cd6e
 800800c:	0800cd71 	.word	0x0800cd71
 8008010:	0800cd3d 	.word	0x0800cd3d
 8008014:	0800cd3c 	.word	0x0800cd3c
 8008018:	3ff00000 	.word	0x3ff00000
 800801c:	fffffc01 	.word	0xfffffc01
 8008020:	3ff80000 	.word	0x3ff80000
 8008024:	636f4361 	.word	0x636f4361
 8008028:	3fd287a7 	.word	0x3fd287a7
 800802c:	8b60c8b3 	.word	0x8b60c8b3
 8008030:	3fc68a28 	.word	0x3fc68a28
 8008034:	509f79fb 	.word	0x509f79fb
 8008038:	3fd34413 	.word	0x3fd34413
 800803c:	0800ce80 	.word	0x0800ce80
 8008040:	00000432 	.word	0x00000432
 8008044:	00000412 	.word	0x00000412
 8008048:	fe100000 	.word	0xfe100000
 800804c:	0800cde1 	.word	0x0800cde1
 8008050:	0800ce58 	.word	0x0800ce58
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	2402      	movs	r4, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d016      	beq.n	800808a <_dtoa_r+0x3d6>
 800805c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800805e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008060:	220f      	movs	r2, #15
 8008062:	425d      	negs	r5, r3
 8008064:	402a      	ands	r2, r5
 8008066:	4bd7      	ldr	r3, [pc, #860]	@ (80083c4 <_dtoa_r+0x710>)
 8008068:	00d2      	lsls	r2, r2, #3
 800806a:	189b      	adds	r3, r3, r2
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f7f9 fa2c 	bl	80014cc <__aeabi_dmul>
 8008074:	2701      	movs	r7, #1
 8008076:	2300      	movs	r3, #0
 8008078:	900a      	str	r0, [sp, #40]	@ 0x28
 800807a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800807c:	4ed2      	ldr	r6, [pc, #840]	@ (80083c8 <_dtoa_r+0x714>)
 800807e:	112d      	asrs	r5, r5, #4
 8008080:	2d00      	cmp	r5, #0
 8008082:	d000      	beq.n	8008086 <_dtoa_r+0x3d2>
 8008084:	e0ba      	b.n	80081fc <_dtoa_r+0x548>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1a1      	bne.n	8007fce <_dtoa_r+0x31a>
 800808a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800808c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800808e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008090:	2b00      	cmp	r3, #0
 8008092:	d100      	bne.n	8008096 <_dtoa_r+0x3e2>
 8008094:	e0bd      	b.n	8008212 <_dtoa_r+0x55e>
 8008096:	2200      	movs	r2, #0
 8008098:	0030      	movs	r0, r6
 800809a:	0039      	movs	r1, r7
 800809c:	4bcb      	ldr	r3, [pc, #812]	@ (80083cc <_dtoa_r+0x718>)
 800809e:	f7f8 f9d7 	bl	8000450 <__aeabi_dcmplt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d100      	bne.n	80080a8 <_dtoa_r+0x3f4>
 80080a6:	e0b4      	b.n	8008212 <_dtoa_r+0x55e>
 80080a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d100      	bne.n	80080b0 <_dtoa_r+0x3fc>
 80080ae:	e0b0      	b.n	8008212 <_dtoa_r+0x55e>
 80080b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	dd39      	ble.n	800812a <_dtoa_r+0x476>
 80080b6:	9b04      	ldr	r3, [sp, #16]
 80080b8:	2200      	movs	r2, #0
 80080ba:	3b01      	subs	r3, #1
 80080bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80080be:	0030      	movs	r0, r6
 80080c0:	4bc3      	ldr	r3, [pc, #780]	@ (80083d0 <_dtoa_r+0x71c>)
 80080c2:	0039      	movs	r1, r7
 80080c4:	f7f9 fa02 	bl	80014cc <__aeabi_dmul>
 80080c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80080ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ce:	3401      	adds	r4, #1
 80080d0:	0020      	movs	r0, r4
 80080d2:	9311      	str	r3, [sp, #68]	@ 0x44
 80080d4:	f7fa f8bc 	bl	8002250 <__aeabi_i2d>
 80080d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080dc:	f7f9 f9f6 	bl	80014cc <__aeabi_dmul>
 80080e0:	4bbc      	ldr	r3, [pc, #752]	@ (80083d4 <_dtoa_r+0x720>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 fa4a 	bl	800057c <__aeabi_dadd>
 80080e8:	4bbb      	ldr	r3, [pc, #748]	@ (80083d8 <_dtoa_r+0x724>)
 80080ea:	0006      	movs	r6, r0
 80080ec:	18cf      	adds	r7, r1, r3
 80080ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d000      	beq.n	80080f6 <_dtoa_r+0x442>
 80080f4:	e091      	b.n	800821a <_dtoa_r+0x566>
 80080f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080fa:	2200      	movs	r2, #0
 80080fc:	4bb7      	ldr	r3, [pc, #732]	@ (80083dc <_dtoa_r+0x728>)
 80080fe:	f7f9 fcad 	bl	8001a5c <__aeabi_dsub>
 8008102:	0032      	movs	r2, r6
 8008104:	003b      	movs	r3, r7
 8008106:	0004      	movs	r4, r0
 8008108:	000d      	movs	r5, r1
 800810a:	f7f8 f9b5 	bl	8000478 <__aeabi_dcmpgt>
 800810e:	2800      	cmp	r0, #0
 8008110:	d000      	beq.n	8008114 <_dtoa_r+0x460>
 8008112:	e29d      	b.n	8008650 <_dtoa_r+0x99c>
 8008114:	2180      	movs	r1, #128	@ 0x80
 8008116:	0609      	lsls	r1, r1, #24
 8008118:	187b      	adds	r3, r7, r1
 800811a:	0032      	movs	r2, r6
 800811c:	0020      	movs	r0, r4
 800811e:	0029      	movs	r1, r5
 8008120:	f7f8 f996 	bl	8000450 <__aeabi_dcmplt>
 8008124:	2800      	cmp	r0, #0
 8008126:	d000      	beq.n	800812a <_dtoa_r+0x476>
 8008128:	e130      	b.n	800838c <_dtoa_r+0x6d8>
 800812a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800812c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800812e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008130:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008132:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008134:	2b00      	cmp	r3, #0
 8008136:	da00      	bge.n	800813a <_dtoa_r+0x486>
 8008138:	e177      	b.n	800842a <_dtoa_r+0x776>
 800813a:	9a04      	ldr	r2, [sp, #16]
 800813c:	2a0e      	cmp	r2, #14
 800813e:	dd00      	ble.n	8008142 <_dtoa_r+0x48e>
 8008140:	e173      	b.n	800842a <_dtoa_r+0x776>
 8008142:	4ba0      	ldr	r3, [pc, #640]	@ (80083c4 <_dtoa_r+0x710>)
 8008144:	00d2      	lsls	r2, r2, #3
 8008146:	189b      	adds	r3, r3, r2
 8008148:	685c      	ldr	r4, [r3, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9306      	str	r3, [sp, #24]
 800814e:	9407      	str	r4, [sp, #28]
 8008150:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008152:	2b00      	cmp	r3, #0
 8008154:	da03      	bge.n	800815e <_dtoa_r+0x4aa>
 8008156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008158:	2b00      	cmp	r3, #0
 800815a:	dc00      	bgt.n	800815e <_dtoa_r+0x4aa>
 800815c:	e106      	b.n	800836c <_dtoa_r+0x6b8>
 800815e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008160:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008164:	9d08      	ldr	r5, [sp, #32]
 8008166:	3b01      	subs	r3, #1
 8008168:	195b      	adds	r3, r3, r5
 800816a:	930a      	str	r3, [sp, #40]	@ 0x28
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	0030      	movs	r0, r6
 8008172:	0039      	movs	r1, r7
 8008174:	f7f8 fd66 	bl	8000c44 <__aeabi_ddiv>
 8008178:	f7fa f82e 	bl	80021d8 <__aeabi_d2iz>
 800817c:	9009      	str	r0, [sp, #36]	@ 0x24
 800817e:	f7fa f867 	bl	8002250 <__aeabi_i2d>
 8008182:	9a06      	ldr	r2, [sp, #24]
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	f7f9 f9a1 	bl	80014cc <__aeabi_dmul>
 800818a:	0002      	movs	r2, r0
 800818c:	000b      	movs	r3, r1
 800818e:	0030      	movs	r0, r6
 8008190:	0039      	movs	r1, r7
 8008192:	f7f9 fc63 	bl	8001a5c <__aeabi_dsub>
 8008196:	002b      	movs	r3, r5
 8008198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800819a:	3501      	adds	r5, #1
 800819c:	3230      	adds	r2, #48	@ 0x30
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081a2:	002c      	movs	r4, r5
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d000      	beq.n	80081aa <_dtoa_r+0x4f6>
 80081a8:	e131      	b.n	800840e <_dtoa_r+0x75a>
 80081aa:	0002      	movs	r2, r0
 80081ac:	000b      	movs	r3, r1
 80081ae:	f7f8 f9e5 	bl	800057c <__aeabi_dadd>
 80081b2:	9a06      	ldr	r2, [sp, #24]
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	0006      	movs	r6, r0
 80081b8:	000f      	movs	r7, r1
 80081ba:	f7f8 f95d 	bl	8000478 <__aeabi_dcmpgt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d000      	beq.n	80081c4 <_dtoa_r+0x510>
 80081c2:	e10f      	b.n	80083e4 <_dtoa_r+0x730>
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	9b07      	ldr	r3, [sp, #28]
 80081c8:	0030      	movs	r0, r6
 80081ca:	0039      	movs	r1, r7
 80081cc:	f7f8 f93a 	bl	8000444 <__aeabi_dcmpeq>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d003      	beq.n	80081dc <_dtoa_r+0x528>
 80081d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d6:	07dd      	lsls	r5, r3, #31
 80081d8:	d500      	bpl.n	80081dc <_dtoa_r+0x528>
 80081da:	e103      	b.n	80083e4 <_dtoa_r+0x730>
 80081dc:	9905      	ldr	r1, [sp, #20]
 80081de:	9803      	ldr	r0, [sp, #12]
 80081e0:	f000 fca6 	bl	8008b30 <_Bfree>
 80081e4:	2300      	movs	r3, #0
 80081e6:	7023      	strb	r3, [r4, #0]
 80081e8:	9b04      	ldr	r3, [sp, #16]
 80081ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081ec:	3301      	adds	r3, #1
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d100      	bne.n	80081f8 <_dtoa_r+0x544>
 80081f6:	e5a7      	b.n	8007d48 <_dtoa_r+0x94>
 80081f8:	601c      	str	r4, [r3, #0]
 80081fa:	e5a5      	b.n	8007d48 <_dtoa_r+0x94>
 80081fc:	423d      	tst	r5, r7
 80081fe:	d005      	beq.n	800820c <_dtoa_r+0x558>
 8008200:	6832      	ldr	r2, [r6, #0]
 8008202:	6873      	ldr	r3, [r6, #4]
 8008204:	f7f9 f962 	bl	80014cc <__aeabi_dmul>
 8008208:	003b      	movs	r3, r7
 800820a:	3401      	adds	r4, #1
 800820c:	106d      	asrs	r5, r5, #1
 800820e:	3608      	adds	r6, #8
 8008210:	e736      	b.n	8008080 <_dtoa_r+0x3cc>
 8008212:	9b04      	ldr	r3, [sp, #16]
 8008214:	930c      	str	r3, [sp, #48]	@ 0x30
 8008216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008218:	e75a      	b.n	80080d0 <_dtoa_r+0x41c>
 800821a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800821c:	4b69      	ldr	r3, [pc, #420]	@ (80083c4 <_dtoa_r+0x710>)
 800821e:	3a01      	subs	r2, #1
 8008220:	00d2      	lsls	r2, r2, #3
 8008222:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008224:	189b      	adds	r3, r3, r2
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2900      	cmp	r1, #0
 800822c:	d04c      	beq.n	80082c8 <_dtoa_r+0x614>
 800822e:	2000      	movs	r0, #0
 8008230:	496b      	ldr	r1, [pc, #428]	@ (80083e0 <_dtoa_r+0x72c>)
 8008232:	f7f8 fd07 	bl	8000c44 <__aeabi_ddiv>
 8008236:	0032      	movs	r2, r6
 8008238:	003b      	movs	r3, r7
 800823a:	f7f9 fc0f 	bl	8001a5c <__aeabi_dsub>
 800823e:	9a08      	ldr	r2, [sp, #32]
 8008240:	0006      	movs	r6, r0
 8008242:	4694      	mov	ip, r2
 8008244:	000f      	movs	r7, r1
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	9316      	str	r3, [sp, #88]	@ 0x58
 800824a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800824c:	4463      	add	r3, ip
 800824e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008250:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008252:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008254:	f7f9 ffc0 	bl	80021d8 <__aeabi_d2iz>
 8008258:	0005      	movs	r5, r0
 800825a:	f7f9 fff9 	bl	8002250 <__aeabi_i2d>
 800825e:	0002      	movs	r2, r0
 8008260:	000b      	movs	r3, r1
 8008262:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008266:	f7f9 fbf9 	bl	8001a5c <__aeabi_dsub>
 800826a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800826c:	3530      	adds	r5, #48	@ 0x30
 800826e:	1c5c      	adds	r4, r3, #1
 8008270:	701d      	strb	r5, [r3, #0]
 8008272:	0032      	movs	r2, r6
 8008274:	003b      	movs	r3, r7
 8008276:	900a      	str	r0, [sp, #40]	@ 0x28
 8008278:	910b      	str	r1, [sp, #44]	@ 0x2c
 800827a:	f7f8 f8e9 	bl	8000450 <__aeabi_dcmplt>
 800827e:	2800      	cmp	r0, #0
 8008280:	d16a      	bne.n	8008358 <_dtoa_r+0x6a4>
 8008282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008286:	2000      	movs	r0, #0
 8008288:	4950      	ldr	r1, [pc, #320]	@ (80083cc <_dtoa_r+0x718>)
 800828a:	f7f9 fbe7 	bl	8001a5c <__aeabi_dsub>
 800828e:	0032      	movs	r2, r6
 8008290:	003b      	movs	r3, r7
 8008292:	f7f8 f8dd 	bl	8000450 <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	d000      	beq.n	800829c <_dtoa_r+0x5e8>
 800829a:	e0a5      	b.n	80083e8 <_dtoa_r+0x734>
 800829c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800829e:	42a3      	cmp	r3, r4
 80082a0:	d100      	bne.n	80082a4 <_dtoa_r+0x5f0>
 80082a2:	e742      	b.n	800812a <_dtoa_r+0x476>
 80082a4:	2200      	movs	r2, #0
 80082a6:	0030      	movs	r0, r6
 80082a8:	0039      	movs	r1, r7
 80082aa:	4b49      	ldr	r3, [pc, #292]	@ (80083d0 <_dtoa_r+0x71c>)
 80082ac:	f7f9 f90e 	bl	80014cc <__aeabi_dmul>
 80082b0:	2200      	movs	r2, #0
 80082b2:	0006      	movs	r6, r0
 80082b4:	000f      	movs	r7, r1
 80082b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082ba:	4b45      	ldr	r3, [pc, #276]	@ (80083d0 <_dtoa_r+0x71c>)
 80082bc:	f7f9 f906 	bl	80014cc <__aeabi_dmul>
 80082c0:	9416      	str	r4, [sp, #88]	@ 0x58
 80082c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80082c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082c6:	e7c3      	b.n	8008250 <_dtoa_r+0x59c>
 80082c8:	0030      	movs	r0, r6
 80082ca:	0039      	movs	r1, r7
 80082cc:	f7f9 f8fe 	bl	80014cc <__aeabi_dmul>
 80082d0:	9d08      	ldr	r5, [sp, #32]
 80082d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80082d4:	002b      	movs	r3, r5
 80082d6:	4694      	mov	ip, r2
 80082d8:	9016      	str	r0, [sp, #88]	@ 0x58
 80082da:	9117      	str	r1, [sp, #92]	@ 0x5c
 80082dc:	4463      	add	r3, ip
 80082de:	9319      	str	r3, [sp, #100]	@ 0x64
 80082e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082e4:	f7f9 ff78 	bl	80021d8 <__aeabi_d2iz>
 80082e8:	0004      	movs	r4, r0
 80082ea:	f7f9 ffb1 	bl	8002250 <__aeabi_i2d>
 80082ee:	000b      	movs	r3, r1
 80082f0:	0002      	movs	r2, r0
 80082f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082f6:	f7f9 fbb1 	bl	8001a5c <__aeabi_dsub>
 80082fa:	3430      	adds	r4, #48	@ 0x30
 80082fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082fe:	702c      	strb	r4, [r5, #0]
 8008300:	3501      	adds	r5, #1
 8008302:	0006      	movs	r6, r0
 8008304:	000f      	movs	r7, r1
 8008306:	42ab      	cmp	r3, r5
 8008308:	d129      	bne.n	800835e <_dtoa_r+0x6aa>
 800830a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800830c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800830e:	9b08      	ldr	r3, [sp, #32]
 8008310:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008312:	469c      	mov	ip, r3
 8008314:	2200      	movs	r2, #0
 8008316:	4b32      	ldr	r3, [pc, #200]	@ (80083e0 <_dtoa_r+0x72c>)
 8008318:	4464      	add	r4, ip
 800831a:	f7f8 f92f 	bl	800057c <__aeabi_dadd>
 800831e:	0002      	movs	r2, r0
 8008320:	000b      	movs	r3, r1
 8008322:	0030      	movs	r0, r6
 8008324:	0039      	movs	r1, r7
 8008326:	f7f8 f8a7 	bl	8000478 <__aeabi_dcmpgt>
 800832a:	2800      	cmp	r0, #0
 800832c:	d15c      	bne.n	80083e8 <_dtoa_r+0x734>
 800832e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008330:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008332:	2000      	movs	r0, #0
 8008334:	492a      	ldr	r1, [pc, #168]	@ (80083e0 <_dtoa_r+0x72c>)
 8008336:	f7f9 fb91 	bl	8001a5c <__aeabi_dsub>
 800833a:	0002      	movs	r2, r0
 800833c:	000b      	movs	r3, r1
 800833e:	0030      	movs	r0, r6
 8008340:	0039      	movs	r1, r7
 8008342:	f7f8 f885 	bl	8000450 <__aeabi_dcmplt>
 8008346:	2800      	cmp	r0, #0
 8008348:	d100      	bne.n	800834c <_dtoa_r+0x698>
 800834a:	e6ee      	b.n	800812a <_dtoa_r+0x476>
 800834c:	0023      	movs	r3, r4
 800834e:	3c01      	subs	r4, #1
 8008350:	7822      	ldrb	r2, [r4, #0]
 8008352:	2a30      	cmp	r2, #48	@ 0x30
 8008354:	d0fa      	beq.n	800834c <_dtoa_r+0x698>
 8008356:	001c      	movs	r4, r3
 8008358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	e73e      	b.n	80081dc <_dtoa_r+0x528>
 800835e:	2200      	movs	r2, #0
 8008360:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <_dtoa_r+0x71c>)
 8008362:	f7f9 f8b3 	bl	80014cc <__aeabi_dmul>
 8008366:	900a      	str	r0, [sp, #40]	@ 0x28
 8008368:	910b      	str	r1, [sp, #44]	@ 0x2c
 800836a:	e7b9      	b.n	80082e0 <_dtoa_r+0x62c>
 800836c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10c      	bne.n	800838c <_dtoa_r+0x6d8>
 8008372:	9806      	ldr	r0, [sp, #24]
 8008374:	9907      	ldr	r1, [sp, #28]
 8008376:	2200      	movs	r2, #0
 8008378:	4b18      	ldr	r3, [pc, #96]	@ (80083dc <_dtoa_r+0x728>)
 800837a:	f7f9 f8a7 	bl	80014cc <__aeabi_dmul>
 800837e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008382:	f7f8 f883 	bl	800048c <__aeabi_dcmpge>
 8008386:	2800      	cmp	r0, #0
 8008388:	d100      	bne.n	800838c <_dtoa_r+0x6d8>
 800838a:	e164      	b.n	8008656 <_dtoa_r+0x9a2>
 800838c:	2600      	movs	r6, #0
 800838e:	0037      	movs	r7, r6
 8008390:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008392:	9c08      	ldr	r4, [sp, #32]
 8008394:	43db      	mvns	r3, r3
 8008396:	930c      	str	r3, [sp, #48]	@ 0x30
 8008398:	2300      	movs	r3, #0
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	0031      	movs	r1, r6
 800839e:	9803      	ldr	r0, [sp, #12]
 80083a0:	f000 fbc6 	bl	8008b30 <_Bfree>
 80083a4:	2f00      	cmp	r7, #0
 80083a6:	d0d7      	beq.n	8008358 <_dtoa_r+0x6a4>
 80083a8:	9b04      	ldr	r3, [sp, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <_dtoa_r+0x706>
 80083ae:	42bb      	cmp	r3, r7
 80083b0:	d003      	beq.n	80083ba <_dtoa_r+0x706>
 80083b2:	0019      	movs	r1, r3
 80083b4:	9803      	ldr	r0, [sp, #12]
 80083b6:	f000 fbbb 	bl	8008b30 <_Bfree>
 80083ba:	0039      	movs	r1, r7
 80083bc:	9803      	ldr	r0, [sp, #12]
 80083be:	f000 fbb7 	bl	8008b30 <_Bfree>
 80083c2:	e7c9      	b.n	8008358 <_dtoa_r+0x6a4>
 80083c4:	0800ce80 	.word	0x0800ce80
 80083c8:	0800ce58 	.word	0x0800ce58
 80083cc:	3ff00000 	.word	0x3ff00000
 80083d0:	40240000 	.word	0x40240000
 80083d4:	401c0000 	.word	0x401c0000
 80083d8:	fcc00000 	.word	0xfcc00000
 80083dc:	40140000 	.word	0x40140000
 80083e0:	3fe00000 	.word	0x3fe00000
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80083e8:	0023      	movs	r3, r4
 80083ea:	001c      	movs	r4, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	2a39      	cmp	r2, #57	@ 0x39
 80083f2:	d108      	bne.n	8008406 <_dtoa_r+0x752>
 80083f4:	9a08      	ldr	r2, [sp, #32]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d1f7      	bne.n	80083ea <_dtoa_r+0x736>
 80083fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083fc:	9908      	ldr	r1, [sp, #32]
 80083fe:	3201      	adds	r2, #1
 8008400:	920c      	str	r2, [sp, #48]	@ 0x30
 8008402:	2230      	movs	r2, #48	@ 0x30
 8008404:	700a      	strb	r2, [r1, #0]
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	3201      	adds	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e7a4      	b.n	8008358 <_dtoa_r+0x6a4>
 800840e:	2200      	movs	r2, #0
 8008410:	4bc6      	ldr	r3, [pc, #792]	@ (800872c <_dtoa_r+0xa78>)
 8008412:	f7f9 f85b 	bl	80014cc <__aeabi_dmul>
 8008416:	2200      	movs	r2, #0
 8008418:	2300      	movs	r3, #0
 800841a:	0006      	movs	r6, r0
 800841c:	000f      	movs	r7, r1
 800841e:	f7f8 f811 	bl	8000444 <__aeabi_dcmpeq>
 8008422:	2800      	cmp	r0, #0
 8008424:	d100      	bne.n	8008428 <_dtoa_r+0x774>
 8008426:	e6a1      	b.n	800816c <_dtoa_r+0x4b8>
 8008428:	e6d8      	b.n	80081dc <_dtoa_r+0x528>
 800842a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800842c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800842e:	9c06      	ldr	r4, [sp, #24]
 8008430:	2f00      	cmp	r7, #0
 8008432:	d014      	beq.n	800845e <_dtoa_r+0x7aa>
 8008434:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008436:	2a01      	cmp	r2, #1
 8008438:	dd00      	ble.n	800843c <_dtoa_r+0x788>
 800843a:	e0c8      	b.n	80085ce <_dtoa_r+0x91a>
 800843c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800843e:	2a00      	cmp	r2, #0
 8008440:	d100      	bne.n	8008444 <_dtoa_r+0x790>
 8008442:	e0be      	b.n	80085c2 <_dtoa_r+0x90e>
 8008444:	4aba      	ldr	r2, [pc, #744]	@ (8008730 <_dtoa_r+0xa7c>)
 8008446:	189b      	adds	r3, r3, r2
 8008448:	9a06      	ldr	r2, [sp, #24]
 800844a:	2101      	movs	r1, #1
 800844c:	18d2      	adds	r2, r2, r3
 800844e:	9206      	str	r2, [sp, #24]
 8008450:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008452:	9803      	ldr	r0, [sp, #12]
 8008454:	18d3      	adds	r3, r2, r3
 8008456:	930d      	str	r3, [sp, #52]	@ 0x34
 8008458:	f000 fc6e 	bl	8008d38 <__i2b>
 800845c:	0007      	movs	r7, r0
 800845e:	2c00      	cmp	r4, #0
 8008460:	d00e      	beq.n	8008480 <_dtoa_r+0x7cc>
 8008462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd0b      	ble.n	8008480 <_dtoa_r+0x7cc>
 8008468:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800846a:	0023      	movs	r3, r4
 800846c:	4294      	cmp	r4, r2
 800846e:	dd00      	ble.n	8008472 <_dtoa_r+0x7be>
 8008470:	0013      	movs	r3, r2
 8008472:	9a06      	ldr	r2, [sp, #24]
 8008474:	1ae4      	subs	r4, r4, r3
 8008476:	1ad2      	subs	r2, r2, r3
 8008478:	9206      	str	r2, [sp, #24]
 800847a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01f      	beq.n	80084c6 <_dtoa_r+0x812>
 8008486:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d100      	bne.n	800848e <_dtoa_r+0x7da>
 800848c:	e0b5      	b.n	80085fa <_dtoa_r+0x946>
 800848e:	2d00      	cmp	r5, #0
 8008490:	d010      	beq.n	80084b4 <_dtoa_r+0x800>
 8008492:	0039      	movs	r1, r7
 8008494:	002a      	movs	r2, r5
 8008496:	9803      	ldr	r0, [sp, #12]
 8008498:	f000 fd18 	bl	8008ecc <__pow5mult>
 800849c:	9a05      	ldr	r2, [sp, #20]
 800849e:	0001      	movs	r1, r0
 80084a0:	0007      	movs	r7, r0
 80084a2:	9803      	ldr	r0, [sp, #12]
 80084a4:	f000 fc60 	bl	8008d68 <__multiply>
 80084a8:	0006      	movs	r6, r0
 80084aa:	9905      	ldr	r1, [sp, #20]
 80084ac:	9803      	ldr	r0, [sp, #12]
 80084ae:	f000 fb3f 	bl	8008b30 <_Bfree>
 80084b2:	9605      	str	r6, [sp, #20]
 80084b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b6:	1b5a      	subs	r2, r3, r5
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	d004      	beq.n	80084c6 <_dtoa_r+0x812>
 80084bc:	9905      	ldr	r1, [sp, #20]
 80084be:	9803      	ldr	r0, [sp, #12]
 80084c0:	f000 fd04 	bl	8008ecc <__pow5mult>
 80084c4:	9005      	str	r0, [sp, #20]
 80084c6:	2101      	movs	r1, #1
 80084c8:	9803      	ldr	r0, [sp, #12]
 80084ca:	f000 fc35 	bl	8008d38 <__i2b>
 80084ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084d0:	0006      	movs	r6, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d100      	bne.n	80084d8 <_dtoa_r+0x824>
 80084d6:	e1bc      	b.n	8008852 <_dtoa_r+0xb9e>
 80084d8:	001a      	movs	r2, r3
 80084da:	0001      	movs	r1, r0
 80084dc:	9803      	ldr	r0, [sp, #12]
 80084de:	f000 fcf5 	bl	8008ecc <__pow5mult>
 80084e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80084e4:	0006      	movs	r6, r0
 80084e6:	2500      	movs	r5, #0
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	dc16      	bgt.n	800851a <_dtoa_r+0x866>
 80084ec:	2500      	movs	r5, #0
 80084ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	d10e      	bne.n	8008512 <_dtoa_r+0x85e>
 80084f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084f6:	031b      	lsls	r3, r3, #12
 80084f8:	42ab      	cmp	r3, r5
 80084fa:	d10a      	bne.n	8008512 <_dtoa_r+0x85e>
 80084fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008734 <_dtoa_r+0xa80>)
 80084fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008500:	4213      	tst	r3, r2
 8008502:	d006      	beq.n	8008512 <_dtoa_r+0x85e>
 8008504:	9b06      	ldr	r3, [sp, #24]
 8008506:	3501      	adds	r5, #1
 8008508:	3301      	adds	r3, #1
 800850a:	9306      	str	r3, [sp, #24]
 800850c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800850e:	3301      	adds	r3, #1
 8008510:	930d      	str	r3, [sp, #52]	@ 0x34
 8008512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008514:	2001      	movs	r0, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <_dtoa_r+0x878>
 800851a:	6933      	ldr	r3, [r6, #16]
 800851c:	3303      	adds	r3, #3
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	18f3      	adds	r3, r6, r3
 8008522:	6858      	ldr	r0, [r3, #4]
 8008524:	f000 fbb8 	bl	8008c98 <__hi0bits>
 8008528:	2320      	movs	r3, #32
 800852a:	1a18      	subs	r0, r3, r0
 800852c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800852e:	1818      	adds	r0, r3, r0
 8008530:	0002      	movs	r2, r0
 8008532:	231f      	movs	r3, #31
 8008534:	401a      	ands	r2, r3
 8008536:	4218      	tst	r0, r3
 8008538:	d065      	beq.n	8008606 <_dtoa_r+0x952>
 800853a:	3301      	adds	r3, #1
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	2b04      	cmp	r3, #4
 8008540:	dd5d      	ble.n	80085fe <_dtoa_r+0x94a>
 8008542:	231c      	movs	r3, #28
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	9a06      	ldr	r2, [sp, #24]
 8008548:	18e4      	adds	r4, r4, r3
 800854a:	18d2      	adds	r2, r2, r3
 800854c:	9206      	str	r2, [sp, #24]
 800854e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008550:	18d3      	adds	r3, r2, r3
 8008552:	930d      	str	r3, [sp, #52]	@ 0x34
 8008554:	9b06      	ldr	r3, [sp, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd05      	ble.n	8008566 <_dtoa_r+0x8b2>
 800855a:	001a      	movs	r2, r3
 800855c:	9905      	ldr	r1, [sp, #20]
 800855e:	9803      	ldr	r0, [sp, #12]
 8008560:	f000 fd10 	bl	8008f84 <__lshift>
 8008564:	9005      	str	r0, [sp, #20]
 8008566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008568:	2b00      	cmp	r3, #0
 800856a:	dd05      	ble.n	8008578 <_dtoa_r+0x8c4>
 800856c:	0031      	movs	r1, r6
 800856e:	001a      	movs	r2, r3
 8008570:	9803      	ldr	r0, [sp, #12]
 8008572:	f000 fd07 	bl	8008f84 <__lshift>
 8008576:	0006      	movs	r6, r0
 8008578:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800857a:	2b00      	cmp	r3, #0
 800857c:	d045      	beq.n	800860a <_dtoa_r+0x956>
 800857e:	0031      	movs	r1, r6
 8008580:	9805      	ldr	r0, [sp, #20]
 8008582:	f000 fd6b 	bl	800905c <__mcmp>
 8008586:	2800      	cmp	r0, #0
 8008588:	da3f      	bge.n	800860a <_dtoa_r+0x956>
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	220a      	movs	r2, #10
 800858e:	3b01      	subs	r3, #1
 8008590:	930c      	str	r3, [sp, #48]	@ 0x30
 8008592:	9905      	ldr	r1, [sp, #20]
 8008594:	2300      	movs	r3, #0
 8008596:	9803      	ldr	r0, [sp, #12]
 8008598:	f000 faee 	bl	8008b78 <__multadd>
 800859c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800859e:	9005      	str	r0, [sp, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d100      	bne.n	80085a6 <_dtoa_r+0x8f2>
 80085a4:	e15c      	b.n	8008860 <_dtoa_r+0xbac>
 80085a6:	2300      	movs	r3, #0
 80085a8:	0039      	movs	r1, r7
 80085aa:	220a      	movs	r2, #10
 80085ac:	9803      	ldr	r0, [sp, #12]
 80085ae:	f000 fae3 	bl	8008b78 <__multadd>
 80085b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b4:	0007      	movs	r7, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dc55      	bgt.n	8008666 <_dtoa_r+0x9b2>
 80085ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085bc:	2b02      	cmp	r3, #2
 80085be:	dc2d      	bgt.n	800861c <_dtoa_r+0x968>
 80085c0:	e051      	b.n	8008666 <_dtoa_r+0x9b2>
 80085c2:	2336      	movs	r3, #54	@ 0x36
 80085c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085c6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80085c8:	9c06      	ldr	r4, [sp, #24]
 80085ca:	1a9b      	subs	r3, r3, r2
 80085cc:	e73c      	b.n	8008448 <_dtoa_r+0x794>
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	1e5d      	subs	r5, r3, #1
 80085d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	db08      	blt.n	80085ea <_dtoa_r+0x936>
 80085d8:	1b5d      	subs	r5, r3, r5
 80085da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085dc:	9c06      	ldr	r4, [sp, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db00      	blt.n	80085e4 <_dtoa_r+0x930>
 80085e2:	e731      	b.n	8008448 <_dtoa_r+0x794>
 80085e4:	1ae4      	subs	r4, r4, r3
 80085e6:	2300      	movs	r3, #0
 80085e8:	e72e      	b.n	8008448 <_dtoa_r+0x794>
 80085ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80085ee:	1aeb      	subs	r3, r5, r3
 80085f0:	18d3      	adds	r3, r2, r3
 80085f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80085f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80085f6:	2500      	movs	r5, #0
 80085f8:	e7ef      	b.n	80085da <_dtoa_r+0x926>
 80085fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80085fc:	e75e      	b.n	80084bc <_dtoa_r+0x808>
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d0a8      	beq.n	8008554 <_dtoa_r+0x8a0>
 8008602:	331c      	adds	r3, #28
 8008604:	e79f      	b.n	8008546 <_dtoa_r+0x892>
 8008606:	0013      	movs	r3, r2
 8008608:	e7fb      	b.n	8008602 <_dtoa_r+0x94e>
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	930c      	str	r3, [sp, #48]	@ 0x30
 800860e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008610:	930e      	str	r3, [sp, #56]	@ 0x38
 8008612:	2b00      	cmp	r3, #0
 8008614:	dc23      	bgt.n	800865e <_dtoa_r+0x9aa>
 8008616:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008618:	2b02      	cmp	r3, #2
 800861a:	dd20      	ble.n	800865e <_dtoa_r+0x9aa>
 800861c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800861e:	2b00      	cmp	r3, #0
 8008620:	d000      	beq.n	8008624 <_dtoa_r+0x970>
 8008622:	e6b5      	b.n	8008390 <_dtoa_r+0x6dc>
 8008624:	0031      	movs	r1, r6
 8008626:	2205      	movs	r2, #5
 8008628:	9803      	ldr	r0, [sp, #12]
 800862a:	f000 faa5 	bl	8008b78 <__multadd>
 800862e:	0006      	movs	r6, r0
 8008630:	0001      	movs	r1, r0
 8008632:	9805      	ldr	r0, [sp, #20]
 8008634:	f000 fd12 	bl	800905c <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dc00      	bgt.n	800863e <_dtoa_r+0x98a>
 800863c:	e6a8      	b.n	8008390 <_dtoa_r+0x6dc>
 800863e:	9b08      	ldr	r3, [sp, #32]
 8008640:	9a08      	ldr	r2, [sp, #32]
 8008642:	1c5c      	adds	r4, r3, #1
 8008644:	2331      	movs	r3, #49	@ 0x31
 8008646:	7013      	strb	r3, [r2, #0]
 8008648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800864a:	3301      	adds	r3, #1
 800864c:	930c      	str	r3, [sp, #48]	@ 0x30
 800864e:	e6a3      	b.n	8008398 <_dtoa_r+0x6e4>
 8008650:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008652:	0037      	movs	r7, r6
 8008654:	e7f3      	b.n	800863e <_dtoa_r+0x98a>
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800865a:	930c      	str	r3, [sp, #48]	@ 0x30
 800865c:	e7f9      	b.n	8008652 <_dtoa_r+0x99e>
 800865e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008660:	2b00      	cmp	r3, #0
 8008662:	d100      	bne.n	8008666 <_dtoa_r+0x9b2>
 8008664:	e100      	b.n	8008868 <_dtoa_r+0xbb4>
 8008666:	2c00      	cmp	r4, #0
 8008668:	dd05      	ble.n	8008676 <_dtoa_r+0x9c2>
 800866a:	0039      	movs	r1, r7
 800866c:	0022      	movs	r2, r4
 800866e:	9803      	ldr	r0, [sp, #12]
 8008670:	f000 fc88 	bl	8008f84 <__lshift>
 8008674:	0007      	movs	r7, r0
 8008676:	0038      	movs	r0, r7
 8008678:	2d00      	cmp	r5, #0
 800867a:	d018      	beq.n	80086ae <_dtoa_r+0x9fa>
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	9803      	ldr	r0, [sp, #12]
 8008680:	f000 fa12 	bl	8008aa8 <_Balloc>
 8008684:	1e04      	subs	r4, r0, #0
 8008686:	d105      	bne.n	8008694 <_dtoa_r+0x9e0>
 8008688:	0022      	movs	r2, r4
 800868a:	4b2b      	ldr	r3, [pc, #172]	@ (8008738 <_dtoa_r+0xa84>)
 800868c:	482b      	ldr	r0, [pc, #172]	@ (800873c <_dtoa_r+0xa88>)
 800868e:	492c      	ldr	r1, [pc, #176]	@ (8008740 <_dtoa_r+0xa8c>)
 8008690:	f7ff fb25 	bl	8007cde <_dtoa_r+0x2a>
 8008694:	0039      	movs	r1, r7
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	310c      	adds	r1, #12
 800869a:	3202      	adds	r2, #2
 800869c:	0092      	lsls	r2, r2, #2
 800869e:	300c      	adds	r0, #12
 80086a0:	f7ff fa6c 	bl	8007b7c <memcpy>
 80086a4:	2201      	movs	r2, #1
 80086a6:	0021      	movs	r1, r4
 80086a8:	9803      	ldr	r0, [sp, #12]
 80086aa:	f000 fc6b 	bl	8008f84 <__lshift>
 80086ae:	9b08      	ldr	r3, [sp, #32]
 80086b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086b2:	9306      	str	r3, [sp, #24]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	2201      	movs	r2, #1
 80086ba:	9704      	str	r7, [sp, #16]
 80086bc:	0007      	movs	r7, r0
 80086be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c2:	4013      	ands	r3, r2
 80086c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80086c6:	0031      	movs	r1, r6
 80086c8:	9805      	ldr	r0, [sp, #20]
 80086ca:	f7ff fa65 	bl	8007b98 <quorem>
 80086ce:	9904      	ldr	r1, [sp, #16]
 80086d0:	0005      	movs	r5, r0
 80086d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80086d4:	9805      	ldr	r0, [sp, #20]
 80086d6:	f000 fcc1 	bl	800905c <__mcmp>
 80086da:	003a      	movs	r2, r7
 80086dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80086de:	0031      	movs	r1, r6
 80086e0:	9803      	ldr	r0, [sp, #12]
 80086e2:	f000 fcd7 	bl	8009094 <__mdiff>
 80086e6:	2201      	movs	r2, #1
 80086e8:	68c3      	ldr	r3, [r0, #12]
 80086ea:	0004      	movs	r4, r0
 80086ec:	3530      	adds	r5, #48	@ 0x30
 80086ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <_dtoa_r+0xa4a>
 80086f4:	0001      	movs	r1, r0
 80086f6:	9805      	ldr	r0, [sp, #20]
 80086f8:	f000 fcb0 	bl	800905c <__mcmp>
 80086fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80086fe:	0021      	movs	r1, r4
 8008700:	9803      	ldr	r0, [sp, #12]
 8008702:	f000 fa15 	bl	8008b30 <_Bfree>
 8008706:	9b06      	ldr	r3, [sp, #24]
 8008708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800870a:	1c5c      	adds	r4, r3, #1
 800870c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800870e:	4313      	orrs	r3, r2
 8008710:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008712:	4313      	orrs	r3, r2
 8008714:	d116      	bne.n	8008744 <_dtoa_r+0xa90>
 8008716:	2d39      	cmp	r5, #57	@ 0x39
 8008718:	d02f      	beq.n	800877a <_dtoa_r+0xac6>
 800871a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800871c:	2b00      	cmp	r3, #0
 800871e:	dd01      	ble.n	8008724 <_dtoa_r+0xa70>
 8008720:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008722:	3531      	adds	r5, #49	@ 0x31
 8008724:	9b06      	ldr	r3, [sp, #24]
 8008726:	701d      	strb	r5, [r3, #0]
 8008728:	e638      	b.n	800839c <_dtoa_r+0x6e8>
 800872a:	46c0      	nop			@ (mov r8, r8)
 800872c:	40240000 	.word	0x40240000
 8008730:	00000433 	.word	0x00000433
 8008734:	7ff00000 	.word	0x7ff00000
 8008738:	0800cde1 	.word	0x0800cde1
 800873c:	0800cd89 	.word	0x0800cd89
 8008740:	000002ef 	.word	0x000002ef
 8008744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008746:	2b00      	cmp	r3, #0
 8008748:	db04      	blt.n	8008754 <_dtoa_r+0xaa0>
 800874a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800874c:	4313      	orrs	r3, r2
 800874e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008750:	4313      	orrs	r3, r2
 8008752:	d11e      	bne.n	8008792 <_dtoa_r+0xade>
 8008754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	dde4      	ble.n	8008724 <_dtoa_r+0xa70>
 800875a:	9905      	ldr	r1, [sp, #20]
 800875c:	2201      	movs	r2, #1
 800875e:	9803      	ldr	r0, [sp, #12]
 8008760:	f000 fc10 	bl	8008f84 <__lshift>
 8008764:	0031      	movs	r1, r6
 8008766:	9005      	str	r0, [sp, #20]
 8008768:	f000 fc78 	bl	800905c <__mcmp>
 800876c:	2800      	cmp	r0, #0
 800876e:	dc02      	bgt.n	8008776 <_dtoa_r+0xac2>
 8008770:	d1d8      	bne.n	8008724 <_dtoa_r+0xa70>
 8008772:	07eb      	lsls	r3, r5, #31
 8008774:	d5d6      	bpl.n	8008724 <_dtoa_r+0xa70>
 8008776:	2d39      	cmp	r5, #57	@ 0x39
 8008778:	d1d2      	bne.n	8008720 <_dtoa_r+0xa6c>
 800877a:	2339      	movs	r3, #57	@ 0x39
 800877c:	9a06      	ldr	r2, [sp, #24]
 800877e:	7013      	strb	r3, [r2, #0]
 8008780:	0023      	movs	r3, r4
 8008782:	001c      	movs	r4, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	2a39      	cmp	r2, #57	@ 0x39
 800878a:	d04f      	beq.n	800882c <_dtoa_r+0xb78>
 800878c:	3201      	adds	r2, #1
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e604      	b.n	800839c <_dtoa_r+0x6e8>
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd03      	ble.n	80087a0 <_dtoa_r+0xaec>
 8008798:	2d39      	cmp	r5, #57	@ 0x39
 800879a:	d0ee      	beq.n	800877a <_dtoa_r+0xac6>
 800879c:	3501      	adds	r5, #1
 800879e:	e7c1      	b.n	8008724 <_dtoa_r+0xa70>
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	701d      	strb	r5, [r3, #0]
 80087a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d02a      	beq.n	8008802 <_dtoa_r+0xb4e>
 80087ac:	2300      	movs	r3, #0
 80087ae:	220a      	movs	r2, #10
 80087b0:	9905      	ldr	r1, [sp, #20]
 80087b2:	9803      	ldr	r0, [sp, #12]
 80087b4:	f000 f9e0 	bl	8008b78 <__multadd>
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	9005      	str	r0, [sp, #20]
 80087bc:	42bb      	cmp	r3, r7
 80087be:	d109      	bne.n	80087d4 <_dtoa_r+0xb20>
 80087c0:	2300      	movs	r3, #0
 80087c2:	220a      	movs	r2, #10
 80087c4:	9904      	ldr	r1, [sp, #16]
 80087c6:	9803      	ldr	r0, [sp, #12]
 80087c8:	f000 f9d6 	bl	8008b78 <__multadd>
 80087cc:	9004      	str	r0, [sp, #16]
 80087ce:	0007      	movs	r7, r0
 80087d0:	9406      	str	r4, [sp, #24]
 80087d2:	e778      	b.n	80086c6 <_dtoa_r+0xa12>
 80087d4:	9904      	ldr	r1, [sp, #16]
 80087d6:	2300      	movs	r3, #0
 80087d8:	220a      	movs	r2, #10
 80087da:	9803      	ldr	r0, [sp, #12]
 80087dc:	f000 f9cc 	bl	8008b78 <__multadd>
 80087e0:	2300      	movs	r3, #0
 80087e2:	9004      	str	r0, [sp, #16]
 80087e4:	220a      	movs	r2, #10
 80087e6:	0039      	movs	r1, r7
 80087e8:	9803      	ldr	r0, [sp, #12]
 80087ea:	f000 f9c5 	bl	8008b78 <__multadd>
 80087ee:	e7ee      	b.n	80087ce <_dtoa_r+0xb1a>
 80087f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f2:	2401      	movs	r4, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dd00      	ble.n	80087fa <_dtoa_r+0xb46>
 80087f8:	001c      	movs	r4, r3
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	191c      	adds	r4, r3, r4
 80087fe:	2300      	movs	r3, #0
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	9905      	ldr	r1, [sp, #20]
 8008804:	2201      	movs	r2, #1
 8008806:	9803      	ldr	r0, [sp, #12]
 8008808:	f000 fbbc 	bl	8008f84 <__lshift>
 800880c:	0031      	movs	r1, r6
 800880e:	9005      	str	r0, [sp, #20]
 8008810:	f000 fc24 	bl	800905c <__mcmp>
 8008814:	2800      	cmp	r0, #0
 8008816:	dcb3      	bgt.n	8008780 <_dtoa_r+0xacc>
 8008818:	d101      	bne.n	800881e <_dtoa_r+0xb6a>
 800881a:	07ed      	lsls	r5, r5, #31
 800881c:	d4b0      	bmi.n	8008780 <_dtoa_r+0xacc>
 800881e:	0023      	movs	r3, r4
 8008820:	001c      	movs	r4, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	2a30      	cmp	r2, #48	@ 0x30
 8008828:	d0fa      	beq.n	8008820 <_dtoa_r+0xb6c>
 800882a:	e5b7      	b.n	800839c <_dtoa_r+0x6e8>
 800882c:	9a08      	ldr	r2, [sp, #32]
 800882e:	429a      	cmp	r2, r3
 8008830:	d1a7      	bne.n	8008782 <_dtoa_r+0xace>
 8008832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008834:	3301      	adds	r3, #1
 8008836:	930c      	str	r3, [sp, #48]	@ 0x30
 8008838:	2331      	movs	r3, #49	@ 0x31
 800883a:	7013      	strb	r3, [r2, #0]
 800883c:	e5ae      	b.n	800839c <_dtoa_r+0x6e8>
 800883e:	4b15      	ldr	r3, [pc, #84]	@ (8008894 <_dtoa_r+0xbe0>)
 8008840:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008842:	9308      	str	r3, [sp, #32]
 8008844:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <_dtoa_r+0xbe4>)
 8008846:	2a00      	cmp	r2, #0
 8008848:	d001      	beq.n	800884e <_dtoa_r+0xb9a>
 800884a:	f7ff fa7b 	bl	8007d44 <_dtoa_r+0x90>
 800884e:	f7ff fa7b 	bl	8007d48 <_dtoa_r+0x94>
 8008852:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008854:	2b01      	cmp	r3, #1
 8008856:	dc00      	bgt.n	800885a <_dtoa_r+0xba6>
 8008858:	e648      	b.n	80084ec <_dtoa_r+0x838>
 800885a:	2001      	movs	r0, #1
 800885c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800885e:	e665      	b.n	800852c <_dtoa_r+0x878>
 8008860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008862:	2b00      	cmp	r3, #0
 8008864:	dc00      	bgt.n	8008868 <_dtoa_r+0xbb4>
 8008866:	e6d6      	b.n	8008616 <_dtoa_r+0x962>
 8008868:	2400      	movs	r4, #0
 800886a:	0031      	movs	r1, r6
 800886c:	9805      	ldr	r0, [sp, #20]
 800886e:	f7ff f993 	bl	8007b98 <quorem>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	3030      	adds	r0, #48	@ 0x30
 8008876:	5518      	strb	r0, [r3, r4]
 8008878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800887a:	3401      	adds	r4, #1
 800887c:	0005      	movs	r5, r0
 800887e:	429c      	cmp	r4, r3
 8008880:	dab6      	bge.n	80087f0 <_dtoa_r+0xb3c>
 8008882:	2300      	movs	r3, #0
 8008884:	220a      	movs	r2, #10
 8008886:	9905      	ldr	r1, [sp, #20]
 8008888:	9803      	ldr	r0, [sp, #12]
 800888a:	f000 f975 	bl	8008b78 <__multadd>
 800888e:	9005      	str	r0, [sp, #20]
 8008890:	e7eb      	b.n	800886a <_dtoa_r+0xbb6>
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	0800cd65 	.word	0x0800cd65
 8008898:	0800cd6d 	.word	0x0800cd6d

0800889c <_free_r>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	0005      	movs	r5, r0
 80088a0:	1e0c      	subs	r4, r1, #0
 80088a2:	d010      	beq.n	80088c6 <_free_r+0x2a>
 80088a4:	3c04      	subs	r4, #4
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	da00      	bge.n	80088ae <_free_r+0x12>
 80088ac:	18e4      	adds	r4, r4, r3
 80088ae:	0028      	movs	r0, r5
 80088b0:	f000 f8ea 	bl	8008a88 <__malloc_lock>
 80088b4:	4a1d      	ldr	r2, [pc, #116]	@ (800892c <_free_r+0x90>)
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d105      	bne.n	80088c8 <_free_r+0x2c>
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	6014      	str	r4, [r2, #0]
 80088c0:	0028      	movs	r0, r5
 80088c2:	f000 f8e9 	bl	8008a98 <__malloc_unlock>
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d908      	bls.n	80088de <_free_r+0x42>
 80088cc:	6820      	ldr	r0, [r4, #0]
 80088ce:	1821      	adds	r1, r4, r0
 80088d0:	428b      	cmp	r3, r1
 80088d2:	d1f3      	bne.n	80088bc <_free_r+0x20>
 80088d4:	6819      	ldr	r1, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	1809      	adds	r1, r1, r0
 80088da:	6021      	str	r1, [r4, #0]
 80088dc:	e7ee      	b.n	80088bc <_free_r+0x20>
 80088de:	001a      	movs	r2, r3
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <_free_r+0x4e>
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	d9f9      	bls.n	80088de <_free_r+0x42>
 80088ea:	6811      	ldr	r1, [r2, #0]
 80088ec:	1850      	adds	r0, r2, r1
 80088ee:	42a0      	cmp	r0, r4
 80088f0:	d10b      	bne.n	800890a <_free_r+0x6e>
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	1809      	adds	r1, r1, r0
 80088f6:	1850      	adds	r0, r2, r1
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	4283      	cmp	r3, r0
 80088fc:	d1e0      	bne.n	80088c0 <_free_r+0x24>
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	1841      	adds	r1, r0, r1
 8008904:	6011      	str	r1, [r2, #0]
 8008906:	6053      	str	r3, [r2, #4]
 8008908:	e7da      	b.n	80088c0 <_free_r+0x24>
 800890a:	42a0      	cmp	r0, r4
 800890c:	d902      	bls.n	8008914 <_free_r+0x78>
 800890e:	230c      	movs	r3, #12
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	e7d5      	b.n	80088c0 <_free_r+0x24>
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	1821      	adds	r1, r4, r0
 8008918:	428b      	cmp	r3, r1
 800891a:	d103      	bne.n	8008924 <_free_r+0x88>
 800891c:	6819      	ldr	r1, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	1809      	adds	r1, r1, r0
 8008922:	6021      	str	r1, [r4, #0]
 8008924:	6063      	str	r3, [r4, #4]
 8008926:	6054      	str	r4, [r2, #4]
 8008928:	e7ca      	b.n	80088c0 <_free_r+0x24>
 800892a:	46c0      	nop			@ (mov r8, r8)
 800892c:	2000092c 	.word	0x2000092c

08008930 <malloc>:
 8008930:	b510      	push	{r4, lr}
 8008932:	4b03      	ldr	r3, [pc, #12]	@ (8008940 <malloc+0x10>)
 8008934:	0001      	movs	r1, r0
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	f000 f826 	bl	8008988 <_malloc_r>
 800893c:	bd10      	pop	{r4, pc}
 800893e:	46c0      	nop			@ (mov r8, r8)
 8008940:	20000038 	.word	0x20000038

08008944 <sbrk_aligned>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4e0f      	ldr	r6, [pc, #60]	@ (8008984 <sbrk_aligned+0x40>)
 8008948:	000d      	movs	r5, r1
 800894a:	6831      	ldr	r1, [r6, #0]
 800894c:	0004      	movs	r4, r0
 800894e:	2900      	cmp	r1, #0
 8008950:	d102      	bne.n	8008958 <sbrk_aligned+0x14>
 8008952:	f001 fe33 	bl	800a5bc <_sbrk_r>
 8008956:	6030      	str	r0, [r6, #0]
 8008958:	0029      	movs	r1, r5
 800895a:	0020      	movs	r0, r4
 800895c:	f001 fe2e 	bl	800a5bc <_sbrk_r>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d103      	bne.n	800896c <sbrk_aligned+0x28>
 8008964:	2501      	movs	r5, #1
 8008966:	426d      	negs	r5, r5
 8008968:	0028      	movs	r0, r5
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	2303      	movs	r3, #3
 800896e:	1cc5      	adds	r5, r0, #3
 8008970:	439d      	bics	r5, r3
 8008972:	42a8      	cmp	r0, r5
 8008974:	d0f8      	beq.n	8008968 <sbrk_aligned+0x24>
 8008976:	1a29      	subs	r1, r5, r0
 8008978:	0020      	movs	r0, r4
 800897a:	f001 fe1f 	bl	800a5bc <_sbrk_r>
 800897e:	3001      	adds	r0, #1
 8008980:	d1f2      	bne.n	8008968 <sbrk_aligned+0x24>
 8008982:	e7ef      	b.n	8008964 <sbrk_aligned+0x20>
 8008984:	20000928 	.word	0x20000928

08008988 <_malloc_r>:
 8008988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800898a:	2203      	movs	r2, #3
 800898c:	1ccb      	adds	r3, r1, #3
 800898e:	4393      	bics	r3, r2
 8008990:	3308      	adds	r3, #8
 8008992:	0005      	movs	r5, r0
 8008994:	001f      	movs	r7, r3
 8008996:	2b0c      	cmp	r3, #12
 8008998:	d234      	bcs.n	8008a04 <_malloc_r+0x7c>
 800899a:	270c      	movs	r7, #12
 800899c:	42b9      	cmp	r1, r7
 800899e:	d833      	bhi.n	8008a08 <_malloc_r+0x80>
 80089a0:	0028      	movs	r0, r5
 80089a2:	f000 f871 	bl	8008a88 <__malloc_lock>
 80089a6:	4e37      	ldr	r6, [pc, #220]	@ (8008a84 <_malloc_r+0xfc>)
 80089a8:	6833      	ldr	r3, [r6, #0]
 80089aa:	001c      	movs	r4, r3
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	d12f      	bne.n	8008a10 <_malloc_r+0x88>
 80089b0:	0039      	movs	r1, r7
 80089b2:	0028      	movs	r0, r5
 80089b4:	f7ff ffc6 	bl	8008944 <sbrk_aligned>
 80089b8:	0004      	movs	r4, r0
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	d15f      	bne.n	8008a7e <_malloc_r+0xf6>
 80089be:	6834      	ldr	r4, [r6, #0]
 80089c0:	9400      	str	r4, [sp, #0]
 80089c2:	9b00      	ldr	r3, [sp, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d14a      	bne.n	8008a5e <_malloc_r+0xd6>
 80089c8:	2c00      	cmp	r4, #0
 80089ca:	d052      	beq.n	8008a72 <_malloc_r+0xea>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	0028      	movs	r0, r5
 80089d0:	18e3      	adds	r3, r4, r3
 80089d2:	9900      	ldr	r1, [sp, #0]
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f001 fdf1 	bl	800a5bc <_sbrk_r>
 80089da:	9b01      	ldr	r3, [sp, #4]
 80089dc:	4283      	cmp	r3, r0
 80089de:	d148      	bne.n	8008a72 <_malloc_r+0xea>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	0028      	movs	r0, r5
 80089e4:	1aff      	subs	r7, r7, r3
 80089e6:	0039      	movs	r1, r7
 80089e8:	f7ff ffac 	bl	8008944 <sbrk_aligned>
 80089ec:	3001      	adds	r0, #1
 80089ee:	d040      	beq.n	8008a72 <_malloc_r+0xea>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	19db      	adds	r3, r3, r7
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	6833      	ldr	r3, [r6, #0]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	d133      	bne.n	8008a66 <_malloc_r+0xde>
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	6033      	str	r3, [r6, #0]
 8008a02:	e019      	b.n	8008a38 <_malloc_r+0xb0>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dac9      	bge.n	800899c <_malloc_r+0x14>
 8008a08:	230c      	movs	r3, #12
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a10:	6821      	ldr	r1, [r4, #0]
 8008a12:	1bc9      	subs	r1, r1, r7
 8008a14:	d420      	bmi.n	8008a58 <_malloc_r+0xd0>
 8008a16:	290b      	cmp	r1, #11
 8008a18:	d90a      	bls.n	8008a30 <_malloc_r+0xa8>
 8008a1a:	19e2      	adds	r2, r4, r7
 8008a1c:	6027      	str	r7, [r4, #0]
 8008a1e:	42a3      	cmp	r3, r4
 8008a20:	d104      	bne.n	8008a2c <_malloc_r+0xa4>
 8008a22:	6032      	str	r2, [r6, #0]
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	6011      	str	r1, [r2, #0]
 8008a28:	6053      	str	r3, [r2, #4]
 8008a2a:	e005      	b.n	8008a38 <_malloc_r+0xb0>
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	e7f9      	b.n	8008a24 <_malloc_r+0x9c>
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	42a3      	cmp	r3, r4
 8008a34:	d10e      	bne.n	8008a54 <_malloc_r+0xcc>
 8008a36:	6032      	str	r2, [r6, #0]
 8008a38:	0028      	movs	r0, r5
 8008a3a:	f000 f82d 	bl	8008a98 <__malloc_unlock>
 8008a3e:	0020      	movs	r0, r4
 8008a40:	2207      	movs	r2, #7
 8008a42:	300b      	adds	r0, #11
 8008a44:	1d23      	adds	r3, r4, #4
 8008a46:	4390      	bics	r0, r2
 8008a48:	1ac2      	subs	r2, r0, r3
 8008a4a:	4298      	cmp	r0, r3
 8008a4c:	d0df      	beq.n	8008a0e <_malloc_r+0x86>
 8008a4e:	1a1b      	subs	r3, r3, r0
 8008a50:	50a3      	str	r3, [r4, r2]
 8008a52:	e7dc      	b.n	8008a0e <_malloc_r+0x86>
 8008a54:	605a      	str	r2, [r3, #4]
 8008a56:	e7ef      	b.n	8008a38 <_malloc_r+0xb0>
 8008a58:	0023      	movs	r3, r4
 8008a5a:	6864      	ldr	r4, [r4, #4]
 8008a5c:	e7a6      	b.n	80089ac <_malloc_r+0x24>
 8008a5e:	9c00      	ldr	r4, [sp, #0]
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	e7ad      	b.n	80089c2 <_malloc_r+0x3a>
 8008a66:	001a      	movs	r2, r3
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	d1fb      	bne.n	8008a66 <_malloc_r+0xde>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e7da      	b.n	8008a28 <_malloc_r+0xa0>
 8008a72:	230c      	movs	r3, #12
 8008a74:	0028      	movs	r0, r5
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f000 f80e 	bl	8008a98 <__malloc_unlock>
 8008a7c:	e7c6      	b.n	8008a0c <_malloc_r+0x84>
 8008a7e:	6007      	str	r7, [r0, #0]
 8008a80:	e7da      	b.n	8008a38 <_malloc_r+0xb0>
 8008a82:	46c0      	nop			@ (mov r8, r8)
 8008a84:	2000092c 	.word	0x2000092c

08008a88 <__malloc_lock>:
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	4802      	ldr	r0, [pc, #8]	@ (8008a94 <__malloc_lock+0xc>)
 8008a8c:	f7ff f869 	bl	8007b62 <__retarget_lock_acquire_recursive>
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	46c0      	nop			@ (mov r8, r8)
 8008a94:	20000924 	.word	0x20000924

08008a98 <__malloc_unlock>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4802      	ldr	r0, [pc, #8]	@ (8008aa4 <__malloc_unlock+0xc>)
 8008a9c:	f7ff f862 	bl	8007b64 <__retarget_lock_release_recursive>
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	20000924 	.word	0x20000924

08008aa8 <_Balloc>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	69c5      	ldr	r5, [r0, #28]
 8008aac:	0006      	movs	r6, r0
 8008aae:	000c      	movs	r4, r1
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	d10e      	bne.n	8008ad2 <_Balloc+0x2a>
 8008ab4:	2010      	movs	r0, #16
 8008ab6:	f7ff ff3b 	bl	8008930 <malloc>
 8008aba:	1e02      	subs	r2, r0, #0
 8008abc:	61f0      	str	r0, [r6, #28]
 8008abe:	d104      	bne.n	8008aca <_Balloc+0x22>
 8008ac0:	216b      	movs	r1, #107	@ 0x6b
 8008ac2:	4b19      	ldr	r3, [pc, #100]	@ (8008b28 <_Balloc+0x80>)
 8008ac4:	4819      	ldr	r0, [pc, #100]	@ (8008b2c <_Balloc+0x84>)
 8008ac6:	f001 fd91 	bl	800a5ec <__assert_func>
 8008aca:	6045      	str	r5, [r0, #4]
 8008acc:	6085      	str	r5, [r0, #8]
 8008ace:	6005      	str	r5, [r0, #0]
 8008ad0:	60c5      	str	r5, [r0, #12]
 8008ad2:	69f5      	ldr	r5, [r6, #28]
 8008ad4:	68eb      	ldr	r3, [r5, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d013      	beq.n	8008b02 <_Balloc+0x5a>
 8008ada:	69f3      	ldr	r3, [r6, #28]
 8008adc:	00a2      	lsls	r2, r4, #2
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	189b      	adds	r3, r3, r2
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d118      	bne.n	8008b1a <_Balloc+0x72>
 8008ae8:	2101      	movs	r1, #1
 8008aea:	000d      	movs	r5, r1
 8008aec:	40a5      	lsls	r5, r4
 8008aee:	1d6a      	adds	r2, r5, #5
 8008af0:	0030      	movs	r0, r6
 8008af2:	0092      	lsls	r2, r2, #2
 8008af4:	f001 fd98 	bl	800a628 <_calloc_r>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d00c      	beq.n	8008b16 <_Balloc+0x6e>
 8008afc:	6044      	str	r4, [r0, #4]
 8008afe:	6085      	str	r5, [r0, #8]
 8008b00:	e00d      	b.n	8008b1e <_Balloc+0x76>
 8008b02:	2221      	movs	r2, #33	@ 0x21
 8008b04:	2104      	movs	r1, #4
 8008b06:	0030      	movs	r0, r6
 8008b08:	f001 fd8e 	bl	800a628 <_calloc_r>
 8008b0c:	69f3      	ldr	r3, [r6, #28]
 8008b0e:	60e8      	str	r0, [r5, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e1      	bne.n	8008ada <_Balloc+0x32>
 8008b16:	2000      	movs	r0, #0
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	6802      	ldr	r2, [r0, #0]
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6103      	str	r3, [r0, #16]
 8008b22:	60c3      	str	r3, [r0, #12]
 8008b24:	e7f8      	b.n	8008b18 <_Balloc+0x70>
 8008b26:	46c0      	nop			@ (mov r8, r8)
 8008b28:	0800cd72 	.word	0x0800cd72
 8008b2c:	0800cdf2 	.word	0x0800cdf2

08008b30 <_Bfree>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	69c6      	ldr	r6, [r0, #28]
 8008b34:	0005      	movs	r5, r0
 8008b36:	000c      	movs	r4, r1
 8008b38:	2e00      	cmp	r6, #0
 8008b3a:	d10e      	bne.n	8008b5a <_Bfree+0x2a>
 8008b3c:	2010      	movs	r0, #16
 8008b3e:	f7ff fef7 	bl	8008930 <malloc>
 8008b42:	1e02      	subs	r2, r0, #0
 8008b44:	61e8      	str	r0, [r5, #28]
 8008b46:	d104      	bne.n	8008b52 <_Bfree+0x22>
 8008b48:	218f      	movs	r1, #143	@ 0x8f
 8008b4a:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <_Bfree+0x40>)
 8008b4c:	4809      	ldr	r0, [pc, #36]	@ (8008b74 <_Bfree+0x44>)
 8008b4e:	f001 fd4d 	bl	800a5ec <__assert_func>
 8008b52:	6046      	str	r6, [r0, #4]
 8008b54:	6086      	str	r6, [r0, #8]
 8008b56:	6006      	str	r6, [r0, #0]
 8008b58:	60c6      	str	r6, [r0, #12]
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d007      	beq.n	8008b6e <_Bfree+0x3e>
 8008b5e:	69eb      	ldr	r3, [r5, #28]
 8008b60:	6862      	ldr	r2, [r4, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	189b      	adds	r3, r3, r2
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	6022      	str	r2, [r4, #0]
 8008b6c:	601c      	str	r4, [r3, #0]
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	0800cd72 	.word	0x0800cd72
 8008b74:	0800cdf2 	.word	0x0800cdf2

08008b78 <__multadd>:
 8008b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7a:	000f      	movs	r7, r1
 8008b7c:	9001      	str	r0, [sp, #4]
 8008b7e:	000c      	movs	r4, r1
 8008b80:	001e      	movs	r6, r3
 8008b82:	2000      	movs	r0, #0
 8008b84:	690d      	ldr	r5, [r1, #16]
 8008b86:	3714      	adds	r7, #20
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	4351      	muls	r1, r2
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	4353      	muls	r3, r2
 8008b94:	1989      	adds	r1, r1, r6
 8008b96:	0c0e      	lsrs	r6, r1, #16
 8008b98:	199b      	adds	r3, r3, r6
 8008b9a:	0c1e      	lsrs	r6, r3, #16
 8008b9c:	b289      	uxth	r1, r1
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	185b      	adds	r3, r3, r1
 8008ba2:	c708      	stmia	r7!, {r3}
 8008ba4:	4285      	cmp	r5, r0
 8008ba6:	dcef      	bgt.n	8008b88 <__multadd+0x10>
 8008ba8:	2e00      	cmp	r6, #0
 8008baa:	d022      	beq.n	8008bf2 <__multadd+0x7a>
 8008bac:	68a3      	ldr	r3, [r4, #8]
 8008bae:	42ab      	cmp	r3, r5
 8008bb0:	dc19      	bgt.n	8008be6 <__multadd+0x6e>
 8008bb2:	6861      	ldr	r1, [r4, #4]
 8008bb4:	9801      	ldr	r0, [sp, #4]
 8008bb6:	3101      	adds	r1, #1
 8008bb8:	f7ff ff76 	bl	8008aa8 <_Balloc>
 8008bbc:	1e07      	subs	r7, r0, #0
 8008bbe:	d105      	bne.n	8008bcc <__multadd+0x54>
 8008bc0:	003a      	movs	r2, r7
 8008bc2:	21ba      	movs	r1, #186	@ 0xba
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <__multadd+0x80>)
 8008bc6:	480d      	ldr	r0, [pc, #52]	@ (8008bfc <__multadd+0x84>)
 8008bc8:	f001 fd10 	bl	800a5ec <__assert_func>
 8008bcc:	0021      	movs	r1, r4
 8008bce:	6922      	ldr	r2, [r4, #16]
 8008bd0:	310c      	adds	r1, #12
 8008bd2:	3202      	adds	r2, #2
 8008bd4:	0092      	lsls	r2, r2, #2
 8008bd6:	300c      	adds	r0, #12
 8008bd8:	f7fe ffd0 	bl	8007b7c <memcpy>
 8008bdc:	0021      	movs	r1, r4
 8008bde:	9801      	ldr	r0, [sp, #4]
 8008be0:	f7ff ffa6 	bl	8008b30 <_Bfree>
 8008be4:	003c      	movs	r4, r7
 8008be6:	1d2b      	adds	r3, r5, #4
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	18e3      	adds	r3, r4, r3
 8008bec:	3501      	adds	r5, #1
 8008bee:	605e      	str	r6, [r3, #4]
 8008bf0:	6125      	str	r5, [r4, #16]
 8008bf2:	0020      	movs	r0, r4
 8008bf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	0800cde1 	.word	0x0800cde1
 8008bfc:	0800cdf2 	.word	0x0800cdf2

08008c00 <__s2b>:
 8008c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c02:	0007      	movs	r7, r0
 8008c04:	0018      	movs	r0, r3
 8008c06:	000c      	movs	r4, r1
 8008c08:	3008      	adds	r0, #8
 8008c0a:	2109      	movs	r1, #9
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	0015      	movs	r5, r2
 8008c10:	f7f7 fb1c 	bl	800024c <__divsi3>
 8008c14:	2301      	movs	r3, #1
 8008c16:	2100      	movs	r1, #0
 8008c18:	4283      	cmp	r3, r0
 8008c1a:	db0a      	blt.n	8008c32 <__s2b+0x32>
 8008c1c:	0038      	movs	r0, r7
 8008c1e:	f7ff ff43 	bl	8008aa8 <_Balloc>
 8008c22:	1e01      	subs	r1, r0, #0
 8008c24:	d108      	bne.n	8008c38 <__s2b+0x38>
 8008c26:	000a      	movs	r2, r1
 8008c28:	4b19      	ldr	r3, [pc, #100]	@ (8008c90 <__s2b+0x90>)
 8008c2a:	481a      	ldr	r0, [pc, #104]	@ (8008c94 <__s2b+0x94>)
 8008c2c:	31d3      	adds	r1, #211	@ 0xd3
 8008c2e:	f001 fcdd 	bl	800a5ec <__assert_func>
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	3101      	adds	r1, #1
 8008c36:	e7ef      	b.n	8008c18 <__s2b+0x18>
 8008c38:	9b08      	ldr	r3, [sp, #32]
 8008c3a:	6143      	str	r3, [r0, #20]
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	6103      	str	r3, [r0, #16]
 8008c40:	2d09      	cmp	r5, #9
 8008c42:	dd18      	ble.n	8008c76 <__s2b+0x76>
 8008c44:	0023      	movs	r3, r4
 8008c46:	3309      	adds	r3, #9
 8008c48:	001e      	movs	r6, r3
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	1964      	adds	r4, r4, r5
 8008c4e:	7833      	ldrb	r3, [r6, #0]
 8008c50:	220a      	movs	r2, #10
 8008c52:	0038      	movs	r0, r7
 8008c54:	3b30      	subs	r3, #48	@ 0x30
 8008c56:	f7ff ff8f 	bl	8008b78 <__multadd>
 8008c5a:	3601      	adds	r6, #1
 8008c5c:	0001      	movs	r1, r0
 8008c5e:	42a6      	cmp	r6, r4
 8008c60:	d1f5      	bne.n	8008c4e <__s2b+0x4e>
 8008c62:	002c      	movs	r4, r5
 8008c64:	9b00      	ldr	r3, [sp, #0]
 8008c66:	3c08      	subs	r4, #8
 8008c68:	191c      	adds	r4, r3, r4
 8008c6a:	002e      	movs	r6, r5
 8008c6c:	9b01      	ldr	r3, [sp, #4]
 8008c6e:	429e      	cmp	r6, r3
 8008c70:	db04      	blt.n	8008c7c <__s2b+0x7c>
 8008c72:	0008      	movs	r0, r1
 8008c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c76:	2509      	movs	r5, #9
 8008c78:	340a      	adds	r4, #10
 8008c7a:	e7f6      	b.n	8008c6a <__s2b+0x6a>
 8008c7c:	1b63      	subs	r3, r4, r5
 8008c7e:	5d9b      	ldrb	r3, [r3, r6]
 8008c80:	220a      	movs	r2, #10
 8008c82:	0038      	movs	r0, r7
 8008c84:	3b30      	subs	r3, #48	@ 0x30
 8008c86:	f7ff ff77 	bl	8008b78 <__multadd>
 8008c8a:	3601      	adds	r6, #1
 8008c8c:	0001      	movs	r1, r0
 8008c8e:	e7ed      	b.n	8008c6c <__s2b+0x6c>
 8008c90:	0800cde1 	.word	0x0800cde1
 8008c94:	0800cdf2 	.word	0x0800cdf2

08008c98 <__hi0bits>:
 8008c98:	2280      	movs	r2, #128	@ 0x80
 8008c9a:	0003      	movs	r3, r0
 8008c9c:	0252      	lsls	r2, r2, #9
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d201      	bcs.n	8008ca8 <__hi0bits+0x10>
 8008ca4:	041b      	lsls	r3, r3, #16
 8008ca6:	3010      	adds	r0, #16
 8008ca8:	2280      	movs	r2, #128	@ 0x80
 8008caa:	0452      	lsls	r2, r2, #17
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d201      	bcs.n	8008cb4 <__hi0bits+0x1c>
 8008cb0:	3008      	adds	r0, #8
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	2280      	movs	r2, #128	@ 0x80
 8008cb6:	0552      	lsls	r2, r2, #21
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d201      	bcs.n	8008cc0 <__hi0bits+0x28>
 8008cbc:	3004      	adds	r0, #4
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	2280      	movs	r2, #128	@ 0x80
 8008cc2:	05d2      	lsls	r2, r2, #23
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d201      	bcs.n	8008ccc <__hi0bits+0x34>
 8008cc8:	3002      	adds	r0, #2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	db03      	blt.n	8008cd8 <__hi0bits+0x40>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	4213      	tst	r3, r2
 8008cd4:	d100      	bne.n	8008cd8 <__hi0bits+0x40>
 8008cd6:	2020      	movs	r0, #32
 8008cd8:	4770      	bx	lr

08008cda <__lo0bits>:
 8008cda:	6803      	ldr	r3, [r0, #0]
 8008cdc:	0001      	movs	r1, r0
 8008cde:	2207      	movs	r2, #7
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	4010      	ands	r0, r2
 8008ce4:	4213      	tst	r3, r2
 8008ce6:	d00d      	beq.n	8008d04 <__lo0bits+0x2a>
 8008ce8:	3a06      	subs	r2, #6
 8008cea:	2000      	movs	r0, #0
 8008cec:	4213      	tst	r3, r2
 8008cee:	d105      	bne.n	8008cfc <__lo0bits+0x22>
 8008cf0:	3002      	adds	r0, #2
 8008cf2:	4203      	tst	r3, r0
 8008cf4:	d003      	beq.n	8008cfe <__lo0bits+0x24>
 8008cf6:	40d3      	lsrs	r3, r2
 8008cf8:	0010      	movs	r0, r2
 8008cfa:	600b      	str	r3, [r1, #0]
 8008cfc:	4770      	bx	lr
 8008cfe:	089b      	lsrs	r3, r3, #2
 8008d00:	600b      	str	r3, [r1, #0]
 8008d02:	e7fb      	b.n	8008cfc <__lo0bits+0x22>
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	d101      	bne.n	8008d0e <__lo0bits+0x34>
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	0c1b      	lsrs	r3, r3, #16
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	d101      	bne.n	8008d18 <__lo0bits+0x3e>
 8008d14:	3008      	adds	r0, #8
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	071a      	lsls	r2, r3, #28
 8008d1a:	d101      	bne.n	8008d20 <__lo0bits+0x46>
 8008d1c:	3004      	adds	r0, #4
 8008d1e:	091b      	lsrs	r3, r3, #4
 8008d20:	079a      	lsls	r2, r3, #30
 8008d22:	d101      	bne.n	8008d28 <__lo0bits+0x4e>
 8008d24:	3002      	adds	r0, #2
 8008d26:	089b      	lsrs	r3, r3, #2
 8008d28:	07da      	lsls	r2, r3, #31
 8008d2a:	d4e9      	bmi.n	8008d00 <__lo0bits+0x26>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	d1e6      	bne.n	8008d00 <__lo0bits+0x26>
 8008d32:	2020      	movs	r0, #32
 8008d34:	e7e2      	b.n	8008cfc <__lo0bits+0x22>
	...

08008d38 <__i2b>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	000c      	movs	r4, r1
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	f7ff feb3 	bl	8008aa8 <_Balloc>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d107      	bne.n	8008d56 <__i2b+0x1e>
 8008d46:	2146      	movs	r1, #70	@ 0x46
 8008d48:	4c05      	ldr	r4, [pc, #20]	@ (8008d60 <__i2b+0x28>)
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	4b05      	ldr	r3, [pc, #20]	@ (8008d64 <__i2b+0x2c>)
 8008d4e:	0020      	movs	r0, r4
 8008d50:	31ff      	adds	r1, #255	@ 0xff
 8008d52:	f001 fc4b 	bl	800a5ec <__assert_func>
 8008d56:	2301      	movs	r3, #1
 8008d58:	6144      	str	r4, [r0, #20]
 8008d5a:	6103      	str	r3, [r0, #16]
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	46c0      	nop			@ (mov r8, r8)
 8008d60:	0800cdf2 	.word	0x0800cdf2
 8008d64:	0800cde1 	.word	0x0800cde1

08008d68 <__multiply>:
 8008d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6a:	0014      	movs	r4, r2
 8008d6c:	690a      	ldr	r2, [r1, #16]
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	000d      	movs	r5, r1
 8008d72:	b08b      	sub	sp, #44	@ 0x2c
 8008d74:	429a      	cmp	r2, r3
 8008d76:	db02      	blt.n	8008d7e <__multiply+0x16>
 8008d78:	0023      	movs	r3, r4
 8008d7a:	000c      	movs	r4, r1
 8008d7c:	001d      	movs	r5, r3
 8008d7e:	6927      	ldr	r7, [r4, #16]
 8008d80:	692e      	ldr	r6, [r5, #16]
 8008d82:	6861      	ldr	r1, [r4, #4]
 8008d84:	19bb      	adds	r3, r7, r6
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	68a3      	ldr	r3, [r4, #8]
 8008d8a:	19ba      	adds	r2, r7, r6
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	da00      	bge.n	8008d92 <__multiply+0x2a>
 8008d90:	3101      	adds	r1, #1
 8008d92:	f7ff fe89 	bl	8008aa8 <_Balloc>
 8008d96:	9002      	str	r0, [sp, #8]
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d106      	bne.n	8008daa <__multiply+0x42>
 8008d9c:	21b1      	movs	r1, #177	@ 0xb1
 8008d9e:	4b49      	ldr	r3, [pc, #292]	@ (8008ec4 <__multiply+0x15c>)
 8008da0:	4849      	ldr	r0, [pc, #292]	@ (8008ec8 <__multiply+0x160>)
 8008da2:	9a02      	ldr	r2, [sp, #8]
 8008da4:	0049      	lsls	r1, r1, #1
 8008da6:	f001 fc21 	bl	800a5ec <__assert_func>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	2200      	movs	r2, #0
 8008dae:	3314      	adds	r3, #20
 8008db0:	469c      	mov	ip, r3
 8008db2:	19bb      	adds	r3, r7, r6
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4463      	add	r3, ip
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	4663      	mov	r3, ip
 8008dbc:	9904      	ldr	r1, [sp, #16]
 8008dbe:	428b      	cmp	r3, r1
 8008dc0:	d32a      	bcc.n	8008e18 <__multiply+0xb0>
 8008dc2:	0023      	movs	r3, r4
 8008dc4:	00bf      	lsls	r7, r7, #2
 8008dc6:	3314      	adds	r3, #20
 8008dc8:	3514      	adds	r5, #20
 8008dca:	9308      	str	r3, [sp, #32]
 8008dcc:	00b6      	lsls	r6, r6, #2
 8008dce:	19db      	adds	r3, r3, r7
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	19ab      	adds	r3, r5, r6
 8008dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd6:	2304      	movs	r3, #4
 8008dd8:	9306      	str	r3, [sp, #24]
 8008dda:	0023      	movs	r3, r4
 8008ddc:	9a05      	ldr	r2, [sp, #20]
 8008dde:	3315      	adds	r3, #21
 8008de0:	9501      	str	r5, [sp, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d305      	bcc.n	8008df2 <__multiply+0x8a>
 8008de6:	1b13      	subs	r3, r2, r4
 8008de8:	3b15      	subs	r3, #21
 8008dea:	089b      	lsrs	r3, r3, #2
 8008dec:	3301      	adds	r3, #1
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	9306      	str	r3, [sp, #24]
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d310      	bcc.n	8008e1c <__multiply+0xb4>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dd05      	ble.n	8008e0c <__multiply+0xa4>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	3b04      	subs	r3, #4
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d056      	beq.n	8008eba <__multiply+0x152>
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	9a03      	ldr	r2, [sp, #12]
 8008e10:	0018      	movs	r0, r3
 8008e12:	611a      	str	r2, [r3, #16]
 8008e14:	b00b      	add	sp, #44	@ 0x2c
 8008e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e18:	c304      	stmia	r3!, {r2}
 8008e1a:	e7cf      	b.n	8008dbc <__multiply+0x54>
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	b280      	uxth	r0, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d01e      	beq.n	8008e64 <__multiply+0xfc>
 8008e26:	4667      	mov	r7, ip
 8008e28:	2500      	movs	r5, #0
 8008e2a:	9e08      	ldr	r6, [sp, #32]
 8008e2c:	ce02      	ldmia	r6!, {r1}
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	9307      	str	r3, [sp, #28]
 8008e32:	b28b      	uxth	r3, r1
 8008e34:	4343      	muls	r3, r0
 8008e36:	001a      	movs	r2, r3
 8008e38:	466b      	mov	r3, sp
 8008e3a:	0c09      	lsrs	r1, r1, #16
 8008e3c:	8b9b      	ldrh	r3, [r3, #28]
 8008e3e:	4341      	muls	r1, r0
 8008e40:	18d3      	adds	r3, r2, r3
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	195b      	adds	r3, r3, r5
 8008e46:	0c12      	lsrs	r2, r2, #16
 8008e48:	1889      	adds	r1, r1, r2
 8008e4a:	0c1a      	lsrs	r2, r3, #16
 8008e4c:	188a      	adds	r2, r1, r2
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	0c15      	lsrs	r5, r2, #16
 8008e52:	0412      	lsls	r2, r2, #16
 8008e54:	431a      	orrs	r2, r3
 8008e56:	9b05      	ldr	r3, [sp, #20]
 8008e58:	c704      	stmia	r7!, {r2}
 8008e5a:	42b3      	cmp	r3, r6
 8008e5c:	d8e6      	bhi.n	8008e2c <__multiply+0xc4>
 8008e5e:	4663      	mov	r3, ip
 8008e60:	9a06      	ldr	r2, [sp, #24]
 8008e62:	509d      	str	r5, [r3, r2]
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	0c00      	lsrs	r0, r0, #16
 8008e6a:	d020      	beq.n	8008eae <__multiply+0x146>
 8008e6c:	4663      	mov	r3, ip
 8008e6e:	0025      	movs	r5, r4
 8008e70:	4661      	mov	r1, ip
 8008e72:	2700      	movs	r7, #0
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3514      	adds	r5, #20
 8008e78:	682a      	ldr	r2, [r5, #0]
 8008e7a:	680e      	ldr	r6, [r1, #0]
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	4342      	muls	r2, r0
 8008e80:	0c36      	lsrs	r6, r6, #16
 8008e82:	1992      	adds	r2, r2, r6
 8008e84:	19d2      	adds	r2, r2, r7
 8008e86:	0416      	lsls	r6, r2, #16
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	431e      	orrs	r6, r3
 8008e8c:	600e      	str	r6, [r1, #0]
 8008e8e:	cd40      	ldmia	r5!, {r6}
 8008e90:	684b      	ldr	r3, [r1, #4]
 8008e92:	0c36      	lsrs	r6, r6, #16
 8008e94:	4346      	muls	r6, r0
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	0c12      	lsrs	r2, r2, #16
 8008e9a:	18f3      	adds	r3, r6, r3
 8008e9c:	189b      	adds	r3, r3, r2
 8008e9e:	9a05      	ldr	r2, [sp, #20]
 8008ea0:	0c1f      	lsrs	r7, r3, #16
 8008ea2:	3104      	adds	r1, #4
 8008ea4:	42aa      	cmp	r2, r5
 8008ea6:	d8e7      	bhi.n	8008e78 <__multiply+0x110>
 8008ea8:	4662      	mov	r2, ip
 8008eaa:	9906      	ldr	r1, [sp, #24]
 8008eac:	5053      	str	r3, [r2, r1]
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	449c      	add	ip, r3
 8008eb8:	e79b      	b.n	8008df2 <__multiply+0x8a>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	9303      	str	r3, [sp, #12]
 8008ec0:	e79b      	b.n	8008dfa <__multiply+0x92>
 8008ec2:	46c0      	nop			@ (mov r8, r8)
 8008ec4:	0800cde1 	.word	0x0800cde1
 8008ec8:	0800cdf2 	.word	0x0800cdf2

08008ecc <__pow5mult>:
 8008ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ece:	2303      	movs	r3, #3
 8008ed0:	0015      	movs	r5, r2
 8008ed2:	0007      	movs	r7, r0
 8008ed4:	000e      	movs	r6, r1
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	421d      	tst	r5, r3
 8008eda:	d008      	beq.n	8008eee <__pow5mult+0x22>
 8008edc:	4925      	ldr	r1, [pc, #148]	@ (8008f74 <__pow5mult+0xa8>)
 8008ede:	3a01      	subs	r2, #1
 8008ee0:	0092      	lsls	r2, r2, #2
 8008ee2:	5852      	ldr	r2, [r2, r1]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	0031      	movs	r1, r6
 8008ee8:	f7ff fe46 	bl	8008b78 <__multadd>
 8008eec:	0006      	movs	r6, r0
 8008eee:	10ad      	asrs	r5, r5, #2
 8008ef0:	d03d      	beq.n	8008f6e <__pow5mult+0xa2>
 8008ef2:	69fc      	ldr	r4, [r7, #28]
 8008ef4:	2c00      	cmp	r4, #0
 8008ef6:	d10f      	bne.n	8008f18 <__pow5mult+0x4c>
 8008ef8:	2010      	movs	r0, #16
 8008efa:	f7ff fd19 	bl	8008930 <malloc>
 8008efe:	1e02      	subs	r2, r0, #0
 8008f00:	61f8      	str	r0, [r7, #28]
 8008f02:	d105      	bne.n	8008f10 <__pow5mult+0x44>
 8008f04:	21b4      	movs	r1, #180	@ 0xb4
 8008f06:	4b1c      	ldr	r3, [pc, #112]	@ (8008f78 <__pow5mult+0xac>)
 8008f08:	481c      	ldr	r0, [pc, #112]	@ (8008f7c <__pow5mult+0xb0>)
 8008f0a:	31ff      	adds	r1, #255	@ 0xff
 8008f0c:	f001 fb6e 	bl	800a5ec <__assert_func>
 8008f10:	6044      	str	r4, [r0, #4]
 8008f12:	6084      	str	r4, [r0, #8]
 8008f14:	6004      	str	r4, [r0, #0]
 8008f16:	60c4      	str	r4, [r0, #12]
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	689c      	ldr	r4, [r3, #8]
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	d108      	bne.n	8008f34 <__pow5mult+0x68>
 8008f22:	0038      	movs	r0, r7
 8008f24:	4916      	ldr	r1, [pc, #88]	@ (8008f80 <__pow5mult+0xb4>)
 8008f26:	f7ff ff07 	bl	8008d38 <__i2b>
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	0004      	movs	r4, r0
 8008f2e:	6098      	str	r0, [r3, #8]
 8008f30:	2300      	movs	r3, #0
 8008f32:	6003      	str	r3, [r0, #0]
 8008f34:	2301      	movs	r3, #1
 8008f36:	421d      	tst	r5, r3
 8008f38:	d00a      	beq.n	8008f50 <__pow5mult+0x84>
 8008f3a:	0031      	movs	r1, r6
 8008f3c:	0022      	movs	r2, r4
 8008f3e:	0038      	movs	r0, r7
 8008f40:	f7ff ff12 	bl	8008d68 <__multiply>
 8008f44:	0031      	movs	r1, r6
 8008f46:	9001      	str	r0, [sp, #4]
 8008f48:	0038      	movs	r0, r7
 8008f4a:	f7ff fdf1 	bl	8008b30 <_Bfree>
 8008f4e:	9e01      	ldr	r6, [sp, #4]
 8008f50:	106d      	asrs	r5, r5, #1
 8008f52:	d00c      	beq.n	8008f6e <__pow5mult+0xa2>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d107      	bne.n	8008f6a <__pow5mult+0x9e>
 8008f5a:	0022      	movs	r2, r4
 8008f5c:	0021      	movs	r1, r4
 8008f5e:	0038      	movs	r0, r7
 8008f60:	f7ff ff02 	bl	8008d68 <__multiply>
 8008f64:	2300      	movs	r3, #0
 8008f66:	6020      	str	r0, [r4, #0]
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	0004      	movs	r4, r0
 8008f6c:	e7e2      	b.n	8008f34 <__pow5mult+0x68>
 8008f6e:	0030      	movs	r0, r6
 8008f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f72:	46c0      	nop			@ (mov r8, r8)
 8008f74:	0800ce4c 	.word	0x0800ce4c
 8008f78:	0800cd72 	.word	0x0800cd72
 8008f7c:	0800cdf2 	.word	0x0800cdf2
 8008f80:	00000271 	.word	0x00000271

08008f84 <__lshift>:
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	000c      	movs	r4, r1
 8008f88:	0016      	movs	r6, r2
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	1157      	asrs	r7, r2, #5
 8008f8e:	b085      	sub	sp, #20
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	3301      	adds	r3, #1
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	6849      	ldr	r1, [r1, #4]
 8008f9a:	68a3      	ldr	r3, [r4, #8]
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	9a00      	ldr	r2, [sp, #0]
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	db10      	blt.n	8008fc6 <__lshift+0x42>
 8008fa4:	9802      	ldr	r0, [sp, #8]
 8008fa6:	f7ff fd7f 	bl	8008aa8 <_Balloc>
 8008faa:	2300      	movs	r3, #0
 8008fac:	0001      	movs	r1, r0
 8008fae:	0005      	movs	r5, r0
 8008fb0:	001a      	movs	r2, r3
 8008fb2:	3114      	adds	r1, #20
 8008fb4:	4298      	cmp	r0, r3
 8008fb6:	d10c      	bne.n	8008fd2 <__lshift+0x4e>
 8008fb8:	21ef      	movs	r1, #239	@ 0xef
 8008fba:	002a      	movs	r2, r5
 8008fbc:	4b25      	ldr	r3, [pc, #148]	@ (8009054 <__lshift+0xd0>)
 8008fbe:	4826      	ldr	r0, [pc, #152]	@ (8009058 <__lshift+0xd4>)
 8008fc0:	0049      	lsls	r1, r1, #1
 8008fc2:	f001 fb13 	bl	800a5ec <__assert_func>
 8008fc6:	3101      	adds	r1, #1
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	e7e8      	b.n	8008f9e <__lshift+0x1a>
 8008fcc:	0098      	lsls	r0, r3, #2
 8008fce:	500a      	str	r2, [r1, r0]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	42bb      	cmp	r3, r7
 8008fd4:	dbfa      	blt.n	8008fcc <__lshift+0x48>
 8008fd6:	43fb      	mvns	r3, r7
 8008fd8:	17db      	asrs	r3, r3, #31
 8008fda:	401f      	ands	r7, r3
 8008fdc:	00bf      	lsls	r7, r7, #2
 8008fde:	0023      	movs	r3, r4
 8008fe0:	201f      	movs	r0, #31
 8008fe2:	19c9      	adds	r1, r1, r7
 8008fe4:	0037      	movs	r7, r6
 8008fe6:	6922      	ldr	r2, [r4, #16]
 8008fe8:	3314      	adds	r3, #20
 8008fea:	0092      	lsls	r2, r2, #2
 8008fec:	189a      	adds	r2, r3, r2
 8008fee:	4007      	ands	r7, r0
 8008ff0:	4206      	tst	r6, r0
 8008ff2:	d029      	beq.n	8009048 <__lshift+0xc4>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	1bc0      	subs	r0, r0, r7
 8008ff8:	9003      	str	r0, [sp, #12]
 8008ffa:	468c      	mov	ip, r1
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	681e      	ldr	r6, [r3, #0]
 8009000:	40be      	lsls	r6, r7
 8009002:	4306      	orrs	r6, r0
 8009004:	4660      	mov	r0, ip
 8009006:	c040      	stmia	r0!, {r6}
 8009008:	4684      	mov	ip, r0
 800900a:	9e03      	ldr	r6, [sp, #12]
 800900c:	cb01      	ldmia	r3!, {r0}
 800900e:	40f0      	lsrs	r0, r6
 8009010:	429a      	cmp	r2, r3
 8009012:	d8f4      	bhi.n	8008ffe <__lshift+0x7a>
 8009014:	0026      	movs	r6, r4
 8009016:	3615      	adds	r6, #21
 8009018:	2304      	movs	r3, #4
 800901a:	42b2      	cmp	r2, r6
 800901c:	d304      	bcc.n	8009028 <__lshift+0xa4>
 800901e:	1b13      	subs	r3, r2, r4
 8009020:	3b15      	subs	r3, #21
 8009022:	089b      	lsrs	r3, r3, #2
 8009024:	3301      	adds	r3, #1
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	50c8      	str	r0, [r1, r3]
 800902a:	2800      	cmp	r0, #0
 800902c:	d002      	beq.n	8009034 <__lshift+0xb0>
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	3302      	adds	r3, #2
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	9b00      	ldr	r3, [sp, #0]
 8009036:	9802      	ldr	r0, [sp, #8]
 8009038:	3b01      	subs	r3, #1
 800903a:	0021      	movs	r1, r4
 800903c:	612b      	str	r3, [r5, #16]
 800903e:	f7ff fd77 	bl	8008b30 <_Bfree>
 8009042:	0028      	movs	r0, r5
 8009044:	b005      	add	sp, #20
 8009046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009048:	cb01      	ldmia	r3!, {r0}
 800904a:	c101      	stmia	r1!, {r0}
 800904c:	429a      	cmp	r2, r3
 800904e:	d8fb      	bhi.n	8009048 <__lshift+0xc4>
 8009050:	e7f0      	b.n	8009034 <__lshift+0xb0>
 8009052:	46c0      	nop			@ (mov r8, r8)
 8009054:	0800cde1 	.word	0x0800cde1
 8009058:	0800cdf2 	.word	0x0800cdf2

0800905c <__mcmp>:
 800905c:	b530      	push	{r4, r5, lr}
 800905e:	690b      	ldr	r3, [r1, #16]
 8009060:	6904      	ldr	r4, [r0, #16]
 8009062:	0002      	movs	r2, r0
 8009064:	1ae0      	subs	r0, r4, r3
 8009066:	429c      	cmp	r4, r3
 8009068:	d10f      	bne.n	800908a <__mcmp+0x2e>
 800906a:	3214      	adds	r2, #20
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	3114      	adds	r1, #20
 8009070:	0014      	movs	r4, r2
 8009072:	18c9      	adds	r1, r1, r3
 8009074:	18d2      	adds	r2, r2, r3
 8009076:	3a04      	subs	r2, #4
 8009078:	3904      	subs	r1, #4
 800907a:	6815      	ldr	r5, [r2, #0]
 800907c:	680b      	ldr	r3, [r1, #0]
 800907e:	429d      	cmp	r5, r3
 8009080:	d004      	beq.n	800908c <__mcmp+0x30>
 8009082:	2001      	movs	r0, #1
 8009084:	429d      	cmp	r5, r3
 8009086:	d200      	bcs.n	800908a <__mcmp+0x2e>
 8009088:	3802      	subs	r0, #2
 800908a:	bd30      	pop	{r4, r5, pc}
 800908c:	4294      	cmp	r4, r2
 800908e:	d3f2      	bcc.n	8009076 <__mcmp+0x1a>
 8009090:	e7fb      	b.n	800908a <__mcmp+0x2e>
	...

08009094 <__mdiff>:
 8009094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009096:	000c      	movs	r4, r1
 8009098:	b087      	sub	sp, #28
 800909a:	9000      	str	r0, [sp, #0]
 800909c:	0011      	movs	r1, r2
 800909e:	0020      	movs	r0, r4
 80090a0:	0017      	movs	r7, r2
 80090a2:	f7ff ffdb 	bl	800905c <__mcmp>
 80090a6:	1e05      	subs	r5, r0, #0
 80090a8:	d110      	bne.n	80090cc <__mdiff+0x38>
 80090aa:	0001      	movs	r1, r0
 80090ac:	9800      	ldr	r0, [sp, #0]
 80090ae:	f7ff fcfb 	bl	8008aa8 <_Balloc>
 80090b2:	1e02      	subs	r2, r0, #0
 80090b4:	d104      	bne.n	80090c0 <__mdiff+0x2c>
 80090b6:	4b40      	ldr	r3, [pc, #256]	@ (80091b8 <__mdiff+0x124>)
 80090b8:	4840      	ldr	r0, [pc, #256]	@ (80091bc <__mdiff+0x128>)
 80090ba:	4941      	ldr	r1, [pc, #260]	@ (80091c0 <__mdiff+0x12c>)
 80090bc:	f001 fa96 	bl	800a5ec <__assert_func>
 80090c0:	2301      	movs	r3, #1
 80090c2:	6145      	str	r5, [r0, #20]
 80090c4:	6103      	str	r3, [r0, #16]
 80090c6:	0010      	movs	r0, r2
 80090c8:	b007      	add	sp, #28
 80090ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090cc:	2600      	movs	r6, #0
 80090ce:	42b0      	cmp	r0, r6
 80090d0:	da03      	bge.n	80090da <__mdiff+0x46>
 80090d2:	0023      	movs	r3, r4
 80090d4:	003c      	movs	r4, r7
 80090d6:	001f      	movs	r7, r3
 80090d8:	3601      	adds	r6, #1
 80090da:	6861      	ldr	r1, [r4, #4]
 80090dc:	9800      	ldr	r0, [sp, #0]
 80090de:	f7ff fce3 	bl	8008aa8 <_Balloc>
 80090e2:	1e02      	subs	r2, r0, #0
 80090e4:	d103      	bne.n	80090ee <__mdiff+0x5a>
 80090e6:	4b34      	ldr	r3, [pc, #208]	@ (80091b8 <__mdiff+0x124>)
 80090e8:	4834      	ldr	r0, [pc, #208]	@ (80091bc <__mdiff+0x128>)
 80090ea:	4936      	ldr	r1, [pc, #216]	@ (80091c4 <__mdiff+0x130>)
 80090ec:	e7e6      	b.n	80090bc <__mdiff+0x28>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	3414      	adds	r4, #20
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	18e3      	adds	r3, r4, r3
 80090f8:	0021      	movs	r1, r4
 80090fa:	9401      	str	r4, [sp, #4]
 80090fc:	003c      	movs	r4, r7
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	3414      	adds	r4, #20
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	18e3      	adds	r3, r4, r3
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	0003      	movs	r3, r0
 800910c:	60c6      	str	r6, [r0, #12]
 800910e:	468c      	mov	ip, r1
 8009110:	2000      	movs	r0, #0
 8009112:	3314      	adds	r3, #20
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	9305      	str	r3, [sp, #20]
 8009118:	4663      	mov	r3, ip
 800911a:	cb20      	ldmia	r3!, {r5}
 800911c:	b2a9      	uxth	r1, r5
 800911e:	000e      	movs	r6, r1
 8009120:	469c      	mov	ip, r3
 8009122:	cc08      	ldmia	r4!, {r3}
 8009124:	0c2d      	lsrs	r5, r5, #16
 8009126:	b299      	uxth	r1, r3
 8009128:	1a71      	subs	r1, r6, r1
 800912a:	1809      	adds	r1, r1, r0
 800912c:	0c1b      	lsrs	r3, r3, #16
 800912e:	1408      	asrs	r0, r1, #16
 8009130:	1aeb      	subs	r3, r5, r3
 8009132:	181b      	adds	r3, r3, r0
 8009134:	1418      	asrs	r0, r3, #16
 8009136:	b289      	uxth	r1, r1
 8009138:	041b      	lsls	r3, r3, #16
 800913a:	4319      	orrs	r1, r3
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	c302      	stmia	r3!, {r1}
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	42a3      	cmp	r3, r4
 8009146:	d8e7      	bhi.n	8009118 <__mdiff+0x84>
 8009148:	0039      	movs	r1, r7
 800914a:	9c03      	ldr	r4, [sp, #12]
 800914c:	3115      	adds	r1, #21
 800914e:	2304      	movs	r3, #4
 8009150:	428c      	cmp	r4, r1
 8009152:	d304      	bcc.n	800915e <__mdiff+0xca>
 8009154:	1be3      	subs	r3, r4, r7
 8009156:	3b15      	subs	r3, #21
 8009158:	089b      	lsrs	r3, r3, #2
 800915a:	3301      	adds	r3, #1
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	9901      	ldr	r1, [sp, #4]
 8009160:	18cd      	adds	r5, r1, r3
 8009162:	9904      	ldr	r1, [sp, #16]
 8009164:	002e      	movs	r6, r5
 8009166:	18cb      	adds	r3, r1, r3
 8009168:	001f      	movs	r7, r3
 800916a:	9902      	ldr	r1, [sp, #8]
 800916c:	428e      	cmp	r6, r1
 800916e:	d311      	bcc.n	8009194 <__mdiff+0x100>
 8009170:	9c02      	ldr	r4, [sp, #8]
 8009172:	1ee9      	subs	r1, r5, #3
 8009174:	2000      	movs	r0, #0
 8009176:	428c      	cmp	r4, r1
 8009178:	d304      	bcc.n	8009184 <__mdiff+0xf0>
 800917a:	0021      	movs	r1, r4
 800917c:	3103      	adds	r1, #3
 800917e:	1b49      	subs	r1, r1, r5
 8009180:	0889      	lsrs	r1, r1, #2
 8009182:	0088      	lsls	r0, r1, #2
 8009184:	181b      	adds	r3, r3, r0
 8009186:	3b04      	subs	r3, #4
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	2900      	cmp	r1, #0
 800918c:	d010      	beq.n	80091b0 <__mdiff+0x11c>
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	6113      	str	r3, [r2, #16]
 8009192:	e798      	b.n	80090c6 <__mdiff+0x32>
 8009194:	4684      	mov	ip, r0
 8009196:	ce02      	ldmia	r6!, {r1}
 8009198:	b288      	uxth	r0, r1
 800919a:	4460      	add	r0, ip
 800919c:	1400      	asrs	r0, r0, #16
 800919e:	0c0c      	lsrs	r4, r1, #16
 80091a0:	1904      	adds	r4, r0, r4
 80091a2:	4461      	add	r1, ip
 80091a4:	1420      	asrs	r0, r4, #16
 80091a6:	b289      	uxth	r1, r1
 80091a8:	0424      	lsls	r4, r4, #16
 80091aa:	4321      	orrs	r1, r4
 80091ac:	c702      	stmia	r7!, {r1}
 80091ae:	e7dc      	b.n	800916a <__mdiff+0xd6>
 80091b0:	9900      	ldr	r1, [sp, #0]
 80091b2:	3901      	subs	r1, #1
 80091b4:	9100      	str	r1, [sp, #0]
 80091b6:	e7e6      	b.n	8009186 <__mdiff+0xf2>
 80091b8:	0800cde1 	.word	0x0800cde1
 80091bc:	0800cdf2 	.word	0x0800cdf2
 80091c0:	00000237 	.word	0x00000237
 80091c4:	00000245 	.word	0x00000245

080091c8 <__ulp>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	2400      	movs	r4, #0
 80091cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009200 <__ulp+0x38>)
 80091ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009204 <__ulp+0x3c>)
 80091d0:	400b      	ands	r3, r1
 80091d2:	189b      	adds	r3, r3, r2
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	dc06      	bgt.n	80091e6 <__ulp+0x1e>
 80091d8:	425b      	negs	r3, r3
 80091da:	151a      	asrs	r2, r3, #20
 80091dc:	2a13      	cmp	r2, #19
 80091de:	dc05      	bgt.n	80091ec <__ulp+0x24>
 80091e0:	2380      	movs	r3, #128	@ 0x80
 80091e2:	031b      	lsls	r3, r3, #12
 80091e4:	4113      	asrs	r3, r2
 80091e6:	0019      	movs	r1, r3
 80091e8:	0020      	movs	r0, r4
 80091ea:	bd10      	pop	{r4, pc}
 80091ec:	3a14      	subs	r2, #20
 80091ee:	2401      	movs	r4, #1
 80091f0:	2a1e      	cmp	r2, #30
 80091f2:	dc02      	bgt.n	80091fa <__ulp+0x32>
 80091f4:	2480      	movs	r4, #128	@ 0x80
 80091f6:	0624      	lsls	r4, r4, #24
 80091f8:	40d4      	lsrs	r4, r2
 80091fa:	2300      	movs	r3, #0
 80091fc:	e7f3      	b.n	80091e6 <__ulp+0x1e>
 80091fe:	46c0      	nop			@ (mov r8, r8)
 8009200:	7ff00000 	.word	0x7ff00000
 8009204:	fcc00000 	.word	0xfcc00000

08009208 <__b2d>:
 8009208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800920a:	0006      	movs	r6, r0
 800920c:	6903      	ldr	r3, [r0, #16]
 800920e:	3614      	adds	r6, #20
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	18f3      	adds	r3, r6, r3
 8009214:	1f1d      	subs	r5, r3, #4
 8009216:	682c      	ldr	r4, [r5, #0]
 8009218:	000f      	movs	r7, r1
 800921a:	0020      	movs	r0, r4
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	f7ff fd3b 	bl	8008c98 <__hi0bits>
 8009222:	2220      	movs	r2, #32
 8009224:	1a12      	subs	r2, r2, r0
 8009226:	603a      	str	r2, [r7, #0]
 8009228:	0003      	movs	r3, r0
 800922a:	4a1c      	ldr	r2, [pc, #112]	@ (800929c <__b2d+0x94>)
 800922c:	280a      	cmp	r0, #10
 800922e:	dc15      	bgt.n	800925c <__b2d+0x54>
 8009230:	210b      	movs	r1, #11
 8009232:	0027      	movs	r7, r4
 8009234:	1a09      	subs	r1, r1, r0
 8009236:	40cf      	lsrs	r7, r1
 8009238:	433a      	orrs	r2, r7
 800923a:	468c      	mov	ip, r1
 800923c:	0011      	movs	r1, r2
 800923e:	2200      	movs	r2, #0
 8009240:	42ae      	cmp	r6, r5
 8009242:	d202      	bcs.n	800924a <__b2d+0x42>
 8009244:	9a01      	ldr	r2, [sp, #4]
 8009246:	3a08      	subs	r2, #8
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	3315      	adds	r3, #21
 800924c:	409c      	lsls	r4, r3
 800924e:	4663      	mov	r3, ip
 8009250:	0027      	movs	r7, r4
 8009252:	40da      	lsrs	r2, r3
 8009254:	4317      	orrs	r7, r2
 8009256:	0038      	movs	r0, r7
 8009258:	b003      	add	sp, #12
 800925a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925c:	2700      	movs	r7, #0
 800925e:	42ae      	cmp	r6, r5
 8009260:	d202      	bcs.n	8009268 <__b2d+0x60>
 8009262:	9d01      	ldr	r5, [sp, #4]
 8009264:	3d08      	subs	r5, #8
 8009266:	682f      	ldr	r7, [r5, #0]
 8009268:	210b      	movs	r1, #11
 800926a:	4249      	negs	r1, r1
 800926c:	468c      	mov	ip, r1
 800926e:	449c      	add	ip, r3
 8009270:	2b0b      	cmp	r3, #11
 8009272:	d010      	beq.n	8009296 <__b2d+0x8e>
 8009274:	4661      	mov	r1, ip
 8009276:	2320      	movs	r3, #32
 8009278:	408c      	lsls	r4, r1
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	0039      	movs	r1, r7
 800927e:	40d9      	lsrs	r1, r3
 8009280:	430c      	orrs	r4, r1
 8009282:	4322      	orrs	r2, r4
 8009284:	0011      	movs	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	42b5      	cmp	r5, r6
 800928a:	d901      	bls.n	8009290 <__b2d+0x88>
 800928c:	3d04      	subs	r5, #4
 800928e:	682a      	ldr	r2, [r5, #0]
 8009290:	4664      	mov	r4, ip
 8009292:	40a7      	lsls	r7, r4
 8009294:	e7dd      	b.n	8009252 <__b2d+0x4a>
 8009296:	4322      	orrs	r2, r4
 8009298:	0011      	movs	r1, r2
 800929a:	e7dc      	b.n	8009256 <__b2d+0x4e>
 800929c:	3ff00000 	.word	0x3ff00000

080092a0 <__d2b>:
 80092a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a2:	2101      	movs	r1, #1
 80092a4:	0016      	movs	r6, r2
 80092a6:	001f      	movs	r7, r3
 80092a8:	f7ff fbfe 	bl	8008aa8 <_Balloc>
 80092ac:	1e04      	subs	r4, r0, #0
 80092ae:	d105      	bne.n	80092bc <__d2b+0x1c>
 80092b0:	0022      	movs	r2, r4
 80092b2:	4b25      	ldr	r3, [pc, #148]	@ (8009348 <__d2b+0xa8>)
 80092b4:	4825      	ldr	r0, [pc, #148]	@ (800934c <__d2b+0xac>)
 80092b6:	4926      	ldr	r1, [pc, #152]	@ (8009350 <__d2b+0xb0>)
 80092b8:	f001 f998 	bl	800a5ec <__assert_func>
 80092bc:	033b      	lsls	r3, r7, #12
 80092be:	007d      	lsls	r5, r7, #1
 80092c0:	0b1b      	lsrs	r3, r3, #12
 80092c2:	0d6d      	lsrs	r5, r5, #21
 80092c4:	d002      	beq.n	80092cc <__d2b+0x2c>
 80092c6:	2280      	movs	r2, #128	@ 0x80
 80092c8:	0352      	lsls	r2, r2, #13
 80092ca:	4313      	orrs	r3, r2
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	d025      	beq.n	800931e <__d2b+0x7e>
 80092d2:	4668      	mov	r0, sp
 80092d4:	9600      	str	r6, [sp, #0]
 80092d6:	f7ff fd00 	bl	8008cda <__lo0bits>
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	9900      	ldr	r1, [sp, #0]
 80092de:	2800      	cmp	r0, #0
 80092e0:	d01b      	beq.n	800931a <__d2b+0x7a>
 80092e2:	2220      	movs	r2, #32
 80092e4:	001e      	movs	r6, r3
 80092e6:	1a12      	subs	r2, r2, r0
 80092e8:	4096      	lsls	r6, r2
 80092ea:	0032      	movs	r2, r6
 80092ec:	40c3      	lsrs	r3, r0
 80092ee:	430a      	orrs	r2, r1
 80092f0:	6162      	str	r2, [r4, #20]
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	9e01      	ldr	r6, [sp, #4]
 80092f6:	61a6      	str	r6, [r4, #24]
 80092f8:	1e73      	subs	r3, r6, #1
 80092fa:	419e      	sbcs	r6, r3
 80092fc:	3601      	adds	r6, #1
 80092fe:	6126      	str	r6, [r4, #16]
 8009300:	2d00      	cmp	r5, #0
 8009302:	d014      	beq.n	800932e <__d2b+0x8e>
 8009304:	2635      	movs	r6, #53	@ 0x35
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <__d2b+0xb4>)
 8009308:	18ed      	adds	r5, r5, r3
 800930a:	9b08      	ldr	r3, [sp, #32]
 800930c:	182d      	adds	r5, r5, r0
 800930e:	601d      	str	r5, [r3, #0]
 8009310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009312:	1a36      	subs	r6, r6, r0
 8009314:	601e      	str	r6, [r3, #0]
 8009316:	0020      	movs	r0, r4
 8009318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800931a:	6161      	str	r1, [r4, #20]
 800931c:	e7ea      	b.n	80092f4 <__d2b+0x54>
 800931e:	a801      	add	r0, sp, #4
 8009320:	f7ff fcdb 	bl	8008cda <__lo0bits>
 8009324:	9b01      	ldr	r3, [sp, #4]
 8009326:	2601      	movs	r6, #1
 8009328:	6163      	str	r3, [r4, #20]
 800932a:	3020      	adds	r0, #32
 800932c:	e7e7      	b.n	80092fe <__d2b+0x5e>
 800932e:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <__d2b+0xb8>)
 8009330:	18c0      	adds	r0, r0, r3
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	6018      	str	r0, [r3, #0]
 8009336:	4b09      	ldr	r3, [pc, #36]	@ (800935c <__d2b+0xbc>)
 8009338:	18f3      	adds	r3, r6, r3
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	18e3      	adds	r3, r4, r3
 800933e:	6958      	ldr	r0, [r3, #20]
 8009340:	f7ff fcaa 	bl	8008c98 <__hi0bits>
 8009344:	0176      	lsls	r6, r6, #5
 8009346:	e7e3      	b.n	8009310 <__d2b+0x70>
 8009348:	0800cde1 	.word	0x0800cde1
 800934c:	0800cdf2 	.word	0x0800cdf2
 8009350:	0000030f 	.word	0x0000030f
 8009354:	fffffbcd 	.word	0xfffffbcd
 8009358:	fffffbce 	.word	0xfffffbce
 800935c:	3fffffff 	.word	0x3fffffff

08009360 <__ratio>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	b087      	sub	sp, #28
 8009364:	000f      	movs	r7, r1
 8009366:	a904      	add	r1, sp, #16
 8009368:	0006      	movs	r6, r0
 800936a:	f7ff ff4d 	bl	8009208 <__b2d>
 800936e:	9000      	str	r0, [sp, #0]
 8009370:	9101      	str	r1, [sp, #4]
 8009372:	9b00      	ldr	r3, [sp, #0]
 8009374:	9c01      	ldr	r4, [sp, #4]
 8009376:	0038      	movs	r0, r7
 8009378:	a905      	add	r1, sp, #20
 800937a:	9302      	str	r3, [sp, #8]
 800937c:	9403      	str	r4, [sp, #12]
 800937e:	f7ff ff43 	bl	8009208 <__b2d>
 8009382:	000d      	movs	r5, r1
 8009384:	0002      	movs	r2, r0
 8009386:	000b      	movs	r3, r1
 8009388:	6930      	ldr	r0, [r6, #16]
 800938a:	6939      	ldr	r1, [r7, #16]
 800938c:	9e04      	ldr	r6, [sp, #16]
 800938e:	1a40      	subs	r0, r0, r1
 8009390:	9905      	ldr	r1, [sp, #20]
 8009392:	0140      	lsls	r0, r0, #5
 8009394:	1a71      	subs	r1, r6, r1
 8009396:	1841      	adds	r1, r0, r1
 8009398:	0508      	lsls	r0, r1, #20
 800939a:	2900      	cmp	r1, #0
 800939c:	dd08      	ble.n	80093b0 <__ratio+0x50>
 800939e:	9901      	ldr	r1, [sp, #4]
 80093a0:	1841      	adds	r1, r0, r1
 80093a2:	9103      	str	r1, [sp, #12]
 80093a4:	9802      	ldr	r0, [sp, #8]
 80093a6:	9903      	ldr	r1, [sp, #12]
 80093a8:	f7f7 fc4c 	bl	8000c44 <__aeabi_ddiv>
 80093ac:	b007      	add	sp, #28
 80093ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b0:	1a2b      	subs	r3, r5, r0
 80093b2:	e7f7      	b.n	80093a4 <__ratio+0x44>

080093b4 <__copybits>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	0014      	movs	r4, r2
 80093b8:	0005      	movs	r5, r0
 80093ba:	3901      	subs	r1, #1
 80093bc:	6913      	ldr	r3, [r2, #16]
 80093be:	1149      	asrs	r1, r1, #5
 80093c0:	3101      	adds	r1, #1
 80093c2:	0089      	lsls	r1, r1, #2
 80093c4:	3414      	adds	r4, #20
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	1841      	adds	r1, r0, r1
 80093ca:	18e3      	adds	r3, r4, r3
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d80d      	bhi.n	80093ec <__copybits+0x38>
 80093d0:	0014      	movs	r4, r2
 80093d2:	3411      	adds	r4, #17
 80093d4:	2500      	movs	r5, #0
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d803      	bhi.n	80093e2 <__copybits+0x2e>
 80093da:	1a9b      	subs	r3, r3, r2
 80093dc:	3b11      	subs	r3, #17
 80093de:	089b      	lsrs	r3, r3, #2
 80093e0:	009d      	lsls	r5, r3, #2
 80093e2:	2300      	movs	r3, #0
 80093e4:	1940      	adds	r0, r0, r5
 80093e6:	4281      	cmp	r1, r0
 80093e8:	d803      	bhi.n	80093f2 <__copybits+0x3e>
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	cc40      	ldmia	r4!, {r6}
 80093ee:	c540      	stmia	r5!, {r6}
 80093f0:	e7ec      	b.n	80093cc <__copybits+0x18>
 80093f2:	c008      	stmia	r0!, {r3}
 80093f4:	e7f7      	b.n	80093e6 <__copybits+0x32>

080093f6 <__any_on>:
 80093f6:	0002      	movs	r2, r0
 80093f8:	6900      	ldr	r0, [r0, #16]
 80093fa:	b510      	push	{r4, lr}
 80093fc:	3214      	adds	r2, #20
 80093fe:	114b      	asrs	r3, r1, #5
 8009400:	4298      	cmp	r0, r3
 8009402:	db13      	blt.n	800942c <__any_on+0x36>
 8009404:	dd0c      	ble.n	8009420 <__any_on+0x2a>
 8009406:	241f      	movs	r4, #31
 8009408:	0008      	movs	r0, r1
 800940a:	4020      	ands	r0, r4
 800940c:	4221      	tst	r1, r4
 800940e:	d007      	beq.n	8009420 <__any_on+0x2a>
 8009410:	0099      	lsls	r1, r3, #2
 8009412:	588c      	ldr	r4, [r1, r2]
 8009414:	0021      	movs	r1, r4
 8009416:	40c1      	lsrs	r1, r0
 8009418:	4081      	lsls	r1, r0
 800941a:	2001      	movs	r0, #1
 800941c:	428c      	cmp	r4, r1
 800941e:	d104      	bne.n	800942a <__any_on+0x34>
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	18d3      	adds	r3, r2, r3
 8009424:	4293      	cmp	r3, r2
 8009426:	d803      	bhi.n	8009430 <__any_on+0x3a>
 8009428:	2000      	movs	r0, #0
 800942a:	bd10      	pop	{r4, pc}
 800942c:	0003      	movs	r3, r0
 800942e:	e7f7      	b.n	8009420 <__any_on+0x2a>
 8009430:	3b04      	subs	r3, #4
 8009432:	6819      	ldr	r1, [r3, #0]
 8009434:	2900      	cmp	r1, #0
 8009436:	d0f5      	beq.n	8009424 <__any_on+0x2e>
 8009438:	2001      	movs	r0, #1
 800943a:	e7f6      	b.n	800942a <__any_on+0x34>

0800943c <sulp>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	0016      	movs	r6, r2
 8009440:	000d      	movs	r5, r1
 8009442:	f7ff fec1 	bl	80091c8 <__ulp>
 8009446:	2e00      	cmp	r6, #0
 8009448:	d00d      	beq.n	8009466 <sulp+0x2a>
 800944a:	236b      	movs	r3, #107	@ 0x6b
 800944c:	006a      	lsls	r2, r5, #1
 800944e:	0d52      	lsrs	r2, r2, #21
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	dd07      	ble.n	8009466 <sulp+0x2a>
 8009456:	2400      	movs	r4, #0
 8009458:	4a03      	ldr	r2, [pc, #12]	@ (8009468 <sulp+0x2c>)
 800945a:	051b      	lsls	r3, r3, #20
 800945c:	189d      	adds	r5, r3, r2
 800945e:	002b      	movs	r3, r5
 8009460:	0022      	movs	r2, r4
 8009462:	f7f8 f833 	bl	80014cc <__aeabi_dmul>
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	3ff00000 	.word	0x3ff00000

0800946c <_strtod_l>:
 800946c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800946e:	b0a3      	sub	sp, #140	@ 0x8c
 8009470:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009472:	2200      	movs	r2, #0
 8009474:	2600      	movs	r6, #0
 8009476:	2700      	movs	r7, #0
 8009478:	9005      	str	r0, [sp, #20]
 800947a:	9109      	str	r1, [sp, #36]	@ 0x24
 800947c:	921e      	str	r2, [sp, #120]	@ 0x78
 800947e:	911d      	str	r1, [sp, #116]	@ 0x74
 8009480:	780a      	ldrb	r2, [r1, #0]
 8009482:	2a2b      	cmp	r2, #43	@ 0x2b
 8009484:	d053      	beq.n	800952e <_strtod_l+0xc2>
 8009486:	d83f      	bhi.n	8009508 <_strtod_l+0x9c>
 8009488:	2a0d      	cmp	r2, #13
 800948a:	d839      	bhi.n	8009500 <_strtod_l+0x94>
 800948c:	2a08      	cmp	r2, #8
 800948e:	d839      	bhi.n	8009504 <_strtod_l+0x98>
 8009490:	2a00      	cmp	r2, #0
 8009492:	d042      	beq.n	800951a <_strtod_l+0xae>
 8009494:	2200      	movs	r2, #0
 8009496:	9212      	str	r2, [sp, #72]	@ 0x48
 8009498:	2100      	movs	r1, #0
 800949a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800949c:	910c      	str	r1, [sp, #48]	@ 0x30
 800949e:	782a      	ldrb	r2, [r5, #0]
 80094a0:	2a30      	cmp	r2, #48	@ 0x30
 80094a2:	d000      	beq.n	80094a6 <_strtod_l+0x3a>
 80094a4:	e083      	b.n	80095ae <_strtod_l+0x142>
 80094a6:	786a      	ldrb	r2, [r5, #1]
 80094a8:	3120      	adds	r1, #32
 80094aa:	438a      	bics	r2, r1
 80094ac:	2a58      	cmp	r2, #88	@ 0x58
 80094ae:	d000      	beq.n	80094b2 <_strtod_l+0x46>
 80094b0:	e073      	b.n	800959a <_strtod_l+0x12e>
 80094b2:	9302      	str	r3, [sp, #8]
 80094b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094b6:	4a95      	ldr	r2, [pc, #596]	@ (800970c <_strtod_l+0x2a0>)
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	ab1e      	add	r3, sp, #120	@ 0x78
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80094c2:	a91d      	add	r1, sp, #116	@ 0x74
 80094c4:	f001 f946 	bl	800a754 <__gethex>
 80094c8:	230f      	movs	r3, #15
 80094ca:	0002      	movs	r2, r0
 80094cc:	401a      	ands	r2, r3
 80094ce:	0004      	movs	r4, r0
 80094d0:	9206      	str	r2, [sp, #24]
 80094d2:	4218      	tst	r0, r3
 80094d4:	d005      	beq.n	80094e2 <_strtod_l+0x76>
 80094d6:	2a06      	cmp	r2, #6
 80094d8:	d12b      	bne.n	8009532 <_strtod_l+0xc6>
 80094da:	2300      	movs	r3, #0
 80094dc:	3501      	adds	r5, #1
 80094de:	951d      	str	r5, [sp, #116]	@ 0x74
 80094e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80094e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <_strtod_l+0x82>
 80094e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d019      	beq.n	8009528 <_strtod_l+0xbc>
 80094f4:	2380      	movs	r3, #128	@ 0x80
 80094f6:	0030      	movs	r0, r6
 80094f8:	061b      	lsls	r3, r3, #24
 80094fa:	18f9      	adds	r1, r7, r3
 80094fc:	b023      	add	sp, #140	@ 0x8c
 80094fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009500:	2a20      	cmp	r2, #32
 8009502:	d1c7      	bne.n	8009494 <_strtod_l+0x28>
 8009504:	3101      	adds	r1, #1
 8009506:	e7ba      	b.n	800947e <_strtod_l+0x12>
 8009508:	2a2d      	cmp	r2, #45	@ 0x2d
 800950a:	d1c3      	bne.n	8009494 <_strtod_l+0x28>
 800950c:	3a2c      	subs	r2, #44	@ 0x2c
 800950e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009510:	1c4a      	adds	r2, r1, #1
 8009512:	921d      	str	r2, [sp, #116]	@ 0x74
 8009514:	784a      	ldrb	r2, [r1, #1]
 8009516:	2a00      	cmp	r2, #0
 8009518:	d1be      	bne.n	8009498 <_strtod_l+0x2c>
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	931d      	str	r3, [sp, #116]	@ 0x74
 800951e:	2300      	movs	r3, #0
 8009520:	9312      	str	r3, [sp, #72]	@ 0x48
 8009522:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1df      	bne.n	80094e8 <_strtod_l+0x7c>
 8009528:	0030      	movs	r0, r6
 800952a:	0039      	movs	r1, r7
 800952c:	e7e6      	b.n	80094fc <_strtod_l+0x90>
 800952e:	2200      	movs	r2, #0
 8009530:	e7ed      	b.n	800950e <_strtod_l+0xa2>
 8009532:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009534:	2a00      	cmp	r2, #0
 8009536:	d007      	beq.n	8009548 <_strtod_l+0xdc>
 8009538:	2135      	movs	r1, #53	@ 0x35
 800953a:	a820      	add	r0, sp, #128	@ 0x80
 800953c:	f7ff ff3a 	bl	80093b4 <__copybits>
 8009540:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009542:	9805      	ldr	r0, [sp, #20]
 8009544:	f7ff faf4 	bl	8008b30 <_Bfree>
 8009548:	9806      	ldr	r0, [sp, #24]
 800954a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800954c:	3801      	subs	r0, #1
 800954e:	2804      	cmp	r0, #4
 8009550:	d806      	bhi.n	8009560 <_strtod_l+0xf4>
 8009552:	f7f6 fddd 	bl	8000110 <__gnu_thumb1_case_uqi>
 8009556:	0312      	.short	0x0312
 8009558:	1e1c      	.short	0x1e1c
 800955a:	12          	.byte	0x12
 800955b:	00          	.byte	0x00
 800955c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800955e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009560:	05e4      	lsls	r4, r4, #23
 8009562:	d502      	bpl.n	800956a <_strtod_l+0xfe>
 8009564:	2380      	movs	r3, #128	@ 0x80
 8009566:	061b      	lsls	r3, r3, #24
 8009568:	431f      	orrs	r7, r3
 800956a:	4b69      	ldr	r3, [pc, #420]	@ (8009710 <_strtod_l+0x2a4>)
 800956c:	423b      	tst	r3, r7
 800956e:	d1b8      	bne.n	80094e2 <_strtod_l+0x76>
 8009570:	f7fe facc 	bl	8007b0c <__errno>
 8009574:	2322      	movs	r3, #34	@ 0x22
 8009576:	6003      	str	r3, [r0, #0]
 8009578:	e7b3      	b.n	80094e2 <_strtod_l+0x76>
 800957a:	4966      	ldr	r1, [pc, #408]	@ (8009714 <_strtod_l+0x2a8>)
 800957c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800957e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009580:	400a      	ands	r2, r1
 8009582:	4965      	ldr	r1, [pc, #404]	@ (8009718 <_strtod_l+0x2ac>)
 8009584:	185b      	adds	r3, r3, r1
 8009586:	051b      	lsls	r3, r3, #20
 8009588:	431a      	orrs	r2, r3
 800958a:	0017      	movs	r7, r2
 800958c:	e7e8      	b.n	8009560 <_strtod_l+0xf4>
 800958e:	4f60      	ldr	r7, [pc, #384]	@ (8009710 <_strtod_l+0x2a4>)
 8009590:	e7e6      	b.n	8009560 <_strtod_l+0xf4>
 8009592:	2601      	movs	r6, #1
 8009594:	4f61      	ldr	r7, [pc, #388]	@ (800971c <_strtod_l+0x2b0>)
 8009596:	4276      	negs	r6, r6
 8009598:	e7e2      	b.n	8009560 <_strtod_l+0xf4>
 800959a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	921d      	str	r2, [sp, #116]	@ 0x74
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	2b30      	cmp	r3, #48	@ 0x30
 80095a4:	d0f9      	beq.n	800959a <_strtod_l+0x12e>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d09b      	beq.n	80094e2 <_strtod_l+0x76>
 80095aa:	2301      	movs	r3, #1
 80095ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80095ae:	2500      	movs	r5, #0
 80095b0:	220a      	movs	r2, #10
 80095b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095b4:	950d      	str	r5, [sp, #52]	@ 0x34
 80095b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095b8:	9508      	str	r5, [sp, #32]
 80095ba:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80095bc:	7804      	ldrb	r4, [r0, #0]
 80095be:	0023      	movs	r3, r4
 80095c0:	3b30      	subs	r3, #48	@ 0x30
 80095c2:	b2d9      	uxtb	r1, r3
 80095c4:	2909      	cmp	r1, #9
 80095c6:	d927      	bls.n	8009618 <_strtod_l+0x1ac>
 80095c8:	2201      	movs	r2, #1
 80095ca:	4955      	ldr	r1, [pc, #340]	@ (8009720 <_strtod_l+0x2b4>)
 80095cc:	f000 ffe5 	bl	800a59a <strncmp>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d031      	beq.n	8009638 <_strtod_l+0x1cc>
 80095d4:	2000      	movs	r0, #0
 80095d6:	0023      	movs	r3, r4
 80095d8:	4684      	mov	ip, r0
 80095da:	9a08      	ldr	r2, [sp, #32]
 80095dc:	900e      	str	r0, [sp, #56]	@ 0x38
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	2220      	movs	r2, #32
 80095e2:	0019      	movs	r1, r3
 80095e4:	4391      	bics	r1, r2
 80095e6:	000a      	movs	r2, r1
 80095e8:	2100      	movs	r1, #0
 80095ea:	9107      	str	r1, [sp, #28]
 80095ec:	2a45      	cmp	r2, #69	@ 0x45
 80095ee:	d000      	beq.n	80095f2 <_strtod_l+0x186>
 80095f0:	e0c0      	b.n	8009774 <_strtod_l+0x308>
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80095f6:	4303      	orrs	r3, r0
 80095f8:	4313      	orrs	r3, r2
 80095fa:	428b      	cmp	r3, r1
 80095fc:	d08d      	beq.n	800951a <_strtod_l+0xae>
 80095fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009600:	9309      	str	r3, [sp, #36]	@ 0x24
 8009602:	3301      	adds	r3, #1
 8009604:	931d      	str	r3, [sp, #116]	@ 0x74
 8009606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b2b      	cmp	r3, #43	@ 0x2b
 800960c:	d070      	beq.n	80096f0 <_strtod_l+0x284>
 800960e:	000c      	movs	r4, r1
 8009610:	2b2d      	cmp	r3, #45	@ 0x2d
 8009612:	d173      	bne.n	80096fc <_strtod_l+0x290>
 8009614:	2401      	movs	r4, #1
 8009616:	e06c      	b.n	80096f2 <_strtod_l+0x286>
 8009618:	9908      	ldr	r1, [sp, #32]
 800961a:	2908      	cmp	r1, #8
 800961c:	dc09      	bgt.n	8009632 <_strtod_l+0x1c6>
 800961e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009620:	4351      	muls	r1, r2
 8009622:	185b      	adds	r3, r3, r1
 8009624:	930d      	str	r3, [sp, #52]	@ 0x34
 8009626:	9b08      	ldr	r3, [sp, #32]
 8009628:	3001      	adds	r0, #1
 800962a:	3301      	adds	r3, #1
 800962c:	9308      	str	r3, [sp, #32]
 800962e:	901d      	str	r0, [sp, #116]	@ 0x74
 8009630:	e7c3      	b.n	80095ba <_strtod_l+0x14e>
 8009632:	4355      	muls	r5, r2
 8009634:	195d      	adds	r5, r3, r5
 8009636:	e7f6      	b.n	8009626 <_strtod_l+0x1ba>
 8009638:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	921d      	str	r2, [sp, #116]	@ 0x74
 800963e:	9a08      	ldr	r2, [sp, #32]
 8009640:	785b      	ldrb	r3, [r3, #1]
 8009642:	2a00      	cmp	r2, #0
 8009644:	d03a      	beq.n	80096bc <_strtod_l+0x250>
 8009646:	900e      	str	r0, [sp, #56]	@ 0x38
 8009648:	9206      	str	r2, [sp, #24]
 800964a:	001a      	movs	r2, r3
 800964c:	3a30      	subs	r2, #48	@ 0x30
 800964e:	2a09      	cmp	r2, #9
 8009650:	d912      	bls.n	8009678 <_strtod_l+0x20c>
 8009652:	2201      	movs	r2, #1
 8009654:	4694      	mov	ip, r2
 8009656:	e7c3      	b.n	80095e0 <_strtod_l+0x174>
 8009658:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800965a:	3001      	adds	r0, #1
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	921d      	str	r2, [sp, #116]	@ 0x74
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	2b30      	cmp	r3, #48	@ 0x30
 8009664:	d0f8      	beq.n	8009658 <_strtod_l+0x1ec>
 8009666:	001a      	movs	r2, r3
 8009668:	3a31      	subs	r2, #49	@ 0x31
 800966a:	2a08      	cmp	r2, #8
 800966c:	d83b      	bhi.n	80096e6 <_strtod_l+0x27a>
 800966e:	900e      	str	r0, [sp, #56]	@ 0x38
 8009670:	2000      	movs	r0, #0
 8009672:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009674:	9006      	str	r0, [sp, #24]
 8009676:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009678:	001a      	movs	r2, r3
 800967a:	1c41      	adds	r1, r0, #1
 800967c:	3a30      	subs	r2, #48	@ 0x30
 800967e:	2b30      	cmp	r3, #48	@ 0x30
 8009680:	d016      	beq.n	80096b0 <_strtod_l+0x244>
 8009682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009684:	185b      	adds	r3, r3, r1
 8009686:	930e      	str	r3, [sp, #56]	@ 0x38
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	210a      	movs	r1, #10
 800968c:	469c      	mov	ip, r3
 800968e:	4484      	add	ip, r0
 8009690:	459c      	cmp	ip, r3
 8009692:	d115      	bne.n	80096c0 <_strtod_l+0x254>
 8009694:	9906      	ldr	r1, [sp, #24]
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	3101      	adds	r1, #1
 800969a:	1809      	adds	r1, r1, r0
 800969c:	181b      	adds	r3, r3, r0
 800969e:	9106      	str	r1, [sp, #24]
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	dc19      	bgt.n	80096d8 <_strtod_l+0x26c>
 80096a4:	230a      	movs	r3, #10
 80096a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80096a8:	434b      	muls	r3, r1
 80096aa:	2100      	movs	r1, #0
 80096ac:	18d3      	adds	r3, r2, r3
 80096ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80096b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096b2:	0008      	movs	r0, r1
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	921d      	str	r2, [sp, #116]	@ 0x74
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	e7c6      	b.n	800964a <_strtod_l+0x1de>
 80096bc:	9808      	ldr	r0, [sp, #32]
 80096be:	e7d0      	b.n	8009662 <_strtod_l+0x1f6>
 80096c0:	1c5c      	adds	r4, r3, #1
 80096c2:	2b08      	cmp	r3, #8
 80096c4:	dc04      	bgt.n	80096d0 <_strtod_l+0x264>
 80096c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096c8:	434b      	muls	r3, r1
 80096ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80096cc:	0023      	movs	r3, r4
 80096ce:	e7df      	b.n	8009690 <_strtod_l+0x224>
 80096d0:	2c10      	cmp	r4, #16
 80096d2:	dcfb      	bgt.n	80096cc <_strtod_l+0x260>
 80096d4:	434d      	muls	r5, r1
 80096d6:	e7f9      	b.n	80096cc <_strtod_l+0x260>
 80096d8:	2100      	movs	r1, #0
 80096da:	2b0f      	cmp	r3, #15
 80096dc:	dce8      	bgt.n	80096b0 <_strtod_l+0x244>
 80096de:	230a      	movs	r3, #10
 80096e0:	435d      	muls	r5, r3
 80096e2:	1955      	adds	r5, r2, r5
 80096e4:	e7e4      	b.n	80096b0 <_strtod_l+0x244>
 80096e6:	2200      	movs	r2, #0
 80096e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80096ea:	9206      	str	r2, [sp, #24]
 80096ec:	3201      	adds	r2, #1
 80096ee:	e7b1      	b.n	8009654 <_strtod_l+0x1e8>
 80096f0:	2400      	movs	r4, #0
 80096f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f4:	3302      	adds	r3, #2
 80096f6:	931d      	str	r3, [sp, #116]	@ 0x74
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	001a      	movs	r2, r3
 80096fe:	3a30      	subs	r2, #48	@ 0x30
 8009700:	2a09      	cmp	r2, #9
 8009702:	d913      	bls.n	800972c <_strtod_l+0x2c0>
 8009704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009706:	921d      	str	r2, [sp, #116]	@ 0x74
 8009708:	2200      	movs	r2, #0
 800970a:	e032      	b.n	8009772 <_strtod_l+0x306>
 800970c:	0800cf60 	.word	0x0800cf60
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	ffefffff 	.word	0xffefffff
 8009718:	00000433 	.word	0x00000433
 800971c:	7fffffff 	.word	0x7fffffff
 8009720:	0800cf48 	.word	0x0800cf48
 8009724:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	921d      	str	r2, [sp, #116]	@ 0x74
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b30      	cmp	r3, #48	@ 0x30
 800972e:	d0f9      	beq.n	8009724 <_strtod_l+0x2b8>
 8009730:	2200      	movs	r2, #0
 8009732:	9207      	str	r2, [sp, #28]
 8009734:	001a      	movs	r2, r3
 8009736:	3a31      	subs	r2, #49	@ 0x31
 8009738:	2a08      	cmp	r2, #8
 800973a:	d81b      	bhi.n	8009774 <_strtod_l+0x308>
 800973c:	3b30      	subs	r3, #48	@ 0x30
 800973e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009740:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009742:	9307      	str	r3, [sp, #28]
 8009744:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009746:	1c59      	adds	r1, r3, #1
 8009748:	911d      	str	r1, [sp, #116]	@ 0x74
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	001a      	movs	r2, r3
 800974e:	3a30      	subs	r2, #48	@ 0x30
 8009750:	2a09      	cmp	r2, #9
 8009752:	d93a      	bls.n	80097ca <_strtod_l+0x35e>
 8009754:	9a07      	ldr	r2, [sp, #28]
 8009756:	1a8a      	subs	r2, r1, r2
 8009758:	49b4      	ldr	r1, [pc, #720]	@ (8009a2c <_strtod_l+0x5c0>)
 800975a:	9107      	str	r1, [sp, #28]
 800975c:	2a08      	cmp	r2, #8
 800975e:	dc04      	bgt.n	800976a <_strtod_l+0x2fe>
 8009760:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009762:	9207      	str	r2, [sp, #28]
 8009764:	428a      	cmp	r2, r1
 8009766:	dd00      	ble.n	800976a <_strtod_l+0x2fe>
 8009768:	9107      	str	r1, [sp, #28]
 800976a:	2c00      	cmp	r4, #0
 800976c:	d002      	beq.n	8009774 <_strtod_l+0x308>
 800976e:	9a07      	ldr	r2, [sp, #28]
 8009770:	4252      	negs	r2, r2
 8009772:	9207      	str	r2, [sp, #28]
 8009774:	9a06      	ldr	r2, [sp, #24]
 8009776:	2a00      	cmp	r2, #0
 8009778:	d14d      	bne.n	8009816 <_strtod_l+0x3aa>
 800977a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800977c:	4310      	orrs	r0, r2
 800977e:	d000      	beq.n	8009782 <_strtod_l+0x316>
 8009780:	e6af      	b.n	80094e2 <_strtod_l+0x76>
 8009782:	4662      	mov	r2, ip
 8009784:	2a00      	cmp	r2, #0
 8009786:	d000      	beq.n	800978a <_strtod_l+0x31e>
 8009788:	e6c7      	b.n	800951a <_strtod_l+0xae>
 800978a:	2b69      	cmp	r3, #105	@ 0x69
 800978c:	d027      	beq.n	80097de <_strtod_l+0x372>
 800978e:	dc23      	bgt.n	80097d8 <_strtod_l+0x36c>
 8009790:	2b49      	cmp	r3, #73	@ 0x49
 8009792:	d024      	beq.n	80097de <_strtod_l+0x372>
 8009794:	2b4e      	cmp	r3, #78	@ 0x4e
 8009796:	d000      	beq.n	800979a <_strtod_l+0x32e>
 8009798:	e6bf      	b.n	800951a <_strtod_l+0xae>
 800979a:	49a5      	ldr	r1, [pc, #660]	@ (8009a30 <_strtod_l+0x5c4>)
 800979c:	a81d      	add	r0, sp, #116	@ 0x74
 800979e:	f001 fa0f 	bl	800abc0 <__match>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d100      	bne.n	80097a8 <_strtod_l+0x33c>
 80097a6:	e6b8      	b.n	800951a <_strtod_l+0xae>
 80097a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b28      	cmp	r3, #40	@ 0x28
 80097ae:	d12c      	bne.n	800980a <_strtod_l+0x39e>
 80097b0:	49a0      	ldr	r1, [pc, #640]	@ (8009a34 <_strtod_l+0x5c8>)
 80097b2:	aa20      	add	r2, sp, #128	@ 0x80
 80097b4:	a81d      	add	r0, sp, #116	@ 0x74
 80097b6:	f001 fa17 	bl	800abe8 <__hexnan>
 80097ba:	2805      	cmp	r0, #5
 80097bc:	d125      	bne.n	800980a <_strtod_l+0x39e>
 80097be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097c0:	4a9d      	ldr	r2, [pc, #628]	@ (8009a38 <_strtod_l+0x5cc>)
 80097c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80097c4:	431a      	orrs	r2, r3
 80097c6:	0017      	movs	r7, r2
 80097c8:	e68b      	b.n	80094e2 <_strtod_l+0x76>
 80097ca:	220a      	movs	r2, #10
 80097cc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80097ce:	434a      	muls	r2, r1
 80097d0:	18d2      	adds	r2, r2, r3
 80097d2:	3a30      	subs	r2, #48	@ 0x30
 80097d4:	9210      	str	r2, [sp, #64]	@ 0x40
 80097d6:	e7b5      	b.n	8009744 <_strtod_l+0x2d8>
 80097d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80097da:	d0de      	beq.n	800979a <_strtod_l+0x32e>
 80097dc:	e69d      	b.n	800951a <_strtod_l+0xae>
 80097de:	4997      	ldr	r1, [pc, #604]	@ (8009a3c <_strtod_l+0x5d0>)
 80097e0:	a81d      	add	r0, sp, #116	@ 0x74
 80097e2:	f001 f9ed 	bl	800abc0 <__match>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d100      	bne.n	80097ec <_strtod_l+0x380>
 80097ea:	e696      	b.n	800951a <_strtod_l+0xae>
 80097ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097ee:	4994      	ldr	r1, [pc, #592]	@ (8009a40 <_strtod_l+0x5d4>)
 80097f0:	3b01      	subs	r3, #1
 80097f2:	a81d      	add	r0, sp, #116	@ 0x74
 80097f4:	931d      	str	r3, [sp, #116]	@ 0x74
 80097f6:	f001 f9e3 	bl	800abc0 <__match>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d102      	bne.n	8009804 <_strtod_l+0x398>
 80097fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009800:	3301      	adds	r3, #1
 8009802:	931d      	str	r3, [sp, #116]	@ 0x74
 8009804:	2600      	movs	r6, #0
 8009806:	4f8c      	ldr	r7, [pc, #560]	@ (8009a38 <_strtod_l+0x5cc>)
 8009808:	e66b      	b.n	80094e2 <_strtod_l+0x76>
 800980a:	488e      	ldr	r0, [pc, #568]	@ (8009a44 <_strtod_l+0x5d8>)
 800980c:	f000 fee8 	bl	800a5e0 <nan>
 8009810:	0006      	movs	r6, r0
 8009812:	000f      	movs	r7, r1
 8009814:	e665      	b.n	80094e2 <_strtod_l+0x76>
 8009816:	9b07      	ldr	r3, [sp, #28]
 8009818:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	930c      	str	r3, [sp, #48]	@ 0x30
 800981e:	9b08      	ldr	r3, [sp, #32]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <_strtod_l+0x3bc>
 8009824:	9b06      	ldr	r3, [sp, #24]
 8009826:	9308      	str	r3, [sp, #32]
 8009828:	9c06      	ldr	r4, [sp, #24]
 800982a:	2c10      	cmp	r4, #16
 800982c:	dd00      	ble.n	8009830 <_strtod_l+0x3c4>
 800982e:	2410      	movs	r4, #16
 8009830:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009832:	f7f8 fd3b 	bl	80022ac <__aeabi_ui2d>
 8009836:	9b06      	ldr	r3, [sp, #24]
 8009838:	0006      	movs	r6, r0
 800983a:	000f      	movs	r7, r1
 800983c:	2b09      	cmp	r3, #9
 800983e:	dc13      	bgt.n	8009868 <_strtod_l+0x3fc>
 8009840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009842:	2b00      	cmp	r3, #0
 8009844:	d100      	bne.n	8009848 <_strtod_l+0x3dc>
 8009846:	e64c      	b.n	80094e2 <_strtod_l+0x76>
 8009848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	dc00      	bgt.n	8009850 <_strtod_l+0x3e4>
 800984e:	e07e      	b.n	800994e <_strtod_l+0x4e2>
 8009850:	2b16      	cmp	r3, #22
 8009852:	dc63      	bgt.n	800991c <_strtod_l+0x4b0>
 8009854:	497c      	ldr	r1, [pc, #496]	@ (8009a48 <_strtod_l+0x5dc>)
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	18c9      	adds	r1, r1, r3
 800985a:	0032      	movs	r2, r6
 800985c:	6808      	ldr	r0, [r1, #0]
 800985e:	6849      	ldr	r1, [r1, #4]
 8009860:	003b      	movs	r3, r7
 8009862:	f7f7 fe33 	bl	80014cc <__aeabi_dmul>
 8009866:	e7d3      	b.n	8009810 <_strtod_l+0x3a4>
 8009868:	0022      	movs	r2, r4
 800986a:	4b77      	ldr	r3, [pc, #476]	@ (8009a48 <_strtod_l+0x5dc>)
 800986c:	3a09      	subs	r2, #9
 800986e:	00d2      	lsls	r2, r2, #3
 8009870:	189b      	adds	r3, r3, r2
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f7f7 fe29 	bl	80014cc <__aeabi_dmul>
 800987a:	0006      	movs	r6, r0
 800987c:	0028      	movs	r0, r5
 800987e:	000f      	movs	r7, r1
 8009880:	f7f8 fd14 	bl	80022ac <__aeabi_ui2d>
 8009884:	000b      	movs	r3, r1
 8009886:	0002      	movs	r2, r0
 8009888:	0039      	movs	r1, r7
 800988a:	0030      	movs	r0, r6
 800988c:	f7f6 fe76 	bl	800057c <__aeabi_dadd>
 8009890:	9b06      	ldr	r3, [sp, #24]
 8009892:	0006      	movs	r6, r0
 8009894:	000f      	movs	r7, r1
 8009896:	2b0f      	cmp	r3, #15
 8009898:	ddd2      	ble.n	8009840 <_strtod_l+0x3d4>
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	1b1c      	subs	r4, r3, r4
 800989e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098a0:	18e4      	adds	r4, r4, r3
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	dc00      	bgt.n	80098a8 <_strtod_l+0x43c>
 80098a6:	e09b      	b.n	80099e0 <_strtod_l+0x574>
 80098a8:	220f      	movs	r2, #15
 80098aa:	0023      	movs	r3, r4
 80098ac:	4013      	ands	r3, r2
 80098ae:	4214      	tst	r4, r2
 80098b0:	d00a      	beq.n	80098c8 <_strtod_l+0x45c>
 80098b2:	4965      	ldr	r1, [pc, #404]	@ (8009a48 <_strtod_l+0x5dc>)
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	18c9      	adds	r1, r1, r3
 80098b8:	0032      	movs	r2, r6
 80098ba:	6808      	ldr	r0, [r1, #0]
 80098bc:	6849      	ldr	r1, [r1, #4]
 80098be:	003b      	movs	r3, r7
 80098c0:	f7f7 fe04 	bl	80014cc <__aeabi_dmul>
 80098c4:	0006      	movs	r6, r0
 80098c6:	000f      	movs	r7, r1
 80098c8:	230f      	movs	r3, #15
 80098ca:	439c      	bics	r4, r3
 80098cc:	d073      	beq.n	80099b6 <_strtod_l+0x54a>
 80098ce:	3326      	adds	r3, #38	@ 0x26
 80098d0:	33ff      	adds	r3, #255	@ 0xff
 80098d2:	429c      	cmp	r4, r3
 80098d4:	dd4b      	ble.n	800996e <_strtod_l+0x502>
 80098d6:	2300      	movs	r3, #0
 80098d8:	9306      	str	r3, [sp, #24]
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80098de:	9308      	str	r3, [sp, #32]
 80098e0:	2322      	movs	r3, #34	@ 0x22
 80098e2:	2600      	movs	r6, #0
 80098e4:	9a05      	ldr	r2, [sp, #20]
 80098e6:	4f54      	ldr	r7, [pc, #336]	@ (8009a38 <_strtod_l+0x5cc>)
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098ec:	42b3      	cmp	r3, r6
 80098ee:	d100      	bne.n	80098f2 <_strtod_l+0x486>
 80098f0:	e5f7      	b.n	80094e2 <_strtod_l+0x76>
 80098f2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80098f4:	9805      	ldr	r0, [sp, #20]
 80098f6:	f7ff f91b 	bl	8008b30 <_Bfree>
 80098fa:	9908      	ldr	r1, [sp, #32]
 80098fc:	9805      	ldr	r0, [sp, #20]
 80098fe:	f7ff f917 	bl	8008b30 <_Bfree>
 8009902:	9907      	ldr	r1, [sp, #28]
 8009904:	9805      	ldr	r0, [sp, #20]
 8009906:	f7ff f913 	bl	8008b30 <_Bfree>
 800990a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800990c:	9805      	ldr	r0, [sp, #20]
 800990e:	f7ff f90f 	bl	8008b30 <_Bfree>
 8009912:	9906      	ldr	r1, [sp, #24]
 8009914:	9805      	ldr	r0, [sp, #20]
 8009916:	f7ff f90b 	bl	8008b30 <_Bfree>
 800991a:	e5e2      	b.n	80094e2 <_strtod_l+0x76>
 800991c:	2325      	movs	r3, #37	@ 0x25
 800991e:	9a06      	ldr	r2, [sp, #24]
 8009920:	1a9b      	subs	r3, r3, r2
 8009922:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009924:	4293      	cmp	r3, r2
 8009926:	dbb8      	blt.n	800989a <_strtod_l+0x42e>
 8009928:	240f      	movs	r4, #15
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	4d46      	ldr	r5, [pc, #280]	@ (8009a48 <_strtod_l+0x5dc>)
 800992e:	1ae4      	subs	r4, r4, r3
 8009930:	00e1      	lsls	r1, r4, #3
 8009932:	1869      	adds	r1, r5, r1
 8009934:	0032      	movs	r2, r6
 8009936:	6808      	ldr	r0, [r1, #0]
 8009938:	6849      	ldr	r1, [r1, #4]
 800993a:	003b      	movs	r3, r7
 800993c:	f7f7 fdc6 	bl	80014cc <__aeabi_dmul>
 8009940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009942:	1b1c      	subs	r4, r3, r4
 8009944:	00e4      	lsls	r4, r4, #3
 8009946:	192d      	adds	r5, r5, r4
 8009948:	682a      	ldr	r2, [r5, #0]
 800994a:	686b      	ldr	r3, [r5, #4]
 800994c:	e789      	b.n	8009862 <_strtod_l+0x3f6>
 800994e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009950:	3316      	adds	r3, #22
 8009952:	dba2      	blt.n	800989a <_strtod_l+0x42e>
 8009954:	9907      	ldr	r1, [sp, #28]
 8009956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009958:	4b3b      	ldr	r3, [pc, #236]	@ (8009a48 <_strtod_l+0x5dc>)
 800995a:	1a52      	subs	r2, r2, r1
 800995c:	00d2      	lsls	r2, r2, #3
 800995e:	189b      	adds	r3, r3, r2
 8009960:	0030      	movs	r0, r6
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	0039      	movs	r1, r7
 8009968:	f7f7 f96c 	bl	8000c44 <__aeabi_ddiv>
 800996c:	e750      	b.n	8009810 <_strtod_l+0x3a4>
 800996e:	2300      	movs	r3, #0
 8009970:	0030      	movs	r0, r6
 8009972:	0039      	movs	r1, r7
 8009974:	4d35      	ldr	r5, [pc, #212]	@ (8009a4c <_strtod_l+0x5e0>)
 8009976:	1124      	asrs	r4, r4, #4
 8009978:	9309      	str	r3, [sp, #36]	@ 0x24
 800997a:	2c01      	cmp	r4, #1
 800997c:	dc1e      	bgt.n	80099bc <_strtod_l+0x550>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <_strtod_l+0x51a>
 8009982:	0006      	movs	r6, r0
 8009984:	000f      	movs	r7, r1
 8009986:	4b32      	ldr	r3, [pc, #200]	@ (8009a50 <_strtod_l+0x5e4>)
 8009988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800998a:	18ff      	adds	r7, r7, r3
 800998c:	4b2f      	ldr	r3, [pc, #188]	@ (8009a4c <_strtod_l+0x5e0>)
 800998e:	00d5      	lsls	r5, r2, #3
 8009990:	195d      	adds	r5, r3, r5
 8009992:	0032      	movs	r2, r6
 8009994:	6828      	ldr	r0, [r5, #0]
 8009996:	6869      	ldr	r1, [r5, #4]
 8009998:	003b      	movs	r3, r7
 800999a:	f7f7 fd97 	bl	80014cc <__aeabi_dmul>
 800999e:	4b26      	ldr	r3, [pc, #152]	@ (8009a38 <_strtod_l+0x5cc>)
 80099a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009a54 <_strtod_l+0x5e8>)
 80099a2:	0006      	movs	r6, r0
 80099a4:	400b      	ands	r3, r1
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d895      	bhi.n	80098d6 <_strtod_l+0x46a>
 80099aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009a58 <_strtod_l+0x5ec>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d913      	bls.n	80099d8 <_strtod_l+0x56c>
 80099b0:	2601      	movs	r6, #1
 80099b2:	4f2a      	ldr	r7, [pc, #168]	@ (8009a5c <_strtod_l+0x5f0>)
 80099b4:	4276      	negs	r6, r6
 80099b6:	2300      	movs	r3, #0
 80099b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ba:	e086      	b.n	8009aca <_strtod_l+0x65e>
 80099bc:	2201      	movs	r2, #1
 80099be:	4214      	tst	r4, r2
 80099c0:	d004      	beq.n	80099cc <_strtod_l+0x560>
 80099c2:	682a      	ldr	r2, [r5, #0]
 80099c4:	686b      	ldr	r3, [r5, #4]
 80099c6:	f7f7 fd81 	bl	80014cc <__aeabi_dmul>
 80099ca:	2301      	movs	r3, #1
 80099cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ce:	1064      	asrs	r4, r4, #1
 80099d0:	3201      	adds	r2, #1
 80099d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80099d4:	3508      	adds	r5, #8
 80099d6:	e7d0      	b.n	800997a <_strtod_l+0x50e>
 80099d8:	23d4      	movs	r3, #212	@ 0xd4
 80099da:	049b      	lsls	r3, r3, #18
 80099dc:	18cf      	adds	r7, r1, r3
 80099de:	e7ea      	b.n	80099b6 <_strtod_l+0x54a>
 80099e0:	2c00      	cmp	r4, #0
 80099e2:	d0e8      	beq.n	80099b6 <_strtod_l+0x54a>
 80099e4:	4264      	negs	r4, r4
 80099e6:	230f      	movs	r3, #15
 80099e8:	0022      	movs	r2, r4
 80099ea:	401a      	ands	r2, r3
 80099ec:	421c      	tst	r4, r3
 80099ee:	d00a      	beq.n	8009a06 <_strtod_l+0x59a>
 80099f0:	4b15      	ldr	r3, [pc, #84]	@ (8009a48 <_strtod_l+0x5dc>)
 80099f2:	00d2      	lsls	r2, r2, #3
 80099f4:	189b      	adds	r3, r3, r2
 80099f6:	0030      	movs	r0, r6
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	0039      	movs	r1, r7
 80099fe:	f7f7 f921 	bl	8000c44 <__aeabi_ddiv>
 8009a02:	0006      	movs	r6, r0
 8009a04:	000f      	movs	r7, r1
 8009a06:	1124      	asrs	r4, r4, #4
 8009a08:	d0d5      	beq.n	80099b6 <_strtod_l+0x54a>
 8009a0a:	2c1f      	cmp	r4, #31
 8009a0c:	dd28      	ble.n	8009a60 <_strtod_l+0x5f4>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9306      	str	r3, [sp, #24]
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a16:	9308      	str	r3, [sp, #32]
 8009a18:	2322      	movs	r3, #34	@ 0x22
 8009a1a:	9a05      	ldr	r2, [sp, #20]
 8009a1c:	2600      	movs	r6, #0
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a22:	2700      	movs	r7, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d000      	beq.n	8009a2a <_strtod_l+0x5be>
 8009a28:	e763      	b.n	80098f2 <_strtod_l+0x486>
 8009a2a:	e55a      	b.n	80094e2 <_strtod_l+0x76>
 8009a2c:	00004e1f 	.word	0x00004e1f
 8009a30:	0800cd39 	.word	0x0800cd39
 8009a34:	0800cf4c 	.word	0x0800cf4c
 8009a38:	7ff00000 	.word	0x7ff00000
 8009a3c:	0800cd31 	.word	0x0800cd31
 8009a40:	0800cd68 	.word	0x0800cd68
 8009a44:	0800d0f5 	.word	0x0800d0f5
 8009a48:	0800ce80 	.word	0x0800ce80
 8009a4c:	0800ce58 	.word	0x0800ce58
 8009a50:	fcb00000 	.word	0xfcb00000
 8009a54:	7ca00000 	.word	0x7ca00000
 8009a58:	7c900000 	.word	0x7c900000
 8009a5c:	7fefffff 	.word	0x7fefffff
 8009a60:	2310      	movs	r3, #16
 8009a62:	0022      	movs	r2, r4
 8009a64:	401a      	ands	r2, r3
 8009a66:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a68:	421c      	tst	r4, r3
 8009a6a:	d001      	beq.n	8009a70 <_strtod_l+0x604>
 8009a6c:	335a      	adds	r3, #90	@ 0x5a
 8009a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a70:	0030      	movs	r0, r6
 8009a72:	0039      	movs	r1, r7
 8009a74:	2300      	movs	r3, #0
 8009a76:	4dbf      	ldr	r5, [pc, #764]	@ (8009d74 <_strtod_l+0x908>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	4214      	tst	r4, r2
 8009a7c:	d004      	beq.n	8009a88 <_strtod_l+0x61c>
 8009a7e:	682a      	ldr	r2, [r5, #0]
 8009a80:	686b      	ldr	r3, [r5, #4]
 8009a82:	f7f7 fd23 	bl	80014cc <__aeabi_dmul>
 8009a86:	2301      	movs	r3, #1
 8009a88:	1064      	asrs	r4, r4, #1
 8009a8a:	3508      	adds	r5, #8
 8009a8c:	2c00      	cmp	r4, #0
 8009a8e:	d1f3      	bne.n	8009a78 <_strtod_l+0x60c>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <_strtod_l+0x62c>
 8009a94:	0006      	movs	r6, r0
 8009a96:	000f      	movs	r7, r1
 8009a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <_strtod_l+0x64e>
 8009a9e:	236b      	movs	r3, #107	@ 0x6b
 8009aa0:	007a      	lsls	r2, r7, #1
 8009aa2:	0d52      	lsrs	r2, r2, #21
 8009aa4:	0039      	movs	r1, r7
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	dd06      	ble.n	8009aba <_strtod_l+0x64e>
 8009aac:	2b1f      	cmp	r3, #31
 8009aae:	dd5a      	ble.n	8009b66 <_strtod_l+0x6fa>
 8009ab0:	2600      	movs	r6, #0
 8009ab2:	2b34      	cmp	r3, #52	@ 0x34
 8009ab4:	dd50      	ble.n	8009b58 <_strtod_l+0x6ec>
 8009ab6:	27dc      	movs	r7, #220	@ 0xdc
 8009ab8:	04bf      	lsls	r7, r7, #18
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	0030      	movs	r0, r6
 8009ac0:	0039      	movs	r1, r7
 8009ac2:	f7f6 fcbf 	bl	8000444 <__aeabi_dcmpeq>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d1a1      	bne.n	8009a0e <_strtod_l+0x5a2>
 8009aca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009acc:	9a08      	ldr	r2, [sp, #32]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009ad2:	9b06      	ldr	r3, [sp, #24]
 8009ad4:	9805      	ldr	r0, [sp, #20]
 8009ad6:	f7ff f893 	bl	8008c00 <__s2b>
 8009ada:	900d      	str	r0, [sp, #52]	@ 0x34
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d100      	bne.n	8009ae2 <_strtod_l+0x676>
 8009ae0:	e6f9      	b.n	80098d6 <_strtod_l+0x46a>
 8009ae2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ae4:	9907      	ldr	r1, [sp, #28]
 8009ae6:	17da      	asrs	r2, r3, #31
 8009ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aea:	1a5b      	subs	r3, r3, r1
 8009aec:	401a      	ands	r2, r3
 8009aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009af0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009af2:	43db      	mvns	r3, r3
 8009af4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009af6:	17db      	asrs	r3, r3, #31
 8009af8:	401a      	ands	r2, r3
 8009afa:	2300      	movs	r3, #0
 8009afc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009afe:	9306      	str	r3, [sp, #24]
 8009b00:	9307      	str	r3, [sp, #28]
 8009b02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b04:	9805      	ldr	r0, [sp, #20]
 8009b06:	6859      	ldr	r1, [r3, #4]
 8009b08:	f7fe ffce 	bl	8008aa8 <_Balloc>
 8009b0c:	9008      	str	r0, [sp, #32]
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d100      	bne.n	8009b14 <_strtod_l+0x6a8>
 8009b12:	e6e5      	b.n	80098e0 <_strtod_l+0x474>
 8009b14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b16:	300c      	adds	r0, #12
 8009b18:	0019      	movs	r1, r3
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	310c      	adds	r1, #12
 8009b1e:	3202      	adds	r2, #2
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	f7fe f82b 	bl	8007b7c <memcpy>
 8009b26:	ab20      	add	r3, sp, #128	@ 0x80
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	0032      	movs	r2, r6
 8009b30:	003b      	movs	r3, r7
 8009b32:	9805      	ldr	r0, [sp, #20]
 8009b34:	9610      	str	r6, [sp, #64]	@ 0x40
 8009b36:	9711      	str	r7, [sp, #68]	@ 0x44
 8009b38:	f7ff fbb2 	bl	80092a0 <__d2b>
 8009b3c:	901e      	str	r0, [sp, #120]	@ 0x78
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d100      	bne.n	8009b44 <_strtod_l+0x6d8>
 8009b42:	e6cd      	b.n	80098e0 <_strtod_l+0x474>
 8009b44:	2101      	movs	r1, #1
 8009b46:	9805      	ldr	r0, [sp, #20]
 8009b48:	f7ff f8f6 	bl	8008d38 <__i2b>
 8009b4c:	9007      	str	r0, [sp, #28]
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d10e      	bne.n	8009b70 <_strtod_l+0x704>
 8009b52:	2300      	movs	r3, #0
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	e6c3      	b.n	80098e0 <_strtod_l+0x474>
 8009b58:	234b      	movs	r3, #75	@ 0x4b
 8009b5a:	1a9a      	subs	r2, r3, r2
 8009b5c:	3b4c      	subs	r3, #76	@ 0x4c
 8009b5e:	4093      	lsls	r3, r2
 8009b60:	4019      	ands	r1, r3
 8009b62:	000f      	movs	r7, r1
 8009b64:	e7a9      	b.n	8009aba <_strtod_l+0x64e>
 8009b66:	2201      	movs	r2, #1
 8009b68:	4252      	negs	r2, r2
 8009b6a:	409a      	lsls	r2, r3
 8009b6c:	4016      	ands	r6, r2
 8009b6e:	e7a4      	b.n	8009aba <_strtod_l+0x64e>
 8009b70:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009b72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b74:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8009b76:	1ad4      	subs	r4, r2, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	db01      	blt.n	8009b80 <_strtod_l+0x714>
 8009b7c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009b7e:	195d      	adds	r5, r3, r5
 8009b80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b84:	1a5b      	subs	r3, r3, r1
 8009b86:	2136      	movs	r1, #54	@ 0x36
 8009b88:	189b      	adds	r3, r3, r2
 8009b8a:	1a8a      	subs	r2, r1, r2
 8009b8c:	497a      	ldr	r1, [pc, #488]	@ (8009d78 <_strtod_l+0x90c>)
 8009b8e:	2001      	movs	r0, #1
 8009b90:	468c      	mov	ip, r1
 8009b92:	2100      	movs	r1, #0
 8009b94:	3b01      	subs	r3, #1
 8009b96:	9116      	str	r1, [sp, #88]	@ 0x58
 8009b98:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b9a:	4563      	cmp	r3, ip
 8009b9c:	da06      	bge.n	8009bac <_strtod_l+0x740>
 8009b9e:	4661      	mov	r1, ip
 8009ba0:	1ac9      	subs	r1, r1, r3
 8009ba2:	1a52      	subs	r2, r2, r1
 8009ba4:	291f      	cmp	r1, #31
 8009ba6:	dc3f      	bgt.n	8009c28 <_strtod_l+0x7bc>
 8009ba8:	4088      	lsls	r0, r1
 8009baa:	9014      	str	r0, [sp, #80]	@ 0x50
 8009bac:	18ab      	adds	r3, r5, r2
 8009bae:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bb0:	18a4      	adds	r4, r4, r2
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bb6:	191c      	adds	r4, r3, r4
 8009bb8:	002b      	movs	r3, r5
 8009bba:	4295      	cmp	r5, r2
 8009bbc:	dd00      	ble.n	8009bc0 <_strtod_l+0x754>
 8009bbe:	0013      	movs	r3, r2
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	dd00      	ble.n	8009bc6 <_strtod_l+0x75a>
 8009bc4:	0023      	movs	r3, r4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dd04      	ble.n	8009bd4 <_strtod_l+0x768>
 8009bca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bcc:	1ae4      	subs	r4, r4, r3
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bd2:	1aed      	subs	r5, r5, r3
 8009bd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dd16      	ble.n	8009c08 <_strtod_l+0x79c>
 8009bda:	001a      	movs	r2, r3
 8009bdc:	9907      	ldr	r1, [sp, #28]
 8009bde:	9805      	ldr	r0, [sp, #20]
 8009be0:	f7ff f974 	bl	8008ecc <__pow5mult>
 8009be4:	9007      	str	r0, [sp, #28]
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0b3      	beq.n	8009b52 <_strtod_l+0x6e6>
 8009bea:	0001      	movs	r1, r0
 8009bec:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	f7ff f8ba 	bl	8008d68 <__multiply>
 8009bf4:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d100      	bne.n	8009bfc <_strtod_l+0x790>
 8009bfa:	e671      	b.n	80098e0 <_strtod_l+0x474>
 8009bfc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009bfe:	9805      	ldr	r0, [sp, #20]
 8009c00:	f7fe ff96 	bl	8008b30 <_Bfree>
 8009c04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c06:	931e      	str	r3, [sp, #120]	@ 0x78
 8009c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	dc12      	bgt.n	8009c34 <_strtod_l+0x7c8>
 8009c0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dd18      	ble.n	8009c46 <_strtod_l+0x7da>
 8009c14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c16:	9908      	ldr	r1, [sp, #32]
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	f7ff f957 	bl	8008ecc <__pow5mult>
 8009c1e:	9008      	str	r0, [sp, #32]
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d110      	bne.n	8009c46 <_strtod_l+0x7da>
 8009c24:	2300      	movs	r3, #0
 8009c26:	e65a      	b.n	80098de <_strtod_l+0x472>
 8009c28:	4954      	ldr	r1, [pc, #336]	@ (8009d7c <_strtod_l+0x910>)
 8009c2a:	1acb      	subs	r3, r1, r3
 8009c2c:	0001      	movs	r1, r0
 8009c2e:	4099      	lsls	r1, r3
 8009c30:	9116      	str	r1, [sp, #88]	@ 0x58
 8009c32:	e7ba      	b.n	8009baa <_strtod_l+0x73e>
 8009c34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c36:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009c38:	9805      	ldr	r0, [sp, #20]
 8009c3a:	f7ff f9a3 	bl	8008f84 <__lshift>
 8009c3e:	901e      	str	r0, [sp, #120]	@ 0x78
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1e4      	bne.n	8009c0e <_strtod_l+0x7a2>
 8009c44:	e64c      	b.n	80098e0 <_strtod_l+0x474>
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	dd07      	ble.n	8009c5a <_strtod_l+0x7ee>
 8009c4a:	0022      	movs	r2, r4
 8009c4c:	9908      	ldr	r1, [sp, #32]
 8009c4e:	9805      	ldr	r0, [sp, #20]
 8009c50:	f7ff f998 	bl	8008f84 <__lshift>
 8009c54:	9008      	str	r0, [sp, #32]
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0e4      	beq.n	8009c24 <_strtod_l+0x7b8>
 8009c5a:	2d00      	cmp	r5, #0
 8009c5c:	dd08      	ble.n	8009c70 <_strtod_l+0x804>
 8009c5e:	002a      	movs	r2, r5
 8009c60:	9907      	ldr	r1, [sp, #28]
 8009c62:	9805      	ldr	r0, [sp, #20]
 8009c64:	f7ff f98e 	bl	8008f84 <__lshift>
 8009c68:	9007      	str	r0, [sp, #28]
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d100      	bne.n	8009c70 <_strtod_l+0x804>
 8009c6e:	e637      	b.n	80098e0 <_strtod_l+0x474>
 8009c70:	9a08      	ldr	r2, [sp, #32]
 8009c72:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009c74:	9805      	ldr	r0, [sp, #20]
 8009c76:	f7ff fa0d 	bl	8009094 <__mdiff>
 8009c7a:	9006      	str	r0, [sp, #24]
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d100      	bne.n	8009c82 <_strtod_l+0x816>
 8009c80:	e62e      	b.n	80098e0 <_strtod_l+0x474>
 8009c82:	68c3      	ldr	r3, [r0, #12]
 8009c84:	9907      	ldr	r1, [sp, #28]
 8009c86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60c3      	str	r3, [r0, #12]
 8009c8c:	f7ff f9e6 	bl	800905c <__mcmp>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	da3b      	bge.n	8009d0c <_strtod_l+0x8a0>
 8009c94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c96:	4333      	orrs	r3, r6
 8009c98:	d167      	bne.n	8009d6a <_strtod_l+0x8fe>
 8009c9a:	033b      	lsls	r3, r7, #12
 8009c9c:	d165      	bne.n	8009d6a <_strtod_l+0x8fe>
 8009c9e:	22d6      	movs	r2, #214	@ 0xd6
 8009ca0:	4b37      	ldr	r3, [pc, #220]	@ (8009d80 <_strtod_l+0x914>)
 8009ca2:	04d2      	lsls	r2, r2, #19
 8009ca4:	403b      	ands	r3, r7
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d95f      	bls.n	8009d6a <_strtod_l+0x8fe>
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <_strtod_l+0x84e>
 8009cb2:	9b06      	ldr	r3, [sp, #24]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	dd57      	ble.n	8009d6a <_strtod_l+0x8fe>
 8009cba:	9906      	ldr	r1, [sp, #24]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	9805      	ldr	r0, [sp, #20]
 8009cc0:	f7ff f960 	bl	8008f84 <__lshift>
 8009cc4:	9907      	ldr	r1, [sp, #28]
 8009cc6:	9006      	str	r0, [sp, #24]
 8009cc8:	f7ff f9c8 	bl	800905c <__mcmp>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	dd4c      	ble.n	8009d6a <_strtod_l+0x8fe>
 8009cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8009d80 <_strtod_l+0x914>)
 8009cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cd4:	403b      	ands	r3, r7
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	d074      	beq.n	8009dc4 <_strtod_l+0x958>
 8009cda:	22d6      	movs	r2, #214	@ 0xd6
 8009cdc:	04d2      	lsls	r2, r2, #19
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d870      	bhi.n	8009dc4 <_strtod_l+0x958>
 8009ce2:	22dc      	movs	r2, #220	@ 0xdc
 8009ce4:	0492      	lsls	r2, r2, #18
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d800      	bhi.n	8009cec <_strtod_l+0x880>
 8009cea:	e695      	b.n	8009a18 <_strtod_l+0x5ac>
 8009cec:	0030      	movs	r0, r6
 8009cee:	0039      	movs	r1, r7
 8009cf0:	4b24      	ldr	r3, [pc, #144]	@ (8009d84 <_strtod_l+0x918>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7f7 fbea 	bl	80014cc <__aeabi_dmul>
 8009cf8:	4b21      	ldr	r3, [pc, #132]	@ (8009d80 <_strtod_l+0x914>)
 8009cfa:	0006      	movs	r6, r0
 8009cfc:	000f      	movs	r7, r1
 8009cfe:	420b      	tst	r3, r1
 8009d00:	d000      	beq.n	8009d04 <_strtod_l+0x898>
 8009d02:	e5f6      	b.n	80098f2 <_strtod_l+0x486>
 8009d04:	2322      	movs	r3, #34	@ 0x22
 8009d06:	9a05      	ldr	r2, [sp, #20]
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	e5f2      	b.n	80098f2 <_strtod_l+0x486>
 8009d0c:	970e      	str	r7, [sp, #56]	@ 0x38
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d175      	bne.n	8009dfe <_strtod_l+0x992>
 8009d12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d14:	033b      	lsls	r3, r7, #12
 8009d16:	0b1b      	lsrs	r3, r3, #12
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d039      	beq.n	8009d90 <_strtod_l+0x924>
 8009d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8009d88 <_strtod_l+0x91c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d138      	bne.n	8009d94 <_strtod_l+0x928>
 8009d22:	2101      	movs	r1, #1
 8009d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d26:	4249      	negs	r1, r1
 8009d28:	0032      	movs	r2, r6
 8009d2a:	0008      	movs	r0, r1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <_strtod_l+0x8dc>
 8009d30:	24d4      	movs	r4, #212	@ 0xd4
 8009d32:	4b13      	ldr	r3, [pc, #76]	@ (8009d80 <_strtod_l+0x914>)
 8009d34:	0008      	movs	r0, r1
 8009d36:	403b      	ands	r3, r7
 8009d38:	04e4      	lsls	r4, r4, #19
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	d804      	bhi.n	8009d48 <_strtod_l+0x8dc>
 8009d3e:	306c      	adds	r0, #108	@ 0x6c
 8009d40:	0d1b      	lsrs	r3, r3, #20
 8009d42:	1ac3      	subs	r3, r0, r3
 8009d44:	4099      	lsls	r1, r3
 8009d46:	0008      	movs	r0, r1
 8009d48:	4282      	cmp	r2, r0
 8009d4a:	d123      	bne.n	8009d94 <_strtod_l+0x928>
 8009d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d8c <_strtod_l+0x920>)
 8009d4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d50:	4299      	cmp	r1, r3
 8009d52:	d102      	bne.n	8009d5a <_strtod_l+0x8ee>
 8009d54:	3201      	adds	r2, #1
 8009d56:	d100      	bne.n	8009d5a <_strtod_l+0x8ee>
 8009d58:	e5c2      	b.n	80098e0 <_strtod_l+0x474>
 8009d5a:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <_strtod_l+0x914>)
 8009d5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d5e:	2600      	movs	r6, #0
 8009d60:	401a      	ands	r2, r3
 8009d62:	0013      	movs	r3, r2
 8009d64:	2280      	movs	r2, #128	@ 0x80
 8009d66:	0352      	lsls	r2, r2, #13
 8009d68:	189f      	adds	r7, r3, r2
 8009d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1bd      	bne.n	8009cec <_strtod_l+0x880>
 8009d70:	e5bf      	b.n	80098f2 <_strtod_l+0x486>
 8009d72:	46c0      	nop			@ (mov r8, r8)
 8009d74:	0800cf78 	.word	0x0800cf78
 8009d78:	fffffc02 	.word	0xfffffc02
 8009d7c:	fffffbe2 	.word	0xfffffbe2
 8009d80:	7ff00000 	.word	0x7ff00000
 8009d84:	39500000 	.word	0x39500000
 8009d88:	000fffff 	.word	0x000fffff
 8009d8c:	7fefffff 	.word	0x7fefffff
 8009d90:	4333      	orrs	r3, r6
 8009d92:	d09d      	beq.n	8009cd0 <_strtod_l+0x864>
 8009d94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01c      	beq.n	8009dd4 <_strtod_l+0x968>
 8009d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d9e:	4213      	tst	r3, r2
 8009da0:	d0e3      	beq.n	8009d6a <_strtod_l+0x8fe>
 8009da2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009da4:	0030      	movs	r0, r6
 8009da6:	0039      	movs	r1, r7
 8009da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d016      	beq.n	8009ddc <_strtod_l+0x970>
 8009dae:	f7ff fb45 	bl	800943c <sulp>
 8009db2:	0002      	movs	r2, r0
 8009db4:	000b      	movs	r3, r1
 8009db6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009db8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009dba:	f7f6 fbdf 	bl	800057c <__aeabi_dadd>
 8009dbe:	0006      	movs	r6, r0
 8009dc0:	000f      	movs	r7, r1
 8009dc2:	e7d2      	b.n	8009d6a <_strtod_l+0x8fe>
 8009dc4:	2601      	movs	r6, #1
 8009dc6:	4a92      	ldr	r2, [pc, #584]	@ (800a010 <_strtod_l+0xba4>)
 8009dc8:	4276      	negs	r6, r6
 8009dca:	189b      	adds	r3, r3, r2
 8009dcc:	4a91      	ldr	r2, [pc, #580]	@ (800a014 <_strtod_l+0xba8>)
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	0017      	movs	r7, r2
 8009dd2:	e7ca      	b.n	8009d6a <_strtod_l+0x8fe>
 8009dd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009dd6:	4233      	tst	r3, r6
 8009dd8:	d0c7      	beq.n	8009d6a <_strtod_l+0x8fe>
 8009dda:	e7e2      	b.n	8009da2 <_strtod_l+0x936>
 8009ddc:	f7ff fb2e 	bl	800943c <sulp>
 8009de0:	0002      	movs	r2, r0
 8009de2:	000b      	movs	r3, r1
 8009de4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009de6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009de8:	f7f7 fe38 	bl	8001a5c <__aeabi_dsub>
 8009dec:	2200      	movs	r2, #0
 8009dee:	2300      	movs	r3, #0
 8009df0:	0006      	movs	r6, r0
 8009df2:	000f      	movs	r7, r1
 8009df4:	f7f6 fb26 	bl	8000444 <__aeabi_dcmpeq>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d0b6      	beq.n	8009d6a <_strtod_l+0x8fe>
 8009dfc:	e60c      	b.n	8009a18 <_strtod_l+0x5ac>
 8009dfe:	9907      	ldr	r1, [sp, #28]
 8009e00:	9806      	ldr	r0, [sp, #24]
 8009e02:	f7ff faad 	bl	8009360 <__ratio>
 8009e06:	2380      	movs	r3, #128	@ 0x80
 8009e08:	2200      	movs	r2, #0
 8009e0a:	05db      	lsls	r3, r3, #23
 8009e0c:	0004      	movs	r4, r0
 8009e0e:	000d      	movs	r5, r1
 8009e10:	f7f6 fb28 	bl	8000464 <__aeabi_dcmple>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d06c      	beq.n	8009ef2 <_strtod_l+0xa86>
 8009e18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d177      	bne.n	8009f0e <_strtod_l+0xaa2>
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	d157      	bne.n	8009ed2 <_strtod_l+0xa66>
 8009e22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e24:	031b      	lsls	r3, r3, #12
 8009e26:	d15a      	bne.n	8009ede <_strtod_l+0xa72>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	0020      	movs	r0, r4
 8009e2c:	0029      	movs	r1, r5
 8009e2e:	4b7a      	ldr	r3, [pc, #488]	@ (800a018 <_strtod_l+0xbac>)
 8009e30:	f7f6 fb0e 	bl	8000450 <__aeabi_dcmplt>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d159      	bne.n	8009eec <_strtod_l+0xa80>
 8009e38:	0020      	movs	r0, r4
 8009e3a:	0029      	movs	r1, r5
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4b77      	ldr	r3, [pc, #476]	@ (800a01c <_strtod_l+0xbb0>)
 8009e40:	f7f7 fb44 	bl	80014cc <__aeabi_dmul>
 8009e44:	0004      	movs	r4, r0
 8009e46:	000d      	movs	r5, r1
 8009e48:	2380      	movs	r3, #128	@ 0x80
 8009e4a:	061b      	lsls	r3, r3, #24
 8009e4c:	18eb      	adds	r3, r5, r3
 8009e4e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e56:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e58:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e5a:	4a71      	ldr	r2, [pc, #452]	@ (800a020 <_strtod_l+0xbb4>)
 8009e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e5e:	4013      	ands	r3, r2
 8009e60:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e64:	4b6f      	ldr	r3, [pc, #444]	@ (800a024 <_strtod_l+0xbb8>)
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d000      	beq.n	8009e6c <_strtod_l+0xa00>
 8009e6a:	e087      	b.n	8009f7c <_strtod_l+0xb10>
 8009e6c:	4a6e      	ldr	r2, [pc, #440]	@ (800a028 <_strtod_l+0xbbc>)
 8009e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e70:	4694      	mov	ip, r2
 8009e72:	4463      	add	r3, ip
 8009e74:	001f      	movs	r7, r3
 8009e76:	0030      	movs	r0, r6
 8009e78:	0019      	movs	r1, r3
 8009e7a:	f7ff f9a5 	bl	80091c8 <__ulp>
 8009e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e82:	f7f7 fb23 	bl	80014cc <__aeabi_dmul>
 8009e86:	0032      	movs	r2, r6
 8009e88:	003b      	movs	r3, r7
 8009e8a:	f7f6 fb77 	bl	800057c <__aeabi_dadd>
 8009e8e:	4a64      	ldr	r2, [pc, #400]	@ (800a020 <_strtod_l+0xbb4>)
 8009e90:	4b66      	ldr	r3, [pc, #408]	@ (800a02c <_strtod_l+0xbc0>)
 8009e92:	0006      	movs	r6, r0
 8009e94:	400a      	ands	r2, r1
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d940      	bls.n	8009f1c <_strtod_l+0xab0>
 8009e9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e9c:	4a64      	ldr	r2, [pc, #400]	@ (800a030 <_strtod_l+0xbc4>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d103      	bne.n	8009eaa <_strtod_l+0xa3e>
 8009ea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	d100      	bne.n	8009eaa <_strtod_l+0xa3e>
 8009ea8:	e51a      	b.n	80098e0 <_strtod_l+0x474>
 8009eaa:	2601      	movs	r6, #1
 8009eac:	4f60      	ldr	r7, [pc, #384]	@ (800a030 <_strtod_l+0xbc4>)
 8009eae:	4276      	negs	r6, r6
 8009eb0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009eb2:	9805      	ldr	r0, [sp, #20]
 8009eb4:	f7fe fe3c 	bl	8008b30 <_Bfree>
 8009eb8:	9908      	ldr	r1, [sp, #32]
 8009eba:	9805      	ldr	r0, [sp, #20]
 8009ebc:	f7fe fe38 	bl	8008b30 <_Bfree>
 8009ec0:	9907      	ldr	r1, [sp, #28]
 8009ec2:	9805      	ldr	r0, [sp, #20]
 8009ec4:	f7fe fe34 	bl	8008b30 <_Bfree>
 8009ec8:	9906      	ldr	r1, [sp, #24]
 8009eca:	9805      	ldr	r0, [sp, #20]
 8009ecc:	f7fe fe30 	bl	8008b30 <_Bfree>
 8009ed0:	e617      	b.n	8009b02 <_strtod_l+0x696>
 8009ed2:	2e01      	cmp	r6, #1
 8009ed4:	d103      	bne.n	8009ede <_strtod_l+0xa72>
 8009ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d100      	bne.n	8009ede <_strtod_l+0xa72>
 8009edc:	e59c      	b.n	8009a18 <_strtod_l+0x5ac>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4c54      	ldr	r4, [pc, #336]	@ (800a034 <_strtod_l+0xbc8>)
 8009ee2:	4d4d      	ldr	r5, [pc, #308]	@ (800a018 <_strtod_l+0xbac>)
 8009ee4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ee6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ee8:	2400      	movs	r4, #0
 8009eea:	e7b2      	b.n	8009e52 <_strtod_l+0x9e6>
 8009eec:	2400      	movs	r4, #0
 8009eee:	4d4b      	ldr	r5, [pc, #300]	@ (800a01c <_strtod_l+0xbb0>)
 8009ef0:	e7aa      	b.n	8009e48 <_strtod_l+0x9dc>
 8009ef2:	0020      	movs	r0, r4
 8009ef4:	0029      	movs	r1, r5
 8009ef6:	4b49      	ldr	r3, [pc, #292]	@ (800a01c <_strtod_l+0xbb0>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f7f7 fae7 	bl	80014cc <__aeabi_dmul>
 8009efe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f00:	0004      	movs	r4, r0
 8009f02:	000d      	movs	r5, r1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d09f      	beq.n	8009e48 <_strtod_l+0x9dc>
 8009f08:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f0a:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009f0c:	e7a1      	b.n	8009e52 <_strtod_l+0x9e6>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	4c41      	ldr	r4, [pc, #260]	@ (800a018 <_strtod_l+0xbac>)
 8009f12:	0025      	movs	r5, r4
 8009f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f18:	001c      	movs	r4, r3
 8009f1a:	e79a      	b.n	8009e52 <_strtod_l+0x9e6>
 8009f1c:	23d4      	movs	r3, #212	@ 0xd4
 8009f1e:	049b      	lsls	r3, r3, #18
 8009f20:	18cf      	adds	r7, r1, r3
 8009f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f24:	9710      	str	r7, [sp, #64]	@ 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1c2      	bne.n	8009eb0 <_strtod_l+0xa44>
 8009f2a:	4b3d      	ldr	r3, [pc, #244]	@ (800a020 <_strtod_l+0xbb4>)
 8009f2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f2e:	403b      	ands	r3, r7
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d1bd      	bne.n	8009eb0 <_strtod_l+0xa44>
 8009f34:	0020      	movs	r0, r4
 8009f36:	0029      	movs	r1, r5
 8009f38:	f7f6 fad0 	bl	80004dc <__aeabi_d2lz>
 8009f3c:	f7f6 fb08 	bl	8000550 <__aeabi_l2d>
 8009f40:	0002      	movs	r2, r0
 8009f42:	000b      	movs	r3, r1
 8009f44:	0020      	movs	r0, r4
 8009f46:	0029      	movs	r1, r5
 8009f48:	f7f7 fd88 	bl	8001a5c <__aeabi_dsub>
 8009f4c:	033c      	lsls	r4, r7, #12
 8009f4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f50:	0b24      	lsrs	r4, r4, #12
 8009f52:	4334      	orrs	r4, r6
 8009f54:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f56:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009f58:	4a37      	ldr	r2, [pc, #220]	@ (800a038 <_strtod_l+0xbcc>)
 8009f5a:	431c      	orrs	r4, r3
 8009f5c:	d052      	beq.n	800a004 <_strtod_l+0xb98>
 8009f5e:	4b37      	ldr	r3, [pc, #220]	@ (800a03c <_strtod_l+0xbd0>)
 8009f60:	f7f6 fa76 	bl	8000450 <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d000      	beq.n	8009f6a <_strtod_l+0xafe>
 8009f68:	e4c3      	b.n	80098f2 <_strtod_l+0x486>
 8009f6a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009f6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f6e:	4a34      	ldr	r2, [pc, #208]	@ (800a040 <_strtod_l+0xbd4>)
 8009f70:	4b2a      	ldr	r3, [pc, #168]	@ (800a01c <_strtod_l+0xbb0>)
 8009f72:	f7f6 fa81 	bl	8000478 <__aeabi_dcmpgt>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d09a      	beq.n	8009eb0 <_strtod_l+0xa44>
 8009f7a:	e4ba      	b.n	80098f2 <_strtod_l+0x486>
 8009f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d02a      	beq.n	8009fd8 <_strtod_l+0xb6c>
 8009f82:	23d4      	movs	r3, #212	@ 0xd4
 8009f84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f86:	04db      	lsls	r3, r3, #19
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d825      	bhi.n	8009fd8 <_strtod_l+0xb6c>
 8009f8c:	0020      	movs	r0, r4
 8009f8e:	0029      	movs	r1, r5
 8009f90:	4a2c      	ldr	r2, [pc, #176]	@ (800a044 <_strtod_l+0xbd8>)
 8009f92:	4b2d      	ldr	r3, [pc, #180]	@ (800a048 <_strtod_l+0xbdc>)
 8009f94:	f7f6 fa66 	bl	8000464 <__aeabi_dcmple>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d016      	beq.n	8009fca <_strtod_l+0xb5e>
 8009f9c:	0020      	movs	r0, r4
 8009f9e:	0029      	movs	r1, r5
 8009fa0:	f7f6 fa7e 	bl	80004a0 <__aeabi_d2uiz>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d100      	bne.n	8009faa <_strtod_l+0xb3e>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	f7f8 f97f 	bl	80022ac <__aeabi_ui2d>
 8009fae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fb0:	0004      	movs	r4, r0
 8009fb2:	000d      	movs	r5, r1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d122      	bne.n	8009ffe <_strtod_l+0xb92>
 8009fb8:	2380      	movs	r3, #128	@ 0x80
 8009fba:	061b      	lsls	r3, r3, #24
 8009fbc:	18cb      	adds	r3, r1, r3
 8009fbe:	9018      	str	r0, [sp, #96]	@ 0x60
 8009fc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009fc2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009fc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fc6:	9214      	str	r2, [sp, #80]	@ 0x50
 8009fc8:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fca:	22d6      	movs	r2, #214	@ 0xd6
 8009fcc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009fce:	04d2      	lsls	r2, r2, #19
 8009fd0:	189b      	adds	r3, r3, r2
 8009fd2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009fda:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009fdc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009fde:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8009fe0:	f7ff f8f2 	bl	80091c8 <__ulp>
 8009fe4:	0002      	movs	r2, r0
 8009fe6:	000b      	movs	r3, r1
 8009fe8:	0030      	movs	r0, r6
 8009fea:	0039      	movs	r1, r7
 8009fec:	f7f7 fa6e 	bl	80014cc <__aeabi_dmul>
 8009ff0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009ff2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ff4:	f7f6 fac2 	bl	800057c <__aeabi_dadd>
 8009ff8:	0006      	movs	r6, r0
 8009ffa:	000f      	movs	r7, r1
 8009ffc:	e791      	b.n	8009f22 <_strtod_l+0xab6>
 8009ffe:	9418      	str	r4, [sp, #96]	@ 0x60
 800a000:	9519      	str	r5, [sp, #100]	@ 0x64
 800a002:	e7de      	b.n	8009fc2 <_strtod_l+0xb56>
 800a004:	4b11      	ldr	r3, [pc, #68]	@ (800a04c <_strtod_l+0xbe0>)
 800a006:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a008:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a00a:	f7f6 fa21 	bl	8000450 <__aeabi_dcmplt>
 800a00e:	e7b2      	b.n	8009f76 <_strtod_l+0xb0a>
 800a010:	fff00000 	.word	0xfff00000
 800a014:	000fffff 	.word	0x000fffff
 800a018:	3ff00000 	.word	0x3ff00000
 800a01c:	3fe00000 	.word	0x3fe00000
 800a020:	7ff00000 	.word	0x7ff00000
 800a024:	7fe00000 	.word	0x7fe00000
 800a028:	fcb00000 	.word	0xfcb00000
 800a02c:	7c9fffff 	.word	0x7c9fffff
 800a030:	7fefffff 	.word	0x7fefffff
 800a034:	bff00000 	.word	0xbff00000
 800a038:	94a03595 	.word	0x94a03595
 800a03c:	3fdfffff 	.word	0x3fdfffff
 800a040:	35afe535 	.word	0x35afe535
 800a044:	ffc00000 	.word	0xffc00000
 800a048:	41dfffff 	.word	0x41dfffff
 800a04c:	3fcfffff 	.word	0x3fcfffff

0800a050 <_strtod_r>:
 800a050:	b510      	push	{r4, lr}
 800a052:	4b02      	ldr	r3, [pc, #8]	@ (800a05c <_strtod_r+0xc>)
 800a054:	f7ff fa0a 	bl	800946c <_strtod_l>
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	46c0      	nop			@ (mov r8, r8)
 800a05c:	20000088 	.word	0x20000088

0800a060 <_strtol_l.constprop.0>:
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	b085      	sub	sp, #20
 800a064:	0017      	movs	r7, r2
 800a066:	001e      	movs	r6, r3
 800a068:	9003      	str	r0, [sp, #12]
 800a06a:	9101      	str	r1, [sp, #4]
 800a06c:	2b24      	cmp	r3, #36	@ 0x24
 800a06e:	d844      	bhi.n	800a0fa <_strtol_l.constprop.0+0x9a>
 800a070:	000c      	movs	r4, r1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d041      	beq.n	800a0fa <_strtol_l.constprop.0+0x9a>
 800a076:	4b3d      	ldr	r3, [pc, #244]	@ (800a16c <_strtol_l.constprop.0+0x10c>)
 800a078:	2208      	movs	r2, #8
 800a07a:	469c      	mov	ip, r3
 800a07c:	0023      	movs	r3, r4
 800a07e:	4661      	mov	r1, ip
 800a080:	781d      	ldrb	r5, [r3, #0]
 800a082:	3401      	adds	r4, #1
 800a084:	5d48      	ldrb	r0, [r1, r5]
 800a086:	0001      	movs	r1, r0
 800a088:	4011      	ands	r1, r2
 800a08a:	4210      	tst	r0, r2
 800a08c:	d1f6      	bne.n	800a07c <_strtol_l.constprop.0+0x1c>
 800a08e:	2d2d      	cmp	r5, #45	@ 0x2d
 800a090:	d13a      	bne.n	800a108 <_strtol_l.constprop.0+0xa8>
 800a092:	7825      	ldrb	r5, [r4, #0]
 800a094:	1c9c      	adds	r4, r3, #2
 800a096:	2301      	movs	r3, #1
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	2210      	movs	r2, #16
 800a09c:	0033      	movs	r3, r6
 800a09e:	4393      	bics	r3, r2
 800a0a0:	d109      	bne.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a0a2:	2d30      	cmp	r5, #48	@ 0x30
 800a0a4:	d136      	bne.n	800a114 <_strtol_l.constprop.0+0xb4>
 800a0a6:	2120      	movs	r1, #32
 800a0a8:	7823      	ldrb	r3, [r4, #0]
 800a0aa:	438b      	bics	r3, r1
 800a0ac:	2b58      	cmp	r3, #88	@ 0x58
 800a0ae:	d131      	bne.n	800a114 <_strtol_l.constprop.0+0xb4>
 800a0b0:	0016      	movs	r6, r2
 800a0b2:	7865      	ldrb	r5, [r4, #1]
 800a0b4:	3402      	adds	r4, #2
 800a0b6:	4a2e      	ldr	r2, [pc, #184]	@ (800a170 <_strtol_l.constprop.0+0x110>)
 800a0b8:	9b00      	ldr	r3, [sp, #0]
 800a0ba:	4694      	mov	ip, r2
 800a0bc:	4463      	add	r3, ip
 800a0be:	0031      	movs	r1, r6
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	f7f6 f8be 	bl	8000244 <__aeabi_uidivmod>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4684      	mov	ip, r0
 800a0cc:	0010      	movs	r0, r2
 800a0ce:	002b      	movs	r3, r5
 800a0d0:	3b30      	subs	r3, #48	@ 0x30
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d825      	bhi.n	800a122 <_strtol_l.constprop.0+0xc2>
 800a0d6:	001d      	movs	r5, r3
 800a0d8:	42ae      	cmp	r6, r5
 800a0da:	dd31      	ble.n	800a140 <_strtol_l.constprop.0+0xe0>
 800a0dc:	1c53      	adds	r3, r2, #1
 800a0de:	d009      	beq.n	800a0f4 <_strtol_l.constprop.0+0x94>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	4252      	negs	r2, r2
 800a0e4:	4584      	cmp	ip, r0
 800a0e6:	d305      	bcc.n	800a0f4 <_strtol_l.constprop.0+0x94>
 800a0e8:	d101      	bne.n	800a0ee <_strtol_l.constprop.0+0x8e>
 800a0ea:	42a9      	cmp	r1, r5
 800a0ec:	db25      	blt.n	800a13a <_strtol_l.constprop.0+0xda>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4370      	muls	r0, r6
 800a0f2:	1828      	adds	r0, r5, r0
 800a0f4:	7825      	ldrb	r5, [r4, #0]
 800a0f6:	3401      	adds	r4, #1
 800a0f8:	e7e9      	b.n	800a0ce <_strtol_l.constprop.0+0x6e>
 800a0fa:	f7fd fd07 	bl	8007b0c <__errno>
 800a0fe:	2316      	movs	r3, #22
 800a100:	6003      	str	r3, [r0, #0]
 800a102:	2000      	movs	r0, #0
 800a104:	b005      	add	sp, #20
 800a106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a108:	9100      	str	r1, [sp, #0]
 800a10a:	2d2b      	cmp	r5, #43	@ 0x2b
 800a10c:	d1c5      	bne.n	800a09a <_strtol_l.constprop.0+0x3a>
 800a10e:	7825      	ldrb	r5, [r4, #0]
 800a110:	1c9c      	adds	r4, r3, #2
 800a112:	e7c2      	b.n	800a09a <_strtol_l.constprop.0+0x3a>
 800a114:	2e00      	cmp	r6, #0
 800a116:	d1ce      	bne.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a118:	3608      	adds	r6, #8
 800a11a:	2d30      	cmp	r5, #48	@ 0x30
 800a11c:	d0cb      	beq.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a11e:	3602      	adds	r6, #2
 800a120:	e7c9      	b.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a122:	002b      	movs	r3, r5
 800a124:	3b41      	subs	r3, #65	@ 0x41
 800a126:	2b19      	cmp	r3, #25
 800a128:	d801      	bhi.n	800a12e <_strtol_l.constprop.0+0xce>
 800a12a:	3d37      	subs	r5, #55	@ 0x37
 800a12c:	e7d4      	b.n	800a0d8 <_strtol_l.constprop.0+0x78>
 800a12e:	002b      	movs	r3, r5
 800a130:	3b61      	subs	r3, #97	@ 0x61
 800a132:	2b19      	cmp	r3, #25
 800a134:	d804      	bhi.n	800a140 <_strtol_l.constprop.0+0xe0>
 800a136:	3d57      	subs	r5, #87	@ 0x57
 800a138:	e7ce      	b.n	800a0d8 <_strtol_l.constprop.0+0x78>
 800a13a:	2201      	movs	r2, #1
 800a13c:	4252      	negs	r2, r2
 800a13e:	e7d9      	b.n	800a0f4 <_strtol_l.constprop.0+0x94>
 800a140:	1c53      	adds	r3, r2, #1
 800a142:	d108      	bne.n	800a156 <_strtol_l.constprop.0+0xf6>
 800a144:	2322      	movs	r3, #34	@ 0x22
 800a146:	9a03      	ldr	r2, [sp, #12]
 800a148:	9802      	ldr	r0, [sp, #8]
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	2f00      	cmp	r7, #0
 800a14e:	d0d9      	beq.n	800a104 <_strtol_l.constprop.0+0xa4>
 800a150:	1e63      	subs	r3, r4, #1
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	e007      	b.n	800a166 <_strtol_l.constprop.0+0x106>
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d000      	beq.n	800a15e <_strtol_l.constprop.0+0xfe>
 800a15c:	4240      	negs	r0, r0
 800a15e:	2f00      	cmp	r7, #0
 800a160:	d0d0      	beq.n	800a104 <_strtol_l.constprop.0+0xa4>
 800a162:	2a00      	cmp	r2, #0
 800a164:	d1f4      	bne.n	800a150 <_strtol_l.constprop.0+0xf0>
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	603b      	str	r3, [r7, #0]
 800a16a:	e7cb      	b.n	800a104 <_strtol_l.constprop.0+0xa4>
 800a16c:	0800cfa1 	.word	0x0800cfa1
 800a170:	7fffffff 	.word	0x7fffffff

0800a174 <_strtol_r>:
 800a174:	b510      	push	{r4, lr}
 800a176:	f7ff ff73 	bl	800a060 <_strtol_l.constprop.0>
 800a17a:	bd10      	pop	{r4, pc}

0800a17c <__ssputs_r>:
 800a17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17e:	688e      	ldr	r6, [r1, #8]
 800a180:	b085      	sub	sp, #20
 800a182:	001f      	movs	r7, r3
 800a184:	000c      	movs	r4, r1
 800a186:	680b      	ldr	r3, [r1, #0]
 800a188:	9002      	str	r0, [sp, #8]
 800a18a:	9203      	str	r2, [sp, #12]
 800a18c:	42be      	cmp	r6, r7
 800a18e:	d830      	bhi.n	800a1f2 <__ssputs_r+0x76>
 800a190:	210c      	movs	r1, #12
 800a192:	5e62      	ldrsh	r2, [r4, r1]
 800a194:	2190      	movs	r1, #144	@ 0x90
 800a196:	00c9      	lsls	r1, r1, #3
 800a198:	420a      	tst	r2, r1
 800a19a:	d028      	beq.n	800a1ee <__ssputs_r+0x72>
 800a19c:	2003      	movs	r0, #3
 800a19e:	6921      	ldr	r1, [r4, #16]
 800a1a0:	1a5b      	subs	r3, r3, r1
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	6963      	ldr	r3, [r4, #20]
 800a1a6:	4343      	muls	r3, r0
 800a1a8:	9801      	ldr	r0, [sp, #4]
 800a1aa:	0fdd      	lsrs	r5, r3, #31
 800a1ac:	18ed      	adds	r5, r5, r3
 800a1ae:	1c7b      	adds	r3, r7, #1
 800a1b0:	181b      	adds	r3, r3, r0
 800a1b2:	106d      	asrs	r5, r5, #1
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	d900      	bls.n	800a1ba <__ssputs_r+0x3e>
 800a1b8:	001d      	movs	r5, r3
 800a1ba:	0552      	lsls	r2, r2, #21
 800a1bc:	d528      	bpl.n	800a210 <__ssputs_r+0x94>
 800a1be:	0029      	movs	r1, r5
 800a1c0:	9802      	ldr	r0, [sp, #8]
 800a1c2:	f7fe fbe1 	bl	8008988 <_malloc_r>
 800a1c6:	1e06      	subs	r6, r0, #0
 800a1c8:	d02c      	beq.n	800a224 <__ssputs_r+0xa8>
 800a1ca:	9a01      	ldr	r2, [sp, #4]
 800a1cc:	6921      	ldr	r1, [r4, #16]
 800a1ce:	f7fd fcd5 	bl	8007b7c <memcpy>
 800a1d2:	89a2      	ldrh	r2, [r4, #12]
 800a1d4:	4b18      	ldr	r3, [pc, #96]	@ (800a238 <__ssputs_r+0xbc>)
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	2380      	movs	r3, #128	@ 0x80
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	6126      	str	r6, [r4, #16]
 800a1e2:	18f6      	adds	r6, r6, r3
 800a1e4:	6026      	str	r6, [r4, #0]
 800a1e6:	003e      	movs	r6, r7
 800a1e8:	6165      	str	r5, [r4, #20]
 800a1ea:	1aed      	subs	r5, r5, r3
 800a1ec:	60a5      	str	r5, [r4, #8]
 800a1ee:	42be      	cmp	r6, r7
 800a1f0:	d900      	bls.n	800a1f4 <__ssputs_r+0x78>
 800a1f2:	003e      	movs	r6, r7
 800a1f4:	0032      	movs	r2, r6
 800a1f6:	9903      	ldr	r1, [sp, #12]
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	f7fd fc19 	bl	8007a30 <memmove>
 800a1fe:	2000      	movs	r0, #0
 800a200:	68a3      	ldr	r3, [r4, #8]
 800a202:	1b9b      	subs	r3, r3, r6
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	199b      	adds	r3, r3, r6
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	b005      	add	sp, #20
 800a20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a210:	002a      	movs	r2, r5
 800a212:	9802      	ldr	r0, [sp, #8]
 800a214:	f000 fda2 	bl	800ad5c <_realloc_r>
 800a218:	1e06      	subs	r6, r0, #0
 800a21a:	d1e0      	bne.n	800a1de <__ssputs_r+0x62>
 800a21c:	6921      	ldr	r1, [r4, #16]
 800a21e:	9802      	ldr	r0, [sp, #8]
 800a220:	f7fe fb3c 	bl	800889c <_free_r>
 800a224:	230c      	movs	r3, #12
 800a226:	2001      	movs	r0, #1
 800a228:	9a02      	ldr	r2, [sp, #8]
 800a22a:	4240      	negs	r0, r0
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	89a2      	ldrh	r2, [r4, #12]
 800a230:	3334      	adds	r3, #52	@ 0x34
 800a232:	4313      	orrs	r3, r2
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	e7e9      	b.n	800a20c <__ssputs_r+0x90>
 800a238:	fffffb7f 	.word	0xfffffb7f

0800a23c <_svfiprintf_r>:
 800a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a23e:	b0a1      	sub	sp, #132	@ 0x84
 800a240:	9003      	str	r0, [sp, #12]
 800a242:	001d      	movs	r5, r3
 800a244:	898b      	ldrh	r3, [r1, #12]
 800a246:	000f      	movs	r7, r1
 800a248:	0016      	movs	r6, r2
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	d511      	bpl.n	800a272 <_svfiprintf_r+0x36>
 800a24e:	690b      	ldr	r3, [r1, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10e      	bne.n	800a272 <_svfiprintf_r+0x36>
 800a254:	2140      	movs	r1, #64	@ 0x40
 800a256:	f7fe fb97 	bl	8008988 <_malloc_r>
 800a25a:	6038      	str	r0, [r7, #0]
 800a25c:	6138      	str	r0, [r7, #16]
 800a25e:	2800      	cmp	r0, #0
 800a260:	d105      	bne.n	800a26e <_svfiprintf_r+0x32>
 800a262:	230c      	movs	r3, #12
 800a264:	9a03      	ldr	r2, [sp, #12]
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	2001      	movs	r0, #1
 800a26a:	4240      	negs	r0, r0
 800a26c:	e0cf      	b.n	800a40e <_svfiprintf_r+0x1d2>
 800a26e:	2340      	movs	r3, #64	@ 0x40
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	2300      	movs	r3, #0
 800a274:	ac08      	add	r4, sp, #32
 800a276:	6163      	str	r3, [r4, #20]
 800a278:	3320      	adds	r3, #32
 800a27a:	7663      	strb	r3, [r4, #25]
 800a27c:	3310      	adds	r3, #16
 800a27e:	76a3      	strb	r3, [r4, #26]
 800a280:	9507      	str	r5, [sp, #28]
 800a282:	0035      	movs	r5, r6
 800a284:	782b      	ldrb	r3, [r5, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <_svfiprintf_r+0x52>
 800a28a:	2b25      	cmp	r3, #37	@ 0x25
 800a28c:	d148      	bne.n	800a320 <_svfiprintf_r+0xe4>
 800a28e:	1bab      	subs	r3, r5, r6
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	42b5      	cmp	r5, r6
 800a294:	d00b      	beq.n	800a2ae <_svfiprintf_r+0x72>
 800a296:	0032      	movs	r2, r6
 800a298:	0039      	movs	r1, r7
 800a29a:	9803      	ldr	r0, [sp, #12]
 800a29c:	f7ff ff6e 	bl	800a17c <__ssputs_r>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d100      	bne.n	800a2a6 <_svfiprintf_r+0x6a>
 800a2a4:	e0ae      	b.n	800a404 <_svfiprintf_r+0x1c8>
 800a2a6:	6963      	ldr	r3, [r4, #20]
 800a2a8:	9a05      	ldr	r2, [sp, #20]
 800a2aa:	189b      	adds	r3, r3, r2
 800a2ac:	6163      	str	r3, [r4, #20]
 800a2ae:	782b      	ldrb	r3, [r5, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d100      	bne.n	800a2b6 <_svfiprintf_r+0x7a>
 800a2b4:	e0a6      	b.n	800a404 <_svfiprintf_r+0x1c8>
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4252      	negs	r2, r2
 800a2bc:	6062      	str	r2, [r4, #4]
 800a2be:	a904      	add	r1, sp, #16
 800a2c0:	3254      	adds	r2, #84	@ 0x54
 800a2c2:	1852      	adds	r2, r2, r1
 800a2c4:	1c6e      	adds	r6, r5, #1
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	60e3      	str	r3, [r4, #12]
 800a2ca:	60a3      	str	r3, [r4, #8]
 800a2cc:	7013      	strb	r3, [r2, #0]
 800a2ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a2d0:	4b54      	ldr	r3, [pc, #336]	@ (800a424 <_svfiprintf_r+0x1e8>)
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	7831      	ldrb	r1, [r6, #0]
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	f7fd fc44 	bl	8007b66 <memchr>
 800a2de:	1c75      	adds	r5, r6, #1
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d11f      	bne.n	800a324 <_svfiprintf_r+0xe8>
 800a2e4:	6822      	ldr	r2, [r4, #0]
 800a2e6:	06d3      	lsls	r3, r2, #27
 800a2e8:	d504      	bpl.n	800a2f4 <_svfiprintf_r+0xb8>
 800a2ea:	2353      	movs	r3, #83	@ 0x53
 800a2ec:	a904      	add	r1, sp, #16
 800a2ee:	185b      	adds	r3, r3, r1
 800a2f0:	2120      	movs	r1, #32
 800a2f2:	7019      	strb	r1, [r3, #0]
 800a2f4:	0713      	lsls	r3, r2, #28
 800a2f6:	d504      	bpl.n	800a302 <_svfiprintf_r+0xc6>
 800a2f8:	2353      	movs	r3, #83	@ 0x53
 800a2fa:	a904      	add	r1, sp, #16
 800a2fc:	185b      	adds	r3, r3, r1
 800a2fe:	212b      	movs	r1, #43	@ 0x2b
 800a300:	7019      	strb	r1, [r3, #0]
 800a302:	7833      	ldrb	r3, [r6, #0]
 800a304:	2b2a      	cmp	r3, #42	@ 0x2a
 800a306:	d016      	beq.n	800a336 <_svfiprintf_r+0xfa>
 800a308:	0035      	movs	r5, r6
 800a30a:	2100      	movs	r1, #0
 800a30c:	200a      	movs	r0, #10
 800a30e:	68e3      	ldr	r3, [r4, #12]
 800a310:	782a      	ldrb	r2, [r5, #0]
 800a312:	1c6e      	adds	r6, r5, #1
 800a314:	3a30      	subs	r2, #48	@ 0x30
 800a316:	2a09      	cmp	r2, #9
 800a318:	d950      	bls.n	800a3bc <_svfiprintf_r+0x180>
 800a31a:	2900      	cmp	r1, #0
 800a31c:	d111      	bne.n	800a342 <_svfiprintf_r+0x106>
 800a31e:	e017      	b.n	800a350 <_svfiprintf_r+0x114>
 800a320:	3501      	adds	r5, #1
 800a322:	e7af      	b.n	800a284 <_svfiprintf_r+0x48>
 800a324:	9b05      	ldr	r3, [sp, #20]
 800a326:	6822      	ldr	r2, [r4, #0]
 800a328:	1ac0      	subs	r0, r0, r3
 800a32a:	2301      	movs	r3, #1
 800a32c:	4083      	lsls	r3, r0
 800a32e:	4313      	orrs	r3, r2
 800a330:	002e      	movs	r6, r5
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	e7cc      	b.n	800a2d0 <_svfiprintf_r+0x94>
 800a336:	9b07      	ldr	r3, [sp, #28]
 800a338:	1d19      	adds	r1, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9107      	str	r1, [sp, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	db01      	blt.n	800a346 <_svfiprintf_r+0x10a>
 800a342:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a344:	e004      	b.n	800a350 <_svfiprintf_r+0x114>
 800a346:	425b      	negs	r3, r3
 800a348:	60e3      	str	r3, [r4, #12]
 800a34a:	2302      	movs	r3, #2
 800a34c:	4313      	orrs	r3, r2
 800a34e:	6023      	str	r3, [r4, #0]
 800a350:	782b      	ldrb	r3, [r5, #0]
 800a352:	2b2e      	cmp	r3, #46	@ 0x2e
 800a354:	d10c      	bne.n	800a370 <_svfiprintf_r+0x134>
 800a356:	786b      	ldrb	r3, [r5, #1]
 800a358:	2b2a      	cmp	r3, #42	@ 0x2a
 800a35a:	d134      	bne.n	800a3c6 <_svfiprintf_r+0x18a>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	3502      	adds	r5, #2
 800a360:	1d1a      	adds	r2, r3, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	9207      	str	r2, [sp, #28]
 800a366:	2b00      	cmp	r3, #0
 800a368:	da01      	bge.n	800a36e <_svfiprintf_r+0x132>
 800a36a:	2301      	movs	r3, #1
 800a36c:	425b      	negs	r3, r3
 800a36e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a370:	4e2d      	ldr	r6, [pc, #180]	@ (800a428 <_svfiprintf_r+0x1ec>)
 800a372:	2203      	movs	r2, #3
 800a374:	0030      	movs	r0, r6
 800a376:	7829      	ldrb	r1, [r5, #0]
 800a378:	f7fd fbf5 	bl	8007b66 <memchr>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d006      	beq.n	800a38e <_svfiprintf_r+0x152>
 800a380:	2340      	movs	r3, #64	@ 0x40
 800a382:	1b80      	subs	r0, r0, r6
 800a384:	4083      	lsls	r3, r0
 800a386:	6822      	ldr	r2, [r4, #0]
 800a388:	3501      	adds	r5, #1
 800a38a:	4313      	orrs	r3, r2
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	7829      	ldrb	r1, [r5, #0]
 800a390:	2206      	movs	r2, #6
 800a392:	4826      	ldr	r0, [pc, #152]	@ (800a42c <_svfiprintf_r+0x1f0>)
 800a394:	1c6e      	adds	r6, r5, #1
 800a396:	7621      	strb	r1, [r4, #24]
 800a398:	f7fd fbe5 	bl	8007b66 <memchr>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d038      	beq.n	800a412 <_svfiprintf_r+0x1d6>
 800a3a0:	4b23      	ldr	r3, [pc, #140]	@ (800a430 <_svfiprintf_r+0x1f4>)
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d122      	bne.n	800a3ec <_svfiprintf_r+0x1b0>
 800a3a6:	2207      	movs	r2, #7
 800a3a8:	9b07      	ldr	r3, [sp, #28]
 800a3aa:	3307      	adds	r3, #7
 800a3ac:	4393      	bics	r3, r2
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	6963      	ldr	r3, [r4, #20]
 800a3b4:	9a04      	ldr	r2, [sp, #16]
 800a3b6:	189b      	adds	r3, r3, r2
 800a3b8:	6163      	str	r3, [r4, #20]
 800a3ba:	e762      	b.n	800a282 <_svfiprintf_r+0x46>
 800a3bc:	4343      	muls	r3, r0
 800a3be:	0035      	movs	r5, r6
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	189b      	adds	r3, r3, r2
 800a3c4:	e7a4      	b.n	800a310 <_svfiprintf_r+0xd4>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	200a      	movs	r0, #10
 800a3ca:	0019      	movs	r1, r3
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	6063      	str	r3, [r4, #4]
 800a3d0:	782a      	ldrb	r2, [r5, #0]
 800a3d2:	1c6e      	adds	r6, r5, #1
 800a3d4:	3a30      	subs	r2, #48	@ 0x30
 800a3d6:	2a09      	cmp	r2, #9
 800a3d8:	d903      	bls.n	800a3e2 <_svfiprintf_r+0x1a6>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0c8      	beq.n	800a370 <_svfiprintf_r+0x134>
 800a3de:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3e0:	e7c6      	b.n	800a370 <_svfiprintf_r+0x134>
 800a3e2:	4341      	muls	r1, r0
 800a3e4:	0035      	movs	r5, r6
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	1889      	adds	r1, r1, r2
 800a3ea:	e7f1      	b.n	800a3d0 <_svfiprintf_r+0x194>
 800a3ec:	aa07      	add	r2, sp, #28
 800a3ee:	9200      	str	r2, [sp, #0]
 800a3f0:	0021      	movs	r1, r4
 800a3f2:	003a      	movs	r2, r7
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a434 <_svfiprintf_r+0x1f8>)
 800a3f6:	9803      	ldr	r0, [sp, #12]
 800a3f8:	f7fc fbec 	bl	8006bd4 <_printf_float>
 800a3fc:	9004      	str	r0, [sp, #16]
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	3301      	adds	r3, #1
 800a402:	d1d6      	bne.n	800a3b2 <_svfiprintf_r+0x176>
 800a404:	89bb      	ldrh	r3, [r7, #12]
 800a406:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a408:	065b      	lsls	r3, r3, #25
 800a40a:	d500      	bpl.n	800a40e <_svfiprintf_r+0x1d2>
 800a40c:	e72c      	b.n	800a268 <_svfiprintf_r+0x2c>
 800a40e:	b021      	add	sp, #132	@ 0x84
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	aa07      	add	r2, sp, #28
 800a414:	9200      	str	r2, [sp, #0]
 800a416:	0021      	movs	r1, r4
 800a418:	003a      	movs	r2, r7
 800a41a:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <_svfiprintf_r+0x1f8>)
 800a41c:	9803      	ldr	r0, [sp, #12]
 800a41e:	f7fc fe87 	bl	8007130 <_printf_i>
 800a422:	e7eb      	b.n	800a3fc <_svfiprintf_r+0x1c0>
 800a424:	0800d0a1 	.word	0x0800d0a1
 800a428:	0800d0a7 	.word	0x0800d0a7
 800a42c:	0800d0ab 	.word	0x0800d0ab
 800a430:	08006bd5 	.word	0x08006bd5
 800a434:	0800a17d 	.word	0x0800a17d

0800a438 <__sflush_r>:
 800a438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a43a:	220c      	movs	r2, #12
 800a43c:	5e8b      	ldrsh	r3, [r1, r2]
 800a43e:	0005      	movs	r5, r0
 800a440:	000c      	movs	r4, r1
 800a442:	071a      	lsls	r2, r3, #28
 800a444:	d456      	bmi.n	800a4f4 <__sflush_r+0xbc>
 800a446:	684a      	ldr	r2, [r1, #4]
 800a448:	2a00      	cmp	r2, #0
 800a44a:	dc02      	bgt.n	800a452 <__sflush_r+0x1a>
 800a44c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a44e:	2a00      	cmp	r2, #0
 800a450:	dd4e      	ble.n	800a4f0 <__sflush_r+0xb8>
 800a452:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a454:	2f00      	cmp	r7, #0
 800a456:	d04b      	beq.n	800a4f0 <__sflush_r+0xb8>
 800a458:	2200      	movs	r2, #0
 800a45a:	2080      	movs	r0, #128	@ 0x80
 800a45c:	682e      	ldr	r6, [r5, #0]
 800a45e:	602a      	str	r2, [r5, #0]
 800a460:	001a      	movs	r2, r3
 800a462:	0140      	lsls	r0, r0, #5
 800a464:	6a21      	ldr	r1, [r4, #32]
 800a466:	4002      	ands	r2, r0
 800a468:	4203      	tst	r3, r0
 800a46a:	d033      	beq.n	800a4d4 <__sflush_r+0x9c>
 800a46c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	075b      	lsls	r3, r3, #29
 800a472:	d506      	bpl.n	800a482 <__sflush_r+0x4a>
 800a474:	6863      	ldr	r3, [r4, #4]
 800a476:	1ad2      	subs	r2, r2, r3
 800a478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <__sflush_r+0x4a>
 800a47e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a480:	1ad2      	subs	r2, r2, r3
 800a482:	2300      	movs	r3, #0
 800a484:	0028      	movs	r0, r5
 800a486:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a488:	6a21      	ldr	r1, [r4, #32]
 800a48a:	47b8      	blx	r7
 800a48c:	89a2      	ldrh	r2, [r4, #12]
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d106      	bne.n	800a4a0 <__sflush_r+0x68>
 800a492:	6829      	ldr	r1, [r5, #0]
 800a494:	291d      	cmp	r1, #29
 800a496:	d846      	bhi.n	800a526 <__sflush_r+0xee>
 800a498:	4b29      	ldr	r3, [pc, #164]	@ (800a540 <__sflush_r+0x108>)
 800a49a:	410b      	asrs	r3, r1
 800a49c:	07db      	lsls	r3, r3, #31
 800a49e:	d442      	bmi.n	800a526 <__sflush_r+0xee>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	6063      	str	r3, [r4, #4]
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	04d2      	lsls	r2, r2, #19
 800a4aa:	d505      	bpl.n	800a4b8 <__sflush_r+0x80>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <__sflush_r+0x7e>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d100      	bne.n	800a4b8 <__sflush_r+0x80>
 800a4b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ba:	602e      	str	r6, [r5, #0]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d017      	beq.n	800a4f0 <__sflush_r+0xb8>
 800a4c0:	0023      	movs	r3, r4
 800a4c2:	3344      	adds	r3, #68	@ 0x44
 800a4c4:	4299      	cmp	r1, r3
 800a4c6:	d002      	beq.n	800a4ce <__sflush_r+0x96>
 800a4c8:	0028      	movs	r0, r5
 800a4ca:	f7fe f9e7 	bl	800889c <_free_r>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d2:	e00d      	b.n	800a4f0 <__sflush_r+0xb8>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	0028      	movs	r0, r5
 800a4d8:	47b8      	blx	r7
 800a4da:	0002      	movs	r2, r0
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d1c6      	bne.n	800a46e <__sflush_r+0x36>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0c3      	beq.n	800a46e <__sflush_r+0x36>
 800a4e6:	2b1d      	cmp	r3, #29
 800a4e8:	d001      	beq.n	800a4ee <__sflush_r+0xb6>
 800a4ea:	2b16      	cmp	r3, #22
 800a4ec:	d11a      	bne.n	800a524 <__sflush_r+0xec>
 800a4ee:	602e      	str	r6, [r5, #0]
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e01e      	b.n	800a532 <__sflush_r+0xfa>
 800a4f4:	690e      	ldr	r6, [r1, #16]
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	d0fa      	beq.n	800a4f0 <__sflush_r+0xb8>
 800a4fa:	680f      	ldr	r7, [r1, #0]
 800a4fc:	600e      	str	r6, [r1, #0]
 800a4fe:	1bba      	subs	r2, r7, r6
 800a500:	9201      	str	r2, [sp, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	079b      	lsls	r3, r3, #30
 800a506:	d100      	bne.n	800a50a <__sflush_r+0xd2>
 800a508:	694a      	ldr	r2, [r1, #20]
 800a50a:	60a2      	str	r2, [r4, #8]
 800a50c:	9b01      	ldr	r3, [sp, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	ddee      	ble.n	800a4f0 <__sflush_r+0xb8>
 800a512:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a514:	0032      	movs	r2, r6
 800a516:	001f      	movs	r7, r3
 800a518:	0028      	movs	r0, r5
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	6a21      	ldr	r1, [r4, #32]
 800a51e:	47b8      	blx	r7
 800a520:	2800      	cmp	r0, #0
 800a522:	dc07      	bgt.n	800a534 <__sflush_r+0xfc>
 800a524:	89a2      	ldrh	r2, [r4, #12]
 800a526:	2340      	movs	r3, #64	@ 0x40
 800a528:	2001      	movs	r0, #1
 800a52a:	4313      	orrs	r3, r2
 800a52c:	b21b      	sxth	r3, r3
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	4240      	negs	r0, r0
 800a532:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a534:	9b01      	ldr	r3, [sp, #4]
 800a536:	1836      	adds	r6, r6, r0
 800a538:	1a1b      	subs	r3, r3, r0
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	e7e6      	b.n	800a50c <__sflush_r+0xd4>
 800a53e:	46c0      	nop			@ (mov r8, r8)
 800a540:	dfbffffe 	.word	0xdfbffffe

0800a544 <_fflush_r>:
 800a544:	690b      	ldr	r3, [r1, #16]
 800a546:	b570      	push	{r4, r5, r6, lr}
 800a548:	0005      	movs	r5, r0
 800a54a:	000c      	movs	r4, r1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <_fflush_r+0x12>
 800a550:	2500      	movs	r5, #0
 800a552:	0028      	movs	r0, r5
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	2800      	cmp	r0, #0
 800a558:	d004      	beq.n	800a564 <_fflush_r+0x20>
 800a55a:	6a03      	ldr	r3, [r0, #32]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <_fflush_r+0x20>
 800a560:	f7fd f992 	bl	8007888 <__sinit>
 800a564:	220c      	movs	r2, #12
 800a566:	5ea3      	ldrsh	r3, [r4, r2]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0f1      	beq.n	800a550 <_fflush_r+0xc>
 800a56c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a56e:	07d2      	lsls	r2, r2, #31
 800a570:	d404      	bmi.n	800a57c <_fflush_r+0x38>
 800a572:	059b      	lsls	r3, r3, #22
 800a574:	d402      	bmi.n	800a57c <_fflush_r+0x38>
 800a576:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a578:	f7fd faf3 	bl	8007b62 <__retarget_lock_acquire_recursive>
 800a57c:	0028      	movs	r0, r5
 800a57e:	0021      	movs	r1, r4
 800a580:	f7ff ff5a 	bl	800a438 <__sflush_r>
 800a584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a586:	0005      	movs	r5, r0
 800a588:	07db      	lsls	r3, r3, #31
 800a58a:	d4e2      	bmi.n	800a552 <_fflush_r+0xe>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	059b      	lsls	r3, r3, #22
 800a590:	d4df      	bmi.n	800a552 <_fflush_r+0xe>
 800a592:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a594:	f7fd fae6 	bl	8007b64 <__retarget_lock_release_recursive>
 800a598:	e7db      	b.n	800a552 <_fflush_r+0xe>

0800a59a <strncmp>:
 800a59a:	b530      	push	{r4, r5, lr}
 800a59c:	0005      	movs	r5, r0
 800a59e:	1e10      	subs	r0, r2, #0
 800a5a0:	d00b      	beq.n	800a5ba <strncmp+0x20>
 800a5a2:	2400      	movs	r4, #0
 800a5a4:	3a01      	subs	r2, #1
 800a5a6:	5d2b      	ldrb	r3, [r5, r4]
 800a5a8:	5d08      	ldrb	r0, [r1, r4]
 800a5aa:	4283      	cmp	r3, r0
 800a5ac:	d104      	bne.n	800a5b8 <strncmp+0x1e>
 800a5ae:	42a2      	cmp	r2, r4
 800a5b0:	d002      	beq.n	800a5b8 <strncmp+0x1e>
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1f6      	bne.n	800a5a6 <strncmp+0xc>
 800a5b8:	1a18      	subs	r0, r3, r0
 800a5ba:	bd30      	pop	{r4, r5, pc}

0800a5bc <_sbrk_r>:
 800a5bc:	2300      	movs	r3, #0
 800a5be:	b570      	push	{r4, r5, r6, lr}
 800a5c0:	4d06      	ldr	r5, [pc, #24]	@ (800a5dc <_sbrk_r+0x20>)
 800a5c2:	0004      	movs	r4, r0
 800a5c4:	0008      	movs	r0, r1
 800a5c6:	602b      	str	r3, [r5, #0]
 800a5c8:	f7f8 ffac 	bl	8003524 <_sbrk>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d103      	bne.n	800a5d8 <_sbrk_r+0x1c>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d000      	beq.n	800a5d8 <_sbrk_r+0x1c>
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
 800a5da:	46c0      	nop			@ (mov r8, r8)
 800a5dc:	20000920 	.word	0x20000920

0800a5e0 <nan>:
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	4901      	ldr	r1, [pc, #4]	@ (800a5e8 <nan+0x8>)
 800a5e4:	4770      	bx	lr
 800a5e6:	46c0      	nop			@ (mov r8, r8)
 800a5e8:	7ff80000 	.word	0x7ff80000

0800a5ec <__assert_func>:
 800a5ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a5ee:	0014      	movs	r4, r2
 800a5f0:	001a      	movs	r2, r3
 800a5f2:	4b09      	ldr	r3, [pc, #36]	@ (800a618 <__assert_func+0x2c>)
 800a5f4:	0005      	movs	r5, r0
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	000e      	movs	r6, r1
 800a5fa:	68d8      	ldr	r0, [r3, #12]
 800a5fc:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <__assert_func+0x30>)
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	d101      	bne.n	800a606 <__assert_func+0x1a>
 800a602:	4b07      	ldr	r3, [pc, #28]	@ (800a620 <__assert_func+0x34>)
 800a604:	001c      	movs	r4, r3
 800a606:	4907      	ldr	r1, [pc, #28]	@ (800a624 <__assert_func+0x38>)
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	9402      	str	r4, [sp, #8]
 800a60c:	002b      	movs	r3, r5
 800a60e:	9600      	str	r6, [sp, #0]
 800a610:	f000 fbe0 	bl	800add4 <fiprintf>
 800a614:	f000 fbee 	bl	800adf4 <abort>
 800a618:	20000038 	.word	0x20000038
 800a61c:	0800d0ba 	.word	0x0800d0ba
 800a620:	0800d0f5 	.word	0x0800d0f5
 800a624:	0800d0c7 	.word	0x0800d0c7

0800a628 <_calloc_r>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	0c0b      	lsrs	r3, r1, #16
 800a62c:	0c15      	lsrs	r5, r2, #16
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d11e      	bne.n	800a670 <_calloc_r+0x48>
 800a632:	2d00      	cmp	r5, #0
 800a634:	d10c      	bne.n	800a650 <_calloc_r+0x28>
 800a636:	b289      	uxth	r1, r1
 800a638:	b294      	uxth	r4, r2
 800a63a:	434c      	muls	r4, r1
 800a63c:	0021      	movs	r1, r4
 800a63e:	f7fe f9a3 	bl	8008988 <_malloc_r>
 800a642:	1e05      	subs	r5, r0, #0
 800a644:	d01a      	beq.n	800a67c <_calloc_r+0x54>
 800a646:	0022      	movs	r2, r4
 800a648:	2100      	movs	r1, #0
 800a64a:	f7fd fa04 	bl	8007a56 <memset>
 800a64e:	e016      	b.n	800a67e <_calloc_r+0x56>
 800a650:	1c2b      	adds	r3, r5, #0
 800a652:	1c0c      	adds	r4, r1, #0
 800a654:	b289      	uxth	r1, r1
 800a656:	b292      	uxth	r2, r2
 800a658:	434a      	muls	r2, r1
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	b2a1      	uxth	r1, r4
 800a65e:	4359      	muls	r1, r3
 800a660:	0c14      	lsrs	r4, r2, #16
 800a662:	190c      	adds	r4, r1, r4
 800a664:	0c23      	lsrs	r3, r4, #16
 800a666:	d107      	bne.n	800a678 <_calloc_r+0x50>
 800a668:	0424      	lsls	r4, r4, #16
 800a66a:	b292      	uxth	r2, r2
 800a66c:	4314      	orrs	r4, r2
 800a66e:	e7e5      	b.n	800a63c <_calloc_r+0x14>
 800a670:	2d00      	cmp	r5, #0
 800a672:	d101      	bne.n	800a678 <_calloc_r+0x50>
 800a674:	1c14      	adds	r4, r2, #0
 800a676:	e7ed      	b.n	800a654 <_calloc_r+0x2c>
 800a678:	230c      	movs	r3, #12
 800a67a:	6003      	str	r3, [r0, #0]
 800a67c:	2500      	movs	r5, #0
 800a67e:	0028      	movs	r0, r5
 800a680:	bd70      	pop	{r4, r5, r6, pc}

0800a682 <rshift>:
 800a682:	0002      	movs	r2, r0
 800a684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a686:	6904      	ldr	r4, [r0, #16]
 800a688:	b085      	sub	sp, #20
 800a68a:	3214      	adds	r2, #20
 800a68c:	114b      	asrs	r3, r1, #5
 800a68e:	0016      	movs	r6, r2
 800a690:	9302      	str	r3, [sp, #8]
 800a692:	429c      	cmp	r4, r3
 800a694:	dd31      	ble.n	800a6fa <rshift+0x78>
 800a696:	261f      	movs	r6, #31
 800a698:	000f      	movs	r7, r1
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	00a5      	lsls	r5, r4, #2
 800a69e:	18d3      	adds	r3, r2, r3
 800a6a0:	4037      	ands	r7, r6
 800a6a2:	1955      	adds	r5, r2, r5
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	9701      	str	r7, [sp, #4]
 800a6a8:	4231      	tst	r1, r6
 800a6aa:	d10d      	bne.n	800a6c8 <rshift+0x46>
 800a6ac:	0016      	movs	r6, r2
 800a6ae:	0019      	movs	r1, r3
 800a6b0:	428d      	cmp	r5, r1
 800a6b2:	d836      	bhi.n	800a722 <rshift+0xa0>
 800a6b4:	9b00      	ldr	r3, [sp, #0]
 800a6b6:	2600      	movs	r6, #0
 800a6b8:	3b03      	subs	r3, #3
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	d302      	bcc.n	800a6c4 <rshift+0x42>
 800a6be:	9b02      	ldr	r3, [sp, #8]
 800a6c0:	1ae4      	subs	r4, r4, r3
 800a6c2:	00a6      	lsls	r6, r4, #2
 800a6c4:	1996      	adds	r6, r2, r6
 800a6c6:	e018      	b.n	800a6fa <rshift+0x78>
 800a6c8:	2120      	movs	r1, #32
 800a6ca:	9e01      	ldr	r6, [sp, #4]
 800a6cc:	9f01      	ldr	r7, [sp, #4]
 800a6ce:	1b89      	subs	r1, r1, r6
 800a6d0:	9e00      	ldr	r6, [sp, #0]
 800a6d2:	9103      	str	r1, [sp, #12]
 800a6d4:	ce02      	ldmia	r6!, {r1}
 800a6d6:	4694      	mov	ip, r2
 800a6d8:	40f9      	lsrs	r1, r7
 800a6da:	42b5      	cmp	r5, r6
 800a6dc:	d816      	bhi.n	800a70c <rshift+0x8a>
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	2600      	movs	r6, #0
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	429d      	cmp	r5, r3
 800a6e6:	d303      	bcc.n	800a6f0 <rshift+0x6e>
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	1ae4      	subs	r4, r4, r3
 800a6ec:	00a6      	lsls	r6, r4, #2
 800a6ee:	3e04      	subs	r6, #4
 800a6f0:	1996      	adds	r6, r2, r6
 800a6f2:	6031      	str	r1, [r6, #0]
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d000      	beq.n	800a6fa <rshift+0x78>
 800a6f8:	3604      	adds	r6, #4
 800a6fa:	1ab1      	subs	r1, r6, r2
 800a6fc:	1089      	asrs	r1, r1, #2
 800a6fe:	6101      	str	r1, [r0, #16]
 800a700:	4296      	cmp	r6, r2
 800a702:	d101      	bne.n	800a708 <rshift+0x86>
 800a704:	2300      	movs	r3, #0
 800a706:	6143      	str	r3, [r0, #20]
 800a708:	b005      	add	sp, #20
 800a70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a70c:	6837      	ldr	r7, [r6, #0]
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	409f      	lsls	r7, r3
 800a712:	430f      	orrs	r7, r1
 800a714:	4661      	mov	r1, ip
 800a716:	c180      	stmia	r1!, {r7}
 800a718:	468c      	mov	ip, r1
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	ce02      	ldmia	r6!, {r1}
 800a71e:	40d9      	lsrs	r1, r3
 800a720:	e7db      	b.n	800a6da <rshift+0x58>
 800a722:	c980      	ldmia	r1!, {r7}
 800a724:	c680      	stmia	r6!, {r7}
 800a726:	e7c3      	b.n	800a6b0 <rshift+0x2e>

0800a728 <__hexdig_fun>:
 800a728:	0002      	movs	r2, r0
 800a72a:	3a30      	subs	r2, #48	@ 0x30
 800a72c:	0003      	movs	r3, r0
 800a72e:	2a09      	cmp	r2, #9
 800a730:	d802      	bhi.n	800a738 <__hexdig_fun+0x10>
 800a732:	3b20      	subs	r3, #32
 800a734:	b2d8      	uxtb	r0, r3
 800a736:	4770      	bx	lr
 800a738:	0002      	movs	r2, r0
 800a73a:	3a61      	subs	r2, #97	@ 0x61
 800a73c:	2a05      	cmp	r2, #5
 800a73e:	d801      	bhi.n	800a744 <__hexdig_fun+0x1c>
 800a740:	3b47      	subs	r3, #71	@ 0x47
 800a742:	e7f7      	b.n	800a734 <__hexdig_fun+0xc>
 800a744:	001a      	movs	r2, r3
 800a746:	3a41      	subs	r2, #65	@ 0x41
 800a748:	2000      	movs	r0, #0
 800a74a:	2a05      	cmp	r2, #5
 800a74c:	d8f3      	bhi.n	800a736 <__hexdig_fun+0xe>
 800a74e:	3b27      	subs	r3, #39	@ 0x27
 800a750:	e7f0      	b.n	800a734 <__hexdig_fun+0xc>
	...

0800a754 <__gethex>:
 800a754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a756:	b089      	sub	sp, #36	@ 0x24
 800a758:	9307      	str	r3, [sp, #28]
 800a75a:	680b      	ldr	r3, [r1, #0]
 800a75c:	9201      	str	r2, [sp, #4]
 800a75e:	9003      	str	r0, [sp, #12]
 800a760:	9106      	str	r1, [sp, #24]
 800a762:	1c9a      	adds	r2, r3, #2
 800a764:	0011      	movs	r1, r2
 800a766:	3201      	adds	r2, #1
 800a768:	1e50      	subs	r0, r2, #1
 800a76a:	7800      	ldrb	r0, [r0, #0]
 800a76c:	2830      	cmp	r0, #48	@ 0x30
 800a76e:	d0f9      	beq.n	800a764 <__gethex+0x10>
 800a770:	1acb      	subs	r3, r1, r3
 800a772:	3b02      	subs	r3, #2
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	9100      	str	r1, [sp, #0]
 800a778:	f7ff ffd6 	bl	800a728 <__hexdig_fun>
 800a77c:	2300      	movs	r3, #0
 800a77e:	001d      	movs	r5, r3
 800a780:	9302      	str	r3, [sp, #8]
 800a782:	4298      	cmp	r0, r3
 800a784:	d11e      	bne.n	800a7c4 <__gethex+0x70>
 800a786:	2201      	movs	r2, #1
 800a788:	49a6      	ldr	r1, [pc, #664]	@ (800aa24 <__gethex+0x2d0>)
 800a78a:	9800      	ldr	r0, [sp, #0]
 800a78c:	f7ff ff05 	bl	800a59a <strncmp>
 800a790:	0007      	movs	r7, r0
 800a792:	42a8      	cmp	r0, r5
 800a794:	d000      	beq.n	800a798 <__gethex+0x44>
 800a796:	e06a      	b.n	800a86e <__gethex+0x11a>
 800a798:	9b00      	ldr	r3, [sp, #0]
 800a79a:	7858      	ldrb	r0, [r3, #1]
 800a79c:	1c5c      	adds	r4, r3, #1
 800a79e:	f7ff ffc3 	bl	800a728 <__hexdig_fun>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	9302      	str	r3, [sp, #8]
 800a7a6:	42a8      	cmp	r0, r5
 800a7a8:	d02f      	beq.n	800a80a <__gethex+0xb6>
 800a7aa:	9400      	str	r4, [sp, #0]
 800a7ac:	9b00      	ldr	r3, [sp, #0]
 800a7ae:	7818      	ldrb	r0, [r3, #0]
 800a7b0:	2830      	cmp	r0, #48	@ 0x30
 800a7b2:	d009      	beq.n	800a7c8 <__gethex+0x74>
 800a7b4:	f7ff ffb8 	bl	800a728 <__hexdig_fun>
 800a7b8:	4242      	negs	r2, r0
 800a7ba:	4142      	adcs	r2, r0
 800a7bc:	2301      	movs	r3, #1
 800a7be:	0025      	movs	r5, r4
 800a7c0:	9202      	str	r2, [sp, #8]
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	9c00      	ldr	r4, [sp, #0]
 800a7c6:	e004      	b.n	800a7d2 <__gethex+0x7e>
 800a7c8:	9b00      	ldr	r3, [sp, #0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	e7ed      	b.n	800a7ac <__gethex+0x58>
 800a7d0:	3401      	adds	r4, #1
 800a7d2:	7820      	ldrb	r0, [r4, #0]
 800a7d4:	f7ff ffa8 	bl	800a728 <__hexdig_fun>
 800a7d8:	1e07      	subs	r7, r0, #0
 800a7da:	d1f9      	bne.n	800a7d0 <__gethex+0x7c>
 800a7dc:	2201      	movs	r2, #1
 800a7de:	0020      	movs	r0, r4
 800a7e0:	4990      	ldr	r1, [pc, #576]	@ (800aa24 <__gethex+0x2d0>)
 800a7e2:	f7ff feda 	bl	800a59a <strncmp>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d10d      	bne.n	800a806 <__gethex+0xb2>
 800a7ea:	2d00      	cmp	r5, #0
 800a7ec:	d106      	bne.n	800a7fc <__gethex+0xa8>
 800a7ee:	3401      	adds	r4, #1
 800a7f0:	0025      	movs	r5, r4
 800a7f2:	7820      	ldrb	r0, [r4, #0]
 800a7f4:	f7ff ff98 	bl	800a728 <__hexdig_fun>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d102      	bne.n	800a802 <__gethex+0xae>
 800a7fc:	1b2d      	subs	r5, r5, r4
 800a7fe:	00af      	lsls	r7, r5, #2
 800a800:	e003      	b.n	800a80a <__gethex+0xb6>
 800a802:	3401      	adds	r4, #1
 800a804:	e7f5      	b.n	800a7f2 <__gethex+0x9e>
 800a806:	2d00      	cmp	r5, #0
 800a808:	d1f8      	bne.n	800a7fc <__gethex+0xa8>
 800a80a:	2220      	movs	r2, #32
 800a80c:	7823      	ldrb	r3, [r4, #0]
 800a80e:	0026      	movs	r6, r4
 800a810:	4393      	bics	r3, r2
 800a812:	2b50      	cmp	r3, #80	@ 0x50
 800a814:	d11d      	bne.n	800a852 <__gethex+0xfe>
 800a816:	7863      	ldrb	r3, [r4, #1]
 800a818:	2b2b      	cmp	r3, #43	@ 0x2b
 800a81a:	d02d      	beq.n	800a878 <__gethex+0x124>
 800a81c:	2b2d      	cmp	r3, #45	@ 0x2d
 800a81e:	d02f      	beq.n	800a880 <__gethex+0x12c>
 800a820:	2300      	movs	r3, #0
 800a822:	1c66      	adds	r6, r4, #1
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	7830      	ldrb	r0, [r6, #0]
 800a828:	f7ff ff7e 	bl	800a728 <__hexdig_fun>
 800a82c:	1e43      	subs	r3, r0, #1
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	0005      	movs	r5, r0
 800a832:	2b18      	cmp	r3, #24
 800a834:	d82a      	bhi.n	800a88c <__gethex+0x138>
 800a836:	7870      	ldrb	r0, [r6, #1]
 800a838:	f7ff ff76 	bl	800a728 <__hexdig_fun>
 800a83c:	1e43      	subs	r3, r0, #1
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	3601      	adds	r6, #1
 800a842:	3d10      	subs	r5, #16
 800a844:	2b18      	cmp	r3, #24
 800a846:	d91d      	bls.n	800a884 <__gethex+0x130>
 800a848:	9b04      	ldr	r3, [sp, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d000      	beq.n	800a850 <__gethex+0xfc>
 800a84e:	426d      	negs	r5, r5
 800a850:	197f      	adds	r7, r7, r5
 800a852:	9b06      	ldr	r3, [sp, #24]
 800a854:	601e      	str	r6, [r3, #0]
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d019      	beq.n	800a890 <__gethex+0x13c>
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	2606      	movs	r6, #6
 800a860:	425a      	negs	r2, r3
 800a862:	4153      	adcs	r3, r2
 800a864:	425b      	negs	r3, r3
 800a866:	401e      	ands	r6, r3
 800a868:	0030      	movs	r0, r6
 800a86a:	b009      	add	sp, #36	@ 0x24
 800a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86e:	2301      	movs	r3, #1
 800a870:	2700      	movs	r7, #0
 800a872:	9c00      	ldr	r4, [sp, #0]
 800a874:	9302      	str	r3, [sp, #8]
 800a876:	e7c8      	b.n	800a80a <__gethex+0xb6>
 800a878:	2300      	movs	r3, #0
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	1ca6      	adds	r6, r4, #2
 800a87e:	e7d2      	b.n	800a826 <__gethex+0xd2>
 800a880:	2301      	movs	r3, #1
 800a882:	e7fa      	b.n	800a87a <__gethex+0x126>
 800a884:	230a      	movs	r3, #10
 800a886:	435d      	muls	r5, r3
 800a888:	182d      	adds	r5, r5, r0
 800a88a:	e7d4      	b.n	800a836 <__gethex+0xe2>
 800a88c:	0026      	movs	r6, r4
 800a88e:	e7e0      	b.n	800a852 <__gethex+0xfe>
 800a890:	9b00      	ldr	r3, [sp, #0]
 800a892:	9902      	ldr	r1, [sp, #8]
 800a894:	1ae3      	subs	r3, r4, r3
 800a896:	3b01      	subs	r3, #1
 800a898:	2b07      	cmp	r3, #7
 800a89a:	dc0a      	bgt.n	800a8b2 <__gethex+0x15e>
 800a89c:	9803      	ldr	r0, [sp, #12]
 800a89e:	f7fe f903 	bl	8008aa8 <_Balloc>
 800a8a2:	1e05      	subs	r5, r0, #0
 800a8a4:	d108      	bne.n	800a8b8 <__gethex+0x164>
 800a8a6:	002a      	movs	r2, r5
 800a8a8:	21e4      	movs	r1, #228	@ 0xe4
 800a8aa:	4b5f      	ldr	r3, [pc, #380]	@ (800aa28 <__gethex+0x2d4>)
 800a8ac:	485f      	ldr	r0, [pc, #380]	@ (800aa2c <__gethex+0x2d8>)
 800a8ae:	f7ff fe9d 	bl	800a5ec <__assert_func>
 800a8b2:	3101      	adds	r1, #1
 800a8b4:	105b      	asrs	r3, r3, #1
 800a8b6:	e7ef      	b.n	800a898 <__gethex+0x144>
 800a8b8:	0003      	movs	r3, r0
 800a8ba:	3314      	adds	r3, #20
 800a8bc:	9302      	str	r3, [sp, #8]
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	001e      	movs	r6, r3
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9b00      	ldr	r3, [sp, #0]
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d338      	bcc.n	800a93e <__gethex+0x1ea>
 800a8cc:	9c05      	ldr	r4, [sp, #20]
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	c440      	stmia	r4!, {r6}
 800a8d2:	1ae4      	subs	r4, r4, r3
 800a8d4:	10a4      	asrs	r4, r4, #2
 800a8d6:	0030      	movs	r0, r6
 800a8d8:	612c      	str	r4, [r5, #16]
 800a8da:	f7fe f9dd 	bl	8008c98 <__hi0bits>
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	0164      	lsls	r4, r4, #5
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	1a26      	subs	r6, r4, r0
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	429e      	cmp	r6, r3
 800a8ea:	dd52      	ble.n	800a992 <__gethex+0x23e>
 800a8ec:	1af6      	subs	r6, r6, r3
 800a8ee:	0031      	movs	r1, r6
 800a8f0:	0028      	movs	r0, r5
 800a8f2:	f7fe fd80 	bl	80093f6 <__any_on>
 800a8f6:	1e04      	subs	r4, r0, #0
 800a8f8:	d00f      	beq.n	800a91a <__gethex+0x1c6>
 800a8fa:	2401      	movs	r4, #1
 800a8fc:	231f      	movs	r3, #31
 800a8fe:	0020      	movs	r0, r4
 800a900:	1e72      	subs	r2, r6, #1
 800a902:	4013      	ands	r3, r2
 800a904:	4098      	lsls	r0, r3
 800a906:	0003      	movs	r3, r0
 800a908:	1151      	asrs	r1, r2, #5
 800a90a:	9802      	ldr	r0, [sp, #8]
 800a90c:	0089      	lsls	r1, r1, #2
 800a90e:	5809      	ldr	r1, [r1, r0]
 800a910:	4219      	tst	r1, r3
 800a912:	d002      	beq.n	800a91a <__gethex+0x1c6>
 800a914:	42a2      	cmp	r2, r4
 800a916:	dc34      	bgt.n	800a982 <__gethex+0x22e>
 800a918:	2402      	movs	r4, #2
 800a91a:	0031      	movs	r1, r6
 800a91c:	0028      	movs	r0, r5
 800a91e:	f7ff feb0 	bl	800a682 <rshift>
 800a922:	19bf      	adds	r7, r7, r6
 800a924:	9b01      	ldr	r3, [sp, #4]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	42bb      	cmp	r3, r7
 800a92a:	da42      	bge.n	800a9b2 <__gethex+0x25e>
 800a92c:	0029      	movs	r1, r5
 800a92e:	9803      	ldr	r0, [sp, #12]
 800a930:	f7fe f8fe 	bl	8008b30 <_Bfree>
 800a934:	2300      	movs	r3, #0
 800a936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a938:	26a3      	movs	r6, #163	@ 0xa3
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	e794      	b.n	800a868 <__gethex+0x114>
 800a93e:	3c01      	subs	r4, #1
 800a940:	7823      	ldrb	r3, [r4, #0]
 800a942:	2b2e      	cmp	r3, #46	@ 0x2e
 800a944:	d012      	beq.n	800a96c <__gethex+0x218>
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d104      	bne.n	800a956 <__gethex+0x202>
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	c340      	stmia	r3!, {r6}
 800a950:	2600      	movs	r6, #0
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	9604      	str	r6, [sp, #16]
 800a956:	7820      	ldrb	r0, [r4, #0]
 800a958:	f7ff fee6 	bl	800a728 <__hexdig_fun>
 800a95c:	230f      	movs	r3, #15
 800a95e:	4018      	ands	r0, r3
 800a960:	9b04      	ldr	r3, [sp, #16]
 800a962:	4098      	lsls	r0, r3
 800a964:	3304      	adds	r3, #4
 800a966:	4306      	orrs	r6, r0
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	e7ac      	b.n	800a8c6 <__gethex+0x172>
 800a96c:	9b00      	ldr	r3, [sp, #0]
 800a96e:	42a3      	cmp	r3, r4
 800a970:	d8e9      	bhi.n	800a946 <__gethex+0x1f2>
 800a972:	2201      	movs	r2, #1
 800a974:	0020      	movs	r0, r4
 800a976:	492b      	ldr	r1, [pc, #172]	@ (800aa24 <__gethex+0x2d0>)
 800a978:	f7ff fe0f 	bl	800a59a <strncmp>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d1e2      	bne.n	800a946 <__gethex+0x1f2>
 800a980:	e7a1      	b.n	800a8c6 <__gethex+0x172>
 800a982:	0028      	movs	r0, r5
 800a984:	1eb1      	subs	r1, r6, #2
 800a986:	f7fe fd36 	bl	80093f6 <__any_on>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0c4      	beq.n	800a918 <__gethex+0x1c4>
 800a98e:	2403      	movs	r4, #3
 800a990:	e7c3      	b.n	800a91a <__gethex+0x1c6>
 800a992:	9b00      	ldr	r3, [sp, #0]
 800a994:	2400      	movs	r4, #0
 800a996:	429e      	cmp	r6, r3
 800a998:	dac4      	bge.n	800a924 <__gethex+0x1d0>
 800a99a:	1b9e      	subs	r6, r3, r6
 800a99c:	0029      	movs	r1, r5
 800a99e:	0032      	movs	r2, r6
 800a9a0:	9803      	ldr	r0, [sp, #12]
 800a9a2:	f7fe faef 	bl	8008f84 <__lshift>
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	0005      	movs	r5, r0
 800a9ac:	1bbf      	subs	r7, r7, r6
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	e7b8      	b.n	800a924 <__gethex+0x1d0>
 800a9b2:	9b01      	ldr	r3, [sp, #4]
 800a9b4:	685e      	ldr	r6, [r3, #4]
 800a9b6:	42be      	cmp	r6, r7
 800a9b8:	dd6f      	ble.n	800aa9a <__gethex+0x346>
 800a9ba:	9b00      	ldr	r3, [sp, #0]
 800a9bc:	1bf6      	subs	r6, r6, r7
 800a9be:	42b3      	cmp	r3, r6
 800a9c0:	dc36      	bgt.n	800aa30 <__gethex+0x2dc>
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d024      	beq.n	800aa14 <__gethex+0x2c0>
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d026      	beq.n	800aa1c <__gethex+0x2c8>
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d117      	bne.n	800aa02 <__gethex+0x2ae>
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	42b3      	cmp	r3, r6
 800a9d6:	d114      	bne.n	800aa02 <__gethex+0x2ae>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10b      	bne.n	800a9f4 <__gethex+0x2a0>
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	9a07      	ldr	r2, [sp, #28]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2662      	movs	r6, #98	@ 0x62
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	9a02      	ldr	r2, [sp, #8]
 800a9ea:	612b      	str	r3, [r5, #16]
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f0:	601d      	str	r5, [r3, #0]
 800a9f2:	e739      	b.n	800a868 <__gethex+0x114>
 800a9f4:	9900      	ldr	r1, [sp, #0]
 800a9f6:	0028      	movs	r0, r5
 800a9f8:	3901      	subs	r1, #1
 800a9fa:	f7fe fcfc 	bl	80093f6 <__any_on>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d1ec      	bne.n	800a9dc <__gethex+0x288>
 800aa02:	0029      	movs	r1, r5
 800aa04:	9803      	ldr	r0, [sp, #12]
 800aa06:	f7fe f893 	bl	8008b30 <_Bfree>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa0e:	2650      	movs	r6, #80	@ 0x50
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	e729      	b.n	800a868 <__gethex+0x114>
 800aa14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1f3      	bne.n	800aa02 <__gethex+0x2ae>
 800aa1a:	e7df      	b.n	800a9dc <__gethex+0x288>
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1dc      	bne.n	800a9dc <__gethex+0x288>
 800aa22:	e7ee      	b.n	800aa02 <__gethex+0x2ae>
 800aa24:	0800cf48 	.word	0x0800cf48
 800aa28:	0800cde1 	.word	0x0800cde1
 800aa2c:	0800d0f6 	.word	0x0800d0f6
 800aa30:	1e77      	subs	r7, r6, #1
 800aa32:	2c00      	cmp	r4, #0
 800aa34:	d12f      	bne.n	800aa96 <__gethex+0x342>
 800aa36:	2f00      	cmp	r7, #0
 800aa38:	d004      	beq.n	800aa44 <__gethex+0x2f0>
 800aa3a:	0039      	movs	r1, r7
 800aa3c:	0028      	movs	r0, r5
 800aa3e:	f7fe fcda 	bl	80093f6 <__any_on>
 800aa42:	0004      	movs	r4, r0
 800aa44:	231f      	movs	r3, #31
 800aa46:	117a      	asrs	r2, r7, #5
 800aa48:	401f      	ands	r7, r3
 800aa4a:	3b1e      	subs	r3, #30
 800aa4c:	40bb      	lsls	r3, r7
 800aa4e:	9902      	ldr	r1, [sp, #8]
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	5852      	ldr	r2, [r2, r1]
 800aa54:	421a      	tst	r2, r3
 800aa56:	d001      	beq.n	800aa5c <__gethex+0x308>
 800aa58:	2302      	movs	r3, #2
 800aa5a:	431c      	orrs	r4, r3
 800aa5c:	9b00      	ldr	r3, [sp, #0]
 800aa5e:	0031      	movs	r1, r6
 800aa60:	1b9b      	subs	r3, r3, r6
 800aa62:	2602      	movs	r6, #2
 800aa64:	0028      	movs	r0, r5
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	f7ff fe0b 	bl	800a682 <rshift>
 800aa6c:	9b01      	ldr	r3, [sp, #4]
 800aa6e:	685f      	ldr	r7, [r3, #4]
 800aa70:	2c00      	cmp	r4, #0
 800aa72:	d03f      	beq.n	800aaf4 <__gethex+0x3a0>
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d010      	beq.n	800aa9e <__gethex+0x34a>
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d012      	beq.n	800aaa6 <__gethex+0x352>
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d106      	bne.n	800aa92 <__gethex+0x33e>
 800aa84:	07a2      	lsls	r2, r4, #30
 800aa86:	d504      	bpl.n	800aa92 <__gethex+0x33e>
 800aa88:	9a02      	ldr	r2, [sp, #8]
 800aa8a:	6812      	ldr	r2, [r2, #0]
 800aa8c:	4314      	orrs	r4, r2
 800aa8e:	421c      	tst	r4, r3
 800aa90:	d10c      	bne.n	800aaac <__gethex+0x358>
 800aa92:	2310      	movs	r3, #16
 800aa94:	e02d      	b.n	800aaf2 <__gethex+0x39e>
 800aa96:	2401      	movs	r4, #1
 800aa98:	e7d4      	b.n	800aa44 <__gethex+0x2f0>
 800aa9a:	2601      	movs	r6, #1
 800aa9c:	e7e8      	b.n	800aa70 <__gethex+0x31c>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aaa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0f2      	beq.n	800aa92 <__gethex+0x33e>
 800aaac:	692b      	ldr	r3, [r5, #16]
 800aaae:	2000      	movs	r0, #0
 800aab0:	9302      	str	r3, [sp, #8]
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	9304      	str	r3, [sp, #16]
 800aab6:	002b      	movs	r3, r5
 800aab8:	9a04      	ldr	r2, [sp, #16]
 800aaba:	3314      	adds	r3, #20
 800aabc:	1899      	adds	r1, r3, r2
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	1c54      	adds	r4, r2, #1
 800aac2:	d01c      	beq.n	800aafe <__gethex+0x3aa>
 800aac4:	3201      	adds	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	002b      	movs	r3, r5
 800aaca:	3314      	adds	r3, #20
 800aacc:	2e02      	cmp	r6, #2
 800aace:	d13f      	bne.n	800ab50 <__gethex+0x3fc>
 800aad0:	9a01      	ldr	r2, [sp, #4]
 800aad2:	9900      	ldr	r1, [sp, #0]
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	3a01      	subs	r2, #1
 800aad8:	428a      	cmp	r2, r1
 800aada:	d109      	bne.n	800aaf0 <__gethex+0x39c>
 800aadc:	000a      	movs	r2, r1
 800aade:	201f      	movs	r0, #31
 800aae0:	4010      	ands	r0, r2
 800aae2:	2201      	movs	r2, #1
 800aae4:	4082      	lsls	r2, r0
 800aae6:	1149      	asrs	r1, r1, #5
 800aae8:	0089      	lsls	r1, r1, #2
 800aaea:	58cb      	ldr	r3, [r1, r3]
 800aaec:	4213      	tst	r3, r2
 800aaee:	d13d      	bne.n	800ab6c <__gethex+0x418>
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	431e      	orrs	r6, r3
 800aaf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaf6:	601d      	str	r5, [r3, #0]
 800aaf8:	9b07      	ldr	r3, [sp, #28]
 800aafa:	601f      	str	r7, [r3, #0]
 800aafc:	e6b4      	b.n	800a868 <__gethex+0x114>
 800aafe:	c301      	stmia	r3!, {r0}
 800ab00:	4299      	cmp	r1, r3
 800ab02:	d8dc      	bhi.n	800aabe <__gethex+0x36a>
 800ab04:	68ab      	ldr	r3, [r5, #8]
 800ab06:	9a02      	ldr	r2, [sp, #8]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	db18      	blt.n	800ab3e <__gethex+0x3ea>
 800ab0c:	6869      	ldr	r1, [r5, #4]
 800ab0e:	9803      	ldr	r0, [sp, #12]
 800ab10:	3101      	adds	r1, #1
 800ab12:	f7fd ffc9 	bl	8008aa8 <_Balloc>
 800ab16:	1e04      	subs	r4, r0, #0
 800ab18:	d104      	bne.n	800ab24 <__gethex+0x3d0>
 800ab1a:	0022      	movs	r2, r4
 800ab1c:	2184      	movs	r1, #132	@ 0x84
 800ab1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ab94 <__gethex+0x440>)
 800ab20:	481d      	ldr	r0, [pc, #116]	@ (800ab98 <__gethex+0x444>)
 800ab22:	e6c4      	b.n	800a8ae <__gethex+0x15a>
 800ab24:	0029      	movs	r1, r5
 800ab26:	692a      	ldr	r2, [r5, #16]
 800ab28:	310c      	adds	r1, #12
 800ab2a:	3202      	adds	r2, #2
 800ab2c:	0092      	lsls	r2, r2, #2
 800ab2e:	300c      	adds	r0, #12
 800ab30:	f7fd f824 	bl	8007b7c <memcpy>
 800ab34:	0029      	movs	r1, r5
 800ab36:	9803      	ldr	r0, [sp, #12]
 800ab38:	f7fd fffa 	bl	8008b30 <_Bfree>
 800ab3c:	0025      	movs	r5, r4
 800ab3e:	692b      	ldr	r3, [r5, #16]
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	612a      	str	r2, [r5, #16]
 800ab44:	2201      	movs	r2, #1
 800ab46:	3304      	adds	r3, #4
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	18eb      	adds	r3, r5, r3
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	e7bb      	b.n	800aac8 <__gethex+0x374>
 800ab50:	692a      	ldr	r2, [r5, #16]
 800ab52:	9902      	ldr	r1, [sp, #8]
 800ab54:	428a      	cmp	r2, r1
 800ab56:	dd0b      	ble.n	800ab70 <__gethex+0x41c>
 800ab58:	2101      	movs	r1, #1
 800ab5a:	0028      	movs	r0, r5
 800ab5c:	f7ff fd91 	bl	800a682 <rshift>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	3701      	adds	r7, #1
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	42bb      	cmp	r3, r7
 800ab68:	da00      	bge.n	800ab6c <__gethex+0x418>
 800ab6a:	e6df      	b.n	800a92c <__gethex+0x1d8>
 800ab6c:	2601      	movs	r6, #1
 800ab6e:	e7bf      	b.n	800aaf0 <__gethex+0x39c>
 800ab70:	221f      	movs	r2, #31
 800ab72:	9c00      	ldr	r4, [sp, #0]
 800ab74:	9900      	ldr	r1, [sp, #0]
 800ab76:	4014      	ands	r4, r2
 800ab78:	4211      	tst	r1, r2
 800ab7a:	d0f7      	beq.n	800ab6c <__gethex+0x418>
 800ab7c:	9a04      	ldr	r2, [sp, #16]
 800ab7e:	189b      	adds	r3, r3, r2
 800ab80:	3b04      	subs	r3, #4
 800ab82:	6818      	ldr	r0, [r3, #0]
 800ab84:	f7fe f888 	bl	8008c98 <__hi0bits>
 800ab88:	2320      	movs	r3, #32
 800ab8a:	1b1b      	subs	r3, r3, r4
 800ab8c:	4298      	cmp	r0, r3
 800ab8e:	dbe3      	blt.n	800ab58 <__gethex+0x404>
 800ab90:	e7ec      	b.n	800ab6c <__gethex+0x418>
 800ab92:	46c0      	nop			@ (mov r8, r8)
 800ab94:	0800cde1 	.word	0x0800cde1
 800ab98:	0800d0f6 	.word	0x0800d0f6

0800ab9c <L_shift>:
 800ab9c:	2308      	movs	r3, #8
 800ab9e:	b570      	push	{r4, r5, r6, lr}
 800aba0:	2520      	movs	r5, #32
 800aba2:	1a9a      	subs	r2, r3, r2
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	1aad      	subs	r5, r5, r2
 800aba8:	6843      	ldr	r3, [r0, #4]
 800abaa:	6804      	ldr	r4, [r0, #0]
 800abac:	001e      	movs	r6, r3
 800abae:	40ae      	lsls	r6, r5
 800abb0:	40d3      	lsrs	r3, r2
 800abb2:	4334      	orrs	r4, r6
 800abb4:	6004      	str	r4, [r0, #0]
 800abb6:	6043      	str	r3, [r0, #4]
 800abb8:	3004      	adds	r0, #4
 800abba:	4288      	cmp	r0, r1
 800abbc:	d3f4      	bcc.n	800aba8 <L_shift+0xc>
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <__match>:
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	6803      	ldr	r3, [r0, #0]
 800abc4:	780c      	ldrb	r4, [r1, #0]
 800abc6:	3301      	adds	r3, #1
 800abc8:	2c00      	cmp	r4, #0
 800abca:	d102      	bne.n	800abd2 <__match+0x12>
 800abcc:	6003      	str	r3, [r0, #0]
 800abce:	2001      	movs	r0, #1
 800abd0:	bd30      	pop	{r4, r5, pc}
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	0015      	movs	r5, r2
 800abd6:	3d41      	subs	r5, #65	@ 0x41
 800abd8:	2d19      	cmp	r5, #25
 800abda:	d800      	bhi.n	800abde <__match+0x1e>
 800abdc:	3220      	adds	r2, #32
 800abde:	3101      	adds	r1, #1
 800abe0:	42a2      	cmp	r2, r4
 800abe2:	d0ef      	beq.n	800abc4 <__match+0x4>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e7f3      	b.n	800abd0 <__match+0x10>

0800abe8 <__hexnan>:
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	680b      	ldr	r3, [r1, #0]
 800abec:	b08b      	sub	sp, #44	@ 0x2c
 800abee:	9201      	str	r2, [sp, #4]
 800abf0:	9901      	ldr	r1, [sp, #4]
 800abf2:	115a      	asrs	r2, r3, #5
 800abf4:	0092      	lsls	r2, r2, #2
 800abf6:	188a      	adds	r2, r1, r2
 800abf8:	9202      	str	r2, [sp, #8]
 800abfa:	0019      	movs	r1, r3
 800abfc:	221f      	movs	r2, #31
 800abfe:	4011      	ands	r1, r2
 800ac00:	9008      	str	r0, [sp, #32]
 800ac02:	9106      	str	r1, [sp, #24]
 800ac04:	4213      	tst	r3, r2
 800ac06:	d002      	beq.n	800ac0e <__hexnan+0x26>
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	9302      	str	r3, [sp, #8]
 800ac0e:	9b02      	ldr	r3, [sp, #8]
 800ac10:	2500      	movs	r5, #0
 800ac12:	1f1f      	subs	r7, r3, #4
 800ac14:	003e      	movs	r6, r7
 800ac16:	003c      	movs	r4, r7
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	603d      	str	r5, [r7, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	9507      	str	r5, [sp, #28]
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	9503      	str	r5, [sp, #12]
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	3301      	adds	r3, #1
 800ac28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	9304      	str	r3, [sp, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d028      	beq.n	800ac86 <__hexnan+0x9e>
 800ac34:	9804      	ldr	r0, [sp, #16]
 800ac36:	f7ff fd77 	bl	800a728 <__hexdig_fun>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d155      	bne.n	800acea <__hexnan+0x102>
 800ac3e:	9b04      	ldr	r3, [sp, #16]
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d819      	bhi.n	800ac78 <__hexnan+0x90>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	9a07      	ldr	r2, [sp, #28]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	dd12      	ble.n	800ac72 <__hexnan+0x8a>
 800ac4c:	42b4      	cmp	r4, r6
 800ac4e:	d206      	bcs.n	800ac5e <__hexnan+0x76>
 800ac50:	2d07      	cmp	r5, #7
 800ac52:	dc04      	bgt.n	800ac5e <__hexnan+0x76>
 800ac54:	002a      	movs	r2, r5
 800ac56:	0031      	movs	r1, r6
 800ac58:	0020      	movs	r0, r4
 800ac5a:	f7ff ff9f 	bl	800ab9c <L_shift>
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	2508      	movs	r5, #8
 800ac62:	429c      	cmp	r4, r3
 800ac64:	d905      	bls.n	800ac72 <__hexnan+0x8a>
 800ac66:	1f26      	subs	r6, r4, #4
 800ac68:	2500      	movs	r5, #0
 800ac6a:	0034      	movs	r4, r6
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	6035      	str	r5, [r6, #0]
 800ac70:	9307      	str	r3, [sp, #28]
 800ac72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac74:	9305      	str	r3, [sp, #20]
 800ac76:	e7d5      	b.n	800ac24 <__hexnan+0x3c>
 800ac78:	9b04      	ldr	r3, [sp, #16]
 800ac7a:	2b29      	cmp	r3, #41	@ 0x29
 800ac7c:	d15a      	bne.n	800ad34 <__hexnan+0x14c>
 800ac7e:	9b05      	ldr	r3, [sp, #20]
 800ac80:	9a08      	ldr	r2, [sp, #32]
 800ac82:	3302      	adds	r3, #2
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d053      	beq.n	800ad34 <__hexnan+0x14c>
 800ac8c:	42b4      	cmp	r4, r6
 800ac8e:	d206      	bcs.n	800ac9e <__hexnan+0xb6>
 800ac90:	2d07      	cmp	r5, #7
 800ac92:	dc04      	bgt.n	800ac9e <__hexnan+0xb6>
 800ac94:	002a      	movs	r2, r5
 800ac96:	0031      	movs	r1, r6
 800ac98:	0020      	movs	r0, r4
 800ac9a:	f7ff ff7f 	bl	800ab9c <L_shift>
 800ac9e:	9b01      	ldr	r3, [sp, #4]
 800aca0:	429c      	cmp	r4, r3
 800aca2:	d936      	bls.n	800ad12 <__hexnan+0x12a>
 800aca4:	001a      	movs	r2, r3
 800aca6:	0023      	movs	r3, r4
 800aca8:	cb02      	ldmia	r3!, {r1}
 800acaa:	c202      	stmia	r2!, {r1}
 800acac:	429f      	cmp	r7, r3
 800acae:	d2fb      	bcs.n	800aca8 <__hexnan+0xc0>
 800acb0:	9b02      	ldr	r3, [sp, #8]
 800acb2:	1c61      	adds	r1, r4, #1
 800acb4:	1eda      	subs	r2, r3, #3
 800acb6:	2304      	movs	r3, #4
 800acb8:	4291      	cmp	r1, r2
 800acba:	d805      	bhi.n	800acc8 <__hexnan+0xe0>
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	3b04      	subs	r3, #4
 800acc0:	1b1b      	subs	r3, r3, r4
 800acc2:	089b      	lsrs	r3, r3, #2
 800acc4:	3301      	adds	r3, #1
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	18d3      	adds	r3, r2, r3
 800accc:	2200      	movs	r2, #0
 800acce:	c304      	stmia	r3!, {r2}
 800acd0:	429f      	cmp	r7, r3
 800acd2:	d2fc      	bcs.n	800acce <__hexnan+0xe6>
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d104      	bne.n	800ace4 <__hexnan+0xfc>
 800acda:	9b01      	ldr	r3, [sp, #4]
 800acdc:	429f      	cmp	r7, r3
 800acde:	d127      	bne.n	800ad30 <__hexnan+0x148>
 800ace0:	2301      	movs	r3, #1
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	2005      	movs	r0, #5
 800ace6:	b00b      	add	sp, #44	@ 0x2c
 800ace8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	3501      	adds	r5, #1
 800acee:	3301      	adds	r3, #1
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	2d08      	cmp	r5, #8
 800acf4:	dd06      	ble.n	800ad04 <__hexnan+0x11c>
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	429c      	cmp	r4, r3
 800acfa:	d9ba      	bls.n	800ac72 <__hexnan+0x8a>
 800acfc:	2300      	movs	r3, #0
 800acfe:	2501      	movs	r5, #1
 800ad00:	3c04      	subs	r4, #4
 800ad02:	6023      	str	r3, [r4, #0]
 800ad04:	220f      	movs	r2, #15
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	4010      	ands	r0, r2
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	4303      	orrs	r3, r0
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	e7af      	b.n	800ac72 <__hexnan+0x8a>
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d0dd      	beq.n	800acd4 <__hexnan+0xec>
 800ad18:	2320      	movs	r3, #32
 800ad1a:	9a06      	ldr	r2, [sp, #24]
 800ad1c:	9902      	ldr	r1, [sp, #8]
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	2201      	movs	r2, #1
 800ad22:	4252      	negs	r2, r2
 800ad24:	40da      	lsrs	r2, r3
 800ad26:	3904      	subs	r1, #4
 800ad28:	680b      	ldr	r3, [r1, #0]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	600b      	str	r3, [r1, #0]
 800ad2e:	e7d1      	b.n	800acd4 <__hexnan+0xec>
 800ad30:	3f04      	subs	r7, #4
 800ad32:	e7cf      	b.n	800acd4 <__hexnan+0xec>
 800ad34:	2004      	movs	r0, #4
 800ad36:	e7d6      	b.n	800ace6 <__hexnan+0xfe>

0800ad38 <__ascii_mbtowc>:
 800ad38:	b082      	sub	sp, #8
 800ad3a:	2900      	cmp	r1, #0
 800ad3c:	d100      	bne.n	800ad40 <__ascii_mbtowc+0x8>
 800ad3e:	a901      	add	r1, sp, #4
 800ad40:	1e10      	subs	r0, r2, #0
 800ad42:	d006      	beq.n	800ad52 <__ascii_mbtowc+0x1a>
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <__ascii_mbtowc+0x1e>
 800ad48:	7813      	ldrb	r3, [r2, #0]
 800ad4a:	600b      	str	r3, [r1, #0]
 800ad4c:	7810      	ldrb	r0, [r2, #0]
 800ad4e:	1e43      	subs	r3, r0, #1
 800ad50:	4198      	sbcs	r0, r3
 800ad52:	b002      	add	sp, #8
 800ad54:	4770      	bx	lr
 800ad56:	2002      	movs	r0, #2
 800ad58:	4240      	negs	r0, r0
 800ad5a:	e7fa      	b.n	800ad52 <__ascii_mbtowc+0x1a>

0800ad5c <_realloc_r>:
 800ad5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad5e:	0006      	movs	r6, r0
 800ad60:	000c      	movs	r4, r1
 800ad62:	0015      	movs	r5, r2
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d105      	bne.n	800ad74 <_realloc_r+0x18>
 800ad68:	0011      	movs	r1, r2
 800ad6a:	f7fd fe0d 	bl	8008988 <_malloc_r>
 800ad6e:	0004      	movs	r4, r0
 800ad70:	0020      	movs	r0, r4
 800ad72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	d103      	bne.n	800ad80 <_realloc_r+0x24>
 800ad78:	f7fd fd90 	bl	800889c <_free_r>
 800ad7c:	2400      	movs	r4, #0
 800ad7e:	e7f7      	b.n	800ad70 <_realloc_r+0x14>
 800ad80:	f000 f83f 	bl	800ae02 <_malloc_usable_size_r>
 800ad84:	0007      	movs	r7, r0
 800ad86:	4285      	cmp	r5, r0
 800ad88:	d802      	bhi.n	800ad90 <_realloc_r+0x34>
 800ad8a:	0843      	lsrs	r3, r0, #1
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	d3ef      	bcc.n	800ad70 <_realloc_r+0x14>
 800ad90:	0029      	movs	r1, r5
 800ad92:	0030      	movs	r0, r6
 800ad94:	f7fd fdf8 	bl	8008988 <_malloc_r>
 800ad98:	9001      	str	r0, [sp, #4]
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d0ee      	beq.n	800ad7c <_realloc_r+0x20>
 800ad9e:	002a      	movs	r2, r5
 800ada0:	42bd      	cmp	r5, r7
 800ada2:	d900      	bls.n	800ada6 <_realloc_r+0x4a>
 800ada4:	003a      	movs	r2, r7
 800ada6:	0021      	movs	r1, r4
 800ada8:	9801      	ldr	r0, [sp, #4]
 800adaa:	f7fc fee7 	bl	8007b7c <memcpy>
 800adae:	0021      	movs	r1, r4
 800adb0:	0030      	movs	r0, r6
 800adb2:	f7fd fd73 	bl	800889c <_free_r>
 800adb6:	9c01      	ldr	r4, [sp, #4]
 800adb8:	e7da      	b.n	800ad70 <_realloc_r+0x14>

0800adba <__ascii_wctomb>:
 800adba:	0003      	movs	r3, r0
 800adbc:	1e08      	subs	r0, r1, #0
 800adbe:	d005      	beq.n	800adcc <__ascii_wctomb+0x12>
 800adc0:	2aff      	cmp	r2, #255	@ 0xff
 800adc2:	d904      	bls.n	800adce <__ascii_wctomb+0x14>
 800adc4:	228a      	movs	r2, #138	@ 0x8a
 800adc6:	2001      	movs	r0, #1
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	4240      	negs	r0, r0
 800adcc:	4770      	bx	lr
 800adce:	2001      	movs	r0, #1
 800add0:	700a      	strb	r2, [r1, #0]
 800add2:	e7fb      	b.n	800adcc <__ascii_wctomb+0x12>

0800add4 <fiprintf>:
 800add4:	b40e      	push	{r1, r2, r3}
 800add6:	b517      	push	{r0, r1, r2, r4, lr}
 800add8:	4c05      	ldr	r4, [pc, #20]	@ (800adf0 <fiprintf+0x1c>)
 800adda:	ab05      	add	r3, sp, #20
 800addc:	cb04      	ldmia	r3!, {r2}
 800adde:	0001      	movs	r1, r0
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	f000 f83c 	bl	800ae60 <_vfiprintf_r>
 800ade8:	bc1e      	pop	{r1, r2, r3, r4}
 800adea:	bc08      	pop	{r3}
 800adec:	b003      	add	sp, #12
 800adee:	4718      	bx	r3
 800adf0:	20000038 	.word	0x20000038

0800adf4 <abort>:
 800adf4:	2006      	movs	r0, #6
 800adf6:	b510      	push	{r4, lr}
 800adf8:	f000 fa18 	bl	800b22c <raise>
 800adfc:	2001      	movs	r0, #1
 800adfe:	f7f8 fb1f 	bl	8003440 <_exit>

0800ae02 <_malloc_usable_size_r>:
 800ae02:	1f0b      	subs	r3, r1, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	1f18      	subs	r0, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	da01      	bge.n	800ae10 <_malloc_usable_size_r+0xe>
 800ae0c:	580b      	ldr	r3, [r1, r0]
 800ae0e:	18c0      	adds	r0, r0, r3
 800ae10:	4770      	bx	lr

0800ae12 <__sfputc_r>:
 800ae12:	6893      	ldr	r3, [r2, #8]
 800ae14:	b510      	push	{r4, lr}
 800ae16:	3b01      	subs	r3, #1
 800ae18:	6093      	str	r3, [r2, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da04      	bge.n	800ae28 <__sfputc_r+0x16>
 800ae1e:	6994      	ldr	r4, [r2, #24]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	db07      	blt.n	800ae34 <__sfputc_r+0x22>
 800ae24:	290a      	cmp	r1, #10
 800ae26:	d005      	beq.n	800ae34 <__sfputc_r+0x22>
 800ae28:	6813      	ldr	r3, [r2, #0]
 800ae2a:	1c58      	adds	r0, r3, #1
 800ae2c:	6010      	str	r0, [r2, #0]
 800ae2e:	7019      	strb	r1, [r3, #0]
 800ae30:	0008      	movs	r0, r1
 800ae32:	bd10      	pop	{r4, pc}
 800ae34:	f000 f930 	bl	800b098 <__swbuf_r>
 800ae38:	0001      	movs	r1, r0
 800ae3a:	e7f9      	b.n	800ae30 <__sfputc_r+0x1e>

0800ae3c <__sfputs_r>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	0006      	movs	r6, r0
 800ae40:	000f      	movs	r7, r1
 800ae42:	0014      	movs	r4, r2
 800ae44:	18d5      	adds	r5, r2, r3
 800ae46:	42ac      	cmp	r4, r5
 800ae48:	d101      	bne.n	800ae4e <__sfputs_r+0x12>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e007      	b.n	800ae5e <__sfputs_r+0x22>
 800ae4e:	7821      	ldrb	r1, [r4, #0]
 800ae50:	003a      	movs	r2, r7
 800ae52:	0030      	movs	r0, r6
 800ae54:	f7ff ffdd 	bl	800ae12 <__sfputc_r>
 800ae58:	3401      	adds	r4, #1
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d1f3      	bne.n	800ae46 <__sfputs_r+0xa>
 800ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae60 <_vfiprintf_r>:
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	b0a1      	sub	sp, #132	@ 0x84
 800ae64:	000f      	movs	r7, r1
 800ae66:	0015      	movs	r5, r2
 800ae68:	001e      	movs	r6, r3
 800ae6a:	9003      	str	r0, [sp, #12]
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d004      	beq.n	800ae7a <_vfiprintf_r+0x1a>
 800ae70:	6a03      	ldr	r3, [r0, #32]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <_vfiprintf_r+0x1a>
 800ae76:	f7fc fd07 	bl	8007888 <__sinit>
 800ae7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae7c:	07db      	lsls	r3, r3, #31
 800ae7e:	d405      	bmi.n	800ae8c <_vfiprintf_r+0x2c>
 800ae80:	89bb      	ldrh	r3, [r7, #12]
 800ae82:	059b      	lsls	r3, r3, #22
 800ae84:	d402      	bmi.n	800ae8c <_vfiprintf_r+0x2c>
 800ae86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ae88:	f7fc fe6b 	bl	8007b62 <__retarget_lock_acquire_recursive>
 800ae8c:	89bb      	ldrh	r3, [r7, #12]
 800ae8e:	071b      	lsls	r3, r3, #28
 800ae90:	d502      	bpl.n	800ae98 <_vfiprintf_r+0x38>
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d113      	bne.n	800aec0 <_vfiprintf_r+0x60>
 800ae98:	0039      	movs	r1, r7
 800ae9a:	9803      	ldr	r0, [sp, #12]
 800ae9c:	f000 f93e 	bl	800b11c <__swsetup_r>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d00d      	beq.n	800aec0 <_vfiprintf_r+0x60>
 800aea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aea6:	07db      	lsls	r3, r3, #31
 800aea8:	d503      	bpl.n	800aeb2 <_vfiprintf_r+0x52>
 800aeaa:	2001      	movs	r0, #1
 800aeac:	4240      	negs	r0, r0
 800aeae:	b021      	add	sp, #132	@ 0x84
 800aeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb2:	89bb      	ldrh	r3, [r7, #12]
 800aeb4:	059b      	lsls	r3, r3, #22
 800aeb6:	d4f8      	bmi.n	800aeaa <_vfiprintf_r+0x4a>
 800aeb8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aeba:	f7fc fe53 	bl	8007b64 <__retarget_lock_release_recursive>
 800aebe:	e7f4      	b.n	800aeaa <_vfiprintf_r+0x4a>
 800aec0:	2300      	movs	r3, #0
 800aec2:	ac08      	add	r4, sp, #32
 800aec4:	6163      	str	r3, [r4, #20]
 800aec6:	3320      	adds	r3, #32
 800aec8:	7663      	strb	r3, [r4, #25]
 800aeca:	3310      	adds	r3, #16
 800aecc:	76a3      	strb	r3, [r4, #26]
 800aece:	9607      	str	r6, [sp, #28]
 800aed0:	002e      	movs	r6, r5
 800aed2:	7833      	ldrb	r3, [r6, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <_vfiprintf_r+0x7c>
 800aed8:	2b25      	cmp	r3, #37	@ 0x25
 800aeda:	d148      	bne.n	800af6e <_vfiprintf_r+0x10e>
 800aedc:	1b73      	subs	r3, r6, r5
 800aede:	9305      	str	r3, [sp, #20]
 800aee0:	42ae      	cmp	r6, r5
 800aee2:	d00b      	beq.n	800aefc <_vfiprintf_r+0x9c>
 800aee4:	002a      	movs	r2, r5
 800aee6:	0039      	movs	r1, r7
 800aee8:	9803      	ldr	r0, [sp, #12]
 800aeea:	f7ff ffa7 	bl	800ae3c <__sfputs_r>
 800aeee:	3001      	adds	r0, #1
 800aef0:	d100      	bne.n	800aef4 <_vfiprintf_r+0x94>
 800aef2:	e0ae      	b.n	800b052 <_vfiprintf_r+0x1f2>
 800aef4:	6963      	ldr	r3, [r4, #20]
 800aef6:	9a05      	ldr	r2, [sp, #20]
 800aef8:	189b      	adds	r3, r3, r2
 800aefa:	6163      	str	r3, [r4, #20]
 800aefc:	7833      	ldrb	r3, [r6, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d100      	bne.n	800af04 <_vfiprintf_r+0xa4>
 800af02:	e0a6      	b.n	800b052 <_vfiprintf_r+0x1f2>
 800af04:	2201      	movs	r2, #1
 800af06:	2300      	movs	r3, #0
 800af08:	4252      	negs	r2, r2
 800af0a:	6062      	str	r2, [r4, #4]
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	3254      	adds	r2, #84	@ 0x54
 800af10:	1852      	adds	r2, r2, r1
 800af12:	1c75      	adds	r5, r6, #1
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	60e3      	str	r3, [r4, #12]
 800af18:	60a3      	str	r3, [r4, #8]
 800af1a:	7013      	strb	r3, [r2, #0]
 800af1c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800af1e:	4b59      	ldr	r3, [pc, #356]	@ (800b084 <_vfiprintf_r+0x224>)
 800af20:	2205      	movs	r2, #5
 800af22:	0018      	movs	r0, r3
 800af24:	7829      	ldrb	r1, [r5, #0]
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	f7fc fe1d 	bl	8007b66 <memchr>
 800af2c:	1c6e      	adds	r6, r5, #1
 800af2e:	2800      	cmp	r0, #0
 800af30:	d11f      	bne.n	800af72 <_vfiprintf_r+0x112>
 800af32:	6822      	ldr	r2, [r4, #0]
 800af34:	06d3      	lsls	r3, r2, #27
 800af36:	d504      	bpl.n	800af42 <_vfiprintf_r+0xe2>
 800af38:	2353      	movs	r3, #83	@ 0x53
 800af3a:	a904      	add	r1, sp, #16
 800af3c:	185b      	adds	r3, r3, r1
 800af3e:	2120      	movs	r1, #32
 800af40:	7019      	strb	r1, [r3, #0]
 800af42:	0713      	lsls	r3, r2, #28
 800af44:	d504      	bpl.n	800af50 <_vfiprintf_r+0xf0>
 800af46:	2353      	movs	r3, #83	@ 0x53
 800af48:	a904      	add	r1, sp, #16
 800af4a:	185b      	adds	r3, r3, r1
 800af4c:	212b      	movs	r1, #43	@ 0x2b
 800af4e:	7019      	strb	r1, [r3, #0]
 800af50:	782b      	ldrb	r3, [r5, #0]
 800af52:	2b2a      	cmp	r3, #42	@ 0x2a
 800af54:	d016      	beq.n	800af84 <_vfiprintf_r+0x124>
 800af56:	002e      	movs	r6, r5
 800af58:	2100      	movs	r1, #0
 800af5a:	200a      	movs	r0, #10
 800af5c:	68e3      	ldr	r3, [r4, #12]
 800af5e:	7832      	ldrb	r2, [r6, #0]
 800af60:	1c75      	adds	r5, r6, #1
 800af62:	3a30      	subs	r2, #48	@ 0x30
 800af64:	2a09      	cmp	r2, #9
 800af66:	d950      	bls.n	800b00a <_vfiprintf_r+0x1aa>
 800af68:	2900      	cmp	r1, #0
 800af6a:	d111      	bne.n	800af90 <_vfiprintf_r+0x130>
 800af6c:	e017      	b.n	800af9e <_vfiprintf_r+0x13e>
 800af6e:	3601      	adds	r6, #1
 800af70:	e7af      	b.n	800aed2 <_vfiprintf_r+0x72>
 800af72:	9b05      	ldr	r3, [sp, #20]
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	1ac0      	subs	r0, r0, r3
 800af78:	2301      	movs	r3, #1
 800af7a:	4083      	lsls	r3, r0
 800af7c:	4313      	orrs	r3, r2
 800af7e:	0035      	movs	r5, r6
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	e7cc      	b.n	800af1e <_vfiprintf_r+0xbe>
 800af84:	9b07      	ldr	r3, [sp, #28]
 800af86:	1d19      	adds	r1, r3, #4
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	9107      	str	r1, [sp, #28]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	db01      	blt.n	800af94 <_vfiprintf_r+0x134>
 800af90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af92:	e004      	b.n	800af9e <_vfiprintf_r+0x13e>
 800af94:	425b      	negs	r3, r3
 800af96:	60e3      	str	r3, [r4, #12]
 800af98:	2302      	movs	r3, #2
 800af9a:	4313      	orrs	r3, r2
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	7833      	ldrb	r3, [r6, #0]
 800afa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800afa2:	d10c      	bne.n	800afbe <_vfiprintf_r+0x15e>
 800afa4:	7873      	ldrb	r3, [r6, #1]
 800afa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa8:	d134      	bne.n	800b014 <_vfiprintf_r+0x1b4>
 800afaa:	9b07      	ldr	r3, [sp, #28]
 800afac:	3602      	adds	r6, #2
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	9207      	str	r2, [sp, #28]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da01      	bge.n	800afbc <_vfiprintf_r+0x15c>
 800afb8:	2301      	movs	r3, #1
 800afba:	425b      	negs	r3, r3
 800afbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afbe:	4d32      	ldr	r5, [pc, #200]	@ (800b088 <_vfiprintf_r+0x228>)
 800afc0:	2203      	movs	r2, #3
 800afc2:	0028      	movs	r0, r5
 800afc4:	7831      	ldrb	r1, [r6, #0]
 800afc6:	f7fc fdce 	bl	8007b66 <memchr>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d006      	beq.n	800afdc <_vfiprintf_r+0x17c>
 800afce:	2340      	movs	r3, #64	@ 0x40
 800afd0:	1b40      	subs	r0, r0, r5
 800afd2:	4083      	lsls	r3, r0
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	3601      	adds	r6, #1
 800afd8:	4313      	orrs	r3, r2
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	7831      	ldrb	r1, [r6, #0]
 800afde:	2206      	movs	r2, #6
 800afe0:	482a      	ldr	r0, [pc, #168]	@ (800b08c <_vfiprintf_r+0x22c>)
 800afe2:	1c75      	adds	r5, r6, #1
 800afe4:	7621      	strb	r1, [r4, #24]
 800afe6:	f7fc fdbe 	bl	8007b66 <memchr>
 800afea:	2800      	cmp	r0, #0
 800afec:	d040      	beq.n	800b070 <_vfiprintf_r+0x210>
 800afee:	4b28      	ldr	r3, [pc, #160]	@ (800b090 <_vfiprintf_r+0x230>)
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d122      	bne.n	800b03a <_vfiprintf_r+0x1da>
 800aff4:	2207      	movs	r2, #7
 800aff6:	9b07      	ldr	r3, [sp, #28]
 800aff8:	3307      	adds	r3, #7
 800affa:	4393      	bics	r3, r2
 800affc:	3308      	adds	r3, #8
 800affe:	9307      	str	r3, [sp, #28]
 800b000:	6963      	ldr	r3, [r4, #20]
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	189b      	adds	r3, r3, r2
 800b006:	6163      	str	r3, [r4, #20]
 800b008:	e762      	b.n	800aed0 <_vfiprintf_r+0x70>
 800b00a:	4343      	muls	r3, r0
 800b00c:	002e      	movs	r6, r5
 800b00e:	2101      	movs	r1, #1
 800b010:	189b      	adds	r3, r3, r2
 800b012:	e7a4      	b.n	800af5e <_vfiprintf_r+0xfe>
 800b014:	2300      	movs	r3, #0
 800b016:	200a      	movs	r0, #10
 800b018:	0019      	movs	r1, r3
 800b01a:	3601      	adds	r6, #1
 800b01c:	6063      	str	r3, [r4, #4]
 800b01e:	7832      	ldrb	r2, [r6, #0]
 800b020:	1c75      	adds	r5, r6, #1
 800b022:	3a30      	subs	r2, #48	@ 0x30
 800b024:	2a09      	cmp	r2, #9
 800b026:	d903      	bls.n	800b030 <_vfiprintf_r+0x1d0>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d0c8      	beq.n	800afbe <_vfiprintf_r+0x15e>
 800b02c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b02e:	e7c6      	b.n	800afbe <_vfiprintf_r+0x15e>
 800b030:	4341      	muls	r1, r0
 800b032:	002e      	movs	r6, r5
 800b034:	2301      	movs	r3, #1
 800b036:	1889      	adds	r1, r1, r2
 800b038:	e7f1      	b.n	800b01e <_vfiprintf_r+0x1be>
 800b03a:	aa07      	add	r2, sp, #28
 800b03c:	9200      	str	r2, [sp, #0]
 800b03e:	0021      	movs	r1, r4
 800b040:	003a      	movs	r2, r7
 800b042:	4b14      	ldr	r3, [pc, #80]	@ (800b094 <_vfiprintf_r+0x234>)
 800b044:	9803      	ldr	r0, [sp, #12]
 800b046:	f7fb fdc5 	bl	8006bd4 <_printf_float>
 800b04a:	9004      	str	r0, [sp, #16]
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	3301      	adds	r3, #1
 800b050:	d1d6      	bne.n	800b000 <_vfiprintf_r+0x1a0>
 800b052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b054:	07db      	lsls	r3, r3, #31
 800b056:	d405      	bmi.n	800b064 <_vfiprintf_r+0x204>
 800b058:	89bb      	ldrh	r3, [r7, #12]
 800b05a:	059b      	lsls	r3, r3, #22
 800b05c:	d402      	bmi.n	800b064 <_vfiprintf_r+0x204>
 800b05e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b060:	f7fc fd80 	bl	8007b64 <__retarget_lock_release_recursive>
 800b064:	89bb      	ldrh	r3, [r7, #12]
 800b066:	065b      	lsls	r3, r3, #25
 800b068:	d500      	bpl.n	800b06c <_vfiprintf_r+0x20c>
 800b06a:	e71e      	b.n	800aeaa <_vfiprintf_r+0x4a>
 800b06c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b06e:	e71e      	b.n	800aeae <_vfiprintf_r+0x4e>
 800b070:	aa07      	add	r2, sp, #28
 800b072:	9200      	str	r2, [sp, #0]
 800b074:	0021      	movs	r1, r4
 800b076:	003a      	movs	r2, r7
 800b078:	4b06      	ldr	r3, [pc, #24]	@ (800b094 <_vfiprintf_r+0x234>)
 800b07a:	9803      	ldr	r0, [sp, #12]
 800b07c:	f7fc f858 	bl	8007130 <_printf_i>
 800b080:	e7e3      	b.n	800b04a <_vfiprintf_r+0x1ea>
 800b082:	46c0      	nop			@ (mov r8, r8)
 800b084:	0800d0a1 	.word	0x0800d0a1
 800b088:	0800d0a7 	.word	0x0800d0a7
 800b08c:	0800d0ab 	.word	0x0800d0ab
 800b090:	08006bd5 	.word	0x08006bd5
 800b094:	0800ae3d 	.word	0x0800ae3d

0800b098 <__swbuf_r>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	0006      	movs	r6, r0
 800b09c:	000d      	movs	r5, r1
 800b09e:	0014      	movs	r4, r2
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d004      	beq.n	800b0ae <__swbuf_r+0x16>
 800b0a4:	6a03      	ldr	r3, [r0, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <__swbuf_r+0x16>
 800b0aa:	f7fc fbed 	bl	8007888 <__sinit>
 800b0ae:	69a3      	ldr	r3, [r4, #24]
 800b0b0:	60a3      	str	r3, [r4, #8]
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	071b      	lsls	r3, r3, #28
 800b0b6:	d502      	bpl.n	800b0be <__swbuf_r+0x26>
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d109      	bne.n	800b0d2 <__swbuf_r+0x3a>
 800b0be:	0021      	movs	r1, r4
 800b0c0:	0030      	movs	r0, r6
 800b0c2:	f000 f82b 	bl	800b11c <__swsetup_r>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d003      	beq.n	800b0d2 <__swbuf_r+0x3a>
 800b0ca:	2501      	movs	r5, #1
 800b0cc:	426d      	negs	r5, r5
 800b0ce:	0028      	movs	r0, r5
 800b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	b2ef      	uxtb	r7, r5
 800b0d8:	1ac0      	subs	r0, r0, r3
 800b0da:	6963      	ldr	r3, [r4, #20]
 800b0dc:	b2ed      	uxtb	r5, r5
 800b0de:	4283      	cmp	r3, r0
 800b0e0:	dc05      	bgt.n	800b0ee <__swbuf_r+0x56>
 800b0e2:	0021      	movs	r1, r4
 800b0e4:	0030      	movs	r0, r6
 800b0e6:	f7ff fa2d 	bl	800a544 <_fflush_r>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d1ed      	bne.n	800b0ca <__swbuf_r+0x32>
 800b0ee:	68a3      	ldr	r3, [r4, #8]
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	60a3      	str	r3, [r4, #8]
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	6022      	str	r2, [r4, #0]
 800b0fc:	701f      	strb	r7, [r3, #0]
 800b0fe:	6963      	ldr	r3, [r4, #20]
 800b100:	4283      	cmp	r3, r0
 800b102:	d004      	beq.n	800b10e <__swbuf_r+0x76>
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	07db      	lsls	r3, r3, #31
 800b108:	d5e1      	bpl.n	800b0ce <__swbuf_r+0x36>
 800b10a:	2d0a      	cmp	r5, #10
 800b10c:	d1df      	bne.n	800b0ce <__swbuf_r+0x36>
 800b10e:	0021      	movs	r1, r4
 800b110:	0030      	movs	r0, r6
 800b112:	f7ff fa17 	bl	800a544 <_fflush_r>
 800b116:	2800      	cmp	r0, #0
 800b118:	d0d9      	beq.n	800b0ce <__swbuf_r+0x36>
 800b11a:	e7d6      	b.n	800b0ca <__swbuf_r+0x32>

0800b11c <__swsetup_r>:
 800b11c:	4b2d      	ldr	r3, [pc, #180]	@ (800b1d4 <__swsetup_r+0xb8>)
 800b11e:	b570      	push	{r4, r5, r6, lr}
 800b120:	0005      	movs	r5, r0
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	000c      	movs	r4, r1
 800b126:	2800      	cmp	r0, #0
 800b128:	d004      	beq.n	800b134 <__swsetup_r+0x18>
 800b12a:	6a03      	ldr	r3, [r0, #32]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <__swsetup_r+0x18>
 800b130:	f7fc fbaa 	bl	8007888 <__sinit>
 800b134:	230c      	movs	r3, #12
 800b136:	5ee2      	ldrsh	r2, [r4, r3]
 800b138:	0713      	lsls	r3, r2, #28
 800b13a:	d423      	bmi.n	800b184 <__swsetup_r+0x68>
 800b13c:	06d3      	lsls	r3, r2, #27
 800b13e:	d407      	bmi.n	800b150 <__swsetup_r+0x34>
 800b140:	2309      	movs	r3, #9
 800b142:	602b      	str	r3, [r5, #0]
 800b144:	2340      	movs	r3, #64	@ 0x40
 800b146:	2001      	movs	r0, #1
 800b148:	4313      	orrs	r3, r2
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	4240      	negs	r0, r0
 800b14e:	e03a      	b.n	800b1c6 <__swsetup_r+0xaa>
 800b150:	0752      	lsls	r2, r2, #29
 800b152:	d513      	bpl.n	800b17c <__swsetup_r+0x60>
 800b154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b156:	2900      	cmp	r1, #0
 800b158:	d008      	beq.n	800b16c <__swsetup_r+0x50>
 800b15a:	0023      	movs	r3, r4
 800b15c:	3344      	adds	r3, #68	@ 0x44
 800b15e:	4299      	cmp	r1, r3
 800b160:	d002      	beq.n	800b168 <__swsetup_r+0x4c>
 800b162:	0028      	movs	r0, r5
 800b164:	f7fd fb9a 	bl	800889c <_free_r>
 800b168:	2300      	movs	r3, #0
 800b16a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b16c:	2224      	movs	r2, #36	@ 0x24
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	4393      	bics	r3, r2
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	2300      	movs	r3, #0
 800b176:	6063      	str	r3, [r4, #4]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	2308      	movs	r3, #8
 800b17e:	89a2      	ldrh	r2, [r4, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	81a3      	strh	r3, [r4, #12]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <__swsetup_r+0x86>
 800b18a:	21a0      	movs	r1, #160	@ 0xa0
 800b18c:	2280      	movs	r2, #128	@ 0x80
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	0089      	lsls	r1, r1, #2
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	400b      	ands	r3, r1
 800b196:	4293      	cmp	r3, r2
 800b198:	d003      	beq.n	800b1a2 <__swsetup_r+0x86>
 800b19a:	0021      	movs	r1, r4
 800b19c:	0028      	movs	r0, r5
 800b19e:	f000 f88f 	bl	800b2c0 <__smakebuf_r>
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	5ee2      	ldrsh	r2, [r4, r3]
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	0013      	movs	r3, r2
 800b1aa:	400b      	ands	r3, r1
 800b1ac:	420a      	tst	r2, r1
 800b1ae:	d00b      	beq.n	800b1c8 <__swsetup_r+0xac>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	60a3      	str	r3, [r4, #8]
 800b1b4:	6963      	ldr	r3, [r4, #20]
 800b1b6:	425b      	negs	r3, r3
 800b1b8:	61a3      	str	r3, [r4, #24]
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	d101      	bne.n	800b1c6 <__swsetup_r+0xaa>
 800b1c2:	0613      	lsls	r3, r2, #24
 800b1c4:	d4be      	bmi.n	800b144 <__swsetup_r+0x28>
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	0791      	lsls	r1, r2, #30
 800b1ca:	d400      	bmi.n	800b1ce <__swsetup_r+0xb2>
 800b1cc:	6963      	ldr	r3, [r4, #20]
 800b1ce:	60a3      	str	r3, [r4, #8]
 800b1d0:	e7f3      	b.n	800b1ba <__swsetup_r+0x9e>
 800b1d2:	46c0      	nop			@ (mov r8, r8)
 800b1d4:	20000038 	.word	0x20000038

0800b1d8 <_raise_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	0004      	movs	r4, r0
 800b1dc:	000d      	movs	r5, r1
 800b1de:	291f      	cmp	r1, #31
 800b1e0:	d904      	bls.n	800b1ec <_raise_r+0x14>
 800b1e2:	2316      	movs	r3, #22
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	4240      	negs	r0, r0
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}
 800b1ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <_raise_r+0x24>
 800b1f2:	008a      	lsls	r2, r1, #2
 800b1f4:	189b      	adds	r3, r3, r2
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	2a00      	cmp	r2, #0
 800b1fa:	d108      	bne.n	800b20e <_raise_r+0x36>
 800b1fc:	0020      	movs	r0, r4
 800b1fe:	f000 f831 	bl	800b264 <_getpid_r>
 800b202:	002a      	movs	r2, r5
 800b204:	0001      	movs	r1, r0
 800b206:	0020      	movs	r0, r4
 800b208:	f000 f81a 	bl	800b240 <_kill_r>
 800b20c:	e7ed      	b.n	800b1ea <_raise_r+0x12>
 800b20e:	2a01      	cmp	r2, #1
 800b210:	d009      	beq.n	800b226 <_raise_r+0x4e>
 800b212:	1c51      	adds	r1, r2, #1
 800b214:	d103      	bne.n	800b21e <_raise_r+0x46>
 800b216:	2316      	movs	r3, #22
 800b218:	6003      	str	r3, [r0, #0]
 800b21a:	2001      	movs	r0, #1
 800b21c:	e7e5      	b.n	800b1ea <_raise_r+0x12>
 800b21e:	2100      	movs	r1, #0
 800b220:	0028      	movs	r0, r5
 800b222:	6019      	str	r1, [r3, #0]
 800b224:	4790      	blx	r2
 800b226:	2000      	movs	r0, #0
 800b228:	e7df      	b.n	800b1ea <_raise_r+0x12>
	...

0800b22c <raise>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4b03      	ldr	r3, [pc, #12]	@ (800b23c <raise+0x10>)
 800b230:	0001      	movs	r1, r0
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	f7ff ffd0 	bl	800b1d8 <_raise_r>
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	46c0      	nop			@ (mov r8, r8)
 800b23c:	20000038 	.word	0x20000038

0800b240 <_kill_r>:
 800b240:	2300      	movs	r3, #0
 800b242:	b570      	push	{r4, r5, r6, lr}
 800b244:	4d06      	ldr	r5, [pc, #24]	@ (800b260 <_kill_r+0x20>)
 800b246:	0004      	movs	r4, r0
 800b248:	0008      	movs	r0, r1
 800b24a:	0011      	movs	r1, r2
 800b24c:	602b      	str	r3, [r5, #0]
 800b24e:	f7f8 f8e7 	bl	8003420 <_kill>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	d103      	bne.n	800b25e <_kill_r+0x1e>
 800b256:	682b      	ldr	r3, [r5, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d000      	beq.n	800b25e <_kill_r+0x1e>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	20000920 	.word	0x20000920

0800b264 <_getpid_r>:
 800b264:	b510      	push	{r4, lr}
 800b266:	f7f8 f8d5 	bl	8003414 <_getpid>
 800b26a:	bd10      	pop	{r4, pc}

0800b26c <__swhatbuf_r>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	000e      	movs	r6, r1
 800b270:	001d      	movs	r5, r3
 800b272:	230e      	movs	r3, #14
 800b274:	5ec9      	ldrsh	r1, [r1, r3]
 800b276:	0014      	movs	r4, r2
 800b278:	b096      	sub	sp, #88	@ 0x58
 800b27a:	2900      	cmp	r1, #0
 800b27c:	da0c      	bge.n	800b298 <__swhatbuf_r+0x2c>
 800b27e:	89b2      	ldrh	r2, [r6, #12]
 800b280:	2380      	movs	r3, #128	@ 0x80
 800b282:	0011      	movs	r1, r2
 800b284:	4019      	ands	r1, r3
 800b286:	421a      	tst	r2, r3
 800b288:	d114      	bne.n	800b2b4 <__swhatbuf_r+0x48>
 800b28a:	2380      	movs	r3, #128	@ 0x80
 800b28c:	00db      	lsls	r3, r3, #3
 800b28e:	2000      	movs	r0, #0
 800b290:	6029      	str	r1, [r5, #0]
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	b016      	add	sp, #88	@ 0x58
 800b296:	bd70      	pop	{r4, r5, r6, pc}
 800b298:	466a      	mov	r2, sp
 800b29a:	f000 f853 	bl	800b344 <_fstat_r>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	dbed      	blt.n	800b27e <__swhatbuf_r+0x12>
 800b2a2:	23f0      	movs	r3, #240	@ 0xf0
 800b2a4:	9901      	ldr	r1, [sp, #4]
 800b2a6:	021b      	lsls	r3, r3, #8
 800b2a8:	4019      	ands	r1, r3
 800b2aa:	4b04      	ldr	r3, [pc, #16]	@ (800b2bc <__swhatbuf_r+0x50>)
 800b2ac:	18c9      	adds	r1, r1, r3
 800b2ae:	424b      	negs	r3, r1
 800b2b0:	4159      	adcs	r1, r3
 800b2b2:	e7ea      	b.n	800b28a <__swhatbuf_r+0x1e>
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	2340      	movs	r3, #64	@ 0x40
 800b2b8:	e7e9      	b.n	800b28e <__swhatbuf_r+0x22>
 800b2ba:	46c0      	nop			@ (mov r8, r8)
 800b2bc:	ffffe000 	.word	0xffffe000

0800b2c0 <__smakebuf_r>:
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	2602      	movs	r6, #2
 800b2c4:	898b      	ldrh	r3, [r1, #12]
 800b2c6:	0005      	movs	r5, r0
 800b2c8:	000c      	movs	r4, r1
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	4233      	tst	r3, r6
 800b2ce:	d007      	beq.n	800b2e0 <__smakebuf_r+0x20>
 800b2d0:	0023      	movs	r3, r4
 800b2d2:	3347      	adds	r3, #71	@ 0x47
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	6123      	str	r3, [r4, #16]
 800b2d8:	2301      	movs	r3, #1
 800b2da:	6163      	str	r3, [r4, #20]
 800b2dc:	b005      	add	sp, #20
 800b2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2e0:	ab03      	add	r3, sp, #12
 800b2e2:	aa02      	add	r2, sp, #8
 800b2e4:	f7ff ffc2 	bl	800b26c <__swhatbuf_r>
 800b2e8:	9f02      	ldr	r7, [sp, #8]
 800b2ea:	9001      	str	r0, [sp, #4]
 800b2ec:	0039      	movs	r1, r7
 800b2ee:	0028      	movs	r0, r5
 800b2f0:	f7fd fb4a 	bl	8008988 <_malloc_r>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d108      	bne.n	800b30a <__smakebuf_r+0x4a>
 800b2f8:	220c      	movs	r2, #12
 800b2fa:	5ea3      	ldrsh	r3, [r4, r2]
 800b2fc:	059a      	lsls	r2, r3, #22
 800b2fe:	d4ed      	bmi.n	800b2dc <__smakebuf_r+0x1c>
 800b300:	2203      	movs	r2, #3
 800b302:	4393      	bics	r3, r2
 800b304:	431e      	orrs	r6, r3
 800b306:	81a6      	strh	r6, [r4, #12]
 800b308:	e7e2      	b.n	800b2d0 <__smakebuf_r+0x10>
 800b30a:	2380      	movs	r3, #128	@ 0x80
 800b30c:	89a2      	ldrh	r2, [r4, #12]
 800b30e:	6020      	str	r0, [r4, #0]
 800b310:	4313      	orrs	r3, r2
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	6120      	str	r0, [r4, #16]
 800b318:	6167      	str	r7, [r4, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00c      	beq.n	800b338 <__smakebuf_r+0x78>
 800b31e:	0028      	movs	r0, r5
 800b320:	230e      	movs	r3, #14
 800b322:	5ee1      	ldrsh	r1, [r4, r3]
 800b324:	f000 f820 	bl	800b368 <_isatty_r>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d005      	beq.n	800b338 <__smakebuf_r+0x78>
 800b32c:	2303      	movs	r3, #3
 800b32e:	89a2      	ldrh	r2, [r4, #12]
 800b330:	439a      	bics	r2, r3
 800b332:	3b02      	subs	r3, #2
 800b334:	4313      	orrs	r3, r2
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	9a01      	ldr	r2, [sp, #4]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	e7cc      	b.n	800b2dc <__smakebuf_r+0x1c>
	...

0800b344 <_fstat_r>:
 800b344:	2300      	movs	r3, #0
 800b346:	b570      	push	{r4, r5, r6, lr}
 800b348:	4d06      	ldr	r5, [pc, #24]	@ (800b364 <_fstat_r+0x20>)
 800b34a:	0004      	movs	r4, r0
 800b34c:	0008      	movs	r0, r1
 800b34e:	0011      	movs	r1, r2
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	f7f8 f8c5 	bl	80034e0 <_fstat>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	d103      	bne.n	800b362 <_fstat_r+0x1e>
 800b35a:	682b      	ldr	r3, [r5, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d000      	beq.n	800b362 <_fstat_r+0x1e>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	20000920 	.word	0x20000920

0800b368 <_isatty_r>:
 800b368:	2300      	movs	r3, #0
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	4d06      	ldr	r5, [pc, #24]	@ (800b388 <_isatty_r+0x20>)
 800b36e:	0004      	movs	r4, r0
 800b370:	0008      	movs	r0, r1
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	f7f8 f8c2 	bl	80034fc <_isatty>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d103      	bne.n	800b384 <_isatty_r+0x1c>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d000      	beq.n	800b384 <_isatty_r+0x1c>
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	bd70      	pop	{r4, r5, r6, pc}
 800b386:	46c0      	nop			@ (mov r8, r8)
 800b388:	20000920 	.word	0x20000920

0800b38c <log>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	0004      	movs	r4, r0
 800b390:	000d      	movs	r5, r1
 800b392:	f000 f831 	bl	800b3f8 <__ieee754_log>
 800b396:	0022      	movs	r2, r4
 800b398:	0006      	movs	r6, r0
 800b39a:	000f      	movs	r7, r1
 800b39c:	002b      	movs	r3, r5
 800b39e:	0020      	movs	r0, r4
 800b3a0:	0029      	movs	r1, r5
 800b3a2:	f7f6 fef7 	bl	8002194 <__aeabi_dcmpun>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d115      	bne.n	800b3d6 <log+0x4a>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	0020      	movs	r0, r4
 800b3b0:	0029      	movs	r1, r5
 800b3b2:	f7f5 f861 	bl	8000478 <__aeabi_dcmpgt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d10d      	bne.n	800b3d6 <log+0x4a>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2300      	movs	r3, #0
 800b3be:	0020      	movs	r0, r4
 800b3c0:	0029      	movs	r1, r5
 800b3c2:	f7f5 f83f 	bl	8000444 <__aeabi_dcmpeq>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d008      	beq.n	800b3dc <log+0x50>
 800b3ca:	f7fc fb9f 	bl	8007b0c <__errno>
 800b3ce:	2322      	movs	r3, #34	@ 0x22
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	4f07      	ldr	r7, [pc, #28]	@ (800b3f0 <log+0x64>)
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	0030      	movs	r0, r6
 800b3d8:	0039      	movs	r1, r7
 800b3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3dc:	f7fc fb96 	bl	8007b0c <__errno>
 800b3e0:	2321      	movs	r3, #33	@ 0x21
 800b3e2:	6003      	str	r3, [r0, #0]
 800b3e4:	4803      	ldr	r0, [pc, #12]	@ (800b3f4 <log+0x68>)
 800b3e6:	f7ff f8fb 	bl	800a5e0 <nan>
 800b3ea:	0006      	movs	r6, r0
 800b3ec:	000f      	movs	r7, r1
 800b3ee:	e7f2      	b.n	800b3d6 <log+0x4a>
 800b3f0:	fff00000 	.word	0xfff00000
 800b3f4:	0800d0f5 	.word	0x0800d0f5

0800b3f8 <__ieee754_log>:
 800b3f8:	2380      	movs	r3, #128	@ 0x80
 800b3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fc:	035b      	lsls	r3, r3, #13
 800b3fe:	000e      	movs	r6, r1
 800b400:	b08d      	sub	sp, #52	@ 0x34
 800b402:	4299      	cmp	r1, r3
 800b404:	da23      	bge.n	800b44e <__ieee754_log+0x56>
 800b406:	004b      	lsls	r3, r1, #1
 800b408:	085b      	lsrs	r3, r3, #1
 800b40a:	4303      	orrs	r3, r0
 800b40c:	d107      	bne.n	800b41e <__ieee754_log+0x26>
 800b40e:	2200      	movs	r2, #0
 800b410:	2300      	movs	r3, #0
 800b412:	2000      	movs	r0, #0
 800b414:	49b4      	ldr	r1, [pc, #720]	@ (800b6e8 <__ieee754_log+0x2f0>)
 800b416:	f7f5 fc15 	bl	8000c44 <__aeabi_ddiv>
 800b41a:	b00d      	add	sp, #52	@ 0x34
 800b41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b41e:	2900      	cmp	r1, #0
 800b420:	da06      	bge.n	800b430 <__ieee754_log+0x38>
 800b422:	0002      	movs	r2, r0
 800b424:	000b      	movs	r3, r1
 800b426:	f7f6 fb19 	bl	8001a5c <__aeabi_dsub>
 800b42a:	2200      	movs	r2, #0
 800b42c:	2300      	movs	r3, #0
 800b42e:	e7f2      	b.n	800b416 <__ieee754_log+0x1e>
 800b430:	4bae      	ldr	r3, [pc, #696]	@ (800b6ec <__ieee754_log+0x2f4>)
 800b432:	2200      	movs	r2, #0
 800b434:	f7f6 f84a 	bl	80014cc <__aeabi_dmul>
 800b438:	2336      	movs	r3, #54	@ 0x36
 800b43a:	000e      	movs	r6, r1
 800b43c:	425b      	negs	r3, r3
 800b43e:	4aac      	ldr	r2, [pc, #688]	@ (800b6f0 <__ieee754_log+0x2f8>)
 800b440:	4296      	cmp	r6, r2
 800b442:	dd06      	ble.n	800b452 <__ieee754_log+0x5a>
 800b444:	0002      	movs	r2, r0
 800b446:	000b      	movs	r3, r1
 800b448:	f7f5 f898 	bl	800057c <__aeabi_dadd>
 800b44c:	e7e5      	b.n	800b41a <__ieee754_log+0x22>
 800b44e:	2300      	movs	r3, #0
 800b450:	e7f5      	b.n	800b43e <__ieee754_log+0x46>
 800b452:	4ca8      	ldr	r4, [pc, #672]	@ (800b6f4 <__ieee754_log+0x2fc>)
 800b454:	1532      	asrs	r2, r6, #20
 800b456:	1912      	adds	r2, r2, r4
 800b458:	0336      	lsls	r6, r6, #12
 800b45a:	4ca7      	ldr	r4, [pc, #668]	@ (800b6f8 <__ieee754_log+0x300>)
 800b45c:	18d2      	adds	r2, r2, r3
 800b45e:	0b33      	lsrs	r3, r6, #12
 800b460:	9302      	str	r3, [sp, #8]
 800b462:	191b      	adds	r3, r3, r4
 800b464:	2480      	movs	r4, #128	@ 0x80
 800b466:	0364      	lsls	r4, r4, #13
 800b468:	4023      	ands	r3, r4
 800b46a:	4ca4      	ldr	r4, [pc, #656]	@ (800b6fc <__ieee754_log+0x304>)
 800b46c:	9d02      	ldr	r5, [sp, #8]
 800b46e:	405c      	eors	r4, r3
 800b470:	151b      	asrs	r3, r3, #20
 800b472:	189b      	adds	r3, r3, r2
 800b474:	4325      	orrs	r5, r4
 800b476:	2200      	movs	r2, #0
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	0029      	movs	r1, r5
 800b47c:	4b9f      	ldr	r3, [pc, #636]	@ (800b6fc <__ieee754_log+0x304>)
 800b47e:	f7f6 faed 	bl	8001a5c <__aeabi_dsub>
 800b482:	9b02      	ldr	r3, [sp, #8]
 800b484:	0006      	movs	r6, r0
 800b486:	3302      	adds	r3, #2
 800b488:	031b      	lsls	r3, r3, #12
 800b48a:	000f      	movs	r7, r1
 800b48c:	2200      	movs	r2, #0
 800b48e:	0b1b      	lsrs	r3, r3, #12
 800b490:	2b02      	cmp	r3, #2
 800b492:	dc64      	bgt.n	800b55e <__ieee754_log+0x166>
 800b494:	2300      	movs	r3, #0
 800b496:	f7f4 ffd5 	bl	8000444 <__aeabi_dcmpeq>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d019      	beq.n	800b4d2 <__ieee754_log+0xda>
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d100      	bne.n	800b4a6 <__ieee754_log+0xae>
 800b4a4:	e11c      	b.n	800b6e0 <__ieee754_log+0x2e8>
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f7f6 fed2 	bl	8002250 <__aeabi_i2d>
 800b4ac:	4a94      	ldr	r2, [pc, #592]	@ (800b700 <__ieee754_log+0x308>)
 800b4ae:	4b95      	ldr	r3, [pc, #596]	@ (800b704 <__ieee754_log+0x30c>)
 800b4b0:	0004      	movs	r4, r0
 800b4b2:	000d      	movs	r5, r1
 800b4b4:	f7f6 f80a 	bl	80014cc <__aeabi_dmul>
 800b4b8:	4a93      	ldr	r2, [pc, #588]	@ (800b708 <__ieee754_log+0x310>)
 800b4ba:	0006      	movs	r6, r0
 800b4bc:	000f      	movs	r7, r1
 800b4be:	4b93      	ldr	r3, [pc, #588]	@ (800b70c <__ieee754_log+0x314>)
 800b4c0:	0020      	movs	r0, r4
 800b4c2:	0029      	movs	r1, r5
 800b4c4:	f7f6 f802 	bl	80014cc <__aeabi_dmul>
 800b4c8:	0002      	movs	r2, r0
 800b4ca:	000b      	movs	r3, r1
 800b4cc:	0030      	movs	r0, r6
 800b4ce:	0039      	movs	r1, r7
 800b4d0:	e7ba      	b.n	800b448 <__ieee754_log+0x50>
 800b4d2:	4a8f      	ldr	r2, [pc, #572]	@ (800b710 <__ieee754_log+0x318>)
 800b4d4:	4b8f      	ldr	r3, [pc, #572]	@ (800b714 <__ieee754_log+0x31c>)
 800b4d6:	0030      	movs	r0, r6
 800b4d8:	0039      	movs	r1, r7
 800b4da:	f7f5 fff7 	bl	80014cc <__aeabi_dmul>
 800b4de:	0002      	movs	r2, r0
 800b4e0:	000b      	movs	r3, r1
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	498c      	ldr	r1, [pc, #560]	@ (800b718 <__ieee754_log+0x320>)
 800b4e6:	f7f6 fab9 	bl	8001a5c <__aeabi_dsub>
 800b4ea:	0032      	movs	r2, r6
 800b4ec:	0004      	movs	r4, r0
 800b4ee:	000d      	movs	r5, r1
 800b4f0:	003b      	movs	r3, r7
 800b4f2:	0030      	movs	r0, r6
 800b4f4:	0039      	movs	r1, r7
 800b4f6:	f7f5 ffe9 	bl	80014cc <__aeabi_dmul>
 800b4fa:	000b      	movs	r3, r1
 800b4fc:	0002      	movs	r2, r0
 800b4fe:	0029      	movs	r1, r5
 800b500:	0020      	movs	r0, r4
 800b502:	f7f5 ffe3 	bl	80014cc <__aeabi_dmul>
 800b506:	9b00      	ldr	r3, [sp, #0]
 800b508:	9002      	str	r0, [sp, #8]
 800b50a:	9103      	str	r1, [sp, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <__ieee754_log+0x126>
 800b510:	0002      	movs	r2, r0
 800b512:	000b      	movs	r3, r1
 800b514:	0030      	movs	r0, r6
 800b516:	0039      	movs	r1, r7
 800b518:	f7f6 faa0 	bl	8001a5c <__aeabi_dsub>
 800b51c:	e77d      	b.n	800b41a <__ieee754_log+0x22>
 800b51e:	9800      	ldr	r0, [sp, #0]
 800b520:	f7f6 fe96 	bl	8002250 <__aeabi_i2d>
 800b524:	4a76      	ldr	r2, [pc, #472]	@ (800b700 <__ieee754_log+0x308>)
 800b526:	4b77      	ldr	r3, [pc, #476]	@ (800b704 <__ieee754_log+0x30c>)
 800b528:	0004      	movs	r4, r0
 800b52a:	000d      	movs	r5, r1
 800b52c:	f7f5 ffce 	bl	80014cc <__aeabi_dmul>
 800b530:	4a75      	ldr	r2, [pc, #468]	@ (800b708 <__ieee754_log+0x310>)
 800b532:	9000      	str	r0, [sp, #0]
 800b534:	9101      	str	r1, [sp, #4]
 800b536:	4b75      	ldr	r3, [pc, #468]	@ (800b70c <__ieee754_log+0x314>)
 800b538:	0020      	movs	r0, r4
 800b53a:	0029      	movs	r1, r5
 800b53c:	f7f5 ffc6 	bl	80014cc <__aeabi_dmul>
 800b540:	0002      	movs	r2, r0
 800b542:	000b      	movs	r3, r1
 800b544:	9802      	ldr	r0, [sp, #8]
 800b546:	9903      	ldr	r1, [sp, #12]
 800b548:	f7f6 fa88 	bl	8001a5c <__aeabi_dsub>
 800b54c:	0032      	movs	r2, r6
 800b54e:	003b      	movs	r3, r7
 800b550:	f7f6 fa84 	bl	8001a5c <__aeabi_dsub>
 800b554:	0002      	movs	r2, r0
 800b556:	000b      	movs	r3, r1
 800b558:	9800      	ldr	r0, [sp, #0]
 800b55a:	9901      	ldr	r1, [sp, #4]
 800b55c:	e7dc      	b.n	800b518 <__ieee754_log+0x120>
 800b55e:	2380      	movs	r3, #128	@ 0x80
 800b560:	05db      	lsls	r3, r3, #23
 800b562:	f7f5 f80b 	bl	800057c <__aeabi_dadd>
 800b566:	0002      	movs	r2, r0
 800b568:	000b      	movs	r3, r1
 800b56a:	0030      	movs	r0, r6
 800b56c:	0039      	movs	r1, r7
 800b56e:	f7f5 fb69 	bl	8000c44 <__aeabi_ddiv>
 800b572:	9004      	str	r0, [sp, #16]
 800b574:	9105      	str	r1, [sp, #20]
 800b576:	9800      	ldr	r0, [sp, #0]
 800b578:	f7f6 fe6a 	bl	8002250 <__aeabi_i2d>
 800b57c:	9a04      	ldr	r2, [sp, #16]
 800b57e:	9b05      	ldr	r3, [sp, #20]
 800b580:	9006      	str	r0, [sp, #24]
 800b582:	9107      	str	r1, [sp, #28]
 800b584:	0010      	movs	r0, r2
 800b586:	0019      	movs	r1, r3
 800b588:	f7f5 ffa0 	bl	80014cc <__aeabi_dmul>
 800b58c:	4a63      	ldr	r2, [pc, #396]	@ (800b71c <__ieee754_log+0x324>)
 800b58e:	9b02      	ldr	r3, [sp, #8]
 800b590:	4694      	mov	ip, r2
 800b592:	4463      	add	r3, ip
 800b594:	0002      	movs	r2, r0
 800b596:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b598:	000b      	movs	r3, r1
 800b59a:	9008      	str	r0, [sp, #32]
 800b59c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b59e:	f7f5 ff95 	bl	80014cc <__aeabi_dmul>
 800b5a2:	0004      	movs	r4, r0
 800b5a4:	000d      	movs	r5, r1
 800b5a6:	4a5e      	ldr	r2, [pc, #376]	@ (800b720 <__ieee754_log+0x328>)
 800b5a8:	4b5e      	ldr	r3, [pc, #376]	@ (800b724 <__ieee754_log+0x32c>)
 800b5aa:	f7f5 ff8f 	bl	80014cc <__aeabi_dmul>
 800b5ae:	4a5e      	ldr	r2, [pc, #376]	@ (800b728 <__ieee754_log+0x330>)
 800b5b0:	4b5e      	ldr	r3, [pc, #376]	@ (800b72c <__ieee754_log+0x334>)
 800b5b2:	f7f4 ffe3 	bl	800057c <__aeabi_dadd>
 800b5b6:	0022      	movs	r2, r4
 800b5b8:	002b      	movs	r3, r5
 800b5ba:	f7f5 ff87 	bl	80014cc <__aeabi_dmul>
 800b5be:	4a5c      	ldr	r2, [pc, #368]	@ (800b730 <__ieee754_log+0x338>)
 800b5c0:	4b5c      	ldr	r3, [pc, #368]	@ (800b734 <__ieee754_log+0x33c>)
 800b5c2:	f7f4 ffdb 	bl	800057c <__aeabi_dadd>
 800b5c6:	0022      	movs	r2, r4
 800b5c8:	002b      	movs	r3, r5
 800b5ca:	f7f5 ff7f 	bl	80014cc <__aeabi_dmul>
 800b5ce:	4a5a      	ldr	r2, [pc, #360]	@ (800b738 <__ieee754_log+0x340>)
 800b5d0:	4b5a      	ldr	r3, [pc, #360]	@ (800b73c <__ieee754_log+0x344>)
 800b5d2:	f7f4 ffd3 	bl	800057c <__aeabi_dadd>
 800b5d6:	9a08      	ldr	r2, [sp, #32]
 800b5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5da:	f7f5 ff77 	bl	80014cc <__aeabi_dmul>
 800b5de:	4a58      	ldr	r2, [pc, #352]	@ (800b740 <__ieee754_log+0x348>)
 800b5e0:	9008      	str	r0, [sp, #32]
 800b5e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5e4:	4b57      	ldr	r3, [pc, #348]	@ (800b744 <__ieee754_log+0x34c>)
 800b5e6:	0020      	movs	r0, r4
 800b5e8:	0029      	movs	r1, r5
 800b5ea:	f7f5 ff6f 	bl	80014cc <__aeabi_dmul>
 800b5ee:	4a56      	ldr	r2, [pc, #344]	@ (800b748 <__ieee754_log+0x350>)
 800b5f0:	4b56      	ldr	r3, [pc, #344]	@ (800b74c <__ieee754_log+0x354>)
 800b5f2:	f7f4 ffc3 	bl	800057c <__aeabi_dadd>
 800b5f6:	0022      	movs	r2, r4
 800b5f8:	002b      	movs	r3, r5
 800b5fa:	f7f5 ff67 	bl	80014cc <__aeabi_dmul>
 800b5fe:	4a54      	ldr	r2, [pc, #336]	@ (800b750 <__ieee754_log+0x358>)
 800b600:	4b54      	ldr	r3, [pc, #336]	@ (800b754 <__ieee754_log+0x35c>)
 800b602:	f7f4 ffbb 	bl	800057c <__aeabi_dadd>
 800b606:	0022      	movs	r2, r4
 800b608:	002b      	movs	r3, r5
 800b60a:	f7f5 ff5f 	bl	80014cc <__aeabi_dmul>
 800b60e:	0002      	movs	r2, r0
 800b610:	000b      	movs	r3, r1
 800b612:	9808      	ldr	r0, [sp, #32]
 800b614:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b616:	f7f4 ffb1 	bl	800057c <__aeabi_dadd>
 800b61a:	9a02      	ldr	r2, [sp, #8]
 800b61c:	4b4e      	ldr	r3, [pc, #312]	@ (800b758 <__ieee754_log+0x360>)
 800b61e:	0004      	movs	r4, r0
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b624:	000d      	movs	r5, r1
 800b626:	4313      	orrs	r3, r2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	dd34      	ble.n	800b696 <__ieee754_log+0x29e>
 800b62c:	2200      	movs	r2, #0
 800b62e:	4b3a      	ldr	r3, [pc, #232]	@ (800b718 <__ieee754_log+0x320>)
 800b630:	0030      	movs	r0, r6
 800b632:	0039      	movs	r1, r7
 800b634:	f7f5 ff4a 	bl	80014cc <__aeabi_dmul>
 800b638:	0032      	movs	r2, r6
 800b63a:	003b      	movs	r3, r7
 800b63c:	f7f5 ff46 	bl	80014cc <__aeabi_dmul>
 800b640:	0002      	movs	r2, r0
 800b642:	000b      	movs	r3, r1
 800b644:	9002      	str	r0, [sp, #8]
 800b646:	9103      	str	r1, [sp, #12]
 800b648:	0020      	movs	r0, r4
 800b64a:	0029      	movs	r1, r5
 800b64c:	f7f4 ff96 	bl	800057c <__aeabi_dadd>
 800b650:	9a04      	ldr	r2, [sp, #16]
 800b652:	9b05      	ldr	r3, [sp, #20]
 800b654:	f7f5 ff3a 	bl	80014cc <__aeabi_dmul>
 800b658:	9b00      	ldr	r3, [sp, #0]
 800b65a:	0004      	movs	r4, r0
 800b65c:	000d      	movs	r5, r1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <__ieee754_log+0x278>
 800b662:	0002      	movs	r2, r0
 800b664:	000b      	movs	r3, r1
 800b666:	9802      	ldr	r0, [sp, #8]
 800b668:	9903      	ldr	r1, [sp, #12]
 800b66a:	f7f6 f9f7 	bl	8001a5c <__aeabi_dsub>
 800b66e:	e74f      	b.n	800b510 <__ieee754_log+0x118>
 800b670:	4a23      	ldr	r2, [pc, #140]	@ (800b700 <__ieee754_log+0x308>)
 800b672:	4b24      	ldr	r3, [pc, #144]	@ (800b704 <__ieee754_log+0x30c>)
 800b674:	9806      	ldr	r0, [sp, #24]
 800b676:	9907      	ldr	r1, [sp, #28]
 800b678:	f7f5 ff28 	bl	80014cc <__aeabi_dmul>
 800b67c:	4a22      	ldr	r2, [pc, #136]	@ (800b708 <__ieee754_log+0x310>)
 800b67e:	9000      	str	r0, [sp, #0]
 800b680:	9101      	str	r1, [sp, #4]
 800b682:	9806      	ldr	r0, [sp, #24]
 800b684:	9907      	ldr	r1, [sp, #28]
 800b686:	4b21      	ldr	r3, [pc, #132]	@ (800b70c <__ieee754_log+0x314>)
 800b688:	f7f5 ff20 	bl	80014cc <__aeabi_dmul>
 800b68c:	0022      	movs	r2, r4
 800b68e:	002b      	movs	r3, r5
 800b690:	f7f4 ff74 	bl	800057c <__aeabi_dadd>
 800b694:	e754      	b.n	800b540 <__ieee754_log+0x148>
 800b696:	0002      	movs	r2, r0
 800b698:	000b      	movs	r3, r1
 800b69a:	0030      	movs	r0, r6
 800b69c:	0039      	movs	r1, r7
 800b69e:	f7f6 f9dd 	bl	8001a5c <__aeabi_dsub>
 800b6a2:	9a04      	ldr	r2, [sp, #16]
 800b6a4:	9b05      	ldr	r3, [sp, #20]
 800b6a6:	f7f5 ff11 	bl	80014cc <__aeabi_dmul>
 800b6aa:	9b00      	ldr	r3, [sp, #0]
 800b6ac:	0004      	movs	r4, r0
 800b6ae:	000d      	movs	r5, r1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d102      	bne.n	800b6ba <__ieee754_log+0x2c2>
 800b6b4:	0002      	movs	r2, r0
 800b6b6:	000b      	movs	r3, r1
 800b6b8:	e72c      	b.n	800b514 <__ieee754_log+0x11c>
 800b6ba:	4a11      	ldr	r2, [pc, #68]	@ (800b700 <__ieee754_log+0x308>)
 800b6bc:	4b11      	ldr	r3, [pc, #68]	@ (800b704 <__ieee754_log+0x30c>)
 800b6be:	9806      	ldr	r0, [sp, #24]
 800b6c0:	9907      	ldr	r1, [sp, #28]
 800b6c2:	f7f5 ff03 	bl	80014cc <__aeabi_dmul>
 800b6c6:	4a10      	ldr	r2, [pc, #64]	@ (800b708 <__ieee754_log+0x310>)
 800b6c8:	9000      	str	r0, [sp, #0]
 800b6ca:	9101      	str	r1, [sp, #4]
 800b6cc:	9806      	ldr	r0, [sp, #24]
 800b6ce:	9907      	ldr	r1, [sp, #28]
 800b6d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b70c <__ieee754_log+0x314>)
 800b6d2:	f7f5 fefb 	bl	80014cc <__aeabi_dmul>
 800b6d6:	0002      	movs	r2, r0
 800b6d8:	000b      	movs	r3, r1
 800b6da:	0020      	movs	r0, r4
 800b6dc:	0029      	movs	r1, r5
 800b6de:	e733      	b.n	800b548 <__ieee754_log+0x150>
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	e699      	b.n	800b41a <__ieee754_log+0x22>
 800b6e6:	46c0      	nop			@ (mov r8, r8)
 800b6e8:	c3500000 	.word	0xc3500000
 800b6ec:	43500000 	.word	0x43500000
 800b6f0:	7fefffff 	.word	0x7fefffff
 800b6f4:	fffffc01 	.word	0xfffffc01
 800b6f8:	00095f64 	.word	0x00095f64
 800b6fc:	3ff00000 	.word	0x3ff00000
 800b700:	fee00000 	.word	0xfee00000
 800b704:	3fe62e42 	.word	0x3fe62e42
 800b708:	35793c76 	.word	0x35793c76
 800b70c:	3dea39ef 	.word	0x3dea39ef
 800b710:	55555555 	.word	0x55555555
 800b714:	3fd55555 	.word	0x3fd55555
 800b718:	3fe00000 	.word	0x3fe00000
 800b71c:	fff9eb86 	.word	0xfff9eb86
 800b720:	df3e5244 	.word	0xdf3e5244
 800b724:	3fc2f112 	.word	0x3fc2f112
 800b728:	96cb03de 	.word	0x96cb03de
 800b72c:	3fc74664 	.word	0x3fc74664
 800b730:	94229359 	.word	0x94229359
 800b734:	3fd24924 	.word	0x3fd24924
 800b738:	55555593 	.word	0x55555593
 800b73c:	3fe55555 	.word	0x3fe55555
 800b740:	d078c69f 	.word	0xd078c69f
 800b744:	3fc39a09 	.word	0x3fc39a09
 800b748:	1d8e78af 	.word	0x1d8e78af
 800b74c:	3fcc71c5 	.word	0x3fcc71c5
 800b750:	9997fa04 	.word	0x9997fa04
 800b754:	3fd99999 	.word	0x3fd99999
 800b758:	0006b851 	.word	0x0006b851

0800b75c <_init>:
 800b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b762:	bc08      	pop	{r3}
 800b764:	469e      	mov	lr, r3
 800b766:	4770      	bx	lr

0800b768 <_fini>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	46c0      	nop			@ (mov r8, r8)
 800b76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76e:	bc08      	pop	{r3}
 800b770:	469e      	mov	lr, r3
 800b772:	4770      	bx	lr
