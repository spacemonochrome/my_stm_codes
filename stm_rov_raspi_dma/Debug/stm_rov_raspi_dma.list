
stm_rov_raspi_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac0  08002ac0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac0  08002ac0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac0  08002ac0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08002ad4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002ad4  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b6ba  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b5c  00000000  00000000  0002b732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002d290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000965  00000000  00000000  0002de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017691  00000000  00000000  0002e7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4a9  00000000  00000000  00045e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089f06  00000000  00000000  0005331f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000320c  00000000  00000000  000dd228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e0434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a7c 	.word	0x08002a7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a7c 	.word	0x08002a7c

0800014c <HAL_UART_RxCpltCallback>:
#include "stdio.h"

uint8_t RxData[8];
uint8_t motorverisi[8];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for (int x = 0; x < 7; x++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e00b      	b.n	8000172 <HAL_UART_RxCpltCallback+0x26>
	{
		motorverisi[x] = RxData[x];
 800015a:	4a0c      	ldr	r2, [pc, #48]	; (800018c <HAL_UART_RxCpltCallback+0x40>)
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4413      	add	r3, r2
 8000160:	7819      	ldrb	r1, [r3, #0]
 8000162:	4a0b      	ldr	r2, [pc, #44]	; (8000190 <HAL_UART_RxCpltCallback+0x44>)
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	4413      	add	r3, r2
 8000168:	460a      	mov	r2, r1
 800016a:	701a      	strb	r2, [r3, #0]
	for (int x = 0; x < 7; x++)
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	3301      	adds	r3, #1
 8000170:	60fb      	str	r3, [r7, #12]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	2b06      	cmp	r3, #6
 8000176:	ddf0      	ble.n	800015a <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_DMA(&huart3, RxData, sizeof(RxData));
 8000178:	2208      	movs	r2, #8
 800017a:	4904      	ldr	r1, [pc, #16]	; (800018c <HAL_UART_RxCpltCallback+0x40>)
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <HAL_UART_RxCpltCallback+0x48>)
 800017e:	f002 f95f 	bl	8002440 <HAL_UART_Receive_DMA>
}
 8000182:	bf00      	nop
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000188 	.word	0x20000188
 8000190:	20000190 	.word	0x20000190
 8000194:	200000b8 	.word	0x200000b8

08000198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019c:	f000 fbd6 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a0:	f000 f858 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a4:	f000 f9c6 	bl	8000534 <MX_GPIO_Init>
  MX_DMA_Init();
 80001a8:	f000 f99e 	bl	80004e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80001ac:	f000 f972 	bl	8000494 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80001b0:	f000 f90c 	bl	80003cc <MX_TIM3_Init>
  MX_TIM2_Init();
 80001b4:	f000 f890 	bl	80002d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, RxData, sizeof(RxData));
 80001b8:	2208      	movs	r2, #8
 80001ba:	4920      	ldr	r1, [pc, #128]	; (800023c <main+0xa4>)
 80001bc:	4820      	ldr	r0, [pc, #128]	; (8000240 <main+0xa8>)
 80001be:	f002 f93f 	bl	8002440 <HAL_UART_Receive_DMA>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c8:	481e      	ldr	r0, [pc, #120]	; (8000244 <main+0xac>)
 80001ca:	f001 f8a1 	bl	8001310 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // motor1
 80001ce:	2100      	movs	r1, #0
 80001d0:	481d      	ldr	r0, [pc, #116]	; (8000248 <main+0xb0>)
 80001d2:	f001 fd15 	bl	8001c00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // motor2
 80001d6:	2104      	movs	r1, #4
 80001d8:	481b      	ldr	r0, [pc, #108]	; (8000248 <main+0xb0>)
 80001da:	f001 fd11 	bl	8001c00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // motor3
 80001de:	2108      	movs	r1, #8
 80001e0:	4819      	ldr	r0, [pc, #100]	; (8000248 <main+0xb0>)
 80001e2:	f001 fd0d 	bl	8001c00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // motor4
 80001e6:	210c      	movs	r1, #12
 80001e8:	4817      	ldr	r0, [pc, #92]	; (8000248 <main+0xb0>)
 80001ea:	f001 fd09 	bl	8001c00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // motor5
 80001ee:	2100      	movs	r1, #0
 80001f0:	4816      	ldr	r0, [pc, #88]	; (800024c <main+0xb4>)
 80001f2:	f001 fd05 	bl	8001c00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // motor6
 80001f6:	2104      	movs	r1, #4
 80001f8:	4814      	ldr	r0, [pc, #80]	; (800024c <main+0xb4>)
 80001fa:	f001 fd01 	bl	8001c00 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    memset(motorverisi, 80, 6*sizeof(*motorverisi));
 80001fe:	2206      	movs	r2, #6
 8000200:	2150      	movs	r1, #80	; 0x50
 8000202:	4813      	ldr	r0, [pc, #76]	; (8000250 <main+0xb8>)
 8000204:	f002 fc0e 	bl	8002a24 <memset>
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000208:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <main+0xb0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2200      	movs	r2, #0
 800020e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <main+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2200      	movs	r2, #0
 8000216:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 0);
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0xb0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <main+0xb0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2200      	movs	r2, #0
 8000226:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <main+0xb4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <main+0xb4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2200      	movs	r2, #0
 8000236:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0xa0>
 800023a:	bf00      	nop
 800023c:	20000188 	.word	0x20000188
 8000240:	200000b8 	.word	0x200000b8
 8000244:	40011000 	.word	0x40011000
 8000248:	20000028 	.word	0x20000028
 800024c:	20000070 	.word	0x20000070
 8000250:	20000190 	.word	0x20000190

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	; 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fbde 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000286:	2300      	movs	r3, #0
 8000288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f001 f853 	bl	8001340 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a0:	f000 f994 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fac0 	bl	8001844 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ca:	f000 f97f 	bl	80005cc <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	; 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <MX_TIM2_Init+0xf0>)
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000302:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000304:	2207      	movs	r2, #7
 8000306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <MX_TIM2_Init+0xf0>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000310:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000314:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <MX_TIM2_Init+0xf0>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000322:	4829      	ldr	r0, [pc, #164]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000324:	f001 fc1c 	bl	8001b60 <HAL_TIM_PWM_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800032e:	f000 f94d 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800033a:	f107 0320 	add.w	r3, r7, #32
 800033e:	4619      	mov	r1, r3
 8000340:	4821      	ldr	r0, [pc, #132]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000342:	f001 ffcf 	bl	80022e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800034c:	f000 f93e 	bl	80005cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000350:	2360      	movs	r3, #96	; 0x60
 8000352:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	4619      	mov	r1, r3
 8000366:	4818      	ldr	r0, [pc, #96]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000368:	f001 fcec 	bl	8001d44 <HAL_TIM_PWM_ConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000372:	f000 f92b 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2204      	movs	r2, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4812      	ldr	r0, [pc, #72]	; (80003c8 <MX_TIM2_Init+0xf0>)
 800037e:	f001 fce1 	bl	8001d44 <HAL_TIM_PWM_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000388:	f000 f920 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2208      	movs	r2, #8
 8000390:	4619      	mov	r1, r3
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000394:	f001 fcd6 	bl	8001d44 <HAL_TIM_PWM_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800039e:	f000 f915 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	220c      	movs	r2, #12
 80003a6:	4619      	mov	r1, r3
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <MX_TIM2_Init+0xf0>)
 80003aa:	f001 fccb 	bl	8001d44 <HAL_TIM_PWM_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80003b4:	f000 f90a 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <MX_TIM2_Init+0xf0>)
 80003ba:	f000 f96f 	bl	800069c <HAL_TIM_MspPostInit>

}
 80003be:	bf00      	nop
 80003c0:	3728      	adds	r7, #40	; 0x28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000028 	.word	0x20000028

080003cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	f107 0320 	add.w	r3, r7, #32
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]
 80003ea:	615a      	str	r2, [r3, #20]
 80003ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <MX_TIM3_Init+0xc0>)
 80003f0:	4a27      	ldr	r2, [pc, #156]	; (8000490 <MX_TIM3_Init+0xc4>)
 80003f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003f4:	4b25      	ldr	r3, [pc, #148]	; (800048c <MX_TIM3_Init+0xc0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_TIM3_Init+0xc0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <MX_TIM3_Init+0xc0>)
 8000402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000406:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <MX_TIM3_Init+0xc0>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_TIM3_Init+0xc0>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000414:	481d      	ldr	r0, [pc, #116]	; (800048c <MX_TIM3_Init+0xc0>)
 8000416:	f001 fba3 	bl	8001b60 <HAL_TIM_PWM_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000420:	f000 f8d4 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800042c:	f107 0320 	add.w	r3, r7, #32
 8000430:	4619      	mov	r1, r3
 8000432:	4816      	ldr	r0, [pc, #88]	; (800048c <MX_TIM3_Init+0xc0>)
 8000434:	f001 ff56 	bl	80022e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800043e:	f000 f8c5 	bl	80005cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000442:	2360      	movs	r3, #96	; 0x60
 8000444:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_TIM3_Init+0xc0>)
 800045a:	f001 fc73 	bl	8001d44 <HAL_TIM_PWM_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000464:	f000 f8b2 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2204      	movs	r2, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4807      	ldr	r0, [pc, #28]	; (800048c <MX_TIM3_Init+0xc0>)
 8000470:	f001 fc68 	bl	8001d44 <HAL_TIM_PWM_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800047a:	f000 f8a7 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800047e:	4803      	ldr	r0, [pc, #12]	; (800048c <MX_TIM3_Init+0xc0>)
 8000480:	f000 f90c 	bl	800069c <HAL_TIM_MspPostInit>

}
 8000484:	bf00      	nop
 8000486:	3728      	adds	r7, #40	; 0x28
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000070 	.word	0x20000070
 8000490:	40000400 	.word	0x40000400

08000494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_USART3_UART_Init+0x50>)
 800049c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004cc:	f001 ff68 	bl	80023a0 <HAL_UART_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004d6:	f000 f879 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000b8 	.word	0x200000b8
 80004e4:	40004800 	.word	0x40004800

080004e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_DMA_Init+0x48>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <MX_DMA_Init+0x48>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <MX_DMA_Init+0x48>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	200c      	movs	r0, #12
 800050c:	f000 fb57 	bl	8000bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000510:	200c      	movs	r0, #12
 8000512:	f000 fb70 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	200d      	movs	r0, #13
 800051c:	f000 fb4f 	bl	8000bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000520:	200d      	movs	r0, #13
 8000522:	f000 fb68 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_GPIO_Init+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <MX_GPIO_Init+0x90>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0310 	and.w	r3, r3, #16
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x90>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <MX_GPIO_Init+0x94>)
 8000598:	f000 feba 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_GPIO_Init+0x94>)
 80005b6:	f000 fd27 	bl	8001008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40011000 	.word	0x40011000

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <HAL_MspInit+0x5c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_MspInit+0x5c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_MspInit+0x5c>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x5c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_MspInit+0x60>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_MspInit+0x60>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	40010000 	.word	0x40010000

0800063c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800064c:	d10c      	bne.n	8000668 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_TIM_PWM_MspInit+0x58>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_TIM_PWM_MspInit+0x58>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_TIM_PWM_MspInit+0x58>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000666:	e010      	b.n	800068a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <HAL_TIM_PWM_MspInit+0x5c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d10b      	bne.n	800068a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_TIM_PWM_MspInit+0x58>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_TIM_PWM_MspInit+0x58>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_TIM_PWM_MspInit+0x58>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40000400 	.word	0x40000400

0800069c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ba:	d118      	bne.n	80006ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_TIM_MspPostInit+0x94>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <HAL_TIM_MspPostInit+0x94>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_TIM_MspPostInit+0x94>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006d4:	230f      	movs	r3, #15
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4813      	ldr	r0, [pc, #76]	; (8000734 <HAL_TIM_MspPostInit+0x98>)
 80006e8:	f000 fc8e 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006ec:	e01c      	b.n	8000728 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a11      	ldr	r2, [pc, #68]	; (8000738 <HAL_TIM_MspPostInit+0x9c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d117      	bne.n	8000728 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_TIM_MspPostInit+0x94>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <HAL_TIM_MspPostInit+0x94>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_TIM_MspPostInit+0x94>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000710:	23c0      	movs	r3, #192	; 0xc0
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <HAL_TIM_MspPostInit+0x98>)
 8000724:	f000 fc70 	bl	8001008 <HAL_GPIO_Init>
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	40000400 	.word	0x40000400

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a42      	ldr	r2, [pc, #264]	; (8000860 <HAL_UART_MspInit+0x124>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d17d      	bne.n	8000858 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <HAL_UART_MspInit+0x128>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	4a40      	ldr	r2, [pc, #256]	; (8000864 <HAL_UART_MspInit+0x128>)
 8000762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000766:	61d3      	str	r3, [r2, #28]
 8000768:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_UART_MspInit+0x128>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <HAL_UART_MspInit+0x128>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <HAL_UART_MspInit+0x128>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b38      	ldr	r3, [pc, #224]	; (8000864 <HAL_UART_MspInit+0x128>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	4831      	ldr	r0, [pc, #196]	; (8000868 <HAL_UART_MspInit+0x12c>)
 80007a2:	f000 fc31 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	482b      	ldr	r0, [pc, #172]	; (8000868 <HAL_UART_MspInit+0x12c>)
 80007bc:	f000 fc24 	bl	8001008 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <HAL_UART_MspInit+0x130>)
 80007c2:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <HAL_UART_MspInit+0x134>)
 80007c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <HAL_UART_MspInit+0x130>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <HAL_UART_MspInit+0x130>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <HAL_UART_MspInit+0x130>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <HAL_UART_MspInit+0x130>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <HAL_UART_MspInit+0x130>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <HAL_UART_MspInit+0x130>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_UART_MspInit+0x130>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <HAL_UART_MspInit+0x130>)
 80007f2:	f000 fa1b 	bl	8000c2c <HAL_DMA_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80007fc:	f7ff fee6 	bl	80005cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <HAL_UART_MspInit+0x130>)
 8000804:	63da      	str	r2, [r3, #60]	; 0x3c
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_UART_MspInit+0x130>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <HAL_UART_MspInit+0x138>)
 800080e:	4a1a      	ldr	r2, [pc, #104]	; (8000878 <HAL_UART_MspInit+0x13c>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000814:	2210      	movs	r2, #16
 8000816:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_UART_MspInit+0x138>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_UART_MspInit+0x138>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <HAL_UART_MspInit+0x138>)
 800083e:	f000 f9f5 	bl	8000c2c <HAL_DMA_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000848:	f7ff fec0 	bl	80005cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000850:	639a      	str	r2, [r3, #56]	; 0x38
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_UART_MspInit+0x138>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004800 	.word	0x40004800
 8000864:	40021000 	.word	0x40021000
 8000868:	40010c00 	.word	0x40010c00
 800086c:	20000100 	.word	0x20000100
 8000870:	40020030 	.word	0x40020030
 8000874:	20000144 	.word	0x20000144
 8000878:	4002001c 	.word	0x4002001c

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f889 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <DMA1_Channel2_IRQHandler+0x10>)
 80008d2:	f000 fa65 	bl	8000da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000144 	.word	0x20000144

080008e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <DMA1_Channel3_IRQHandler+0x10>)
 80008e6:	f000 fa5b 	bl	8000da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000100 	.word	0x20000100

080008f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff fff8 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000906:	490c      	ldr	r1, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <LoopFillZerobss+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800091c:	4c09      	ldr	r4, [pc, #36]	; (8000944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f002 f883 	bl	8002a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff fc33 	bl	8000198 <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002ac8 	.word	0x08002ac8
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	2000019c 	.word	0x2000019c

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f923 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fe36 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f93b 	bl	8000c12 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f903 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000198 	.word	0x20000198

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000198 	.word	0x20000198

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <__NVIC_EnableIRQ+0x34>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff90 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff2d 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff42 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff90 	bl	8000b00 <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5f 	bl	8000aac <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff35 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa2 	bl	8000b64 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e043      	b.n	8000cca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_DMA_Init+0xa8>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_DMA_Init+0xac>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	009a      	lsls	r2, r3, #2
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_DMA_Init+0xb0>)
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	bffdfff8 	.word	0xbffdfff8
 8000cd8:	cccccccd 	.word	0xcccccccd
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_DMA_Start_IT+0x20>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e04b      	b.n	8000d98 <HAL_DMA_Start_IT+0xb8>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d13a      	bne.n	8000d8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2202      	movs	r2, #2
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0201 	bic.w	r2, r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f000 f937 	bl	8000fac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d008      	beq.n	8000d58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 020e 	orr.w	r2, r2, #14
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e00f      	b.n	8000d78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0204 	bic.w	r2, r2, #4
 8000d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 020a 	orr.w	r2, r2, #10
 8000d76:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e005      	b.n	8000d96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d92:	2302      	movs	r3, #2
 8000d94:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d04f      	beq.n	8000e68 <HAL_DMA_IRQHandler+0xc8>
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d04a      	beq.n	8000e68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0204 	bic.w	r2, r2, #4
 8000dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a66      	ldr	r2, [pc, #408]	; (8000f90 <HAL_DMA_IRQHandler+0x1f0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d029      	beq.n	8000e4e <HAL_DMA_IRQHandler+0xae>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a65      	ldr	r2, [pc, #404]	; (8000f94 <HAL_DMA_IRQHandler+0x1f4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d022      	beq.n	8000e4a <HAL_DMA_IRQHandler+0xaa>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a63      	ldr	r2, [pc, #396]	; (8000f98 <HAL_DMA_IRQHandler+0x1f8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01a      	beq.n	8000e44 <HAL_DMA_IRQHandler+0xa4>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a62      	ldr	r2, [pc, #392]	; (8000f9c <HAL_DMA_IRQHandler+0x1fc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_DMA_IRQHandler+0x9e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a60      	ldr	r2, [pc, #384]	; (8000fa0 <HAL_DMA_IRQHandler+0x200>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00a      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x98>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5f      	ldr	r2, [pc, #380]	; (8000fa4 <HAL_DMA_IRQHandler+0x204>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d102      	bne.n	8000e32 <HAL_DMA_IRQHandler+0x92>
 8000e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e36:	e00b      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e3c:	e008      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e42:	e005      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e48:	e002      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	e000      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	4a55      	ldr	r2, [pc, #340]	; (8000fa8 <HAL_DMA_IRQHandler+0x208>)
 8000e52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8094 	beq.w	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e66:	e08e      	b.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d056      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x186>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d051      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 020a 	bic.w	r2, r2, #10
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <HAL_DMA_IRQHandler+0x1f0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d029      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x166>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d022      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x162>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <HAL_DMA_IRQHandler+0x1f8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01a      	beq.n	8000efc <HAL_DMA_IRQHandler+0x15c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <HAL_DMA_IRQHandler+0x1fc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d012      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x156>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <HAL_DMA_IRQHandler+0x200>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00a      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x150>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_DMA_IRQHandler+0x204>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d102      	bne.n	8000eea <HAL_DMA_IRQHandler+0x14a>
 8000ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ee8:	e00e      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eee:	e00b      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef4:	e008      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	e005      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	e002      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000f02:	2320      	movs	r3, #32
 8000f04:	e000      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000f06:	2302      	movs	r3, #2
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_DMA_IRQHandler+0x208>)
 8000f0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d034      	beq.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f24:	e02f      	b.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d028      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d023      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020e 	bic.w	r2, r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	4798      	blx	r3
    }
  }
  return;
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
}
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020008 	.word	0x40020008
 8000f94:	4002001c 	.word	0x4002001c
 8000f98:	40020030 	.word	0x40020030
 8000f9c:	40020044 	.word	0x40020044
 8000fa0:	40020058 	.word	0x40020058
 8000fa4:	4002006c 	.word	0x4002006c
 8000fa8:	40020000 	.word	0x40020000

08000fac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d108      	bne.n	8000fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fea:	e007      	b.n	8000ffc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	60da      	str	r2, [r3, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e169      	b.n	80012f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8158 	bne.w	80012ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a9a      	ldr	r2, [pc, #616]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d05e      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001044:	4a98      	ldr	r2, [pc, #608]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d875      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800104a:	4a98      	ldr	r2, [pc, #608]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d058      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001050:	4a96      	ldr	r2, [pc, #600]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d86f      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001056:	4a96      	ldr	r2, [pc, #600]	; (80012b0 <HAL_GPIO_Init+0x2a8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d052      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 800105c:	4a94      	ldr	r2, [pc, #592]	; (80012b0 <HAL_GPIO_Init+0x2a8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d869      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001062:	4a94      	ldr	r2, [pc, #592]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04c      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001068:	4a92      	ldr	r2, [pc, #584]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d863      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800106e:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d046      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001074:	4a90      	ldr	r2, [pc, #576]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d85d      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d82a      	bhi.n	80010d4 <HAL_GPIO_Init+0xcc>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d859      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <HAL_GPIO_Init+0x80>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001103 	.word	0x08001103
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010ef 	.word	0x080010ef
 8001094:	08001131 	.word	0x08001131
 8001098:	08001137 	.word	0x08001137
 800109c:	08001137 	.word	0x08001137
 80010a0:	08001137 	.word	0x08001137
 80010a4:	08001137 	.word	0x08001137
 80010a8:	08001137 	.word	0x08001137
 80010ac:	08001137 	.word	0x08001137
 80010b0:	08001137 	.word	0x08001137
 80010b4:	08001137 	.word	0x08001137
 80010b8:	08001137 	.word	0x08001137
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001137 	.word	0x08001137
 80010c4:	08001137 	.word	0x08001137
 80010c8:	08001137 	.word	0x08001137
 80010cc:	080010e5 	.word	0x080010e5
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	4a79      	ldr	r2, [pc, #484]	; (80012bc <HAL_GPIO_Init+0x2b4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e029      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e024      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01f      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e01a      	b.n	8001138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e013      	b.n	8001138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e009      	b.n	8001138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e003      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x130>
          break;
 8001136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d801      	bhi.n	8001142 <HAL_GPIO_Init+0x13a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e001      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d802      	bhi.n	8001154 <HAL_GPIO_Init+0x14c>
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x152>
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	210f      	movs	r1, #15
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	6a39      	ldr	r1, [r7, #32]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80b1 	beq.w	80012ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a0:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <HAL_GPIO_Init+0x2bc>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x1ec>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3f      	ldr	r2, [pc, #252]	; (80012cc <HAL_GPIO_Init+0x2c4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1e8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3d      	ldr	r2, [pc, #244]	; (80012d4 <HAL_GPIO_Init+0x2cc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1e0>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011f4:	2300      	movs	r3, #0
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001206:	492f      	ldr	r1, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	492c      	ldr	r1, [pc, #176]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4928      	ldr	r1, [pc, #160]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4922      	ldr	r1, [pc, #136]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	491e      	ldr	r1, [pc, #120]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4918      	ldr	r1, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	4914      	ldr	r1, [pc, #80]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001288:	4013      	ands	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d021      	beq.n	80012dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	490e      	ldr	r1, [pc, #56]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e021      	b.n	80012ea <HAL_GPIO_Init+0x2e2>
 80012a6:	bf00      	nop
 80012a8:	10320000 	.word	0x10320000
 80012ac:	10310000 	.word	0x10310000
 80012b0:	10220000 	.word	0x10220000
 80012b4:	10210000 	.word	0x10210000
 80012b8:	10120000 	.word	0x10120000
 80012bc:	10110000 	.word	0x10110000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40011400 	.word	0x40011400
 80012d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_GPIO_Init+0x304>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4909      	ldr	r1, [pc, #36]	; (800130c <HAL_GPIO_Init+0x304>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	3301      	adds	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f ae8e 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	372c      	adds	r7, #44	; 0x2c
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	611a      	str	r2, [r3, #16]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e272      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8087 	beq.w	800146e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001360:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b04      	cmp	r3, #4
 800136a:	d00c      	beq.n	8001386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800136c:	4b8f      	ldr	r3, [pc, #572]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d112      	bne.n	800139e <HAL_RCC_OscConfig+0x5e>
 8001378:	4b8c      	ldr	r3, [pc, #560]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001384:	d10b      	bne.n	800139e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001386:	4b89      	ldr	r3, [pc, #548]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d06c      	beq.n	800146c <HAL_RCC_OscConfig+0x12c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d168      	bne.n	800146c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e24c      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x76>
 80013a8:	4b80      	ldr	r3, [pc, #512]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a7f      	ldr	r2, [pc, #508]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e02e      	b.n	8001414 <HAL_RCC_OscConfig+0xd4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x98>
 80013be:	4b7b      	ldr	r3, [pc, #492]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7a      	ldr	r2, [pc, #488]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b78      	ldr	r3, [pc, #480]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a77      	ldr	r2, [pc, #476]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xd4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0xbc>
 80013e2:	4b72      	ldr	r3, [pc, #456]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a71      	ldr	r2, [pc, #452]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b6f      	ldr	r3, [pc, #444]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xd4>
 80013fc:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a67      	ldr	r2, [pc, #412]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff faee 	bl	80009fc <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff faea 	bl	80009fc <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e200      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xe4>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fada 	bl	80009fc <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fad6 	bl	80009fc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1ec      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x10c>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d063      	beq.n	8001542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x18c>
 8001492:	4b46      	ldr	r3, [pc, #280]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b43      	ldr	r3, [pc, #268]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x176>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1c0      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4939      	ldr	r1, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e03a      	b.n	8001542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_RCC_OscConfig+0x270>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fa8f 	bl	80009fc <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa8b 	bl	80009fc <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e1a1      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4927      	ldr	r1, [pc, #156]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e015      	b.n	8001542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_RCC_OscConfig+0x270>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa6e 	bl	80009fc <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff fa6a 	bl	80009fc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e180      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d03a      	beq.n	80015c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d019      	beq.n	800158a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_RCC_OscConfig+0x274>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fa4e 	bl	80009fc <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fa4a 	bl	80009fc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e160      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_RCC_OscConfig+0x26c>)
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f000 face 	bl	8001b24 <RCC_Delay>
 8001588:	e01c      	b.n	80015c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_RCC_OscConfig+0x274>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fa34 	bl	80009fc <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001596:	e00f      	b.n	80015b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fa30 	bl	80009fc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d908      	bls.n	80015b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e146      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	42420000 	.word	0x42420000
 80015b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e9      	bne.n	8001598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a6 	beq.w	800171e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a87      	ldr	r2, [pc, #540]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b85      	ldr	r3, [pc, #532]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b82      	ldr	r3, [pc, #520]	; (8001808 <HAL_RCC_OscConfig+0x4c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <HAL_RCC_OscConfig+0x4c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a7e      	ldr	r2, [pc, #504]	; (8001808 <HAL_RCC_OscConfig+0x4c8>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff f9f1 	bl	80009fc <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff f9ed 	bl	80009fc <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e103      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b75      	ldr	r3, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x4c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x312>
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e02d      	b.n	80016ae <HAL_RCC_OscConfig+0x36e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x334>
 800165a:	4b6a      	ldr	r3, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a69      	ldr	r2, [pc, #420]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a66      	ldr	r2, [pc, #408]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	e01c      	b.n	80016ae <HAL_RCC_OscConfig+0x36e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d10c      	bne.n	8001696 <HAL_RCC_OscConfig+0x356>
 800167c:	4b61      	ldr	r3, [pc, #388]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a60      	ldr	r2, [pc, #384]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a5d      	ldr	r2, [pc, #372]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e00b      	b.n	80016ae <HAL_RCC_OscConfig+0x36e>
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a5a      	ldr	r2, [pc, #360]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	4b58      	ldr	r3, [pc, #352]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a57      	ldr	r2, [pc, #348]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d015      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f9a1 	bl	80009fc <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f99d 	bl	80009fc <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0b1      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ee      	beq.n	80016be <HAL_RCC_OscConfig+0x37e>
 80016e0:	e014      	b.n	800170c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f98b 	bl	80009fc <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff f987 	bl	80009fc <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e09b      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	4b40      	ldr	r3, [pc, #256]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ee      	bne.n	80016ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d105      	bne.n	800171e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001712:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d061      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d146      	bne.n	80017ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173c:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x4cc>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f95b 	bl	80009fc <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f957 	bl	80009fc <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e06d      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4921      	ldr	r1, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a19      	ldr	r1, [r3, #32]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	430b      	orrs	r3, r1
 8001796:	491b      	ldr	r1, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x4cc>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff f92b 	bl	80009fc <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff f927 	bl	80009fc <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x46a>
 80017c8:	e035      	b.n	8001836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f914 	bl	80009fc <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff f910 	bl	80009fc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e026      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x498>
 80017f6:	e01e      	b.n	8001836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e019      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
 800180c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x500>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0d0      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0207 	bic.w	r2, r3, #7
 800186e:	4965      	ldr	r1, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d040      	beq.n	8001964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d115      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e073      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06b      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4936      	ldr	r1, [pc, #216]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff f862 	bl	80009fc <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f85e 	bl	80009fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e053      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d210      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 0207 	bic.w	r2, r3, #7
 800197a:	4922      	ldr	r1, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1cc>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe ffc0 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08002a94 	.word	0x08002a94
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_RCC_GetSysClockFreq+0x94>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x30>
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x36>
 8001a46:	e027      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4a:	613b      	str	r3, [r7, #16]
      break;
 8001a4c:	e027      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_RCC_GetSysClockFreq+0x94>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0c5b      	lsrs	r3, r3, #17
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e004      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	613b      	str	r3, [r7, #16]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9a:	613b      	str	r3, [r7, #16]
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	693b      	ldr	r3, [r7, #16]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	007a1200 	.word	0x007a1200
 8001ab4:	08002aac 	.word	0x08002aac
 8001ab8:	08002abc 	.word	0x08002abc
 8001abc:	003d0900 	.word	0x003d0900

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08002aa4 	.word	0x08002aa4

08001afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0adb      	lsrs	r3, r3, #11
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08002aa4 	.word	0x08002aa4

08001b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <RCC_Delay+0x34>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <RCC_Delay+0x38>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0a5b      	lsrs	r3, r3, #9
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b40:	bf00      	nop
  }
  while (Delay --);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	60fa      	str	r2, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <RCC_Delay+0x1c>
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	10624dd3 	.word	0x10624dd3

08001b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e041      	b.n	8001bf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fd58 	bl	800063c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f000 f992 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_TIM_PWM_Start+0x24>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e022      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d109      	bne.n	8001c3e <HAL_TIM_PWM_Start+0x3e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e015      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d109      	bne.n	8001c58 <HAL_TIM_PWM_Start+0x58>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e05e      	b.n	8001d30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_TIM_PWM_Start+0x82>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c80:	e013      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_PWM_Start+0x92>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c90:	e00b      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0xa2>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	e003      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 faf2 	bl	800229c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_TIM_PWM_Start+0x138>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_TIM_PWM_Start+0x138>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00e      	beq.n	8001cfa <HAL_TIM_PWM_Start+0xfa>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d009      	beq.n	8001cfa <HAL_TIM_PWM_Start+0xfa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_TIM_PWM_Start+0x13c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_TIM_PWM_Start+0xfa>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_TIM_PWM_Start+0x140>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d111      	bne.n	8001d1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d010      	beq.n	8001d2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	e007      	b.n	8001d2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800

08001d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e0ae      	b.n	8001ec0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	f200 809f 	bhi.w	8001eb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001dad 	.word	0x08001dad
 8001d7c:	08001eb1 	.word	0x08001eb1
 8001d80:	08001eb1 	.word	0x08001eb1
 8001d84:	08001eb1 	.word	0x08001eb1
 8001d88:	08001ded 	.word	0x08001ded
 8001d8c:	08001eb1 	.word	0x08001eb1
 8001d90:	08001eb1 	.word	0x08001eb1
 8001d94:	08001eb1 	.word	0x08001eb1
 8001d98:	08001e2f 	.word	0x08001e2f
 8001d9c:	08001eb1 	.word	0x08001eb1
 8001da0:	08001eb1 	.word	0x08001eb1
 8001da4:	08001eb1 	.word	0x08001eb1
 8001da8:	08001e6f 	.word	0x08001e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f8ea 	bl	8001f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6999      	ldr	r1, [r3, #24]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	619a      	str	r2, [r3, #24]
      break;
 8001dea:	e064      	b.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f930 	bl	8002058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6999      	ldr	r1, [r3, #24]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	021a      	lsls	r2, r3, #8
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	619a      	str	r2, [r3, #24]
      break;
 8001e2c:	e043      	b.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 f979 	bl	800212c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0208 	orr.w	r2, r2, #8
 8001e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0204 	bic.w	r2, r2, #4
 8001e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69d9      	ldr	r1, [r3, #28]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	61da      	str	r2, [r3, #28]
      break;
 8001e6c:	e023      	b.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f9c3 	bl	8002200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69d9      	ldr	r1, [r3, #28]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	021a      	lsls	r2, r3, #8
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	61da      	str	r2, [r3, #28]
      break;
 8001eae:	e002      	b.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8001eb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <TIM_Base_SetConfig+0xb8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <TIM_Base_SetConfig+0x30>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d007      	beq.n	8001ef8 <TIM_Base_SetConfig+0x30>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <TIM_Base_SetConfig+0xbc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <TIM_Base_SetConfig+0x30>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <TIM_Base_SetConfig+0xc0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <TIM_Base_SetConfig+0xb8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x62>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x62>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <TIM_Base_SetConfig+0xbc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x62>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <TIM_Base_SetConfig+0xc0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <TIM_Base_SetConfig+0xb8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d103      	bne.n	8001f70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	615a      	str	r2, [r3, #20]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800

08001f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f023 0201 	bic.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f023 0302 	bic.w	r3, r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <TIM_OC1_SetConfig+0xc8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d10c      	bne.n	8002002 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0308 	bic.w	r3, r3, #8
 8001fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a13      	ldr	r2, [pc, #76]	; (8002054 <TIM_OC1_SetConfig+0xc8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d111      	bne.n	800202e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	621a      	str	r2, [r3, #32]
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40012c00 	.word	0x40012c00

08002058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f023 0210 	bic.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f023 0320 	bic.w	r3, r3, #32
 80020a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <TIM_OC2_SetConfig+0xd0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10d      	bne.n	80020d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a14      	ldr	r2, [pc, #80]	; (8002128 <TIM_OC2_SetConfig+0xd0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d113      	bne.n	8002104 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	621a      	str	r2, [r3, #32]
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40012c00 	.word	0x40012c00

0800212c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0303 	bic.w	r3, r3, #3
 8002162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <TIM_OC3_SetConfig+0xd0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10d      	bne.n	80021a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <TIM_OC3_SetConfig+0xd0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d113      	bne.n	80021d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	621a      	str	r2, [r3, #32]
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00

08002200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800224a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	031b      	lsls	r3, r3, #12
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <TIM_OC4_SetConfig+0x98>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d109      	bne.n	8002274 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	621a      	str	r2, [r3, #32]
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40012c00 	.word	0x40012c00

0800229c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e046      	b.n	800238a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00e      	beq.n	800235e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d009      	beq.n	800235e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10c      	bne.n	8002378 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	4313      	orrs	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e042      	b.n	8002438 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe f9b8 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	; 0x24
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa8f 	bl	8002908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b20      	cmp	r3, #32
 8002458:	d112      	bne.n	8002480 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_UART_Receive_DMA+0x26>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00b      	b.n	8002482 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	461a      	mov	r2, r3
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f922 	bl	80026c0 <UART_Start_Receive_DMA>
 800247c:	4603      	mov	r3, r0
 800247e:	e000      	b.n	8002482 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b09c      	sub	sp, #112	; 0x70
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d172      	bne.n	80025c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	2200      	movs	r2, #0
 80024e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	e853 3f00 	ldrex	r3, [r3]
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80024fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	330c      	adds	r3, #12
 8002504:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002506:	65ba      	str	r2, [r7, #88]	; 0x58
 8002508:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800250c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250e:	e841 2300 	strex	r3, r2, [r1]
 8002512:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e5      	bne.n	80024e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	667b      	str	r3, [r7, #100]	; 0x64
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3314      	adds	r3, #20
 8002538:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800253a:	647a      	str	r2, [r7, #68]	; 0x44
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e5      	bne.n	800251a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800254e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3314      	adds	r3, #20
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	623b      	str	r3, [r7, #32]
   return(result);
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002564:	663b      	str	r3, [r7, #96]	; 0x60
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800256e:	633a      	str	r2, [r7, #48]	; 0x30
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e5      	bne.n	800254e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	2b01      	cmp	r3, #1
 8002590:	d119      	bne.n	80025c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	e853 3f00 	ldrex	r3, [r3]
 80025a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f023 0310 	bic.w	r3, r3, #16
 80025a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025b2:	61fa      	str	r2, [r7, #28]
 80025b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	e841 2300 	strex	r3, r2, [r1]
 80025be:	617b      	str	r3, [r7, #20]
   return(result);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1e5      	bne.n	8002592 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	2200      	movs	r2, #0
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025d8:	4619      	mov	r1, r3
 80025da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80025dc:	f7ff ff67 	bl	80024ae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025e0:	e002      	b.n	80025e8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80025e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80025e4:	f7fd fdb2 	bl	800014c <HAL_UART_RxCpltCallback>
}
 80025e8:	bf00      	nop
 80025ea:	3770      	adds	r7, #112	; 0x70
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	2b01      	cmp	r3, #1
 800260a:	d108      	bne.n	800261e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	b29b      	uxth	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff ff49 	bl	80024ae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800261c:	e002      	b.n	8002624 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff ff33 	bl	800248a <HAL_UART_RxHalfCpltCallback>
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b21      	cmp	r3, #33	; 0x21
 800265e:	d108      	bne.n	8002672 <UART_DMAError+0x46>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	f000 f8c1 	bl	80027f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b22      	cmp	r3, #34	; 0x22
 8002692:	d108      	bne.n	80026a6 <UART_DMAError+0x7a>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80026a0:	68b8      	ldr	r0, [r7, #8]
 80026a2:	f000 f8ce 	bl	8002842 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026b2:	68b8      	ldr	r0, [r7, #8]
 80026b4:	f7ff fef2 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b098      	sub	sp, #96	; 0x60
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2222      	movs	r2, #34	; 0x22
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <UART_Start_Receive_DMA+0x128>)
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <UART_Start_Receive_DMA+0x12c>)
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <UART_Start_Receive_DMA+0x130>)
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2200      	movs	r2, #0
 8002706:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	f7fe fade 	bl	8000ce0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	65bb      	str	r3, [r7, #88]	; 0x58
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002762:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e5      	bne.n	8002742 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3314      	adds	r3, #20
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	657b      	str	r3, [r7, #84]	; 0x54
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3314      	adds	r3, #20
 8002794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002796:	63ba      	str	r2, [r7, #56]	; 0x38
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800279c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e5      	bne.n	8002776 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3314      	adds	r3, #20
 80027b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	617b      	str	r3, [r7, #20]
   return(result);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c0:	653b      	str	r3, [r7, #80]	; 0x50
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3314      	adds	r3, #20
 80027c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80027ca:	627a      	str	r2, [r7, #36]	; 0x24
 80027cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	6a39      	ldr	r1, [r7, #32]
 80027d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e5      	bne.n	80027aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3760      	adds	r7, #96	; 0x60
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	080024c5 	.word	0x080024c5
 80027ec:	080025f1 	.word	0x080025f1
 80027f0:	0800262d 	.word	0x0800262d

080027f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	60bb      	str	r3, [r7, #8]
   return(result);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	61ba      	str	r2, [r7, #24]
 800281e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	6979      	ldr	r1, [r7, #20]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	e841 2300 	strex	r3, r2, [r1]
 8002828:	613b      	str	r3, [r7, #16]
   return(result);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e5      	bne.n	80027fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002838:	bf00      	nop
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002842:	b480      	push	{r7}
 8002844:	b095      	sub	sp, #84	; 0x54
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800286a:	643a      	str	r2, [r7, #64]	; 0x40
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	61fb      	str	r3, [r7, #28]
   return(result);
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	64bb      	str	r3, [r7, #72]	; 0x48
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3314      	adds	r3, #20
 800289c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800289e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e5      	bne.n	800287e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d119      	bne.n	80028ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f023 0310 	bic.w	r3, r3, #16
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028da:	61ba      	str	r2, [r7, #24]
 80028dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	613b      	str	r3, [r7, #16]
   return(result);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e5      	bne.n	80028ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028fc:	bf00      	nop
 80028fe:	3754      	adds	r7, #84	; 0x54
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
	...

08002908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002942:	f023 030c 	bic.w	r3, r3, #12
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	430b      	orrs	r3, r1
 800294e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <UART_SetConfig+0x114>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff f8c4 	bl	8001afc <HAL_RCC_GetPCLK2Freq>
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	e002      	b.n	800297e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002978:	f7ff f8ac 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <UART_SetConfig+0x118>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	0119      	lsls	r1, r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <UART_SetConfig+0x118>)
 80029b6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	3332      	adds	r3, #50	; 0x32
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <UART_SetConfig+0x118>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d4:	4419      	add	r1, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <UART_SetConfig+0x118>)
 80029ee:	fba3 0302 	umull	r0, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2064      	movs	r0, #100	; 0x64
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <UART_SetConfig+0x118>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	440a      	add	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	51eb851f 	.word	0x51eb851f

08002a24 <memset>:
 8002a24:	4603      	mov	r3, r0
 8002a26:	4402      	add	r2, r0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	2600      	movs	r6, #0
 8002a38:	4d0c      	ldr	r5, [pc, #48]	; (8002a6c <__libc_init_array+0x38>)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <__libc_init_array+0x3c>)
 8002a3c:	1b64      	subs	r4, r4, r5
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	42a6      	cmp	r6, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	f000 f81a 	bl	8002a7c <_init>
 8002a48:	2600      	movs	r6, #0
 8002a4a:	4d0a      	ldr	r5, [pc, #40]	; (8002a74 <__libc_init_array+0x40>)
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <__libc_init_array+0x44>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	42a6      	cmp	r6, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5c:	4798      	blx	r3
 8002a5e:	3601      	adds	r6, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a66:	4798      	blx	r3
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08002ac0 	.word	0x08002ac0
 8002a70:	08002ac0 	.word	0x08002ac0
 8002a74:	08002ac0 	.word	0x08002ac0
 8002a78:	08002ac4 	.word	0x08002ac4

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
