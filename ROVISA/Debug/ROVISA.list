
ROVISA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800523c  0800523c  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  0800523c  0800523c  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800523c  0800523c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005244  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000136c  20000068  080052ac  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013d4  080052ac  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b41  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335e  00000000  00000000  0001dbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00020f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001078  00000000  00000000  00022420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3f5  00000000  00000000  00023498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ac9  00000000  00000000  0003d88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a17f  00000000  00000000  00056356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f04d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b04  00000000  00000000  000f0518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	0800519c 	.word	0x0800519c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	0800519c 	.word	0x0800519c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000084 	.word	0x20000084
 800017c:	20000124 	.word	0x20000124

08000180 <motor_ata>:
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
	  pwm_orta_deger();
}

void motor_ata(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (uint8_t x = 0; x < 8; x++)
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	e021      	b.n	80001d0 <motor_ata+0x50>
	{
		if (RxMotor[x] > motorverisi[x])
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	4a15      	ldr	r2, [pc, #84]	@ (80001e4 <motor_ata+0x64>)
 8000190:	5cd2      	ldrb	r2, [r2, r3]
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4914      	ldr	r1, [pc, #80]	@ (80001e8 <motor_ata+0x68>)
 8000196:	5ccb      	ldrb	r3, [r1, r3]
 8000198:	429a      	cmp	r2, r3
 800019a:	d907      	bls.n	80001ac <motor_ata+0x2c>
		{
			motorverisi[x]++;
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	4a12      	ldr	r2, [pc, #72]	@ (80001e8 <motor_ata+0x68>)
 80001a0:	5cd2      	ldrb	r2, [r2, r3]
 80001a2:	3201      	adds	r2, #1
 80001a4:	b2d1      	uxtb	r1, r2
 80001a6:	4a10      	ldr	r2, [pc, #64]	@ (80001e8 <motor_ata+0x68>)
 80001a8:	54d1      	strb	r1, [r2, r3]
 80001aa:	e00e      	b.n	80001ca <motor_ata+0x4a>
		}
		else if (RxMotor[x] < motorverisi[x])
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <motor_ata+0x64>)
 80001b0:	5cd2      	ldrb	r2, [r2, r3]
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	490c      	ldr	r1, [pc, #48]	@ (80001e8 <motor_ata+0x68>)
 80001b6:	5ccb      	ldrb	r3, [r1, r3]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d206      	bcs.n	80001ca <motor_ata+0x4a>
		{
			motorverisi[x]--;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	4a0a      	ldr	r2, [pc, #40]	@ (80001e8 <motor_ata+0x68>)
 80001c0:	5cd2      	ldrb	r2, [r2, r3]
 80001c2:	3a01      	subs	r2, #1
 80001c4:	b2d1      	uxtb	r1, r2
 80001c6:	4a08      	ldr	r2, [pc, #32]	@ (80001e8 <motor_ata+0x68>)
 80001c8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 0; x < 8; x++)
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	3301      	adds	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	2b07      	cmp	r3, #7
 80001d4:	d9da      	bls.n	800018c <motor_ata+0xc>
		else if(RxMotor[x] == motorverisi[x])
		{

		}
	}
	HAL_Delay(20);//duruma göre os delay kullanılabilir.
 80001d6:	2014      	movs	r0, #20
 80001d8:	f000 fe7e 	bl	8000ed8 <HAL_Delay>
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	200004d8 	.word	0x200004d8
 80001e8:	20000000 	.word	0x20000000

080001ec <GPIO_Kontrol>:

void GPIO_Kontrol(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b08e      	sub	sp, #56	@ 0x38
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 fe39 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f863 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 faed 	bl	80007e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800020a:	f000 facd 	bl	80007a8 <MX_DMA_Init>
  MX_TIM2_Init();
 800020e:	f000 f96d 	bl	80004ec <MX_TIM2_Init>
  MX_TIM4_Init();
 8000212:	f000 fa05 	bl	8000620 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000216:	f000 f93b 	bl	8000490 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800021a:	f000 fa9b 	bl	8000754 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800021e:	f000 f8b1 	bl	8000384 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, RxData, sizeof(RxData));
 8000222:	220c      	movs	r2, #12
 8000224:	491f      	ldr	r1, [pc, #124]	@ (80002a4 <main+0xac>)
 8000226:	4820      	ldr	r0, [pc, #128]	@ (80002a8 <main+0xb0>)
 8000228:	f003 fbda 	bl	80039e0 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, ADC_VAL, sizeof(ADC_VAL));
 800022c:	2218      	movs	r2, #24
 800022e:	491f      	ldr	r1, [pc, #124]	@ (80002ac <main+0xb4>)
 8000230:	481f      	ldr	r0, [pc, #124]	@ (80002b0 <main+0xb8>)
 8000232:	f000 ff4d 	bl	80010d0 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GPIO_Value */
  osThreadDef(GPIO_Value, StartGPIO_Value, osPriorityRealtime, 0, 128);
 8000236:	4b1f      	ldr	r3, [pc, #124]	@ (80002b4 <main+0xbc>)
 8000238:	f107 041c 	add.w	r4, r7, #28
 800023c:	461d      	mov	r5, r3
 800023e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000242:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPIO_ValueHandle = osThreadCreate(osThread(GPIO_Value), NULL);
 800024a:	f107 031c 	add.w	r3, r7, #28
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f003 fccf 	bl	8003bf4 <osThreadCreate>
 8000256:	4603      	mov	r3, r0
 8000258:	4a17      	ldr	r2, [pc, #92]	@ (80002b8 <main+0xc0>)
 800025a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor_Update */
  osThreadDef(Motor_Update, StartMotor_Update, osPriorityRealtime, 0, 128);
 800025c:	4b17      	ldr	r3, [pc, #92]	@ (80002bc <main+0xc4>)
 800025e:	463c      	mov	r4, r7
 8000260:	461d      	mov	r5, r3
 8000262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Motor_UpdateHandle = osThreadCreate(osThread(Motor_Update), NULL);
 800026e:	463b      	mov	r3, r7
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fcbe 	bl	8003bf4 <osThreadCreate>
 8000278:	4603      	mov	r3, r0
 800027a:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <main+0xc8>)
 800027c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800027e:	f003 fcb2 	bl	8003be6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset(motorverisi, 80, 8*sizeof(*motorverisi));
 8000282:	2208      	movs	r2, #8
 8000284:	2150      	movs	r1, #80	@ 0x50
 8000286:	480f      	ldr	r0, [pc, #60]	@ (80002c4 <main+0xcc>)
 8000288:	f004 feb0 	bl	8004fec <memset>
  while (1)
  {
	  tamer++;
 800028c:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <main+0xd0>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <main+0xd0>)
 8000296:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8000298:	2001      	movs	r0, #1
 800029a:	f000 fe1d 	bl	8000ed8 <HAL_Delay>
	  tamer++;
 800029e:	bf00      	nop
 80002a0:	e7f4      	b.n	800028c <main+0x94>
 80002a2:	bf00      	nop
 80002a4:	200004cc 	.word	0x200004cc
 80002a8:	2000047c 	.word	0x2000047c
 80002ac:	200004e0 	.word	0x200004e0
 80002b0:	20000324 	.word	0x20000324
 80002b4:	080051c0 	.word	0x080051c0
 80002b8:	200004c4 	.word	0x200004c4
 80002bc:	080051ec 	.word	0x080051ec
 80002c0:	200004c8 	.word	0x200004c8
 80002c4:	20000000 	.word	0x20000000
 80002c8:	200004f8 	.word	0x200004f8

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	@ 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002d6:	2228      	movs	r2, #40	@ 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 fe86 	bl	8004fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fc:	2301      	movs	r3, #1
 80002fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000312:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000316:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000318:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800031c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000322:	4618      	mov	r0, r3
 8000324:	f001 ff76 	bl	8002214 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032e:	f000 fb07 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f002 f9e2 	bl	8002718 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800035a:	f000 faf1 	bl	8000940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800035e:	2302      	movs	r3, #2
 8000360:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000362:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000366:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fb92 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000376:	f000 fae3 	bl	8000940 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3750      	adds	r7, #80	@ 0x50
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000394:	4b3c      	ldr	r3, [pc, #240]	@ (8000488 <MX_ADC1_Init+0x104>)
 8000396:	4a3d      	ldr	r2, [pc, #244]	@ (800048c <MX_ADC1_Init+0x108>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800039a:	4b3b      	ldr	r3, [pc, #236]	@ (8000488 <MX_ADC1_Init+0x104>)
 800039c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003a2:	4b39      	ldr	r3, [pc, #228]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a8:	4b37      	ldr	r3, [pc, #220]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003b0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b6:	4b34      	ldr	r3, [pc, #208]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80003bc:	4b32      	ldr	r3, [pc, #200]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003be:	2206      	movs	r2, #6
 80003c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c2:	4831      	ldr	r0, [pc, #196]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003c4:	f000 fdac 	bl	8000f20 <HAL_ADC_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003ce:	f000 fab7 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003d2:	2304      	movs	r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4829      	ldr	r0, [pc, #164]	@ (8000488 <MX_ADC1_Init+0x104>)
 80003e4:	f000 ff6e 	bl	80012c4 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 faa7 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003f2:	2305      	movs	r3, #5
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4822      	ldr	r0, [pc, #136]	@ (8000488 <MX_ADC1_Init+0x104>)
 8000400:	f000 ff60 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800040a:	f000 fa99 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800040e:	2306      	movs	r3, #6
 8000410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000412:	2303      	movs	r3, #3
 8000414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	481b      	ldr	r0, [pc, #108]	@ (8000488 <MX_ADC1_Init+0x104>)
 800041c:	f000 ff52 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000426:	f000 fa8b 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800042a:	2307      	movs	r3, #7
 800042c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800042e:	2304      	movs	r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4814      	ldr	r0, [pc, #80]	@ (8000488 <MX_ADC1_Init+0x104>)
 8000438:	f000 ff44 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000442:	f000 fa7d 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000446:	2308      	movs	r3, #8
 8000448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800044a:	2305      	movs	r3, #5
 800044c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	@ (8000488 <MX_ADC1_Init+0x104>)
 8000454:	f000 ff36 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800045e:	f000 fa6f 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000462:	2309      	movs	r3, #9
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000466:	2306      	movs	r3, #6
 8000468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	@ (8000488 <MX_ADC1_Init+0x104>)
 8000470:	f000 ff28 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800047a:	f000 fa61 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000324 	.word	0x20000324
 800048c:	40012400 	.word	0x40012400

08000490 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_I2C2_Init+0x50>)
 8000496:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <MX_I2C2_Init+0x54>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_I2C2_Init+0x50>)
 800049c:	4a12      	ldr	r2, [pc, #72]	@ (80004e8 <MX_I2C2_Init+0x58>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c0:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <MX_I2C2_Init+0x50>)
 80004ce:	f001 fd5d 	bl	8001f8c <HAL_I2C_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004d8:	f000 fa32 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000398 	.word	0x20000398
 80004e4:	40005800 	.word	0x40005800
 80004e8:	000186a0 	.word	0x000186a0

080004ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08e      	sub	sp, #56	@ 0x38
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	f107 0320 	add.w	r3, r7, #32
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800051c:	4b3f      	ldr	r3, [pc, #252]	@ (800061c <MX_TIM2_Init+0x130>)
 800051e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000524:	4b3d      	ldr	r3, [pc, #244]	@ (800061c <MX_TIM2_Init+0x130>)
 8000526:	221f      	movs	r2, #31
 8000528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b3c      	ldr	r3, [pc, #240]	@ (800061c <MX_TIM2_Init+0x130>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8000530:	4b3a      	ldr	r3, [pc, #232]	@ (800061c <MX_TIM2_Init+0x130>)
 8000532:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b38      	ldr	r3, [pc, #224]	@ (800061c <MX_TIM2_Init+0x130>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053e:	4b37      	ldr	r3, [pc, #220]	@ (800061c <MX_TIM2_Init+0x130>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000544:	4835      	ldr	r0, [pc, #212]	@ (800061c <MX_TIM2_Init+0x130>)
 8000546:	f002 fb5b 	bl	8002c00 <HAL_TIM_Base_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000550:	f000 f9f6 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800055a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800055e:	4619      	mov	r1, r3
 8000560:	482e      	ldr	r0, [pc, #184]	@ (800061c <MX_TIM2_Init+0x130>)
 8000562:	f002 fe11 	bl	8003188 <HAL_TIM_ConfigClockSource>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800056c:	f000 f9e8 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000570:	482a      	ldr	r0, [pc, #168]	@ (800061c <MX_TIM2_Init+0x130>)
 8000572:	f002 fbe7 	bl	8002d44 <HAL_TIM_PWM_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800057c:	f000 f9e0 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4619      	mov	r1, r3
 800058e:	4823      	ldr	r0, [pc, #140]	@ (800061c <MX_TIM2_Init+0x130>)
 8000590:	f003 f966 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800059a:	f000 f9d1 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059e:	2360      	movs	r3, #96	@ 0x60
 80005a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3000;
 80005a2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	4619      	mov	r1, r3
 80005b6:	4819      	ldr	r0, [pc, #100]	@ (800061c <MX_TIM2_Init+0x130>)
 80005b8:	f002 fd24 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005c2:	f000 f9bd 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2204      	movs	r2, #4
 80005ca:	4619      	mov	r1, r3
 80005cc:	4813      	ldr	r0, [pc, #76]	@ (800061c <MX_TIM2_Init+0x130>)
 80005ce:	f002 fd19 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80005d8:	f000 f9b2 	bl	8000940 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2208      	movs	r2, #8
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	@ (800061c <MX_TIM2_Init+0x130>)
 80005e8:	f002 fd0c 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80005f2:	f000 f9a5 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	220c      	movs	r2, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	@ (800061c <MX_TIM2_Init+0x130>)
 80005fe:	f002 fd01 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000608:	f000 f99a 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <MX_TIM2_Init+0x130>)
 800060e:	f000 fac5 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 8000612:	bf00      	nop
 8000614:	3738      	adds	r7, #56	@ 0x38
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200003ec 	.word	0x200003ec

08000620 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000652:	4a3f      	ldr	r2, [pc, #252]	@ (8000750 <MX_TIM4_Init+0x130>)
 8000654:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8000656:	4b3d      	ldr	r3, [pc, #244]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000658:	221f      	movs	r2, #31
 800065a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <MX_TIM4_Init+0x12c>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000-1;
 8000662:	4b3a      	ldr	r3, [pc, #232]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000664:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000668:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b38      	ldr	r3, [pc, #224]	@ (800074c <MX_TIM4_Init+0x12c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000670:	4b36      	ldr	r3, [pc, #216]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000676:	4835      	ldr	r0, [pc, #212]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000678:	f002 fac2 	bl	8002c00 <HAL_TIM_Base_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000682:	f000 f95d 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800068c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000690:	4619      	mov	r1, r3
 8000692:	482e      	ldr	r0, [pc, #184]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000694:	f002 fd78 	bl	8003188 <HAL_TIM_ConfigClockSource>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800069e:	f000 f94f 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006a2:	482a      	ldr	r0, [pc, #168]	@ (800074c <MX_TIM4_Init+0x12c>)
 80006a4:	f002 fb4e 	bl	8002d44 <HAL_TIM_PWM_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80006ae:	f000 f947 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4619      	mov	r1, r3
 80006c0:	4822      	ldr	r0, [pc, #136]	@ (800074c <MX_TIM4_Init+0x12c>)
 80006c2:	f003 f8cd 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006cc:	f000 f938 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d0:	2360      	movs	r3, #96	@ 0x60
 80006d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	4819      	ldr	r0, [pc, #100]	@ (800074c <MX_TIM4_Init+0x12c>)
 80006e8:	f002 fc8c 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80006f2:	f000 f925 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2204      	movs	r2, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4813      	ldr	r0, [pc, #76]	@ (800074c <MX_TIM4_Init+0x12c>)
 80006fe:	f002 fc81 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000708:	f000 f91a 	bl	8000940 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 800070c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2208      	movs	r2, #8
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <MX_TIM4_Init+0x12c>)
 800071a:	f002 fc73 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8000724:	f000 f90c 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	220c      	movs	r2, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000730:	f002 fc68 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM4_Init+0x11e>
  {
    Error_Handler();
 800073a:	f000 f901 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800073e:	4803      	ldr	r0, [pc, #12]	@ (800074c <MX_TIM4_Init+0x12c>)
 8000740:	f000 fa2c 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 8000744:	bf00      	nop
 8000746:	3738      	adds	r7, #56	@ 0x38
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000434 	.word	0x20000434
 8000750:	40000800 	.word	0x40000800

08000754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART1_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800078c:	f003 f8d8 	bl	8003940 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f8d3 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000047c 	.word	0x2000047c
 80007a4:	40013800 	.word	0x40013800

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_DMA_Init+0x38>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a0b      	ldr	r2, [pc, #44]	@ (80007e0 <MX_DMA_Init+0x38>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_DMA_Init+0x38>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2105      	movs	r1, #5
 80007ca:	200b      	movs	r0, #11
 80007cc:	f001 f829 	bl	8001822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d0:	200b      	movs	r0, #11
 80007d2:	f001 f842 	bl	800185a <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	4b39      	ldr	r3, [pc, #228]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a38      	ldr	r2, [pc, #224]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000810:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a32      	ldr	r2, [pc, #200]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0320 	and.w	r3, r3, #32
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2c      	ldr	r2, [pc, #176]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a26      	ldr	r2, [pc, #152]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <MX_GPIO_Init+0xfc>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085e:	4821      	ldr	r0, [pc, #132]	@ (80008e4 <MX_GPIO_Init+0x100>)
 8000860:	f001 fb7c 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU650_CONN_OUT_Pin|I2C_RPI_CONN_OUT_Pin|UART_RPI_CONN_OUT_Pin|MOSFET_OUT_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800086a:	481f      	ldr	r0, [pc, #124]	@ (80008e8 <MX_GPIO_Init+0x104>)
 800086c:	f001 fb76 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALT_LED_OUT_GPIO_Port, ALT_LED_OUT_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000876:	481d      	ldr	r0, [pc, #116]	@ (80008ec <MX_GPIO_Init+0x108>)
 8000878:	f001 fb70 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2302      	movs	r3, #2
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <MX_GPIO_Init+0x100>)
 8000896:	f001 f9dd 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU650_CONN_OUT_Pin I2C_RPI_CONN_OUT_Pin UART_RPI_CONN_OUT_Pin MOSFET_OUT_Pin */
  GPIO_InitStruct.Pin = MPU650_CONN_OUT_Pin|I2C_RPI_CONN_OUT_Pin|UART_RPI_CONN_OUT_Pin|MOSFET_OUT_Pin;
 800089a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_GPIO_Init+0x104>)
 80008b4:	f001 f9ce 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALT_LED_OUT_Pin */
  GPIO_InitStruct.Pin = ALT_LED_OUT_Pin;
 80008b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALT_LED_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4806      	ldr	r0, [pc, #24]	@ (80008ec <MX_GPIO_Init+0x108>)
 80008d2:	f001 f9bf 	bl	8001c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40011000 	.word	0x40011000
 80008e8:	40010c00 	.word	0x40010c00
 80008ec:	40010800 	.word	0x40010800

080008f0 <StartGPIO_Value>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPIO_Value */
void StartGPIO_Value(void const * argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  GPIO_Kontrol();
 80008f8:	f7ff fc78 	bl	80001ec <GPIO_Kontrol>
    osDelay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f003 f9c5 	bl	8003c8c <osDelay>
	  GPIO_Kontrol();
 8000902:	bf00      	nop
 8000904:	e7f8      	b.n	80008f8 <StartGPIO_Value+0x8>

08000906 <StartMotor_Update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor_Update */
void StartMotor_Update(void const * argument)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor_Update */
  /* Infinite loop */
  for(;;)
  {
	  motor_ata();
 800090e:	f7ff fc37 	bl	8000180 <motor_ata>
    osDelay(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f003 f9ba 	bl	8003c8c <osDelay>
	  motor_ata();
 8000918:	bf00      	nop
 800091a:	e7f8      	b.n	800090e <StartMotor_Update+0x8>

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fab7 	bl	8000ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40012c00 	.word	0x40012c00

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_MspInit+0x68>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a17      	ldr	r2, [pc, #92]	@ (80009b4 <HAL_MspInit+0x68>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_MspInit+0x68>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_MspInit+0x68>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <HAL_MspInit+0x68>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x68>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 ff4a 	bl	8001822 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_MspInit+0x6c>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <HAL_MspInit+0x6c>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000

080009bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a33      	ldr	r2, [pc, #204]	@ (8000aa4 <HAL_ADC_MspInit+0xe8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d15f      	bne.n	8000a9c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009dc:	4b32      	ldr	r3, [pc, #200]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a31      	ldr	r2, [pc, #196]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a25      	ldr	r2, [pc, #148]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <HAL_ADC_MspInit+0xec>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = HALL1_ADC_Pin|HALL2_ADC_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000a24:	23f0      	movs	r3, #240	@ 0xf0
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4619      	mov	r1, r3
 8000a32:	481e      	ldr	r0, [pc, #120]	@ (8000aac <HAL_ADC_MspInit+0xf0>)
 8000a34:	f001 f90e 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WATER_ADC_Pin|VOLT_ADC_Pin;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	4619      	mov	r1, r3
 8000a46:	481a      	ldr	r0, [pc, #104]	@ (8000ab0 <HAL_ADC_MspInit+0xf4>)
 8000a48:	f001 f904 	bl	8001c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <HAL_ADC_MspInit+0xfc>)
 8000a50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a76:	2220      	movs	r2, #32
 8000a78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a82:	f000 fef9 	bl	8001878 <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000a8c:	f7ff ff58 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a94:	621a      	str	r2, [r3, #32]
 8000a96:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_ADC_MspInit+0xf8>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40012400 	.word	0x40012400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	20000354 	.word	0x20000354
 8000ab8:	40020008 	.word	0x40020008

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <HAL_I2C_MspInit+0x74>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d124      	bne.n	8000b26 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_I2C_MspInit+0x78>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_I2C_MspInit+0x78>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_I2C_MspInit+0x78>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000af4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	2312      	movs	r3, #18
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <HAL_I2C_MspInit+0x7c>)
 8000b0a:	f001 f8a3 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_I2C_MspInit+0x78>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x78>)
 8000b14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_I2C_MspInit+0x78>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_TIM_Base_MspInit+0x58>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <HAL_TIM_Base_MspInit+0x58>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_TIM_Base_MspInit+0x58>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b66:	e010      	b.n	8000b8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_TIM_Base_MspInit+0x5c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10b      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_TIM_Base_MspInit+0x58>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_TIM_Base_MspInit+0x58>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_TIM_Base_MspInit+0x58>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40000800 	.word	0x40000800

08000b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bba:	d118      	bne.n	8000bee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_TIM_MspPostInit+0x98>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c34 <HAL_TIM_MspPostInit+0x98>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_TIM_MspPostInit+0x98>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4814      	ldr	r0, [pc, #80]	@ (8000c38 <HAL_TIM_MspPostInit+0x9c>)
 8000be8:	f001 f834 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bec:	e01d      	b.n	8000c2a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <HAL_TIM_MspPostInit+0xa0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d118      	bne.n	8000c2a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_TIM_MspPostInit+0x98>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <HAL_TIM_MspPostInit+0x98>)
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_TIM_MspPostInit+0x98>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c10:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <HAL_TIM_MspPostInit+0xa4>)
 8000c26:	f001 f815 	bl	8001c54 <HAL_GPIO_Init>
}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40000800 	.word	0x40000800
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <HAL_UART_MspInit+0x8c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d131      	bne.n	8000cc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <HAL_UART_MspInit+0x94>)
 8000caa:	f000 ffd3 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_UART_MspInit+0x94>)
 8000cc4:	f000 ffc6 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010800 	.word	0x40010800

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	@ 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <HAL_InitTick+0xd0>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <HAL_InitTick+0xd0>)
 8000cf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <HAL_InitTick+0xd0>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0a:	f107 020c 	add.w	r2, r7, #12
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fe6f 	bl	80029f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d1a:	f001 fe59 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8000d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d22:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <HAL_InitTick+0xd4>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	0c9b      	lsrs	r3, r3, #18
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d30:	4a21      	ldr	r2, [pc, #132]	@ (8000db8 <HAL_InitTick+0xdc>)
 8000d32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d54:	4817      	ldr	r0, [pc, #92]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d56:	f001 ff53 	bl	8002c00 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d11b      	bne.n	8000da0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d68:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d6a:	f001 ff99 	bl	8002ca0 <HAL_TIM_Base_Start_IT>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d111      	bne.n	8000da0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d7c:	2019      	movs	r0, #25
 8000d7e:	f000 fd6c 	bl	800185a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d808      	bhi.n	8000d9a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2019      	movs	r0, #25
 8000d8e:	f000 fd48 	bl	8001822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_InitTick+0xe0>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e002      	b.n	8000da0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000da0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	200004fc 	.word	0x200004fc
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	2000000c 	.word	0x2000000c

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <DMA1_Channel1_IRQHandler+0x10>)
 8000dfa:	f000 fdf7 	bl	80019ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000354 	.word	0x20000354

08000e08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <TIM1_UP_IRQHandler+0x10>)
 8000e0e:	f001 fff1 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200004fc 	.word	0x200004fc

08000e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fff8 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2e:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e30:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e44:	4c09      	ldr	r4, [pc, #36]	@ (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f004 f929 	bl	80050a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff f9cf 	bl	80001f8 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e64:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 8000e68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e6c:	200013d4 	.word	0x200013d4

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 fcc1 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f7ff ff26 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fd5c 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a03      	ldr	r2, [pc, #12]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	20000544 	.word	0x20000544

08000ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	@ (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000544 	.word	0x20000544

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff fff0 	bl	8000ec4 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffe0 	bl	8000ec4 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000010 	.word	0x20000010

08000f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0be      	b.n	80010c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d109      	bne.n	8000f64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fd2c 	bl	80009bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 faff 	bl	8001568 <ADC_ConversionStop_Disable>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 8099 	bne.w	80010ae <HAL_ADC_Init+0x18e>
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8095 	bne.w	80010ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	f043 0202 	orr.w	r2, r3, #2
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7b1b      	ldrb	r3, [r3, #12]
 8000fa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fb8:	d003      	beq.n	8000fc2 <HAL_ADC_Init+0xa2>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <HAL_ADC_Init+0xa8>
 8000fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc6:	e000      	b.n	8000fca <HAL_ADC_Init+0xaa>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7d1b      	ldrb	r3, [r3, #20]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d119      	bne.n	800100c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b1b      	ldrb	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	035a      	lsls	r2, r3, #13
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	e00b      	b.n	800100c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff8:	f043 0220 	orr.w	r2, r3, #32
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	430a      	orrs	r2, r1
 800101e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <HAL_ADC_Init+0x1a8>)
 8001028:	4013      	ands	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	430b      	orrs	r3, r1
 8001032:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800103c:	d003      	beq.n	8001046 <HAL_ADC_Init+0x126>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d104      	bne.n	8001050 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	3b01      	subs	r3, #1
 800104c:	051b      	lsls	r3, r3, #20
 800104e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001056:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	430a      	orrs	r2, r1
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <HAL_ADC_Init+0x1ac>)
 800106c:	4013      	ands	r3, r2
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	429a      	cmp	r2, r3
 8001072:	d10b      	bne.n	800108c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800108a:	e018      	b.n	80010be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001090:	f023 0312 	bic.w	r3, r3, #18
 8001094:	f043 0210 	orr.w	r2, r3, #16
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a0:	f043 0201 	orr.w	r2, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010ac:	e007      	b.n	80010be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b2:	f043 0210 	orr.w	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010be:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	ffe1f7fd 	.word	0xffe1f7fd
 80010cc:	ff1f0efe 	.word	0xff1f0efe

080010d0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a64      	ldr	r2, [pc, #400]	@ (8001278 <HAL_ADC_Start_DMA+0x1a8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d004      	beq.n	80010f4 <HAL_ADC_Start_DMA+0x24>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a63      	ldr	r2, [pc, #396]	@ (800127c <HAL_ADC_Start_DMA+0x1ac>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d106      	bne.n	8001102 <HAL_ADC_Start_DMA+0x32>
 80010f4:	4b60      	ldr	r3, [pc, #384]	@ (8001278 <HAL_ADC_Start_DMA+0x1a8>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f040 80b3 	bne.w	8001268 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_ADC_Start_DMA+0x40>
 800110c:	2302      	movs	r3, #2
 800110e:	e0ae      	b.n	800126e <HAL_ADC_Start_DMA+0x19e>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f9cb 	bl	80014b4 <ADC_Enable>
 800111e:	4603      	mov	r3, r0
 8001120:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 809a 	bne.w	800125e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a4e      	ldr	r2, [pc, #312]	@ (800127c <HAL_ADC_Start_DMA+0x1ac>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d105      	bne.n	8001154 <HAL_ADC_Start_DMA+0x84>
 8001148:	4b4b      	ldr	r3, [pc, #300]	@ (8001278 <HAL_ADC_Start_DMA+0x1a8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d115      	bne.n	8001180 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001158:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800116a:	2b00      	cmp	r3, #0
 800116c:	d026      	beq.n	80011bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001172:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001176:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800117e:	e01d      	b.n	80011bc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a39      	ldr	r2, [pc, #228]	@ (8001278 <HAL_ADC_Start_DMA+0x1a8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d004      	beq.n	80011a0 <HAL_ADC_Start_DMA+0xd0>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a38      	ldr	r2, [pc, #224]	@ (800127c <HAL_ADC_Start_DMA+0x1ac>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d10d      	bne.n	80011bc <HAL_ADC_Start_DMA+0xec>
 80011a0:	4b35      	ldr	r3, [pc, #212]	@ (8001278 <HAL_ADC_Start_DMA+0x1a8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011cc:	f023 0206 	bic.w	r2, r3, #6
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <HAL_ADC_Start_DMA+0x1b0>)
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a24      	ldr	r2, [pc, #144]	@ (8001284 <HAL_ADC_Start_DMA+0x1b4>)
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <HAL_ADC_Start_DMA+0x1b8>)
 80011fa:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f06f 0202 	mvn.w	r2, #2
 8001204:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001214:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a18      	ldr	r0, [r3, #32]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	334c      	adds	r3, #76	@ 0x4c
 8001220:	4619      	mov	r1, r3
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f000 fb81 	bl	800192c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001234:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001238:	d108      	bne.n	800124c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001248:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800124a:	e00f      	b.n	800126c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800125a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800125c:	e006      	b.n	800126c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001266:	e001      	b.n	800126c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40012400 	.word	0x40012400
 800127c:	40012800 	.word	0x40012800
 8001280:	080015eb 	.word	0x080015eb
 8001284:	08001667 	.word	0x08001667
 8001288:	08001683 	.word	0x08001683

0800128c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x20>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e0dc      	b.n	800149e <HAL_ADC_ConfigChannel+0x1da>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d81c      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b05      	subs	r3, #5
 8001306:	221f      	movs	r2, #31
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	4019      	ands	r1, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b05      	subs	r3, #5
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34
 800132c:	e03c      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d81c      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b23      	subs	r3, #35	@ 0x23
 8001348:	221f      	movs	r2, #31
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	4019      	ands	r1, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b23      	subs	r3, #35	@ 0x23
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
 800136e:	e01b      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	@ 0x41
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b41      	subs	r3, #65	@ 0x41
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d91c      	bls.n	80013ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68d9      	ldr	r1, [r3, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	3b1e      	subs	r3, #30
 80013c2:	2207      	movs	r2, #7
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	3b1e      	subs	r3, #30
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	e019      	b.n	800141e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6919      	ldr	r1, [r3, #16]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d003      	beq.n	800142e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800142a:	2b11      	cmp	r3, #17
 800142c:	d132      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1d      	ldr	r2, [pc, #116]	@ (80014a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d125      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d126      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001454:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d11a      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x1b2>
 8001482:	e007      	b.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	f043 0220 	orr.w	r2, r3, #32
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40012400 	.word	0x40012400
 80014ac:	20000008 	.word	0x20000008
 80014b0:	431bde83 	.word	0x431bde83

080014b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d040      	beq.n	8001554 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <ADC_Enable+0xac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <ADC_Enable+0xb0>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014f0:	e002      	b.n	80014f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014fe:	f7ff fce1 	bl	8000ec4 <HAL_GetTick>
 8001502:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001504:	e01f      	b.n	8001546 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001506:	f7ff fcdd 	bl	8000ec4 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d918      	bls.n	8001546 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d011      	beq.n	8001546 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e007      	b.n	8001556 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d1d8      	bne.n	8001506 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008
 8001564:	431bde83 	.word	0x431bde83

08001568 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12e      	bne.n	80015e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001592:	f7ff fc97 	bl	8000ec4 <HAL_GetTick>
 8001596:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001598:	e01b      	b.n	80015d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800159a:	f7ff fc93 	bl	8000ec4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d914      	bls.n	80015d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10d      	bne.n	80015d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e007      	b.n	80015e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d0dc      	beq.n	800159a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001600:	2b00      	cmp	r3, #0
 8001602:	d127      	bne.n	8001654 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800161a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800161e:	d115      	bne.n	800164c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff fe1d 	bl	800128c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001652:	e004      	b.n	800165e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fe12 	bl	800129e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fe01 	bl	80012b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4906      	ldr	r1, [pc, #24]	@ (8001750 <__NVIC_EnableIRQ+0x34>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff4f 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff64 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ffb2 	bl	80017a8 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff81 	bl	8001754 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff57 	bl	800171c <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e043      	b.n	8001916 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <HAL_DMA_Init+0xa8>)
 8001896:	4413      	add	r3, r2
 8001898:	4a22      	ldr	r2, [pc, #136]	@ (8001924 <HAL_DMA_Init+0xac>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <HAL_DMA_Init+0xb0>)
 80018aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	bffdfff8 	.word	0xbffdfff8
 8001924:	cccccccd 	.word	0xcccccccd
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_DMA_Start_IT+0x20>
 8001948:	2302      	movs	r3, #2
 800194a:	e04b      	b.n	80019e4 <HAL_DMA_Start_IT+0xb8>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d13a      	bne.n	80019d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f937 	bl	8001bf8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 020e 	orr.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e00f      	b.n	80019c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 020a 	orr.w	r2, r2, #10
 80019c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e005      	b.n	80019e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019de:	2302      	movs	r3, #2
 80019e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	2204      	movs	r2, #4
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d04f      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0xc8>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0204 	bic.w	r2, r2, #4
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a66      	ldr	r2, [pc, #408]	@ (8001bdc <HAL_DMA_IRQHandler+0x1f0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d029      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xae>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_DMA_IRQHandler+0x1f4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d022      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xaa>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a63      	ldr	r2, [pc, #396]	@ (8001be4 <HAL_DMA_IRQHandler+0x1f8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xa4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a62      	ldr	r2, [pc, #392]	@ (8001be8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d012      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x9e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a60      	ldr	r2, [pc, #384]	@ (8001bec <HAL_DMA_IRQHandler+0x200>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00a      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x98>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf0 <HAL_DMA_IRQHandler+0x204>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d102      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x92>
 8001a78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a7c:	e00e      	b.n	8001a9c <HAL_DMA_IRQHandler+0xb0>
 8001a7e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a82:	e00b      	b.n	8001a9c <HAL_DMA_IRQHandler+0xb0>
 8001a84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a88:	e008      	b.n	8001a9c <HAL_DMA_IRQHandler+0xb0>
 8001a8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a8e:	e005      	b.n	8001a9c <HAL_DMA_IRQHandler+0xb0>
 8001a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a94:	e002      	b.n	8001a9c <HAL_DMA_IRQHandler+0xb0>
 8001a96:	2340      	movs	r3, #64	@ 0x40
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_IRQHandler+0xb0>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	4a55      	ldr	r2, [pc, #340]	@ (8001bf4 <HAL_DMA_IRQHandler+0x208>)
 8001a9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8094 	beq.w	8001bd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab2:	e08e      	b.n	8001bd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	2202      	movs	r2, #2
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d056      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x186>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d051      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020a 	bic.w	r2, r2, #10
 8001aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a38      	ldr	r2, [pc, #224]	@ (8001bdc <HAL_DMA_IRQHandler+0x1f0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d029      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x166>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a37      	ldr	r2, [pc, #220]	@ (8001be0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d022      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x162>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a35      	ldr	r2, [pc, #212]	@ (8001be4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01a      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x15c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a34      	ldr	r2, [pc, #208]	@ (8001be8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d012      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x156>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <HAL_DMA_IRQHandler+0x200>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00a      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x150>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a31      	ldr	r2, [pc, #196]	@ (8001bf0 <HAL_DMA_IRQHandler+0x204>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d102      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x14a>
 8001b30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b34:	e00e      	b.n	8001b54 <HAL_DMA_IRQHandler+0x168>
 8001b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3a:	e00b      	b.n	8001b54 <HAL_DMA_IRQHandler+0x168>
 8001b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b40:	e008      	b.n	8001b54 <HAL_DMA_IRQHandler+0x168>
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	e005      	b.n	8001b54 <HAL_DMA_IRQHandler+0x168>
 8001b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b4c:	e002      	b.n	8001b54 <HAL_DMA_IRQHandler+0x168>
 8001b4e:	2320      	movs	r3, #32
 8001b50:	e000      	b.n	8001b54 <HAL_DMA_IRQHandler+0x168>
 8001b52:	2302      	movs	r3, #2
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <HAL_DMA_IRQHandler+0x208>)
 8001b56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d034      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b70:	e02f      	b.n	8001bd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	2208      	movs	r2, #8
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d028      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x1e8>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d023      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 020e 	bic.w	r2, r2, #14
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
    }
  }
  return;
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
}
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020008 	.word	0x40020008
 8001be0:	4002001c 	.word	0x4002001c
 8001be4:	40020030 	.word	0x40020030
 8001be8:	40020044 	.word	0x40020044
 8001bec:	40020058 	.word	0x40020058
 8001bf0:	4002006c 	.word	0x4002006c
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d108      	bne.n	8001c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c36:	e007      	b.n	8001c48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b08b      	sub	sp, #44	@ 0x2c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e169      	b.n	8001f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8158 	bne.w	8001f36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ef4 <HAL_GPIO_Init+0x2a0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05e      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c90:	4a98      	ldr	r2, [pc, #608]	@ (8001ef4 <HAL_GPIO_Init+0x2a0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d875      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001c96:	4a98      	ldr	r2, [pc, #608]	@ (8001ef8 <HAL_GPIO_Init+0x2a4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d058      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c9c:	4a96      	ldr	r2, [pc, #600]	@ (8001ef8 <HAL_GPIO_Init+0x2a4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d86f      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a96      	ldr	r2, [pc, #600]	@ (8001efc <HAL_GPIO_Init+0x2a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d052      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001ca8:	4a94      	ldr	r2, [pc, #592]	@ (8001efc <HAL_GPIO_Init+0x2a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d869      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cae:	4a94      	ldr	r2, [pc, #592]	@ (8001f00 <HAL_GPIO_Init+0x2ac>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04c      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cb4:	4a92      	ldr	r2, [pc, #584]	@ (8001f00 <HAL_GPIO_Init+0x2ac>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d863      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cba:	4a92      	ldr	r2, [pc, #584]	@ (8001f04 <HAL_GPIO_Init+0x2b0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d046      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cc0:	4a90      	ldr	r2, [pc, #576]	@ (8001f04 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d85d      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d82a      	bhi.n	8001d20 <HAL_GPIO_Init+0xcc>
 8001cca:	2b12      	cmp	r3, #18
 8001ccc:	d859      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cce:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <HAL_GPIO_Init+0x80>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001d4f 	.word	0x08001d4f
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001d3b 	.word	0x08001d3b
 8001ce0:	08001d7d 	.word	0x08001d7d
 8001ce4:	08001d83 	.word	0x08001d83
 8001ce8:	08001d83 	.word	0x08001d83
 8001cec:	08001d83 	.word	0x08001d83
 8001cf0:	08001d83 	.word	0x08001d83
 8001cf4:	08001d83 	.word	0x08001d83
 8001cf8:	08001d83 	.word	0x08001d83
 8001cfc:	08001d83 	.word	0x08001d83
 8001d00:	08001d83 	.word	0x08001d83
 8001d04:	08001d83 	.word	0x08001d83
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d83 	.word	0x08001d83
 8001d10:	08001d83 	.word	0x08001d83
 8001d14:	08001d83 	.word	0x08001d83
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d45 	.word	0x08001d45
 8001d20:	4a79      	ldr	r2, [pc, #484]	@ (8001f08 <HAL_GPIO_Init+0x2b4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d26:	e02c      	b.n	8001d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e029      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e024      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e01f      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e01a      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d56:	2304      	movs	r3, #4
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e013      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	611a      	str	r2, [r3, #16]
          break;
 8001d6e:	e009      	b.n	8001d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	615a      	str	r2, [r3, #20]
          break;
 8001d7a:	e003      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          break;
 8001d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2bff      	cmp	r3, #255	@ 0xff
 8001d88:	d801      	bhi.n	8001d8e <HAL_GPIO_Init+0x13a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_Init+0x13e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2bff      	cmp	r3, #255	@ 0xff
 8001d98:	d802      	bhi.n	8001da0 <HAL_GPIO_Init+0x14c>
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x152>
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	3b08      	subs	r3, #8
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	210f      	movs	r1, #15
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80b1 	beq.w	8001f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dec:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_GPIO_Init+0x2bc>)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a40      	ldr	r2, [pc, #256]	@ (8001f14 <HAL_GPIO_Init+0x2c0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_Init+0x1ec>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f18 <HAL_GPIO_Init+0x2c4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1e8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3e      	ldr	r2, [pc, #248]	@ (8001f1c <HAL_GPIO_Init+0x2c8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1e4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f20 <HAL_GPIO_Init+0x2cc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1e0>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e40:	2300      	movs	r3, #0
 8001e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e52:	492f      	ldr	r1, [pc, #188]	@ (8001f10 <HAL_GPIO_Init+0x2bc>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	492c      	ldr	r1, [pc, #176]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4928      	ldr	r1, [pc, #160]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4922      	ldr	r1, [pc, #136]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	491e      	ldr	r1, [pc, #120]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4918      	ldr	r1, [pc, #96]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4914      	ldr	r1, [pc, #80]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d021      	beq.n	8001f28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	490e      	ldr	r1, [pc, #56]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e021      	b.n	8001f36 <HAL_GPIO_Init+0x2e2>
 8001ef2:	bf00      	nop
 8001ef4:	10320000 	.word	0x10320000
 8001ef8:	10310000 	.word	0x10310000
 8001efc:	10220000 	.word	0x10220000
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10120000 	.word	0x10120000
 8001f08:	10110000 	.word	0x10110000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40011400 	.word	0x40011400
 8001f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_GPIO_Init+0x304>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4909      	ldr	r1, [pc, #36]	@ (8001f58 <HAL_GPIO_Init+0x304>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	3301      	adds	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f47f ae8e 	bne.w	8001c68 <HAL_GPIO_Init+0x14>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	372c      	adds	r7, #44	@ 0x2c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e12b      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fd82 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f000 fcda 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a81      	ldr	r2, [pc, #516]	@ (8002200 <HAL_I2C_Init+0x274>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d807      	bhi.n	8002010 <HAL_I2C_Init+0x84>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a80      	ldr	r2, [pc, #512]	@ (8002204 <HAL_I2C_Init+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e006      	b.n	800201e <HAL_I2C_Init+0x92>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a7d      	ldr	r2, [pc, #500]	@ (8002208 <HAL_I2C_Init+0x27c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0e7      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a78      	ldr	r2, [pc, #480]	@ (800220c <HAL_I2C_Init+0x280>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a6a      	ldr	r2, [pc, #424]	@ (8002200 <HAL_I2C_Init+0x274>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d802      	bhi.n	8002060 <HAL_I2C_Init+0xd4>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	e009      	b.n	8002074 <HAL_I2C_Init+0xe8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a69      	ldr	r2, [pc, #420]	@ (8002210 <HAL_I2C_Init+0x284>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	3301      	adds	r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	495c      	ldr	r1, [pc, #368]	@ (8002200 <HAL_I2C_Init+0x274>)
 8002090:	428b      	cmp	r3, r1
 8002092:	d819      	bhi.n	80020c8 <HAL_I2C_Init+0x13c>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e59      	subs	r1, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020a8:	400b      	ands	r3, r1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_I2C_Init+0x138>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	e051      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e04f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_I2C_Init+0x168>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_I2C_Init+0x18e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x196>
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_I2C_Init+0x1bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e58      	subs	r0, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	fbb0 f3f3 	udiv	r3, r0, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6911      	ldr	r1, [r2, #16]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	000186a0 	.word	0x000186a0
 8002204:	001e847f 	.word	0x001e847f
 8002208:	003d08ff 	.word	0x003d08ff
 800220c:	431bde83 	.word	0x431bde83
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e272      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002234:	4b92      	ldr	r3, [pc, #584]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00c      	beq.n	800225a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002240:	4b8f      	ldr	r3, [pc, #572]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d112      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
 800224c:	4b8c      	ldr	r3, [pc, #560]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	4b89      	ldr	r3, [pc, #548]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d06c      	beq.n	8002340 <HAL_RCC_OscConfig+0x12c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d168      	bne.n	8002340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e24c      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x76>
 800227c:	4b80      	ldr	r3, [pc, #512]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a7f      	ldr	r2, [pc, #508]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e02e      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x98>
 8002292:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7a      	ldr	r2, [pc, #488]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a77      	ldr	r2, [pc, #476]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0xbc>
 80022b6:	4b72      	ldr	r3, [pc, #456]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a71      	ldr	r2, [pc, #452]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b68      	ldr	r3, [pc, #416]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a67      	ldr	r2, [pc, #412]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fde8 	bl	8000ec4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fde4 	bl	8000ec4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e200      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xe4>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fdd4 	bl	8000ec4 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fdd0 	bl	8000ec4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1ec      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x10c>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d063      	beq.n	8002416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234e:	4b4c      	ldr	r3, [pc, #304]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800235a:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
 8002366:	4b46      	ldr	r3, [pc, #280]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1c0      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4939      	ldr	r1, [pc, #228]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	e03a      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <HAL_RCC_OscConfig+0x270>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fd89 	bl	8000ec4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fd85 	bl	8000ec4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1a1      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4927      	ldr	r1, [pc, #156]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fd68 	bl	8000ec4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe fd64 	bl	8000ec4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e180      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03a      	beq.n	8002498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_RCC_OscConfig+0x274>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe fd48 	bl	8000ec4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fd44 	bl	8000ec4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e160      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_RCC_OscConfig+0x26c>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f000 fafe 	bl	8002a58 <RCC_Delay>
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_OscConfig+0x274>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7fe fd2e 	bl	8000ec4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe fd2a 	bl	8000ec4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d908      	bls.n	800248c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e146      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	42420000 	.word	0x42420000
 8002488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b92      	ldr	r3, [pc, #584]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e9      	bne.n	800246c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a6 	beq.w	80025f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b8b      	ldr	r3, [pc, #556]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a87      	ldr	r2, [pc, #540]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b85      	ldr	r3, [pc, #532]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b82      	ldr	r3, [pc, #520]	@ (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b7f      	ldr	r3, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	@ (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fceb 	bl	8000ec4 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7fe fce7 	bl	8000ec4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	@ 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e103      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b75      	ldr	r3, [pc, #468]	@ (80026dc <HAL_RCC_OscConfig+0x4c8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x312>
 8002518:	4b6f      	ldr	r3, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a6e      	ldr	r2, [pc, #440]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e02d      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x334>
 800252e:	4b6a      	ldr	r3, [pc, #424]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a69      	ldr	r2, [pc, #420]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b67      	ldr	r3, [pc, #412]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a66      	ldr	r2, [pc, #408]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	e01c      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x356>
 8002550:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a60      	ldr	r2, [pc, #384]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	4b5e      	ldr	r3, [pc, #376]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a5d      	ldr	r2, [pc, #372]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 800256a:	4b5b      	ldr	r3, [pc, #364]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a5a      	ldr	r2, [pc, #360]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a57      	ldr	r2, [pc, #348]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe fc9b 	bl	8000ec4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fc97 	bl	8000ec4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0b1      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b4b      	ldr	r3, [pc, #300]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCC_OscConfig+0x37e>
 80025b4:	e014      	b.n	80025e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fc85 	bl	8000ec4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fc81 	bl	8000ec4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e09b      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	4b40      	ldr	r3, [pc, #256]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b3c      	ldr	r3, [pc, #240]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b36      	ldr	r3, [pc, #216]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d061      	beq.n	80026cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d146      	bne.n	800269e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b33      	ldr	r3, [pc, #204]	@ (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe fc55 	bl	8000ec4 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe fc51 	bl	8000ec4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e06d      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002646:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4921      	ldr	r1, [pc, #132]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b1f      	ldr	r3, [pc, #124]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a19      	ldr	r1, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	430b      	orrs	r3, r1
 800266a:	491b      	ldr	r1, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fc25 	bl	8000ec4 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fc21 	bl	8000ec4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x46a>
 800269c:	e035      	b.n	800270a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc0e 	bl	8000ec4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fc0a 	bl	8000ec4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e026      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x498>
 80026ca:	e01e      	b.n	800270a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e019      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40007000 	.word	0x40007000
 80026e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_OscConfig+0x500>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d0      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d910      	bls.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b67      	ldr	r3, [pc, #412]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4965      	ldr	r1, [pc, #404]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a58      	ldr	r2, [pc, #352]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800277e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a52      	ldr	r2, [pc, #328]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d040      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e073      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3d      	ldr	r3, [pc, #244]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06b      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4936      	ldr	r1, [pc, #216]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7fe fb5c 	bl	8000ec4 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fe fb58 	bl	8000ec4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e053      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d210      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4922      	ldr	r1, [pc, #136]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002892:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1cc>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_ClockConfig+0x1d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fa08 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08005210 	.word	0x08005210
 80028e4:	20000008 	.word	0x20000008
 80028e8:	2000000c 	.word	0x2000000c

080028ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002906:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x94>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x30>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x36>
 800291a:	e027      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x98>)
 800291e:	613b      	str	r3, [r7, #16]
      break;
 8002920:	e027      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	4a17      	ldr	r2, [pc, #92]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x94>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0c5b      	lsrs	r3, r3, #17
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	4a11      	ldr	r2, [pc, #68]	@ (800298c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x98>)
 800294e:	fb03 f202 	mul.w	r2, r3, r2
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e004      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0c      	ldr	r2, [pc, #48]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	613b      	str	r3, [r7, #16]
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	613b      	str	r3, [r7, #16]
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	693b      	ldr	r3, [r7, #16]
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	08005228 	.word	0x08005228
 800298c:	08005238 	.word	0x08005238
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b02      	ldr	r3, [pc, #8]	@ (80029a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000008 	.word	0x20000008

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff2 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08005220 	.word	0x08005220

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffde 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0adb      	lsrs	r3, r3, #11
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	@ (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08005220 	.word	0x08005220

080029f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	220f      	movs	r2, #15
 8002a06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_RCC_GetClockConfig+0x58>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_RCC_GetClockConfig+0x58>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_RCC_GetClockConfig+0x58>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <HAL_RCC_GetClockConfig+0x58>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0207 	and.w	r2, r3, #7
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40022000 	.word	0x40022000

08002a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a60:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <RCC_Delay+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <RCC_Delay+0x38>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a5b      	lsrs	r3, r3, #9
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a74:	bf00      	nop
  }
  while (Delay --);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f9      	bne.n	8002a74 <RCC_Delay+0x1c>
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000008 	.word	0x20000008
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d07d      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10d      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	61d3      	str	r3, [r2, #28]
 8002acc:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b46      	ldr	r3, [pc, #280]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d118      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae8:	4b43      	ldr	r3, [pc, #268]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a42      	ldr	r2, [pc, #264]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af4:	f7fe f9e6 	bl	8000ec4 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe f9e2 	bl	8000ec4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	@ 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e06d      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1a:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02e      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d027      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b38:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b2e      	ldr	r3, [pc, #184]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	4b2c      	ldr	r3, [pc, #176]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b4e:	4a29      	ldr	r2, [pc, #164]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d014      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f9b1 	bl	8000ec4 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe f9ad 	bl	8000ec4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e036      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ee      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4917      	ldr	r1, [pc, #92]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4a13      	ldr	r2, [pc, #76]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	490b      	ldr	r1, [pc, #44]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bd6:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4904      	ldr	r1, [pc, #16]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42420440 	.word	0x42420440

08002c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e041      	b.n	8002c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd ff88 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 fb8e 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d001      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e03a      	b.n	8002d2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	@ (8002d38 <HAL_TIM_Base_Start_IT+0x98>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x58>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce2:	d009      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x58>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x58>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d111      	bne.n	8002d1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d010      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	e007      	b.n	8002d2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800

08002d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e041      	b.n	8002dda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f839 	bl	8002de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 faec 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d122      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0202 	mvn.w	r2, #2
 8002e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa76 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa69 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fa78 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0204 	mvn.w	r2, #4
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa4c 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa3f 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fa4e 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0208 	mvn.w	r2, #8
 8002ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa22 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa15 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fa24 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d11b      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0210 	mvn.w	r2, #16
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2208      	movs	r2, #8
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9f8 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f9eb 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f9fa 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0201 	mvn.w	r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fcd2 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	2b80      	cmp	r3, #128	@ 0x80
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fcc5 	bl	800392e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f9be 	bl	800334c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0220 	mvn.w	r2, #32
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fc90 	bl	800391c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800301e:	2302      	movs	r3, #2
 8003020:	e0ae      	b.n	8003180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	f200 809f 	bhi.w	8003170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003032:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	0800306d 	.word	0x0800306d
 800303c:	08003171 	.word	0x08003171
 8003040:	08003171 	.word	0x08003171
 8003044:	08003171 	.word	0x08003171
 8003048:	080030ad 	.word	0x080030ad
 800304c:	08003171 	.word	0x08003171
 8003050:	08003171 	.word	0x08003171
 8003054:	08003171 	.word	0x08003171
 8003058:	080030ef 	.word	0x080030ef
 800305c:	08003171 	.word	0x08003171
 8003060:	08003171 	.word	0x08003171
 8003064:	08003171 	.word	0x08003171
 8003068:	0800312f 	.word	0x0800312f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f9d6 	bl	8003424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0208 	orr.w	r2, r2, #8
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	619a      	str	r2, [r3, #24]
      break;
 80030aa:	e064      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fa1c 	bl	80034f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	021a      	lsls	r2, r3, #8
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
      break;
 80030ec:	e043      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fa65 	bl	80035c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0208 	orr.w	r2, r2, #8
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0204 	bic.w	r2, r2, #4
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	61da      	str	r2, [r3, #28]
      break;
 800312c:	e023      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 faaf 	bl	8003698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69d9      	ldr	r1, [r3, #28]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	61da      	str	r2, [r3, #28]
      break;
 800316e:	e002      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
      break;
 8003174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_TIM_ConfigClockSource+0x1c>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0b4      	b.n	800330e <HAL_TIM_ConfigClockSource+0x186>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031dc:	d03e      	beq.n	800325c <HAL_TIM_ConfigClockSource+0xd4>
 80031de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e2:	f200 8087 	bhi.w	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ea:	f000 8086 	beq.w	80032fa <HAL_TIM_ConfigClockSource+0x172>
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f2:	d87f      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b70      	cmp	r3, #112	@ 0x70
 80031f6:	d01a      	beq.n	800322e <HAL_TIM_ConfigClockSource+0xa6>
 80031f8:	2b70      	cmp	r3, #112	@ 0x70
 80031fa:	d87b      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b60      	cmp	r3, #96	@ 0x60
 80031fe:	d050      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003200:	2b60      	cmp	r3, #96	@ 0x60
 8003202:	d877      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b50      	cmp	r3, #80	@ 0x50
 8003206:	d03c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xfa>
 8003208:	2b50      	cmp	r3, #80	@ 0x50
 800320a:	d873      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b40      	cmp	r3, #64	@ 0x40
 800320e:	d058      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d86f      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b30      	cmp	r3, #48	@ 0x30
 8003216:	d064      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003218:	2b30      	cmp	r3, #48	@ 0x30
 800321a:	d86b      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b20      	cmp	r3, #32
 800321e:	d060      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d867      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05c      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003228:	2b10      	cmp	r3, #16
 800322a:	d05a      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x15a>
 800322c:	e062      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800323e:	f000 faf0 	bl	8003822 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	609a      	str	r2, [r3, #8]
      break;
 800325a:	e04f      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800326c:	f000 fad9 	bl	8003822 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800327e:	609a      	str	r2, [r3, #8]
      break;
 8003280:	e03c      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	461a      	mov	r2, r3
 8003290:	f000 fa50 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2150      	movs	r1, #80	@ 0x50
 800329a:	4618      	mov	r0, r3
 800329c:	f000 faa7 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 80032a0:	e02c      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ae:	461a      	mov	r2, r3
 80032b0:	f000 fa6e 	bl	8003790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2160      	movs	r1, #96	@ 0x60
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa97 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 80032c0:	e01c      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	461a      	mov	r2, r3
 80032d0:	f000 fa30 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2140      	movs	r1, #64	@ 0x40
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa87 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 80032e0:	e00c      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	4610      	mov	r0, r2
 80032ee:	f000 fa7e 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 80032f2:	e003      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e000      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
	...

08003360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a29      	ldr	r2, [pc, #164]	@ (8003418 <TIM_Base_SetConfig+0xb8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00b      	beq.n	8003390 <TIM_Base_SetConfig+0x30>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337e:	d007      	beq.n	8003390 <TIM_Base_SetConfig+0x30>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a26      	ldr	r2, [pc, #152]	@ (800341c <TIM_Base_SetConfig+0xbc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0x30>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a25      	ldr	r2, [pc, #148]	@ (8003420 <TIM_Base_SetConfig+0xc0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d108      	bne.n	80033a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <TIM_Base_SetConfig+0xb8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <TIM_Base_SetConfig+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d007      	beq.n	80033c2 <TIM_Base_SetConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a19      	ldr	r2, [pc, #100]	@ (800341c <TIM_Base_SetConfig+0xbc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d003      	beq.n	80033c2 <TIM_Base_SetConfig+0x62>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <TIM_Base_SetConfig+0xc0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a07      	ldr	r2, [pc, #28]	@ (8003418 <TIM_Base_SetConfig+0xb8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	615a      	str	r2, [r3, #20]
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800

08003424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f023 0201 	bic.w	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 0302 	bic.w	r3, r3, #2
 800346c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <TIM_OC1_SetConfig+0xc8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d10c      	bne.n	800349a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0308 	bic.w	r3, r3, #8
 8003486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a13      	ldr	r2, [pc, #76]	@ (80034ec <TIM_OC1_SetConfig+0xc8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d111      	bne.n	80034c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	621a      	str	r2, [r3, #32]
}
 80034e0:	bf00      	nop
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f023 0210 	bic.w	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0320 	bic.w	r3, r3, #32
 800353a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <TIM_OC2_SetConfig+0xd0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10d      	bne.n	800356c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800356a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <TIM_OC2_SetConfig+0xd0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d113      	bne.n	800359c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800357a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00

080035c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800360c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <TIM_OC3_SetConfig+0xd0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10d      	bne.n	800363e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800363c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <TIM_OC3_SetConfig+0xd0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d113      	bne.n	800366e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800364c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	621a      	str	r2, [r3, #32]
}
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00

08003698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	031b      	lsls	r3, r3, #12
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003730 <TIM_OC4_SetConfig+0x98>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d109      	bne.n	800370c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40012c00 	.word	0x40012c00

08003734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 030a 	bic.w	r3, r3, #10
 8003770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	031b      	lsls	r3, r3, #12
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	f043 0307 	orr.w	r3, r3, #7
 8003810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003822:	b480      	push	{r7}
 8003824:	b087      	sub	sp, #28
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800383c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	021a      	lsls	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	431a      	orrs	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4313      	orrs	r3, r2
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	609a      	str	r2, [r3, #8]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e046      	b.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00e      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c4:	d009      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a12      	ldr	r2, [pc, #72]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10c      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800

0800391c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e042      	b.n	80039d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd f96c 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	@ 0x24
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f889 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d112      	bne.n	8003a20 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_Receive_IT+0x26>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00b      	b.n	8003a22 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f807 	bl	8003a2a <UART_Start_Receive_IT>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2222      	movs	r2, #34	@ 0x22
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003ad6:	f023 030c 	bic.w	r3, r3, #12
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb0 <UART_SetConfig+0x114>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7fe ff64 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	e002      	b.n	8003b12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe ff4c 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8003b10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	4a22      	ldr	r2, [pc, #136]	@ (8003bb4 <UART_SetConfig+0x118>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	0119      	lsls	r1, r3, #4
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009a      	lsls	r2, r3, #2
 8003b3c:	441a      	add	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b48:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb4 <UART_SetConfig+0x118>)
 8003b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2064      	movs	r0, #100	@ 0x64
 8003b52:	fb00 f303 	mul.w	r3, r0, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	3332      	adds	r3, #50	@ 0x32
 8003b5c:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <UART_SetConfig+0x118>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b68:	4419      	add	r1, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <UART_SetConfig+0x118>)
 8003b82:	fba3 0302 	umull	r0, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2064      	movs	r0, #100	@ 0x64
 8003b8a:	fb00 f303 	mul.w	r3, r0, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	3332      	adds	r3, #50	@ 0x32
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <UART_SetConfig+0x118>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	51eb851f 	.word	0x51eb851f

08003bb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bca:	2b84      	cmp	r3, #132	@ 0x84
 8003bcc:	d005      	beq.n	8003bda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3303      	adds	r3, #3
 8003bd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bea:	f000 faef 	bl	80041cc <vTaskStartScheduler>
  
  return osOK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	b089      	sub	sp, #36	@ 0x24
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d020      	beq.n	8003c48 <osThreadCreate+0x54>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01c      	beq.n	8003c48 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685c      	ldr	r4, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691e      	ldr	r6, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ffc9 	bl	8003bb8 <makeFreeRtosPriority>
 8003c26:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c30:	9202      	str	r2, [sp, #8]
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	9100      	str	r1, [sp, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	4632      	mov	r2, r6
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 f8e8 	bl	8003e12 <xTaskCreateStatic>
 8003c42:	4603      	mov	r3, r0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e01c      	b.n	8003c82 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685c      	ldr	r4, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c54:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ffab 	bl	8003bb8 <makeFreeRtosPriority>
 8003c62:	4602      	mov	r2, r0
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	9200      	str	r2, [sp, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4632      	mov	r2, r6
 8003c70:	4629      	mov	r1, r5
 8003c72:	4620      	mov	r0, r4
 8003c74:	f000 f92c 	bl	8003ed0 <xTaskCreate>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c82:	68fb      	ldr	r3, [r7, #12]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c8c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <osDelay+0x16>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	e000      	b.n	8003ca4 <osDelay+0x18>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fa5b 	bl	8004160 <vTaskDelay>
  
  return osOK;
 8003caa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f103 0208 	add.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f103 0208 	add.w	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0208 	add.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d103      	bne.n	8003d70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e00c      	b.n	8003d8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3308      	adds	r3, #8
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e002      	b.n	8003d7e <vListInsert+0x2e>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d2f6      	bcs.n	8003d78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6852      	ldr	r2, [r2, #4]
 8003de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d103      	bne.n	8003df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1e5a      	subs	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08e      	sub	sp, #56	@ 0x38
 8003e16:	af04      	add	r7, sp, #16
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	61fb      	str	r3, [r7, #28]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e5c:	23a0      	movs	r3, #160	@ 0xa0
 8003e5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e64:	d00b      	beq.n	8003e7e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	61bb      	str	r3, [r7, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01e      	beq.n	8003ec2 <xTaskCreateStatic+0xb0>
 8003e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01b      	beq.n	8003ec2 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f851 	bl	8003f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ebc:	f000 f8e6 	bl	800408c <prvAddNewTaskToReadyList>
 8003ec0:	e001      	b.n	8003ec6 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ec6:	697b      	ldr	r3, [r7, #20]
	}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3728      	adds	r7, #40	@ 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	@ 0x30
 8003ed4:	af04      	add	r7, sp, #16
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fea3 	bl	8004c30 <pvPortMalloc>
 8003eea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00e      	beq.n	8003f10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ef2:	20a0      	movs	r0, #160	@ 0xa0
 8003ef4:	f000 fe9c 	bl	8004c30 <pvPortMalloc>
 8003ef8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f06:	e005      	b.n	8003f14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f000 ff59 	bl	8004dc0 <vPortFree>
 8003f0e:	e001      	b.n	8003f14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9303      	str	r3, [sp, #12]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f80f 	bl	8003f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f3e:	69f8      	ldr	r0, [r7, #28]
 8003f40:	f000 f8a4 	bl	800408c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f44:	2301      	movs	r3, #1
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e002      	b.n	8003f50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f50:	69bb      	ldr	r3, [r7, #24]
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f74:	3b01      	subs	r3, #1
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f023 0307 	bic.w	r3, r3, #7
 8003f82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	617b      	str	r3, [r7, #20]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e012      	b.n	8003fd2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	7819      	ldrb	r1, [r3, #0]
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3334      	adds	r3, #52	@ 0x34
 8003fbc:	460a      	mov	r2, r1
 8003fbe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d9e9      	bls.n	8003fac <prvInitialiseNewTask+0x50>
 8003fd8:	e000      	b.n	8003fdc <prvInitialiseNewTask+0x80>
		{
			break;
 8003fda:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d901      	bls.n	8003fee <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fea:	2306      	movs	r3, #6
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fe74 	bl	8003cf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	3318      	adds	r3, #24
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fe6f 	bl	8003cf2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004018:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	f1c3 0207 	rsb	r2, r3, #7
 8004020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004022:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	2200      	movs	r2, #0
 800402e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	2200      	movs	r2, #0
 8004036:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	334c      	adds	r3, #76	@ 0x4c
 800403e:	224c      	movs	r2, #76	@ 0x4c
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ffd2 	bl	8004fec <memset>
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <prvInitialiseNewTask+0x124>)
 800404c:	651a      	str	r2, [r3, #80]	@ 0x50
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	4a0c      	ldr	r2, [pc, #48]	@ (8004084 <prvInitialiseNewTask+0x128>)
 8004052:	655a      	str	r2, [r3, #84]	@ 0x54
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	4a0c      	ldr	r2, [pc, #48]	@ (8004088 <prvInitialiseNewTask+0x12c>)
 8004058:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	69b8      	ldr	r0, [r7, #24]
 8004060:	f000 fc30 	bl	80048c4 <pxPortInitialiseStack>
 8004064:	4602      	mov	r2, r0
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800406a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004076:	bf00      	nop
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20001294 	.word	0x20001294
 8004084:	200012fc 	.word	0x200012fc
 8004088:	20001364 	.word	0x20001364

0800408c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004094:	f000 fd0a 	bl	8004aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <prvAddNewTaskToReadyList+0xb8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	4a29      	ldr	r2, [pc, #164]	@ (8004144 <prvAddNewTaskToReadyList+0xb8>)
 80040a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040a2:	4b29      	ldr	r3, [pc, #164]	@ (8004148 <prvAddNewTaskToReadyList+0xbc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040aa:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <prvAddNewTaskToReadyList+0xbc>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040b0:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <prvAddNewTaskToReadyList+0xb8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d110      	bne.n	80040da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040b8:	f000 fad6 	bl	8004668 <prvInitialiseTaskLists>
 80040bc:	e00d      	b.n	80040da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040be:	4b23      	ldr	r3, [pc, #140]	@ (800414c <prvAddNewTaskToReadyList+0xc0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040c6:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <prvAddNewTaskToReadyList+0xbc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d802      	bhi.n	80040da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004148 <prvAddNewTaskToReadyList+0xbc>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040da:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <prvAddNewTaskToReadyList+0xc4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004150 <prvAddNewTaskToReadyList+0xc4>)
 80040e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <prvAddNewTaskToReadyList+0xcc>)
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7ff fdfc 	bl	8003d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004112:	f000 fcfb 	bl	8004b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <prvAddNewTaskToReadyList+0xc0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <prvAddNewTaskToReadyList+0xbc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	429a      	cmp	r2, r3
 800412a:	d207      	bcs.n	800413c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800412c:	4b0b      	ldr	r3, [pc, #44]	@ (800415c <prvAddNewTaskToReadyList+0xd0>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000648 	.word	0x20000648
 8004148:	20000548 	.word	0x20000548
 800414c:	20000654 	.word	0x20000654
 8004150:	20000664 	.word	0x20000664
 8004154:	20000650 	.word	0x20000650
 8004158:	2000054c 	.word	0x2000054c
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004172:	4b14      	ldr	r3, [pc, #80]	@ (80041c4 <vTaskDelay+0x64>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <vTaskDelay+0x32>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	60bb      	str	r3, [r7, #8]
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	e7fd      	b.n	800418e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004192:	f000 f885 	bl	80042a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004196:	2100      	movs	r1, #0
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fb2d 	bl	80047f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800419e:	f000 f88d 	bl	80042bc <xTaskResumeAll>
 80041a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <vTaskDelay+0x68>)
 80041ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000670 	.word	0x20000670
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	@ 0x28
 80041d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041da:	463a      	mov	r2, r7
 80041dc:	1d39      	adds	r1, r7, #4
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fb ffb4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	9202      	str	r2, [sp, #8]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	460a      	mov	r2, r1
 80041fa:	4921      	ldr	r1, [pc, #132]	@ (8004280 <vTaskStartScheduler+0xb4>)
 80041fc:	4821      	ldr	r0, [pc, #132]	@ (8004284 <vTaskStartScheduler+0xb8>)
 80041fe:	f7ff fe08 	bl	8003e12 <xTaskCreateStatic>
 8004202:	4603      	mov	r3, r0
 8004204:	4a20      	ldr	r2, [pc, #128]	@ (8004288 <vTaskStartScheduler+0xbc>)
 8004206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004208:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <vTaskStartScheduler+0xbc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e001      	b.n	800421a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d11b      	bne.n	8004258 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	613b      	str	r3, [r7, #16]
}
 8004232:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004234:	4b15      	ldr	r3, [pc, #84]	@ (800428c <vTaskStartScheduler+0xc0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	334c      	adds	r3, #76	@ 0x4c
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <vTaskStartScheduler+0xc4>)
 800423c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <vTaskStartScheduler+0xc8>)
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004246:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <vTaskStartScheduler+0xcc>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800424c:	4b13      	ldr	r3, [pc, #76]	@ (800429c <vTaskStartScheduler+0xd0>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004252:	f000 fbb9 	bl	80049c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004256:	e00f      	b.n	8004278 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d10b      	bne.n	8004278 <vTaskStartScheduler+0xac>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	60fb      	str	r3, [r7, #12]
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <vTaskStartScheduler+0xa8>
}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	08005208 	.word	0x08005208
 8004284:	08004639 	.word	0x08004639
 8004288:	2000066c 	.word	0x2000066c
 800428c:	20000548 	.word	0x20000548
 8004290:	20000018 	.word	0x20000018
 8004294:	20000668 	.word	0x20000668
 8004298:	20000654 	.word	0x20000654
 800429c:	2000064c 	.word	0x2000064c

080042a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <vTaskSuspendAll+0x18>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	4a03      	ldr	r2, [pc, #12]	@ (80042b8 <vTaskSuspendAll+0x18>)
 80042ac:	6013      	str	r3, [r2, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000670 	.word	0x20000670

080042bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042ca:	4b42      	ldr	r3, [pc, #264]	@ (80043d4 <xTaskResumeAll+0x118>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <xTaskResumeAll+0x2e>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	603b      	str	r3, [r7, #0]
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	e7fd      	b.n	80042e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042ea:	f000 fbdf 	bl	8004aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <xTaskResumeAll+0x118>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	4a37      	ldr	r2, [pc, #220]	@ (80043d4 <xTaskResumeAll+0x118>)
 80042f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f8:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <xTaskResumeAll+0x118>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d161      	bne.n	80043c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004300:	4b35      	ldr	r3, [pc, #212]	@ (80043d8 <xTaskResumeAll+0x11c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d05d      	beq.n	80043c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004308:	e02e      	b.n	8004368 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800430a:	4b34      	ldr	r3, [pc, #208]	@ (80043dc <xTaskResumeAll+0x120>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3318      	adds	r3, #24
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fd52 	bl	8003dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fd4d 	bl	8003dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	2201      	movs	r2, #1
 800432c:	409a      	lsls	r2, r3
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <xTaskResumeAll+0x124>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	4a2a      	ldr	r2, [pc, #168]	@ (80043e0 <xTaskResumeAll+0x124>)
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <xTaskResumeAll+0x128>)
 8004346:	441a      	add	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3304      	adds	r3, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f7ff fcdb 	bl	8003d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004358:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <xTaskResumeAll+0x12c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004362:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <xTaskResumeAll+0x130>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004368:	4b1c      	ldr	r3, [pc, #112]	@ (80043dc <xTaskResumeAll+0x120>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1cc      	bne.n	800430a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004376:	f000 fa1b 	bl	80047b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800437a:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <xTaskResumeAll+0x134>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d010      	beq.n	80043a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004386:	f000 f837 	bl	80043f8 <xTaskIncrementTick>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004390:	4b16      	ldr	r3, [pc, #88]	@ (80043ec <xTaskResumeAll+0x130>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3b01      	subs	r3, #1
 800439a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f1      	bne.n	8004386 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80043a2:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <xTaskResumeAll+0x134>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043a8:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <xTaskResumeAll+0x130>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043b4:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <xTaskResumeAll+0x138>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043c4:	f000 fba2 	bl	8004b0c <vPortExitCritical>

	return xAlreadyYielded;
 80043c8:	68bb      	ldr	r3, [r7, #8]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000670 	.word	0x20000670
 80043d8:	20000648 	.word	0x20000648
 80043dc:	20000608 	.word	0x20000608
 80043e0:	20000650 	.word	0x20000650
 80043e4:	2000054c 	.word	0x2000054c
 80043e8:	20000548 	.word	0x20000548
 80043ec:	2000065c 	.word	0x2000065c
 80043f0:	20000658 	.word	0x20000658
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004402:	4b51      	ldr	r3, [pc, #324]	@ (8004548 <xTaskIncrementTick+0x150>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 808e 	bne.w	8004528 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800440c:	4b4f      	ldr	r3, [pc, #316]	@ (800454c <xTaskIncrementTick+0x154>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004414:	4a4d      	ldr	r2, [pc, #308]	@ (800454c <xTaskIncrementTick+0x154>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d121      	bne.n	8004464 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004420:	4b4b      	ldr	r3, [pc, #300]	@ (8004550 <xTaskIncrementTick+0x158>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <xTaskIncrementTick+0x4a>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <xTaskIncrementTick+0x46>
 8004442:	4b43      	ldr	r3, [pc, #268]	@ (8004550 <xTaskIncrementTick+0x158>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	4b42      	ldr	r3, [pc, #264]	@ (8004554 <xTaskIncrementTick+0x15c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a40      	ldr	r2, [pc, #256]	@ (8004550 <xTaskIncrementTick+0x158>)
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4a40      	ldr	r2, [pc, #256]	@ (8004554 <xTaskIncrementTick+0x15c>)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b40      	ldr	r3, [pc, #256]	@ (8004558 <xTaskIncrementTick+0x160>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3301      	adds	r3, #1
 800445c:	4a3e      	ldr	r2, [pc, #248]	@ (8004558 <xTaskIncrementTick+0x160>)
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	f000 f9a6 	bl	80047b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004464:	4b3d      	ldr	r3, [pc, #244]	@ (800455c <xTaskIncrementTick+0x164>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	429a      	cmp	r2, r3
 800446c:	d34d      	bcc.n	800450a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446e:	4b38      	ldr	r3, [pc, #224]	@ (8004550 <xTaskIncrementTick+0x158>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <xTaskIncrementTick+0x84>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <xTaskIncrementTick+0x86>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004482:	4b36      	ldr	r3, [pc, #216]	@ (800455c <xTaskIncrementTick+0x164>)
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	601a      	str	r2, [r3, #0]
					break;
 800448a:	e03e      	b.n	800450a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800448c:	4b30      	ldr	r3, [pc, #192]	@ (8004550 <xTaskIncrementTick+0x158>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d203      	bcs.n	80044ac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044a4:	4a2d      	ldr	r2, [pc, #180]	@ (800455c <xTaskIncrementTick+0x164>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6013      	str	r3, [r2, #0]
						break;
 80044aa:	e02e      	b.n	800450a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fc85 	bl	8003dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3318      	adds	r3, #24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fc7c 	bl	8003dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	4b23      	ldr	r3, [pc, #140]	@ (8004560 <xTaskIncrementTick+0x168>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	4a22      	ldr	r2, [pc, #136]	@ (8004560 <xTaskIncrementTick+0x168>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004564 <xTaskIncrementTick+0x16c>)
 80044e8:	441a      	add	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7ff fc0a 	bl	8003d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <xTaskIncrementTick+0x170>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d3b4      	bcc.n	800446e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004508:	e7b1      	b.n	800446e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800450a:	4b17      	ldr	r3, [pc, #92]	@ (8004568 <xTaskIncrementTick+0x170>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004510:	4914      	ldr	r1, [pc, #80]	@ (8004564 <xTaskIncrementTick+0x16c>)
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d907      	bls.n	8004532 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e004      	b.n	8004532 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004528:	4b10      	ldr	r3, [pc, #64]	@ (800456c <xTaskIncrementTick+0x174>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <xTaskIncrementTick+0x174>)
 8004530:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004532:	4b0f      	ldr	r3, [pc, #60]	@ (8004570 <xTaskIncrementTick+0x178>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800453e:	697b      	ldr	r3, [r7, #20]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000670 	.word	0x20000670
 800454c:	2000064c 	.word	0x2000064c
 8004550:	20000600 	.word	0x20000600
 8004554:	20000604 	.word	0x20000604
 8004558:	20000660 	.word	0x20000660
 800455c:	20000668 	.word	0x20000668
 8004560:	20000650 	.word	0x20000650
 8004564:	2000054c 	.word	0x2000054c
 8004568:	20000548 	.word	0x20000548
 800456c:	20000658 	.word	0x20000658
 8004570:	2000065c 	.word	0x2000065c

08004574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <vTaskSwitchContext+0xac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004582:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <vTaskSwitchContext+0xb0>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004588:	e045      	b.n	8004616 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800458a:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <vTaskSwitchContext+0xb0>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004590:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <vTaskSwitchContext+0xb4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	f1c3 031f 	rsb	r3, r3, #31
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	4921      	ldr	r1, [pc, #132]	@ (800462c <vTaskSwitchContext+0xb8>)
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	607b      	str	r3, [r7, #4]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <vTaskSwitchContext+0x5a>
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4a13      	ldr	r2, [pc, #76]	@ (800462c <vTaskSwitchContext+0xb8>)
 80045de:	4413      	add	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3308      	adds	r3, #8
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d104      	bne.n	8004602 <vTaskSwitchContext+0x8e>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a09      	ldr	r2, [pc, #36]	@ (8004630 <vTaskSwitchContext+0xbc>)
 800460a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <vTaskSwitchContext+0xbc>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	334c      	adds	r3, #76	@ 0x4c
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <vTaskSwitchContext+0xc0>)
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	20000670 	.word	0x20000670
 8004624:	2000065c 	.word	0x2000065c
 8004628:	20000650 	.word	0x20000650
 800462c:	2000054c 	.word	0x2000054c
 8004630:	20000548 	.word	0x20000548
 8004634:	20000018 	.word	0x20000018

08004638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004640:	f000 f852 	bl	80046e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <prvIdleTask+0x28>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d9f9      	bls.n	8004640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <prvIdleTask+0x2c>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800465c:	e7f0      	b.n	8004640 <prvIdleTask+0x8>
 800465e:	bf00      	nop
 8004660:	2000054c 	.word	0x2000054c
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	e00c      	b.n	800468e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4a12      	ldr	r2, [pc, #72]	@ (80046c8 <prvInitialiseTaskLists+0x60>)
 8004680:	4413      	add	r3, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fb16 	bl	8003cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3301      	adds	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b06      	cmp	r3, #6
 8004692:	d9ef      	bls.n	8004674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004694:	480d      	ldr	r0, [pc, #52]	@ (80046cc <prvInitialiseTaskLists+0x64>)
 8004696:	f7ff fb0d 	bl	8003cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800469a:	480d      	ldr	r0, [pc, #52]	@ (80046d0 <prvInitialiseTaskLists+0x68>)
 800469c:	f7ff fb0a 	bl	8003cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046a0:	480c      	ldr	r0, [pc, #48]	@ (80046d4 <prvInitialiseTaskLists+0x6c>)
 80046a2:	f7ff fb07 	bl	8003cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046a6:	480c      	ldr	r0, [pc, #48]	@ (80046d8 <prvInitialiseTaskLists+0x70>)
 80046a8:	f7ff fb04 	bl	8003cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046ac:	480b      	ldr	r0, [pc, #44]	@ (80046dc <prvInitialiseTaskLists+0x74>)
 80046ae:	f7ff fb01 	bl	8003cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <prvInitialiseTaskLists+0x78>)
 80046b4:	4a05      	ldr	r2, [pc, #20]	@ (80046cc <prvInitialiseTaskLists+0x64>)
 80046b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <prvInitialiseTaskLists+0x7c>)
 80046ba:	4a05      	ldr	r2, [pc, #20]	@ (80046d0 <prvInitialiseTaskLists+0x68>)
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	2000054c 	.word	0x2000054c
 80046cc:	200005d8 	.word	0x200005d8
 80046d0:	200005ec 	.word	0x200005ec
 80046d4:	20000608 	.word	0x20000608
 80046d8:	2000061c 	.word	0x2000061c
 80046dc:	20000634 	.word	0x20000634
 80046e0:	20000600 	.word	0x20000600
 80046e4:	20000604 	.word	0x20000604

080046e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ee:	e019      	b.n	8004724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046f0:	f000 f9dc 	bl	8004aac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80046f4:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <prvCheckTasksWaitingTermination+0x50>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fb5d 	bl	8003dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <prvCheckTasksWaitingTermination+0x54>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	4a0b      	ldr	r2, [pc, #44]	@ (800473c <prvCheckTasksWaitingTermination+0x54>)
 800470e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <prvCheckTasksWaitingTermination+0x58>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <prvCheckTasksWaitingTermination+0x58>)
 8004718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800471a:	f000 f9f7 	bl	8004b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f810 	bl	8004744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <prvCheckTasksWaitingTermination+0x58>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e1      	bne.n	80046f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	2000061c 	.word	0x2000061c
 800473c:	20000648 	.word	0x20000648
 8004740:	20000630 	.word	0x20000630

08004744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	334c      	adds	r3, #76	@ 0x4c
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fc53 	bl	8004ffc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800475c:	2b00      	cmp	r3, #0
 800475e:	d108      	bne.n	8004772 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb2b 	bl	8004dc0 <vPortFree>
				vPortFree( pxTCB );
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fb28 	bl	8004dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004770:	e019      	b.n	80047a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004778:	2b01      	cmp	r3, #1
 800477a:	d103      	bne.n	8004784 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb1f 	bl	8004dc0 <vPortFree>
	}
 8004782:	e010      	b.n	80047a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800478a:	2b02      	cmp	r3, #2
 800478c:	d00b      	beq.n	80047a6 <prvDeleteTCB+0x62>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	60fb      	str	r3, [r7, #12]
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	e7fd      	b.n	80047a2 <prvDeleteTCB+0x5e>
	}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b6:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <prvResetNextTaskUnblockTime+0x40>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <prvResetNextTaskUnblockTime+0x14>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <prvResetNextTaskUnblockTime+0x16>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <prvResetNextTaskUnblockTime+0x44>)
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047d2:	e008      	b.n	80047e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <prvResetNextTaskUnblockTime+0x40>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4a04      	ldr	r2, [pc, #16]	@ (80047f4 <prvResetNextTaskUnblockTime+0x44>)
 80047e4:	6013      	str	r3, [r2, #0]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	20000600 	.word	0x20000600
 80047f4:	20000668 	.word	0x20000668

080047f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004802:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fad6 	bl	8003dc0 <uxListRemove>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800481a:	4b24      	ldr	r3, [pc, #144]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	2201      	movs	r2, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43da      	mvns	r2, r3
 8004828:	4b21      	ldr	r3, [pc, #132]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4013      	ands	r3, r2
 800482e:	4a20      	ldr	r2, [pc, #128]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d10a      	bne.n	8004850 <prvAddCurrentTaskToDelayedList+0x58>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004840:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	481a      	ldr	r0, [pc, #104]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800484a:	f7ff fa5e 	bl	8003d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800484e:	e026      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004858:	4b14      	ldr	r3, [pc, #80]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d209      	bcs.n	800487c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004868:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fa6b 	bl	8003d50 <vListInsert>
}
 800487a:	e010      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487c:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7ff fa61 	bl	8003d50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800488e:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d202      	bcs.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004898:	4a09      	ldr	r2, [pc, #36]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000064c 	.word	0x2000064c
 80048ac:	20000548 	.word	0x20000548
 80048b0:	20000650 	.word	0x20000650
 80048b4:	20000634 	.word	0x20000634
 80048b8:	20000604 	.word	0x20000604
 80048bc:	20000600 	.word	0x20000600
 80048c0:	20000668 	.word	0x20000668

080048c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3b04      	subs	r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f4:	4a08      	ldr	r2, [pc, #32]	@ (8004918 <pxPortInitialiseStack+0x54>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b14      	subs	r3, #20
 80048fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b20      	subs	r3, #32
 800490a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800490c:	68fb      	ldr	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	0800491d 	.word	0x0800491d

0800491c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <prvTaskExitError+0x54>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d00b      	beq.n	8004948 <prvTaskExitError+0x2c>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <prvTaskExitError+0x28>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	60bb      	str	r3, [r7, #8]
}
 800495a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800495c:	bf00      	nop
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0fc      	beq.n	800495e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	20000014 	.word	0x20000014
	...

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	f04e 0e0d 	orr.w	lr, lr, #13
 800499e:	4770      	bx	lr

080049a0 <pxCurrentTCBConst2>:
 80049a0:	20000548 	.word	0x20000548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049a8:	4806      	ldr	r0, [pc, #24]	@ (80049c4 <prvPortStartFirstTask+0x1c>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	b662      	cpsie	i
 80049b4:	b661      	cpsie	f
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	df00      	svc	0
 80049c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049c2:	bf00      	nop
 80049c4:	e000ed08 	.word	0xe000ed08

080049c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ce:	4b32      	ldr	r3, [pc, #200]	@ (8004a98 <xPortStartScheduler+0xd0>)
 80049d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	22ff      	movs	r2, #255	@ 0xff
 80049de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a9c <xPortStartScheduler+0xd4>)
 80049f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 80049f8:	2207      	movs	r2, #7
 80049fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049fc:	e009      	b.n	8004a12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80049fe:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	4a26      	ldr	r2, [pc, #152]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b80      	cmp	r3, #128	@ 0x80
 8004a1c:	d0ef      	beq.n	80049fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a1e:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1c3 0307 	rsb	r3, r3, #7
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00b      	beq.n	8004a42 <xPortStartScheduler+0x7a>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a42:	4b17      	ldr	r3, [pc, #92]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a54:	4a12      	ldr	r2, [pc, #72]	@ (8004aa0 <xPortStartScheduler+0xd8>)
 8004a56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a60:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <xPortStartScheduler+0xdc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0f      	ldr	r2, [pc, #60]	@ (8004aa4 <xPortStartScheduler+0xdc>)
 8004a66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <xPortStartScheduler+0xdc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa4 <xPortStartScheduler+0xdc>)
 8004a72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a78:	f000 f8b8 	bl	8004bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <xPortStartScheduler+0xe0>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a82:	f7ff ff91 	bl	80049a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a86:	f7ff fd75 	bl	8004574 <vTaskSwitchContext>
	prvTaskExitError();
 8004a8a:	f7ff ff47 	bl	800491c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000e400 	.word	0xe000e400
 8004a9c:	20000674 	.word	0x20000674
 8004aa0:	20000678 	.word	0x20000678
 8004aa4:	e000ed20 	.word	0xe000ed20
 8004aa8:	20000014 	.word	0x20000014

08004aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	607b      	str	r3, [r7, #4]
}
 8004ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <vPortEnterCritical+0x58>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b04 <vPortEnterCritical+0x58>)
 8004ace:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <vPortEnterCritical+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d110      	bne.n	8004afa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <vPortEnterCritical+0x5c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <vPortEnterCritical+0x4e>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	603b      	str	r3, [r7, #0]
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <vPortEnterCritical+0x4a>
	}
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	20000014 	.word	0x20000014
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <vPortExitCritical+0x26>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b3c:	4b07      	ldr	r3, [pc, #28]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <vPortExitCritical+0x44>
 8004b44:	2300      	movs	r3, #0
 8004b46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000014 	.word	0x20000014

08004b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b60:	f3ef 8009 	mrs	r0, PSP
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <pxCurrentTCBConst>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b70:	6010      	str	r0, [r2, #0]
 8004b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b76:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b7a:	f380 8811 	msr	BASEPRI, r0
 8004b7e:	f7ff fcf9 	bl	8004574 <vTaskSwitchContext>
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b96:	f380 8809 	msr	PSP, r0
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	4770      	bx	lr

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	20000548 	.word	0x20000548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f7ff fc19 	bl	80043f8 <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <SysTick_Handler+0x40>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
}
 8004bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <vPortSetupTimerInterrupt+0x30>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <vPortSetupTimerInterrupt+0x38>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a09      	ldr	r2, [pc, #36]	@ (8004c28 <vPortSetupTimerInterrupt+0x3c>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	4a08      	ldr	r2, [pc, #32]	@ (8004c2c <vPortSetupTimerInterrupt+0x40>)
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0e:	4b03      	ldr	r3, [pc, #12]	@ (8004c1c <vPortSetupTimerInterrupt+0x30>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e010 	.word	0xe000e010
 8004c20:	e000e018 	.word	0xe000e018
 8004c24:	20000008 	.word	0x20000008
 8004c28:	10624dd3 	.word	0x10624dd3
 8004c2c:	e000e014 	.word	0xe000e014

08004c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	@ 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c3c:	f7ff fb30 	bl	80042a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c40:	4b5a      	ldr	r3, [pc, #360]	@ (8004dac <pvPortMalloc+0x17c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c48:	f000 f916 	bl	8004e78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c4c:	4b58      	ldr	r3, [pc, #352]	@ (8004db0 <pvPortMalloc+0x180>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 8090 	bne.w	8004d7a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c60:	2208      	movs	r2, #8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f023 0307 	bic.w	r3, r3, #7
 8004c78:	3308      	adds	r3, #8
 8004c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <pvPortMalloc+0x6e>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	617b      	str	r3, [r7, #20]
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d06a      	beq.n	8004d7a <pvPortMalloc+0x14a>
 8004ca4:	4b43      	ldr	r3, [pc, #268]	@ (8004db4 <pvPortMalloc+0x184>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d865      	bhi.n	8004d7a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cae:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <pvPortMalloc+0x188>)
 8004cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cb2:	4b41      	ldr	r3, [pc, #260]	@ (8004db8 <pvPortMalloc+0x188>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cb8:	e004      	b.n	8004cc4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d903      	bls.n	8004cd6 <pvPortMalloc+0xa6>
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f1      	bne.n	8004cba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cd6:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <pvPortMalloc+0x17c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d04c      	beq.n	8004d7a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	4413      	add	r3, r2
 8004ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1ad2      	subs	r2, r2, r3
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d920      	bls.n	8004d44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <pvPortMalloc+0xfc>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	613b      	str	r3, [r7, #16]
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d3e:	69b8      	ldr	r0, [r7, #24]
 8004d40:	f000 f8fc 	bl	8004f3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <pvPortMalloc+0x184>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <pvPortMalloc+0x184>)
 8004d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d52:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <pvPortMalloc+0x184>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <pvPortMalloc+0x18c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d203      	bcs.n	8004d66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <pvPortMalloc+0x184>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a16      	ldr	r2, [pc, #88]	@ (8004dbc <pvPortMalloc+0x18c>)
 8004d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <pvPortMalloc+0x180>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d7a:	f7ff fa9f 	bl	80042bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <pvPortMalloc+0x170>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	60fb      	str	r3, [r7, #12]
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <pvPortMalloc+0x16c>
	return pvReturn;
 8004da0:	69fb      	ldr	r3, [r7, #28]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3728      	adds	r7, #40	@ 0x28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20001284 	.word	0x20001284
 8004db0:	20001290 	.word	0x20001290
 8004db4:	20001288 	.word	0x20001288
 8004db8:	2000127c 	.word	0x2000127c
 8004dbc:	2000128c 	.word	0x2000128c

08004dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d04a      	beq.n	8004e68 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	425b      	negs	r3, r3
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4b22      	ldr	r3, [pc, #136]	@ (8004e70 <vPortFree+0xb0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <vPortFree+0x46>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60fb      	str	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <vPortFree+0x66>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	60bb      	str	r3, [r7, #8]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <vPortFree+0xb0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d019      	beq.n	8004e68 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d115      	bne.n	8004e68 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <vPortFree+0xb0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	401a      	ands	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e4c:	f7ff fa28 	bl	80042a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <vPortFree+0xb4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <vPortFree+0xb4>)
 8004e5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e5e:	6938      	ldr	r0, [r7, #16]
 8004e60:	f000 f86c 	bl	8004f3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e64:	f7ff fa2a 	bl	80042bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20001290 	.word	0x20001290
 8004e74:	20001288 	.word	0x20001288

08004e78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004e82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e84:	4b27      	ldr	r3, [pc, #156]	@ (8004f24 <prvHeapInit+0xac>)
 8004e86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3307      	adds	r3, #7
 8004e96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0307 	bic.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f24 <prvHeapInit+0xac>)
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f28 <prvHeapInit+0xb0>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <prvHeapInit+0xb0>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0307 	bic.w	r3, r3, #7
 8004ed2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <prvHeapInit+0xb4>)
 8004ed8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eda:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <prvHeapInit+0xb4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ee2:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <prvHeapInit+0xb4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	1ad2      	subs	r2, r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <prvHeapInit+0xb4>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <prvHeapInit+0xb8>)
 8004f06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a09      	ldr	r2, [pc, #36]	@ (8004f34 <prvHeapInit+0xbc>)
 8004f0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f10:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <prvHeapInit+0xc0>)
 8004f12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f16:	601a      	str	r2, [r3, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000067c 	.word	0x2000067c
 8004f28:	2000127c 	.word	0x2000127c
 8004f2c:	20001284 	.word	0x20001284
 8004f30:	2000128c 	.word	0x2000128c
 8004f34:	20001288 	.word	0x20001288
 8004f38:	20001290 	.word	0x20001290

08004f3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f44:	4b27      	ldr	r3, [pc, #156]	@ (8004fe4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e002      	b.n	8004f50 <prvInsertBlockIntoFreeList+0x14>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d8f7      	bhi.n	8004f4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4413      	add	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d108      	bne.n	8004f7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	441a      	add	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	441a      	add	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d118      	bne.n	8004fc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <prvInsertBlockIntoFreeList+0xac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d00d      	beq.n	8004fba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	441a      	add	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e008      	b.n	8004fcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fba:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <prvInsertBlockIntoFreeList+0xac>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e003      	b.n	8004fcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d002      	beq.n	8004fda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	2000127c 	.word	0x2000127c
 8004fe8:	20001284 	.word	0x20001284

08004fec <memset>:
 8004fec:	4603      	mov	r3, r0
 8004fee:	4402      	add	r2, r0
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <_reclaim_reent>:
 8004ffc:	4b29      	ldr	r3, [pc, #164]	@ (80050a4 <_reclaim_reent+0xa8>)
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4604      	mov	r4, r0
 8005004:	4283      	cmp	r3, r0
 8005006:	d04b      	beq.n	80050a0 <_reclaim_reent+0xa4>
 8005008:	69c3      	ldr	r3, [r0, #28]
 800500a:	b1ab      	cbz	r3, 8005038 <_reclaim_reent+0x3c>
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	b16b      	cbz	r3, 800502c <_reclaim_reent+0x30>
 8005010:	2500      	movs	r5, #0
 8005012:	69e3      	ldr	r3, [r4, #28]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	5959      	ldr	r1, [r3, r5]
 8005018:	2900      	cmp	r1, #0
 800501a:	d13b      	bne.n	8005094 <_reclaim_reent+0x98>
 800501c:	3504      	adds	r5, #4
 800501e:	2d80      	cmp	r5, #128	@ 0x80
 8005020:	d1f7      	bne.n	8005012 <_reclaim_reent+0x16>
 8005022:	69e3      	ldr	r3, [r4, #28]
 8005024:	4620      	mov	r0, r4
 8005026:	68d9      	ldr	r1, [r3, #12]
 8005028:	f000 f864 	bl	80050f4 <_free_r>
 800502c:	69e3      	ldr	r3, [r4, #28]
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	b111      	cbz	r1, 8005038 <_reclaim_reent+0x3c>
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f85e 	bl	80050f4 <_free_r>
 8005038:	6961      	ldr	r1, [r4, #20]
 800503a:	b111      	cbz	r1, 8005042 <_reclaim_reent+0x46>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f859 	bl	80050f4 <_free_r>
 8005042:	69e1      	ldr	r1, [r4, #28]
 8005044:	b111      	cbz	r1, 800504c <_reclaim_reent+0x50>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f854 	bl	80050f4 <_free_r>
 800504c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800504e:	b111      	cbz	r1, 8005056 <_reclaim_reent+0x5a>
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f84f 	bl	80050f4 <_free_r>
 8005056:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005058:	b111      	cbz	r1, 8005060 <_reclaim_reent+0x64>
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f84a 	bl	80050f4 <_free_r>
 8005060:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005062:	b111      	cbz	r1, 800506a <_reclaim_reent+0x6e>
 8005064:	4620      	mov	r0, r4
 8005066:	f000 f845 	bl	80050f4 <_free_r>
 800506a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800506c:	b111      	cbz	r1, 8005074 <_reclaim_reent+0x78>
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f840 	bl	80050f4 <_free_r>
 8005074:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005076:	b111      	cbz	r1, 800507e <_reclaim_reent+0x82>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f83b 	bl	80050f4 <_free_r>
 800507e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005080:	b111      	cbz	r1, 8005088 <_reclaim_reent+0x8c>
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f836 	bl	80050f4 <_free_r>
 8005088:	6a23      	ldr	r3, [r4, #32]
 800508a:	b14b      	cbz	r3, 80050a0 <_reclaim_reent+0xa4>
 800508c:	4620      	mov	r0, r4
 800508e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005092:	4718      	bx	r3
 8005094:	680e      	ldr	r6, [r1, #0]
 8005096:	4620      	mov	r0, r4
 8005098:	f000 f82c 	bl	80050f4 <_free_r>
 800509c:	4631      	mov	r1, r6
 800509e:	e7bb      	b.n	8005018 <_reclaim_reent+0x1c>
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
 80050a2:	bf00      	nop
 80050a4:	20000018 	.word	0x20000018

080050a8 <__libc_init_array>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	2600      	movs	r6, #0
 80050ac:	4d0c      	ldr	r5, [pc, #48]	@ (80050e0 <__libc_init_array+0x38>)
 80050ae:	4c0d      	ldr	r4, [pc, #52]	@ (80050e4 <__libc_init_array+0x3c>)
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d109      	bne.n	80050cc <__libc_init_array+0x24>
 80050b8:	f000 f870 	bl	800519c <_init>
 80050bc:	2600      	movs	r6, #0
 80050be:	4d0a      	ldr	r5, [pc, #40]	@ (80050e8 <__libc_init_array+0x40>)
 80050c0:	4c0a      	ldr	r4, [pc, #40]	@ (80050ec <__libc_init_array+0x44>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	42a6      	cmp	r6, r4
 80050c8:	d105      	bne.n	80050d6 <__libc_init_array+0x2e>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d0:	4798      	blx	r3
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7ee      	b.n	80050b4 <__libc_init_array+0xc>
 80050d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050da:	4798      	blx	r3
 80050dc:	3601      	adds	r6, #1
 80050de:	e7f2      	b.n	80050c6 <__libc_init_array+0x1e>
 80050e0:	0800523c 	.word	0x0800523c
 80050e4:	0800523c 	.word	0x0800523c
 80050e8:	0800523c 	.word	0x0800523c
 80050ec:	08005240 	.word	0x08005240

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <_free_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4605      	mov	r5, r0
 80050f8:	2900      	cmp	r1, #0
 80050fa:	d040      	beq.n	800517e <_free_r+0x8a>
 80050fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005100:	1f0c      	subs	r4, r1, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfb8      	it	lt
 8005106:	18e4      	addlt	r4, r4, r3
 8005108:	f000 f83c 	bl	8005184 <__malloc_lock>
 800510c:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <_free_r+0x8c>)
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	b933      	cbnz	r3, 8005120 <_free_r+0x2c>
 8005112:	6063      	str	r3, [r4, #4]
 8005114:	6014      	str	r4, [r2, #0]
 8005116:	4628      	mov	r0, r5
 8005118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800511c:	f000 b838 	b.w	8005190 <__malloc_unlock>
 8005120:	42a3      	cmp	r3, r4
 8005122:	d908      	bls.n	8005136 <_free_r+0x42>
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	1821      	adds	r1, r4, r0
 8005128:	428b      	cmp	r3, r1
 800512a:	bf01      	itttt	eq
 800512c:	6819      	ldreq	r1, [r3, #0]
 800512e:	685b      	ldreq	r3, [r3, #4]
 8005130:	1809      	addeq	r1, r1, r0
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	e7ed      	b.n	8005112 <_free_r+0x1e>
 8005136:	461a      	mov	r2, r3
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b10b      	cbz	r3, 8005140 <_free_r+0x4c>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d9fa      	bls.n	8005136 <_free_r+0x42>
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	1850      	adds	r0, r2, r1
 8005144:	42a0      	cmp	r0, r4
 8005146:	d10b      	bne.n	8005160 <_free_r+0x6c>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	4401      	add	r1, r0
 800514c:	1850      	adds	r0, r2, r1
 800514e:	4283      	cmp	r3, r0
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	d1e0      	bne.n	8005116 <_free_r+0x22>
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4408      	add	r0, r1
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	6053      	str	r3, [r2, #4]
 800515e:	e7da      	b.n	8005116 <_free_r+0x22>
 8005160:	d902      	bls.n	8005168 <_free_r+0x74>
 8005162:	230c      	movs	r3, #12
 8005164:	602b      	str	r3, [r5, #0]
 8005166:	e7d6      	b.n	8005116 <_free_r+0x22>
 8005168:	6820      	ldr	r0, [r4, #0]
 800516a:	1821      	adds	r1, r4, r0
 800516c:	428b      	cmp	r3, r1
 800516e:	bf01      	itttt	eq
 8005170:	6819      	ldreq	r1, [r3, #0]
 8005172:	685b      	ldreq	r3, [r3, #4]
 8005174:	1809      	addeq	r1, r1, r0
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	6054      	str	r4, [r2, #4]
 800517c:	e7cb      	b.n	8005116 <_free_r+0x22>
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	200013d0 	.word	0x200013d0

08005184 <__malloc_lock>:
 8005184:	4801      	ldr	r0, [pc, #4]	@ (800518c <__malloc_lock+0x8>)
 8005186:	f7ff bfb3 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	200013cc 	.word	0x200013cc

08005190 <__malloc_unlock>:
 8005190:	4801      	ldr	r0, [pc, #4]	@ (8005198 <__malloc_unlock+0x8>)
 8005192:	f7ff bfae 	b.w	80050f2 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	200013cc 	.word	0x200013cc

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
